/**********************************************************************************************************************
 * SplendidCRM is a Customer Relationship Management program created by SplendidCRM Software, Inc. 
 * Copyright (C) 2005-2022 SplendidCRM Software, Inc. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the 
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with this program. 
 * If not, see <http://www.gnu.org/licenses/>. 
 * 
 * You can contact SplendidCRM Software, Inc. at email address support@splendidcrm.com. 
 * 
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3, 
 * the Appropriate Legal Notices must display the following words on all interactive user interfaces: 
 * "Copyright (C) 2005-2011 SplendidCRM Software, Inc. All rights reserved."
 *********************************************************************************************************************/
using System;
using System.Data;
using System.Data.Common;
//using Microsoft.VisualBasic;
using System.Xml;

namespace SplendidCRM
{
	/// <summary>
	/// SqlProcs generated from database [SplendidCRM_SplendidApp] on 12/28/2021 1:52:56 AM.
	/// </summary>
	public partial class SqlProcs
	{
		private DbProviderFactories  DbProviderFactories = new DbProviderFactories();
		private HttpApplicationState Application = new HttpApplicationState();
		private Security             Security           ;
		private Sql                  Sql                ;

		public SqlProcs(Security Security, Sql Sql)
		{
			this.Security            = Security           ;
			this.Sql                 = Sql                ;
		}

		private static void Trace(IDbCommand cmd)
		{
			System.Diagnostics.Debug.WriteLine("SqlProcs.Trace:	exec dbo." + Sql.ExpandParameters(cmd) + ";");
		}

		#region spACCOUNTS_BUGS_Delete
		/// <summary>
		/// spACCOUNTS_BUGS_Delete
		/// </summary>
		public void spACCOUNTS_BUGS_Delete(Guid gACCOUNT_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_BUGS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_BUGS_Delete
		/// <summary>
		/// spACCOUNTS_BUGS_Delete
		/// </summary>
		public void spACCOUNTS_BUGS_Delete(Guid gACCOUNT_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_BUGS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_BUGS_Delete
		/// <summary>
		/// spACCOUNTS_BUGS_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_BUGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_BUGS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_BUGS_Update
		/// <summary>
		/// spACCOUNTS_BUGS_Update
		/// </summary>
		public void spACCOUNTS_BUGS_Update(Guid gACCOUNT_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_BUGS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_BUGS_Update
		/// <summary>
		/// spACCOUNTS_BUGS_Update
		/// </summary>
		public void spACCOUNTS_BUGS_Update(Guid gACCOUNT_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_BUGS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_BUGS_Update
		/// <summary>
		/// spACCOUNTS_BUGS_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_BUGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_BUGS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_CASES_Delete
		/// <summary>
		/// spACCOUNTS_CASES_Delete
		/// </summary>
		public void spACCOUNTS_CASES_Delete(Guid gACCOUNT_ID, Guid gCASE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_CASES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_CASES_Delete
		/// <summary>
		/// spACCOUNTS_CASES_Delete
		/// </summary>
		public void spACCOUNTS_CASES_Delete(Guid gACCOUNT_ID, Guid gCASE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_CASES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_CASES_Delete
		/// <summary>
		/// spACCOUNTS_CASES_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_CASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_CASES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_CASES_Update
		/// <summary>
		/// spACCOUNTS_CASES_Update
		/// </summary>
		public void spACCOUNTS_CASES_Update(Guid gACCOUNT_ID, Guid gCASE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_CASES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_CASES_Update
		/// <summary>
		/// spACCOUNTS_CASES_Update
		/// </summary>
		public void spACCOUNTS_CASES_Update(Guid gACCOUNT_ID, Guid gCASE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_CASES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_CASES_Update
		/// <summary>
		/// spACCOUNTS_CASES_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_CASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_CASES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_CONTACTS_CopyAddress
		/// <summary>
		/// spACCOUNTS_CONTACTS_CopyAddress
		/// </summary>
		public void spACCOUNTS_CONTACTS_CopyAddress(string sID_LIST, Guid gACCOUNT_ID, string sADDRESS_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spACCOUNTS_CONTACTS_CopyAddres";
							else
								cmd.CommandText = "spACCOUNTS_CONTACTS_CopyAddress";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parADDRESS_TYPE     = Sql.AddParameter(cmd, "@ADDRESS_TYPE"    , sADDRESS_TYPE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_CONTACTS_CopyAddress
		/// <summary>
		/// spACCOUNTS_CONTACTS_CopyAddress
		/// </summary>
		public void spACCOUNTS_CONTACTS_CopyAddress(string sID_LIST, Guid gACCOUNT_ID, string sADDRESS_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spACCOUNTS_CONTACTS_CopyAddres";
				else
					cmd.CommandText = "spACCOUNTS_CONTACTS_CopyAddress";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parADDRESS_TYPE     = Sql.AddParameter(cmd, "@ADDRESS_TYPE"    , sADDRESS_TYPE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_CONTACTS_CopyAddress
		/// <summary>
		/// spACCOUNTS_CONTACTS_CopyAddress
		/// </summary>
		public IDbCommand cmdACCOUNTS_CONTACTS_CopyAddress(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spACCOUNTS_CONTACTS_CopyAddres";
			else
				cmd.CommandText = "spACCOUNTS_CONTACTS_CopyAddress";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parADDRESS_TYPE     = Sql.CreateParameter(cmd, "@ADDRESS_TYPE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_CONTACTS_Delete
		/// <summary>
		/// spACCOUNTS_CONTACTS_Delete
		/// </summary>
		public void spACCOUNTS_CONTACTS_Delete(Guid gACCOUNT_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_CONTACTS_Delete
		/// <summary>
		/// spACCOUNTS_CONTACTS_Delete
		/// </summary>
		public void spACCOUNTS_CONTACTS_Delete(Guid gACCOUNT_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_CONTACTS_Delete
		/// <summary>
		/// spACCOUNTS_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_CONTACTS_Update
		/// <summary>
		/// spACCOUNTS_CONTACTS_Update
		/// </summary>
		public void spACCOUNTS_CONTACTS_Update(Guid gACCOUNT_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_CONTACTS_Update
		/// <summary>
		/// spACCOUNTS_CONTACTS_Update
		/// </summary>
		public void spACCOUNTS_CONTACTS_Update(Guid gACCOUNT_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_CONTACTS_Update
		/// <summary>
		/// spACCOUNTS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_Delete
		/// <summary>
		/// spACCOUNTS_Delete
		/// </summary>
		public void spACCOUNTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_Delete
		/// <summary>
		/// spACCOUNTS_Delete
		/// </summary>
		public void spACCOUNTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_Delete
		/// <summary>
		/// spACCOUNTS_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_DOCUMENTS_Delete
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_Delete
		/// </summary>
		public void spACCOUNTS_DOCUMENTS_Delete(Guid gACCOUNT_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_DOCUMENTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_DOCUMENTS_Delete
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_Delete
		/// </summary>
		public void spACCOUNTS_DOCUMENTS_Delete(Guid gACCOUNT_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_DOCUMENTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_DOCUMENTS_Delete
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_DOCUMENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_DOCUMENTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_DOCUMENTS_GetLatest
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_GetLatest
		/// </summary>
		public void spACCOUNTS_DOCUMENTS_GetLatest(Guid gACCOUNT_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_DOCUMENTS_GetLatest";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_DOCUMENTS_GetLatest
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_GetLatest
		/// </summary>
		public void spACCOUNTS_DOCUMENTS_GetLatest(Guid gACCOUNT_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_DOCUMENTS_GetLatest";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_DOCUMENTS_GetLatest
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_GetLatest
		/// </summary>
		public IDbCommand cmdACCOUNTS_DOCUMENTS_GetLatest(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_DOCUMENTS_GetLatest";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_DOCUMENTS_Update
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_Update
		/// </summary>
		public void spACCOUNTS_DOCUMENTS_Update(Guid gACCOUNT_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_DOCUMENTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_DOCUMENTS_Update
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_Update
		/// </summary>
		public void spACCOUNTS_DOCUMENTS_Update(Guid gACCOUNT_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_DOCUMENTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_DOCUMENTS_Update
		/// <summary>
		/// spACCOUNTS_DOCUMENTS_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_DOCUMENTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_DOCUMENTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_Import
		/// <summary>
		/// spACCOUNTS_Import
		/// </summary>
		public void spACCOUNTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sACCOUNT_TYPE, Guid gPARENT_ID, string sINDUSTRY, string sANNUAL_REVENUE, string sPHONE_FAX, string sBILLING_ADDRESS_STREET, string sBILLING_ADDRESS_CITY, string sBILLING_ADDRESS_STATE, string sBILLING_ADDRESS_POSTALCODE, string sBILLING_ADDRESS_COUNTRY, string sDESCRIPTION, string sRATING, string sPHONE_OFFICE, string sPHONE_ALTERNATE, string sEMAIL1, string sEMAIL2, string sWEBSITE, string sOWNERSHIP, string sEMPLOYEES, string sSIC_CODE, string sTICKER_SYMBOL, string sSHIPPING_ADDRESS_STREET, string sSHIPPING_ADDRESS_CITY, string sSHIPPING_ADDRESS_STATE, string sSHIPPING_ADDRESS_POSTALCODE, string sSHIPPING_ADDRESS_COUNTRY, string sACCOUNT_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sBILLING_ADDRESS_STREET1, string sBILLING_ADDRESS_STREET2, string sBILLING_ADDRESS_STREET3, string sSHIPPING_ADDRESS_STREET1, string sSHIPPING_ADDRESS_STREET2, string sSHIPPING_ADDRESS_STREET3, string sTAG_SET_NAME, string sNAICS_SET_NAME, string sASSIGNED_SET_LIST, string sTEAM_NAME, string sPICTURE, bool bDO_NOT_CALL, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_Import";
							IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
							IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
							IDbDataParameter parASSIGNED_USER_ID            = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"           , gASSIGNED_USER_ID             );
							IDbDataParameter parNAME                        = Sql.AddParameter(cmd, "@NAME"                       , sNAME                         , 150);
							IDbDataParameter parACCOUNT_TYPE                = Sql.AddParameter(cmd, "@ACCOUNT_TYPE"               , sACCOUNT_TYPE                 ,  25);
							IDbDataParameter parPARENT_ID                   = Sql.AddParameter(cmd, "@PARENT_ID"                  , gPARENT_ID                    );
							IDbDataParameter parINDUSTRY                    = Sql.AddParameter(cmd, "@INDUSTRY"                   , sINDUSTRY                     ,  25);
							IDbDataParameter parANNUAL_REVENUE              = Sql.AddParameter(cmd, "@ANNUAL_REVENUE"             , sANNUAL_REVENUE               ,  25);
							IDbDataParameter parPHONE_FAX                   = Sql.AddParameter(cmd, "@PHONE_FAX"                  , sPHONE_FAX                    ,  25);
							IDbDataParameter parBILLING_ADDRESS_STREET      = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET"     , sBILLING_ADDRESS_STREET       , 150);
							IDbDataParameter parBILLING_ADDRESS_CITY        = Sql.AddParameter(cmd, "@BILLING_ADDRESS_CITY"       , sBILLING_ADDRESS_CITY         , 100);
							IDbDataParameter parBILLING_ADDRESS_STATE       = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STATE"      , sBILLING_ADDRESS_STATE        , 100);
							IDbDataParameter parBILLING_ADDRESS_POSTALCODE  = Sql.AddParameter(cmd, "@BILLING_ADDRESS_POSTALCODE" , sBILLING_ADDRESS_POSTALCODE   ,  20);
							IDbDataParameter parBILLING_ADDRESS_COUNTRY     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_COUNTRY"    , sBILLING_ADDRESS_COUNTRY      , 100);
							IDbDataParameter parDESCRIPTION                 = Sql.AddParameter(cmd, "@DESCRIPTION"                , sDESCRIPTION                  );
							IDbDataParameter parRATING                      = Sql.AddParameter(cmd, "@RATING"                     , sRATING                       ,  25);
							IDbDataParameter parPHONE_OFFICE                = Sql.AddParameter(cmd, "@PHONE_OFFICE"               , sPHONE_OFFICE                 ,  25);
							IDbDataParameter parPHONE_ALTERNATE             = Sql.AddParameter(cmd, "@PHONE_ALTERNATE"            , sPHONE_ALTERNATE              ,  25);
							IDbDataParameter parEMAIL1                      = Sql.AddParameter(cmd, "@EMAIL1"                     , sEMAIL1                       , 100);
							IDbDataParameter parEMAIL2                      = Sql.AddParameter(cmd, "@EMAIL2"                     , sEMAIL2                       , 100);
							IDbDataParameter parWEBSITE                     = Sql.AddParameter(cmd, "@WEBSITE"                    , sWEBSITE                      , 255);
							IDbDataParameter parOWNERSHIP                   = Sql.AddParameter(cmd, "@OWNERSHIP"                  , sOWNERSHIP                    , 100);
							IDbDataParameter parEMPLOYEES                   = Sql.AddParameter(cmd, "@EMPLOYEES"                  , sEMPLOYEES                    ,  10);
							IDbDataParameter parSIC_CODE                    = Sql.AddParameter(cmd, "@SIC_CODE"                   , sSIC_CODE                     ,  10);
							IDbDataParameter parTICKER_SYMBOL               = Sql.AddParameter(cmd, "@TICKER_SYMBOL"              , sTICKER_SYMBOL                ,  10);
							IDbDataParameter parSHIPPING_ADDRESS_STREET     = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET"    , sSHIPPING_ADDRESS_STREET      , 150);
							IDbDataParameter parSHIPPING_ADDRESS_CITY       = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_CITY"      , sSHIPPING_ADDRESS_CITY        , 100);
							IDbDataParameter parSHIPPING_ADDRESS_STATE      = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STATE"     , sSHIPPING_ADDRESS_STATE       , 100);
							IDbDataParameter parSHIPPING_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_POSTALCODE", sSHIPPING_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parSHIPPING_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_COUNTRY"   , sSHIPPING_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parACCOUNT_NUMBER              = Sql.AddParameter(cmd, "@ACCOUNT_NUMBER"             , sACCOUNT_NUMBER               ,  30);
							IDbDataParameter parTEAM_ID                     = Sql.AddParameter(cmd, "@TEAM_ID"                    , gTEAM_ID                      );
							IDbDataParameter parTEAM_SET_LIST               = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"              , sTEAM_SET_LIST                , 8000);
							IDbDataParameter parEXCHANGE_FOLDER             = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"            , bEXCHANGE_FOLDER              );
							IDbDataParameter parDATE_ENTERED                = Sql.AddParameter(cmd, "@DATE_ENTERED"               , dtDATE_ENTERED                );
							IDbDataParameter parDATE_MODIFIED               = Sql.AddParameter(cmd, "@DATE_MODIFIED"              , dtDATE_MODIFIED               );
							IDbDataParameter parBILLING_ADDRESS_STREET1     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET1"    , sBILLING_ADDRESS_STREET1      , 150);
							IDbDataParameter parBILLING_ADDRESS_STREET2     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET2"    , sBILLING_ADDRESS_STREET2      , 150);
							IDbDataParameter parBILLING_ADDRESS_STREET3     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET3"    , sBILLING_ADDRESS_STREET3      , 150);
							IDbDataParameter parSHIPPING_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET1"   , sSHIPPING_ADDRESS_STREET1     , 150);
							IDbDataParameter parSHIPPING_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET2"   , sSHIPPING_ADDRESS_STREET2     , 150);
							IDbDataParameter parSHIPPING_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET3"   , sSHIPPING_ADDRESS_STREET3     , 150);
							IDbDataParameter parTAG_SET_NAME                = Sql.AddParameter(cmd, "@TAG_SET_NAME"               , sTAG_SET_NAME                 , 4000);
							IDbDataParameter parNAICS_SET_NAME              = Sql.AddParameter(cmd, "@NAICS_SET_NAME"             , sNAICS_SET_NAME               , 4000);
							IDbDataParameter parASSIGNED_SET_LIST           = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"          , sASSIGNED_SET_LIST            , 8000);
							IDbDataParameter parTEAM_NAME                   = Sql.AddParameter(cmd, "@TEAM_NAME"                  , sTEAM_NAME                    , 128);
							IDbDataParameter parPICTURE                     = Sql.AddParameter(cmd, "@PICTURE"                    , sPICTURE                      );
							IDbDataParameter parDO_NOT_CALL                 = Sql.AddParameter(cmd, "@DO_NOT_CALL"                , bDO_NOT_CALL                  );
							IDbDataParameter parEMAIL_OPT_OUT               = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"              , bEMAIL_OPT_OUT                );
							IDbDataParameter parINVALID_EMAIL               = Sql.AddParameter(cmd, "@INVALID_EMAIL"              , bINVALID_EMAIL                );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_Import
		/// <summary>
		/// spACCOUNTS_Import
		/// </summary>
		public void spACCOUNTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sACCOUNT_TYPE, Guid gPARENT_ID, string sINDUSTRY, string sANNUAL_REVENUE, string sPHONE_FAX, string sBILLING_ADDRESS_STREET, string sBILLING_ADDRESS_CITY, string sBILLING_ADDRESS_STATE, string sBILLING_ADDRESS_POSTALCODE, string sBILLING_ADDRESS_COUNTRY, string sDESCRIPTION, string sRATING, string sPHONE_OFFICE, string sPHONE_ALTERNATE, string sEMAIL1, string sEMAIL2, string sWEBSITE, string sOWNERSHIP, string sEMPLOYEES, string sSIC_CODE, string sTICKER_SYMBOL, string sSHIPPING_ADDRESS_STREET, string sSHIPPING_ADDRESS_CITY, string sSHIPPING_ADDRESS_STATE, string sSHIPPING_ADDRESS_POSTALCODE, string sSHIPPING_ADDRESS_COUNTRY, string sACCOUNT_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sBILLING_ADDRESS_STREET1, string sBILLING_ADDRESS_STREET2, string sBILLING_ADDRESS_STREET3, string sSHIPPING_ADDRESS_STREET1, string sSHIPPING_ADDRESS_STREET2, string sSHIPPING_ADDRESS_STREET3, string sTAG_SET_NAME, string sNAICS_SET_NAME, string sASSIGNED_SET_LIST, string sTEAM_NAME, string sPICTURE, bool bDO_NOT_CALL, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_Import";
				IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
				IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
				IDbDataParameter parASSIGNED_USER_ID            = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"           , gASSIGNED_USER_ID             );
				IDbDataParameter parNAME                        = Sql.AddParameter(cmd, "@NAME"                       , sNAME                         , 150);
				IDbDataParameter parACCOUNT_TYPE                = Sql.AddParameter(cmd, "@ACCOUNT_TYPE"               , sACCOUNT_TYPE                 ,  25);
				IDbDataParameter parPARENT_ID                   = Sql.AddParameter(cmd, "@PARENT_ID"                  , gPARENT_ID                    );
				IDbDataParameter parINDUSTRY                    = Sql.AddParameter(cmd, "@INDUSTRY"                   , sINDUSTRY                     ,  25);
				IDbDataParameter parANNUAL_REVENUE              = Sql.AddParameter(cmd, "@ANNUAL_REVENUE"             , sANNUAL_REVENUE               ,  25);
				IDbDataParameter parPHONE_FAX                   = Sql.AddParameter(cmd, "@PHONE_FAX"                  , sPHONE_FAX                    ,  25);
				IDbDataParameter parBILLING_ADDRESS_STREET      = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET"     , sBILLING_ADDRESS_STREET       , 150);
				IDbDataParameter parBILLING_ADDRESS_CITY        = Sql.AddParameter(cmd, "@BILLING_ADDRESS_CITY"       , sBILLING_ADDRESS_CITY         , 100);
				IDbDataParameter parBILLING_ADDRESS_STATE       = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STATE"      , sBILLING_ADDRESS_STATE        , 100);
				IDbDataParameter parBILLING_ADDRESS_POSTALCODE  = Sql.AddParameter(cmd, "@BILLING_ADDRESS_POSTALCODE" , sBILLING_ADDRESS_POSTALCODE   ,  20);
				IDbDataParameter parBILLING_ADDRESS_COUNTRY     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_COUNTRY"    , sBILLING_ADDRESS_COUNTRY      , 100);
				IDbDataParameter parDESCRIPTION                 = Sql.AddParameter(cmd, "@DESCRIPTION"                , sDESCRIPTION                  );
				IDbDataParameter parRATING                      = Sql.AddParameter(cmd, "@RATING"                     , sRATING                       ,  25);
				IDbDataParameter parPHONE_OFFICE                = Sql.AddParameter(cmd, "@PHONE_OFFICE"               , sPHONE_OFFICE                 ,  25);
				IDbDataParameter parPHONE_ALTERNATE             = Sql.AddParameter(cmd, "@PHONE_ALTERNATE"            , sPHONE_ALTERNATE              ,  25);
				IDbDataParameter parEMAIL1                      = Sql.AddParameter(cmd, "@EMAIL1"                     , sEMAIL1                       , 100);
				IDbDataParameter parEMAIL2                      = Sql.AddParameter(cmd, "@EMAIL2"                     , sEMAIL2                       , 100);
				IDbDataParameter parWEBSITE                     = Sql.AddParameter(cmd, "@WEBSITE"                    , sWEBSITE                      , 255);
				IDbDataParameter parOWNERSHIP                   = Sql.AddParameter(cmd, "@OWNERSHIP"                  , sOWNERSHIP                    , 100);
				IDbDataParameter parEMPLOYEES                   = Sql.AddParameter(cmd, "@EMPLOYEES"                  , sEMPLOYEES                    ,  10);
				IDbDataParameter parSIC_CODE                    = Sql.AddParameter(cmd, "@SIC_CODE"                   , sSIC_CODE                     ,  10);
				IDbDataParameter parTICKER_SYMBOL               = Sql.AddParameter(cmd, "@TICKER_SYMBOL"              , sTICKER_SYMBOL                ,  10);
				IDbDataParameter parSHIPPING_ADDRESS_STREET     = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET"    , sSHIPPING_ADDRESS_STREET      , 150);
				IDbDataParameter parSHIPPING_ADDRESS_CITY       = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_CITY"      , sSHIPPING_ADDRESS_CITY        , 100);
				IDbDataParameter parSHIPPING_ADDRESS_STATE      = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STATE"     , sSHIPPING_ADDRESS_STATE       , 100);
				IDbDataParameter parSHIPPING_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_POSTALCODE", sSHIPPING_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parSHIPPING_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_COUNTRY"   , sSHIPPING_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parACCOUNT_NUMBER              = Sql.AddParameter(cmd, "@ACCOUNT_NUMBER"             , sACCOUNT_NUMBER               ,  30);
				IDbDataParameter parTEAM_ID                     = Sql.AddParameter(cmd, "@TEAM_ID"                    , gTEAM_ID                      );
				IDbDataParameter parTEAM_SET_LIST               = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"              , sTEAM_SET_LIST                , 8000);
				IDbDataParameter parEXCHANGE_FOLDER             = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"            , bEXCHANGE_FOLDER              );
				IDbDataParameter parDATE_ENTERED                = Sql.AddParameter(cmd, "@DATE_ENTERED"               , dtDATE_ENTERED                );
				IDbDataParameter parDATE_MODIFIED               = Sql.AddParameter(cmd, "@DATE_MODIFIED"              , dtDATE_MODIFIED               );
				IDbDataParameter parBILLING_ADDRESS_STREET1     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET1"    , sBILLING_ADDRESS_STREET1      , 150);
				IDbDataParameter parBILLING_ADDRESS_STREET2     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET2"    , sBILLING_ADDRESS_STREET2      , 150);
				IDbDataParameter parBILLING_ADDRESS_STREET3     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET3"    , sBILLING_ADDRESS_STREET3      , 150);
				IDbDataParameter parSHIPPING_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET1"   , sSHIPPING_ADDRESS_STREET1     , 150);
				IDbDataParameter parSHIPPING_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET2"   , sSHIPPING_ADDRESS_STREET2     , 150);
				IDbDataParameter parSHIPPING_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET3"   , sSHIPPING_ADDRESS_STREET3     , 150);
				IDbDataParameter parTAG_SET_NAME                = Sql.AddParameter(cmd, "@TAG_SET_NAME"               , sTAG_SET_NAME                 , 4000);
				IDbDataParameter parNAICS_SET_NAME              = Sql.AddParameter(cmd, "@NAICS_SET_NAME"             , sNAICS_SET_NAME               , 4000);
				IDbDataParameter parASSIGNED_SET_LIST           = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"          , sASSIGNED_SET_LIST            , 8000);
				IDbDataParameter parTEAM_NAME                   = Sql.AddParameter(cmd, "@TEAM_NAME"                  , sTEAM_NAME                    , 128);
				IDbDataParameter parPICTURE                     = Sql.AddParameter(cmd, "@PICTURE"                    , sPICTURE                      );
				IDbDataParameter parDO_NOT_CALL                 = Sql.AddParameter(cmd, "@DO_NOT_CALL"                , bDO_NOT_CALL                  );
				IDbDataParameter parEMAIL_OPT_OUT               = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"              , bEMAIL_OPT_OUT                );
				IDbDataParameter parINVALID_EMAIL               = Sql.AddParameter(cmd, "@INVALID_EMAIL"              , bINVALID_EMAIL                );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACCOUNTS_Import
		/// <summary>
		/// spACCOUNTS_Import
		/// </summary>
		public IDbCommand cmdACCOUNTS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_Import";
			IDbDataParameter parID                          = Sql.CreateParameter(cmd, "@ID"                         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID            = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"           , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID            = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"           , "Guid",  16);
			IDbDataParameter parNAME                        = Sql.CreateParameter(cmd, "@NAME"                       , "string", 150);
			IDbDataParameter parACCOUNT_TYPE                = Sql.CreateParameter(cmd, "@ACCOUNT_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_ID                   = Sql.CreateParameter(cmd, "@PARENT_ID"                  , "Guid",  16);
			IDbDataParameter parINDUSTRY                    = Sql.CreateParameter(cmd, "@INDUSTRY"                   , "string",  25);
			IDbDataParameter parANNUAL_REVENUE              = Sql.CreateParameter(cmd, "@ANNUAL_REVENUE"             , "string",  25);
			IDbDataParameter parPHONE_FAX                   = Sql.CreateParameter(cmd, "@PHONE_FAX"                  , "string",  25);
			IDbDataParameter parBILLING_ADDRESS_STREET      = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_STREET"     , "string", 150);
			IDbDataParameter parBILLING_ADDRESS_CITY        = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_CITY"       , "string", 100);
			IDbDataParameter parBILLING_ADDRESS_STATE       = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_STATE"      , "string", 100);
			IDbDataParameter parBILLING_ADDRESS_POSTALCODE  = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_POSTALCODE" , "string",  20);
			IDbDataParameter parBILLING_ADDRESS_COUNTRY     = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_COUNTRY"    , "string", 100);
			IDbDataParameter parDESCRIPTION                 = Sql.CreateParameter(cmd, "@DESCRIPTION"                , "string", 104857600);
			IDbDataParameter parRATING                      = Sql.CreateParameter(cmd, "@RATING"                     , "string",  25);
			IDbDataParameter parPHONE_OFFICE                = Sql.CreateParameter(cmd, "@PHONE_OFFICE"               , "string",  25);
			IDbDataParameter parPHONE_ALTERNATE             = Sql.CreateParameter(cmd, "@PHONE_ALTERNATE"            , "string",  25);
			IDbDataParameter parEMAIL1                      = Sql.CreateParameter(cmd, "@EMAIL1"                     , "string", 100);
			IDbDataParameter parEMAIL2                      = Sql.CreateParameter(cmd, "@EMAIL2"                     , "string", 100);
			IDbDataParameter parWEBSITE                     = Sql.CreateParameter(cmd, "@WEBSITE"                    , "string", 255);
			IDbDataParameter parOWNERSHIP                   = Sql.CreateParameter(cmd, "@OWNERSHIP"                  , "string", 100);
			IDbDataParameter parEMPLOYEES                   = Sql.CreateParameter(cmd, "@EMPLOYEES"                  , "string",  10);
			IDbDataParameter parSIC_CODE                    = Sql.CreateParameter(cmd, "@SIC_CODE"                   , "string",  10);
			IDbDataParameter parTICKER_SYMBOL               = Sql.CreateParameter(cmd, "@TICKER_SYMBOL"              , "string",  10);
			IDbDataParameter parSHIPPING_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parSHIPPING_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parSHIPPING_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parSHIPPING_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parSHIPPING_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parACCOUNT_NUMBER              = Sql.CreateParameter(cmd, "@ACCOUNT_NUMBER"             , "string",  30);
			IDbDataParameter parTEAM_ID                     = Sql.CreateParameter(cmd, "@TEAM_ID"                    , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST               = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"              , "ansistring", 8000);
			IDbDataParameter parEXCHANGE_FOLDER             = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"            , "bool",   1);
			IDbDataParameter parDATE_ENTERED                = Sql.CreateParameter(cmd, "@DATE_ENTERED"               , "DateTime",   8);
			IDbDataParameter parDATE_MODIFIED               = Sql.CreateParameter(cmd, "@DATE_MODIFIED"              , "DateTime",   8);
			IDbDataParameter parBILLING_ADDRESS_STREET1     = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_STREET1"    , "string", 150);
			IDbDataParameter parBILLING_ADDRESS_STREET2     = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_STREET2"    , "string", 150);
			IDbDataParameter parBILLING_ADDRESS_STREET3     = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_STREET3"    , "string", 150);
			IDbDataParameter parSHIPPING_ADDRESS_STREET1    = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_STREET1"   , "string", 150);
			IDbDataParameter parSHIPPING_ADDRESS_STREET2    = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_STREET2"   , "string", 150);
			IDbDataParameter parSHIPPING_ADDRESS_STREET3    = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_STREET3"   , "string", 150);
			IDbDataParameter parTAG_SET_NAME                = Sql.CreateParameter(cmd, "@TAG_SET_NAME"               , "string", 4000);
			IDbDataParameter parNAICS_SET_NAME              = Sql.CreateParameter(cmd, "@NAICS_SET_NAME"             , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST           = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"          , "ansistring", 8000);
			IDbDataParameter parTEAM_NAME                   = Sql.CreateParameter(cmd, "@TEAM_NAME"                  , "string", 128);
			IDbDataParameter parPICTURE                     = Sql.CreateParameter(cmd, "@PICTURE"                    , "string", 104857600);
			IDbDataParameter parDO_NOT_CALL                 = Sql.CreateParameter(cmd, "@DO_NOT_CALL"                , "bool",   1);
			IDbDataParameter parEMAIL_OPT_OUT               = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"              , "bool",   1);
			IDbDataParameter parINVALID_EMAIL               = Sql.CreateParameter(cmd, "@INVALID_EMAIL"              , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACCOUNTS_InsRelated
		/// <summary>
		/// spACCOUNTS_InsRelated
		/// </summary>
		public void spACCOUNTS_InsRelated(Guid gACCOUNT_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_InsRelated";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_InsRelated
		/// <summary>
		/// spACCOUNTS_InsRelated
		/// </summary>
		public void spACCOUNTS_InsRelated(Guid gACCOUNT_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_InsRelated";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_InsRelated
		/// <summary>
		/// spACCOUNTS_InsRelated
		/// </summary>
		public IDbCommand cmdACCOUNTS_InsRelated(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_InsRelated";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_LEADS_Delete
		/// <summary>
		/// spACCOUNTS_LEADS_Delete
		/// </summary>
		public void spACCOUNTS_LEADS_Delete(Guid gACCOUNT_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_LEADS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_LEADS_Delete
		/// <summary>
		/// spACCOUNTS_LEADS_Delete
		/// </summary>
		public void spACCOUNTS_LEADS_Delete(Guid gACCOUNT_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_LEADS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_LEADS_Delete
		/// <summary>
		/// spACCOUNTS_LEADS_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_LEADS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_LEADS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_LEADS_MassUpdate
		/// <summary>
		/// spACCOUNTS_LEADS_MassUpdate
		/// </summary>
		public void spACCOUNTS_LEADS_MassUpdate(string sID_LIST, Guid gACCOUNT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_LEADS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_LEADS_MassUpdate
		/// <summary>
		/// spACCOUNTS_LEADS_MassUpdate
		/// </summary>
		public void spACCOUNTS_LEADS_MassUpdate(string sID_LIST, Guid gACCOUNT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_LEADS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_LEADS_MassUpdate
		/// <summary>
		/// spACCOUNTS_LEADS_MassUpdate
		/// </summary>
		public IDbCommand cmdACCOUNTS_LEADS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_LEADS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_LEADS_Update
		/// <summary>
		/// spACCOUNTS_LEADS_Update
		/// </summary>
		public void spACCOUNTS_LEADS_Update(Guid gACCOUNT_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_LEADS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_LEADS_Update
		/// <summary>
		/// spACCOUNTS_LEADS_Update
		/// </summary>
		public void spACCOUNTS_LEADS_Update(Guid gACCOUNT_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_LEADS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_LEADS_Update
		/// <summary>
		/// spACCOUNTS_LEADS_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_LEADS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_LEADS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_MassDelete
		/// <summary>
		/// spACCOUNTS_MassDelete
		/// </summary>
		public void spACCOUNTS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_MassDelete
		/// <summary>
		/// spACCOUNTS_MassDelete
		/// </summary>
		public void spACCOUNTS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_MassDelete
		/// <summary>
		/// spACCOUNTS_MassDelete
		/// </summary>
		public IDbCommand cmdACCOUNTS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_MassSync
		/// <summary>
		/// spACCOUNTS_MassSync
		/// </summary>
		public void spACCOUNTS_MassSync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_MassSync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_MassSync
		/// <summary>
		/// spACCOUNTS_MassSync
		/// </summary>
		public void spACCOUNTS_MassSync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_MassSync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_MassSync
		/// <summary>
		/// spACCOUNTS_MassSync
		/// </summary>
		public IDbCommand cmdACCOUNTS_MassSync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_MassSync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_MassUnsync
		/// <summary>
		/// spACCOUNTS_MassUnsync
		/// </summary>
		public void spACCOUNTS_MassUnsync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_MassUnsync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_MassUnsync
		/// <summary>
		/// spACCOUNTS_MassUnsync
		/// </summary>
		public void spACCOUNTS_MassUnsync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_MassUnsync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_MassUnsync
		/// <summary>
		/// spACCOUNTS_MassUnsync
		/// </summary>
		public IDbCommand cmdACCOUNTS_MassUnsync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_MassUnsync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_MassUpdate
		/// <summary>
		/// spACCOUNTS_MassUpdate
		/// </summary>
		public void spACCOUNTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sACCOUNT_TYPE, string sINDUSTRY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parACCOUNT_TYPE      = Sql.AddParameter(cmd, "@ACCOUNT_TYPE"     , sACCOUNT_TYPE       ,  25);
							IDbDataParameter parINDUSTRY          = Sql.AddParameter(cmd, "@INDUSTRY"         , sINDUSTRY           ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_MassUpdate
		/// <summary>
		/// spACCOUNTS_MassUpdate
		/// </summary>
		public void spACCOUNTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sACCOUNT_TYPE, string sINDUSTRY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parACCOUNT_TYPE      = Sql.AddParameter(cmd, "@ACCOUNT_TYPE"     , sACCOUNT_TYPE       ,  25);
				IDbDataParameter parINDUSTRY          = Sql.AddParameter(cmd, "@INDUSTRY"         , sINDUSTRY           ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_MassUpdate
		/// <summary>
		/// spACCOUNTS_MassUpdate
		/// </summary>
		public IDbCommand cmdACCOUNTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parACCOUNT_TYPE      = Sql.CreateParameter(cmd, "@ACCOUNT_TYPE"     , "string",  25);
			IDbDataParameter parINDUSTRY          = Sql.CreateParameter(cmd, "@INDUSTRY"         , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_Merge
		/// <summary>
		/// spACCOUNTS_Merge
		/// </summary>
		public void spACCOUNTS_Merge(Guid gID, Guid gMERGE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_Merge";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_Merge
		/// <summary>
		/// spACCOUNTS_Merge
		/// </summary>
		public void spACCOUNTS_Merge(Guid gID, Guid gMERGE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_Merge";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_Merge
		/// <summary>
		/// spACCOUNTS_Merge
		/// </summary>
		public IDbCommand cmdACCOUNTS_Merge(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_Merge";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMERGE_ID         = Sql.CreateParameter(cmd, "@MERGE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_New
		/// <summary>
		/// spACCOUNTS_New
		/// </summary>
		public void spACCOUNTS_New(ref Guid gID, string sNAME, string sPHONE_OFFICE, string sWEBSITE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parPHONE_OFFICE      = Sql.AddParameter(cmd, "@PHONE_OFFICE"     , sPHONE_OFFICE       ,  25);
							IDbDataParameter parWEBSITE           = Sql.AddParameter(cmd, "@WEBSITE"          , sWEBSITE            , 255);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_New
		/// <summary>
		/// spACCOUNTS_New
		/// </summary>
		public void spACCOUNTS_New(ref Guid gID, string sNAME, string sPHONE_OFFICE, string sWEBSITE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parPHONE_OFFICE      = Sql.AddParameter(cmd, "@PHONE_OFFICE"     , sPHONE_OFFICE       ,  25);
				IDbDataParameter parWEBSITE           = Sql.AddParameter(cmd, "@WEBSITE"          , sWEBSITE            , 255);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACCOUNTS_New
		/// <summary>
		/// spACCOUNTS_New
		/// </summary>
		public IDbCommand cmdACCOUNTS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parPHONE_OFFICE      = Sql.CreateParameter(cmd, "@PHONE_OFFICE"     , "string",  25);
			IDbDataParameter parWEBSITE           = Sql.CreateParameter(cmd, "@WEBSITE"          , "string", 255);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACCOUNTS_OPPORTUNITIES_Delete
		/// <summary>
		/// spACCOUNTS_OPPORTUNITIES_Delete
		/// </summary>
		public void spACCOUNTS_OPPORTUNITIES_Delete(Guid gACCOUNT_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Delet";
							else
								cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_OPPORTUNITIES_Delete
		/// <summary>
		/// spACCOUNTS_OPPORTUNITIES_Delete
		/// </summary>
		public void spACCOUNTS_OPPORTUNITIES_Delete(Guid gACCOUNT_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Delet";
				else
					cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_OPPORTUNITIES_Delete
		/// <summary>
		/// spACCOUNTS_OPPORTUNITIES_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_OPPORTUNITIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Delet";
			else
				cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_OPPORTUNITIES_Update
		/// <summary>
		/// spACCOUNTS_OPPORTUNITIES_Update
		/// </summary>
		public void spACCOUNTS_OPPORTUNITIES_Update(Guid gACCOUNT_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Updat";
							else
								cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_OPPORTUNITIES_Update
		/// <summary>
		/// spACCOUNTS_OPPORTUNITIES_Update
		/// </summary>
		public void spACCOUNTS_OPPORTUNITIES_Update(Guid gACCOUNT_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Updat";
				else
					cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_OPPORTUNITIES_Update
		/// <summary>
		/// spACCOUNTS_OPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_OPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Updat";
			else
				cmd.CommandText = "spACCOUNTS_OPPORTUNITIES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_PARENT_Update
		/// <summary>
		/// spACCOUNTS_PARENT_Update
		/// </summary>
		public void spACCOUNTS_PARENT_Update(Guid gACCOUNT_ID, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_PARENT_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_PARENT_Update
		/// <summary>
		/// spACCOUNTS_PARENT_Update
		/// </summary>
		public void spACCOUNTS_PARENT_Update(Guid gACCOUNT_ID, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_PARENT_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_PARENT_Update
		/// <summary>
		/// spACCOUNTS_PARENT_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_PARENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_PARENT_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_STREAM_InsertPost
		/// <summary>
		/// spACCOUNTS_STREAM_InsertPost
		/// </summary>
		public void spACCOUNTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_STREAM_InsertPost
		/// <summary>
		/// spACCOUNTS_STREAM_InsertPost
		/// </summary>
		public void spACCOUNTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_STREAM_InsertPost
		/// <summary>
		/// spACCOUNTS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdACCOUNTS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_Undelete
		/// <summary>
		/// spACCOUNTS_Undelete
		/// </summary>
		public void spACCOUNTS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_Undelete
		/// <summary>
		/// spACCOUNTS_Undelete
		/// </summary>
		public void spACCOUNTS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_Undelete
		/// <summary>
		/// spACCOUNTS_Undelete
		/// </summary>
		public IDbCommand cmdACCOUNTS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_Update
		/// <summary>
		/// spACCOUNTS_Update
		/// </summary>
		public void spACCOUNTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sACCOUNT_TYPE, Guid gPARENT_ID, string sINDUSTRY, string sANNUAL_REVENUE, string sPHONE_FAX, string sBILLING_ADDRESS_STREET, string sBILLING_ADDRESS_CITY, string sBILLING_ADDRESS_STATE, string sBILLING_ADDRESS_POSTALCODE, string sBILLING_ADDRESS_COUNTRY, string sDESCRIPTION, string sRATING, string sPHONE_OFFICE, string sPHONE_ALTERNATE, string sEMAIL1, string sEMAIL2, string sWEBSITE, string sOWNERSHIP, string sEMPLOYEES, string sSIC_CODE, string sTICKER_SYMBOL, string sSHIPPING_ADDRESS_STREET, string sSHIPPING_ADDRESS_CITY, string sSHIPPING_ADDRESS_STATE, string sSHIPPING_ADDRESS_POSTALCODE, string sSHIPPING_ADDRESS_COUNTRY, string sACCOUNT_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, string sPICTURE, string sTAG_SET_NAME, string sNAICS_SET_NAME, bool bDO_NOT_CALL, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_Update";
							IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
							IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
							IDbDataParameter parASSIGNED_USER_ID            = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"           , gASSIGNED_USER_ID             );
							IDbDataParameter parNAME                        = Sql.AddParameter(cmd, "@NAME"                       , sNAME                         , 150);
							IDbDataParameter parACCOUNT_TYPE                = Sql.AddParameter(cmd, "@ACCOUNT_TYPE"               , sACCOUNT_TYPE                 ,  25);
							IDbDataParameter parPARENT_ID                   = Sql.AddParameter(cmd, "@PARENT_ID"                  , gPARENT_ID                    );
							IDbDataParameter parINDUSTRY                    = Sql.AddParameter(cmd, "@INDUSTRY"                   , sINDUSTRY                     ,  25);
							IDbDataParameter parANNUAL_REVENUE              = Sql.AddParameter(cmd, "@ANNUAL_REVENUE"             , sANNUAL_REVENUE               ,  25);
							IDbDataParameter parPHONE_FAX                   = Sql.AddParameter(cmd, "@PHONE_FAX"                  , sPHONE_FAX                    ,  25);
							IDbDataParameter parBILLING_ADDRESS_STREET      = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET"     , sBILLING_ADDRESS_STREET       , 150);
							IDbDataParameter parBILLING_ADDRESS_CITY        = Sql.AddParameter(cmd, "@BILLING_ADDRESS_CITY"       , sBILLING_ADDRESS_CITY         , 100);
							IDbDataParameter parBILLING_ADDRESS_STATE       = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STATE"      , sBILLING_ADDRESS_STATE        , 100);
							IDbDataParameter parBILLING_ADDRESS_POSTALCODE  = Sql.AddParameter(cmd, "@BILLING_ADDRESS_POSTALCODE" , sBILLING_ADDRESS_POSTALCODE   ,  20);
							IDbDataParameter parBILLING_ADDRESS_COUNTRY     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_COUNTRY"    , sBILLING_ADDRESS_COUNTRY      , 100);
							IDbDataParameter parDESCRIPTION                 = Sql.AddParameter(cmd, "@DESCRIPTION"                , sDESCRIPTION                  );
							IDbDataParameter parRATING                      = Sql.AddParameter(cmd, "@RATING"                     , sRATING                       ,  25);
							IDbDataParameter parPHONE_OFFICE                = Sql.AddParameter(cmd, "@PHONE_OFFICE"               , sPHONE_OFFICE                 ,  25);
							IDbDataParameter parPHONE_ALTERNATE             = Sql.AddParameter(cmd, "@PHONE_ALTERNATE"            , sPHONE_ALTERNATE              ,  25);
							IDbDataParameter parEMAIL1                      = Sql.AddParameter(cmd, "@EMAIL1"                     , sEMAIL1                       , 100);
							IDbDataParameter parEMAIL2                      = Sql.AddParameter(cmd, "@EMAIL2"                     , sEMAIL2                       , 100);
							IDbDataParameter parWEBSITE                     = Sql.AddParameter(cmd, "@WEBSITE"                    , sWEBSITE                      , 255);
							IDbDataParameter parOWNERSHIP                   = Sql.AddParameter(cmd, "@OWNERSHIP"                  , sOWNERSHIP                    , 100);
							IDbDataParameter parEMPLOYEES                   = Sql.AddParameter(cmd, "@EMPLOYEES"                  , sEMPLOYEES                    ,  10);
							IDbDataParameter parSIC_CODE                    = Sql.AddParameter(cmd, "@SIC_CODE"                   , sSIC_CODE                     ,  10);
							IDbDataParameter parTICKER_SYMBOL               = Sql.AddParameter(cmd, "@TICKER_SYMBOL"              , sTICKER_SYMBOL                ,  10);
							IDbDataParameter parSHIPPING_ADDRESS_STREET     = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET"    , sSHIPPING_ADDRESS_STREET      , 150);
							IDbDataParameter parSHIPPING_ADDRESS_CITY       = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_CITY"      , sSHIPPING_ADDRESS_CITY        , 100);
							IDbDataParameter parSHIPPING_ADDRESS_STATE      = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STATE"     , sSHIPPING_ADDRESS_STATE       , 100);
							IDbDataParameter parSHIPPING_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_POSTALCODE", sSHIPPING_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parSHIPPING_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_COUNTRY"   , sSHIPPING_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parACCOUNT_NUMBER              = Sql.AddParameter(cmd, "@ACCOUNT_NUMBER"             , sACCOUNT_NUMBER               ,  30);
							IDbDataParameter parTEAM_ID                     = Sql.AddParameter(cmd, "@TEAM_ID"                    , gTEAM_ID                      );
							IDbDataParameter parTEAM_SET_LIST               = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"              , sTEAM_SET_LIST                , 8000);
							IDbDataParameter parEXCHANGE_FOLDER             = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"            , bEXCHANGE_FOLDER              );
							IDbDataParameter parPICTURE                     = Sql.AddParameter(cmd, "@PICTURE"                    , sPICTURE                      );
							IDbDataParameter parTAG_SET_NAME                = Sql.AddParameter(cmd, "@TAG_SET_NAME"               , sTAG_SET_NAME                 , 4000);
							IDbDataParameter parNAICS_SET_NAME              = Sql.AddParameter(cmd, "@NAICS_SET_NAME"             , sNAICS_SET_NAME               , 4000);
							IDbDataParameter parDO_NOT_CALL                 = Sql.AddParameter(cmd, "@DO_NOT_CALL"                , bDO_NOT_CALL                  );
							IDbDataParameter parEMAIL_OPT_OUT               = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"              , bEMAIL_OPT_OUT                );
							IDbDataParameter parINVALID_EMAIL               = Sql.AddParameter(cmd, "@INVALID_EMAIL"              , bINVALID_EMAIL                );
							IDbDataParameter parASSIGNED_SET_LIST           = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"          , sASSIGNED_SET_LIST            , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_Update
		/// <summary>
		/// spACCOUNTS_Update
		/// </summary>
		public void spACCOUNTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sACCOUNT_TYPE, Guid gPARENT_ID, string sINDUSTRY, string sANNUAL_REVENUE, string sPHONE_FAX, string sBILLING_ADDRESS_STREET, string sBILLING_ADDRESS_CITY, string sBILLING_ADDRESS_STATE, string sBILLING_ADDRESS_POSTALCODE, string sBILLING_ADDRESS_COUNTRY, string sDESCRIPTION, string sRATING, string sPHONE_OFFICE, string sPHONE_ALTERNATE, string sEMAIL1, string sEMAIL2, string sWEBSITE, string sOWNERSHIP, string sEMPLOYEES, string sSIC_CODE, string sTICKER_SYMBOL, string sSHIPPING_ADDRESS_STREET, string sSHIPPING_ADDRESS_CITY, string sSHIPPING_ADDRESS_STATE, string sSHIPPING_ADDRESS_POSTALCODE, string sSHIPPING_ADDRESS_COUNTRY, string sACCOUNT_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, string sPICTURE, string sTAG_SET_NAME, string sNAICS_SET_NAME, bool bDO_NOT_CALL, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_Update";
				IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
				IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
				IDbDataParameter parASSIGNED_USER_ID            = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"           , gASSIGNED_USER_ID             );
				IDbDataParameter parNAME                        = Sql.AddParameter(cmd, "@NAME"                       , sNAME                         , 150);
				IDbDataParameter parACCOUNT_TYPE                = Sql.AddParameter(cmd, "@ACCOUNT_TYPE"               , sACCOUNT_TYPE                 ,  25);
				IDbDataParameter parPARENT_ID                   = Sql.AddParameter(cmd, "@PARENT_ID"                  , gPARENT_ID                    );
				IDbDataParameter parINDUSTRY                    = Sql.AddParameter(cmd, "@INDUSTRY"                   , sINDUSTRY                     ,  25);
				IDbDataParameter parANNUAL_REVENUE              = Sql.AddParameter(cmd, "@ANNUAL_REVENUE"             , sANNUAL_REVENUE               ,  25);
				IDbDataParameter parPHONE_FAX                   = Sql.AddParameter(cmd, "@PHONE_FAX"                  , sPHONE_FAX                    ,  25);
				IDbDataParameter parBILLING_ADDRESS_STREET      = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STREET"     , sBILLING_ADDRESS_STREET       , 150);
				IDbDataParameter parBILLING_ADDRESS_CITY        = Sql.AddParameter(cmd, "@BILLING_ADDRESS_CITY"       , sBILLING_ADDRESS_CITY         , 100);
				IDbDataParameter parBILLING_ADDRESS_STATE       = Sql.AddParameter(cmd, "@BILLING_ADDRESS_STATE"      , sBILLING_ADDRESS_STATE        , 100);
				IDbDataParameter parBILLING_ADDRESS_POSTALCODE  = Sql.AddParameter(cmd, "@BILLING_ADDRESS_POSTALCODE" , sBILLING_ADDRESS_POSTALCODE   ,  20);
				IDbDataParameter parBILLING_ADDRESS_COUNTRY     = Sql.AddParameter(cmd, "@BILLING_ADDRESS_COUNTRY"    , sBILLING_ADDRESS_COUNTRY      , 100);
				IDbDataParameter parDESCRIPTION                 = Sql.AddParameter(cmd, "@DESCRIPTION"                , sDESCRIPTION                  );
				IDbDataParameter parRATING                      = Sql.AddParameter(cmd, "@RATING"                     , sRATING                       ,  25);
				IDbDataParameter parPHONE_OFFICE                = Sql.AddParameter(cmd, "@PHONE_OFFICE"               , sPHONE_OFFICE                 ,  25);
				IDbDataParameter parPHONE_ALTERNATE             = Sql.AddParameter(cmd, "@PHONE_ALTERNATE"            , sPHONE_ALTERNATE              ,  25);
				IDbDataParameter parEMAIL1                      = Sql.AddParameter(cmd, "@EMAIL1"                     , sEMAIL1                       , 100);
				IDbDataParameter parEMAIL2                      = Sql.AddParameter(cmd, "@EMAIL2"                     , sEMAIL2                       , 100);
				IDbDataParameter parWEBSITE                     = Sql.AddParameter(cmd, "@WEBSITE"                    , sWEBSITE                      , 255);
				IDbDataParameter parOWNERSHIP                   = Sql.AddParameter(cmd, "@OWNERSHIP"                  , sOWNERSHIP                    , 100);
				IDbDataParameter parEMPLOYEES                   = Sql.AddParameter(cmd, "@EMPLOYEES"                  , sEMPLOYEES                    ,  10);
				IDbDataParameter parSIC_CODE                    = Sql.AddParameter(cmd, "@SIC_CODE"                   , sSIC_CODE                     ,  10);
				IDbDataParameter parTICKER_SYMBOL               = Sql.AddParameter(cmd, "@TICKER_SYMBOL"              , sTICKER_SYMBOL                ,  10);
				IDbDataParameter parSHIPPING_ADDRESS_STREET     = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STREET"    , sSHIPPING_ADDRESS_STREET      , 150);
				IDbDataParameter parSHIPPING_ADDRESS_CITY       = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_CITY"      , sSHIPPING_ADDRESS_CITY        , 100);
				IDbDataParameter parSHIPPING_ADDRESS_STATE      = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_STATE"     , sSHIPPING_ADDRESS_STATE       , 100);
				IDbDataParameter parSHIPPING_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_POSTALCODE", sSHIPPING_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parSHIPPING_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@SHIPPING_ADDRESS_COUNTRY"   , sSHIPPING_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parACCOUNT_NUMBER              = Sql.AddParameter(cmd, "@ACCOUNT_NUMBER"             , sACCOUNT_NUMBER               ,  30);
				IDbDataParameter parTEAM_ID                     = Sql.AddParameter(cmd, "@TEAM_ID"                    , gTEAM_ID                      );
				IDbDataParameter parTEAM_SET_LIST               = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"              , sTEAM_SET_LIST                , 8000);
				IDbDataParameter parEXCHANGE_FOLDER             = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"            , bEXCHANGE_FOLDER              );
				IDbDataParameter parPICTURE                     = Sql.AddParameter(cmd, "@PICTURE"                    , sPICTURE                      );
				IDbDataParameter parTAG_SET_NAME                = Sql.AddParameter(cmd, "@TAG_SET_NAME"               , sTAG_SET_NAME                 , 4000);
				IDbDataParameter parNAICS_SET_NAME              = Sql.AddParameter(cmd, "@NAICS_SET_NAME"             , sNAICS_SET_NAME               , 4000);
				IDbDataParameter parDO_NOT_CALL                 = Sql.AddParameter(cmd, "@DO_NOT_CALL"                , bDO_NOT_CALL                  );
				IDbDataParameter parEMAIL_OPT_OUT               = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"              , bEMAIL_OPT_OUT                );
				IDbDataParameter parINVALID_EMAIL               = Sql.AddParameter(cmd, "@INVALID_EMAIL"              , bINVALID_EMAIL                );
				IDbDataParameter parASSIGNED_SET_LIST           = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"          , sASSIGNED_SET_LIST            , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACCOUNTS_Update
		/// <summary>
		/// spACCOUNTS_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_Update";
			IDbDataParameter parID                          = Sql.CreateParameter(cmd, "@ID"                         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID            = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"           , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID            = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"           , "Guid",  16);
			IDbDataParameter parNAME                        = Sql.CreateParameter(cmd, "@NAME"                       , "string", 150);
			IDbDataParameter parACCOUNT_TYPE                = Sql.CreateParameter(cmd, "@ACCOUNT_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_ID                   = Sql.CreateParameter(cmd, "@PARENT_ID"                  , "Guid",  16);
			IDbDataParameter parINDUSTRY                    = Sql.CreateParameter(cmd, "@INDUSTRY"                   , "string",  25);
			IDbDataParameter parANNUAL_REVENUE              = Sql.CreateParameter(cmd, "@ANNUAL_REVENUE"             , "string",  25);
			IDbDataParameter parPHONE_FAX                   = Sql.CreateParameter(cmd, "@PHONE_FAX"                  , "string",  25);
			IDbDataParameter parBILLING_ADDRESS_STREET      = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_STREET"     , "string", 150);
			IDbDataParameter parBILLING_ADDRESS_CITY        = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_CITY"       , "string", 100);
			IDbDataParameter parBILLING_ADDRESS_STATE       = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_STATE"      , "string", 100);
			IDbDataParameter parBILLING_ADDRESS_POSTALCODE  = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_POSTALCODE" , "string",  20);
			IDbDataParameter parBILLING_ADDRESS_COUNTRY     = Sql.CreateParameter(cmd, "@BILLING_ADDRESS_COUNTRY"    , "string", 100);
			IDbDataParameter parDESCRIPTION                 = Sql.CreateParameter(cmd, "@DESCRIPTION"                , "string", 104857600);
			IDbDataParameter parRATING                      = Sql.CreateParameter(cmd, "@RATING"                     , "string",  25);
			IDbDataParameter parPHONE_OFFICE                = Sql.CreateParameter(cmd, "@PHONE_OFFICE"               , "string",  25);
			IDbDataParameter parPHONE_ALTERNATE             = Sql.CreateParameter(cmd, "@PHONE_ALTERNATE"            , "string",  25);
			IDbDataParameter parEMAIL1                      = Sql.CreateParameter(cmd, "@EMAIL1"                     , "string", 100);
			IDbDataParameter parEMAIL2                      = Sql.CreateParameter(cmd, "@EMAIL2"                     , "string", 100);
			IDbDataParameter parWEBSITE                     = Sql.CreateParameter(cmd, "@WEBSITE"                    , "string", 255);
			IDbDataParameter parOWNERSHIP                   = Sql.CreateParameter(cmd, "@OWNERSHIP"                  , "string", 100);
			IDbDataParameter parEMPLOYEES                   = Sql.CreateParameter(cmd, "@EMPLOYEES"                  , "string",  10);
			IDbDataParameter parSIC_CODE                    = Sql.CreateParameter(cmd, "@SIC_CODE"                   , "string",  10);
			IDbDataParameter parTICKER_SYMBOL               = Sql.CreateParameter(cmd, "@TICKER_SYMBOL"              , "string",  10);
			IDbDataParameter parSHIPPING_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parSHIPPING_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parSHIPPING_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parSHIPPING_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parSHIPPING_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@SHIPPING_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parACCOUNT_NUMBER              = Sql.CreateParameter(cmd, "@ACCOUNT_NUMBER"             , "string",  30);
			IDbDataParameter parTEAM_ID                     = Sql.CreateParameter(cmd, "@TEAM_ID"                    , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST               = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"              , "ansistring", 8000);
			IDbDataParameter parEXCHANGE_FOLDER             = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"            , "bool",   1);
			IDbDataParameter parPICTURE                     = Sql.CreateParameter(cmd, "@PICTURE"                    , "string", 104857600);
			IDbDataParameter parTAG_SET_NAME                = Sql.CreateParameter(cmd, "@TAG_SET_NAME"               , "string", 4000);
			IDbDataParameter parNAICS_SET_NAME              = Sql.CreateParameter(cmd, "@NAICS_SET_NAME"             , "string", 4000);
			IDbDataParameter parDO_NOT_CALL                 = Sql.CreateParameter(cmd, "@DO_NOT_CALL"                , "bool",   1);
			IDbDataParameter parEMAIL_OPT_OUT               = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"              , "bool",   1);
			IDbDataParameter parINVALID_EMAIL               = Sql.CreateParameter(cmd, "@INVALID_EMAIL"              , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST           = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"          , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACCOUNTS_USERS_Delete
		/// <summary>
		/// spACCOUNTS_USERS_Delete
		/// </summary>
		public void spACCOUNTS_USERS_Delete(Guid gACCOUNT_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_USERS_Delete
		/// <summary>
		/// spACCOUNTS_USERS_Delete
		/// </summary>
		public void spACCOUNTS_USERS_Delete(Guid gACCOUNT_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_USERS_Delete
		/// <summary>
		/// spACCOUNTS_USERS_Delete
		/// </summary>
		public IDbCommand cmdACCOUNTS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACCOUNTS_USERS_Update
		/// <summary>
		/// spACCOUNTS_USERS_Update
		/// </summary>
		public void spACCOUNTS_USERS_Update(Guid gACCOUNT_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACCOUNTS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACCOUNTS_USERS_Update
		/// <summary>
		/// spACCOUNTS_USERS_Update
		/// </summary>
		public void spACCOUNTS_USERS_Update(Guid gACCOUNT_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACCOUNTS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACCOUNTS_USERS_Update
		/// <summary>
		/// spACCOUNTS_USERS_Update
		/// </summary>
		public IDbCommand cmdACCOUNTS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACCOUNTS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ACTIONS_Delete
		/// <summary>
		/// spACL_ACTIONS_Delete
		/// </summary>
		public void spACL_ACTIONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_Delete
		/// <summary>
		/// spACL_ACTIONS_Delete
		/// </summary>
		public void spACL_ACTIONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ACTIONS_Delete
		/// <summary>
		/// spACL_ACTIONS_Delete
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ACTIONS_Initialize
		/// <summary>
		/// spACL_ACTIONS_Initialize
		/// </summary>
		public void spACL_ACTIONS_Initialize()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_Initialize";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_Initialize
		/// <summary>
		/// spACL_ACTIONS_Initialize
		/// </summary>
		public void spACL_ACTIONS_Initialize(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_Initialize";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ACTIONS_Initialize
		/// <summary>
		/// spACL_ACTIONS_Initialize
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_Initialize(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_Initialize";
			return cmd;
		}
		#endregion

		#region spACL_ACTIONS_InsertOnly
		/// <summary>
		/// spACL_ACTIONS_InsertOnly
		/// </summary>
		public void spACL_ACTIONS_InsertOnly(string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_InsertOnly";
							IDbDataParameter parNAME      = Sql.AddParameter(cmd, "@NAME"     , sNAME       , 150);
							IDbDataParameter parCATEGORY  = Sql.AddParameter(cmd, "@CATEGORY" , sCATEGORY   , 100);
							IDbDataParameter parACLTYPE   = Sql.AddParameter(cmd, "@ACLTYPE"  , sACLTYPE    , 100);
							IDbDataParameter parACLACCESS = Sql.AddParameter(cmd, "@ACLACCESS", nACLACCESS  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_InsertOnly
		/// <summary>
		/// spACL_ACTIONS_InsertOnly
		/// </summary>
		public void spACL_ACTIONS_InsertOnly(string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_InsertOnly";
				IDbDataParameter parNAME      = Sql.AddParameter(cmd, "@NAME"     , sNAME       , 150);
				IDbDataParameter parCATEGORY  = Sql.AddParameter(cmd, "@CATEGORY" , sCATEGORY   , 100);
				IDbDataParameter parACLTYPE   = Sql.AddParameter(cmd, "@ACLTYPE"  , sACLTYPE    , 100);
				IDbDataParameter parACLACCESS = Sql.AddParameter(cmd, "@ACLACCESS", nACLACCESS  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ACTIONS_InsertOnly
		/// <summary>
		/// spACL_ACTIONS_InsertOnly
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_InsertOnly";
			IDbDataParameter parNAME      = Sql.CreateParameter(cmd, "@NAME"     , "string", 150);
			IDbDataParameter parCATEGORY  = Sql.CreateParameter(cmd, "@CATEGORY" , "string", 100);
			IDbDataParameter parACLTYPE   = Sql.CreateParameter(cmd, "@ACLTYPE"  , "string", 100);
			IDbDataParameter parACLACCESS = Sql.CreateParameter(cmd, "@ACLACCESS", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spACL_ACTIONS_Update
		/// <summary>
		/// spACL_ACTIONS_Update
		/// </summary>
		public void spACL_ACTIONS_Update(ref Guid gID, string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
							IDbDataParameter parACLTYPE          = Sql.AddParameter(cmd, "@ACLTYPE"         , sACLTYPE           , 100);
							IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_Update
		/// <summary>
		/// spACL_ACTIONS_Update
		/// </summary>
		public void spACL_ACTIONS_Update(ref Guid gID, string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
				IDbDataParameter parACLTYPE          = Sql.AddParameter(cmd, "@ACLTYPE"         , sACLTYPE           , 100);
				IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_ACTIONS_Update
		/// <summary>
		/// spACL_ACTIONS_Update
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 100);
			IDbDataParameter parACLTYPE          = Sql.CreateParameter(cmd, "@ACLTYPE"         , "string", 100);
			IDbDataParameter parACLACCESS        = Sql.CreateParameter(cmd, "@ACLACCESS"       , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_FIELDS_Update
		/// <summary>
		/// spACL_FIELDS_Update
		/// </summary>
		public void spACL_FIELDS_Update(ref Guid gID, Guid gROLE_ID, string sNAME, string sCATEGORY, Int32 nACLACCESS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_FIELDS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
							IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_FIELDS_Update
		/// <summary>
		/// spACL_FIELDS_Update
		/// </summary>
		public void spACL_FIELDS_Update(ref Guid gID, Guid gROLE_ID, string sNAME, string sCATEGORY, Int32 nACLACCESS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_FIELDS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
				IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_FIELDS_Update
		/// <summary>
		/// spACL_FIELDS_Update
		/// </summary>
		public IDbCommand cmdACL_FIELDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_FIELDS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 100);
			IDbDataParameter parACLACCESS        = Sql.CreateParameter(cmd, "@ACLACCESS"       , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Delete
		/// <summary>
		/// spACL_ROLES_ACTIONS_Delete
		/// </summary>
		public void spACL_ROLES_ACTIONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_ACTIONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Delete
		/// <summary>
		/// spACL_ROLES_ACTIONS_Delete
		/// </summary>
		public void spACL_ROLES_ACTIONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_ACTIONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_ACTIONS_Delete
		/// <summary>
		/// spACL_ROLES_ACTIONS_Delete
		/// </summary>
		public IDbCommand cmdACL_ROLES_ACTIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_ACTIONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Update
		/// <summary>
		/// spACL_ROLES_ACTIONS_Update
		/// </summary>
		public void spACL_ROLES_ACTIONS_Update(ref Guid gID, Guid gROLE_ID, string sACTION_NAME, string sMODULE_NAME, Int32 nACCESS_OVERRIDE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_ACTIONS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parACTION_NAME      = Sql.AddParameter(cmd, "@ACTION_NAME"     , sACTION_NAME       ,  25);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parACCESS_OVERRIDE  = Sql.AddParameter(cmd, "@ACCESS_OVERRIDE" , nACCESS_OVERRIDE   );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Update
		/// <summary>
		/// spACL_ROLES_ACTIONS_Update
		/// </summary>
		public void spACL_ROLES_ACTIONS_Update(ref Guid gID, Guid gROLE_ID, string sACTION_NAME, string sMODULE_NAME, Int32 nACCESS_OVERRIDE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_ACTIONS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parACTION_NAME      = Sql.AddParameter(cmd, "@ACTION_NAME"     , sACTION_NAME       ,  25);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parACCESS_OVERRIDE  = Sql.AddParameter(cmd, "@ACCESS_OVERRIDE" , nACCESS_OVERRIDE   );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_ROLES_ACTIONS_Update
		/// <summary>
		/// spACL_ROLES_ACTIONS_Update
		/// </summary>
		public IDbCommand cmdACL_ROLES_ACTIONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_ACTIONS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parACTION_NAME      = Sql.CreateParameter(cmd, "@ACTION_NAME"     , "string",  25);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parACCESS_OVERRIDE  = Sql.CreateParameter(cmd, "@ACCESS_OVERRIDE" , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_ROLES_Delete
		/// <summary>
		/// spACL_ROLES_Delete
		/// </summary>
		public void spACL_ROLES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_Delete
		/// <summary>
		/// spACL_ROLES_Delete
		/// </summary>
		public void spACL_ROLES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_Delete
		/// <summary>
		/// spACL_ROLES_Delete
		/// </summary>
		public IDbCommand cmdACL_ROLES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_InsertOnly
		/// <summary>
		/// spACL_ROLES_InsertOnly
		/// </summary>
		public void spACL_ROLES_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_InsertOnly";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 150);
							IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_InsertOnly
		/// <summary>
		/// spACL_ROLES_InsertOnly
		/// </summary>
		public void spACL_ROLES_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_InsertOnly";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 150);
				IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_InsertOnly
		/// <summary>
		/// spACL_ROLES_InsertOnly
		/// </summary>
		public IDbCommand cmdACL_ROLES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_InsertOnly";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parNAME        = Sql.CreateParameter(cmd, "@NAME"       , "string", 150);
			IDbDataParameter parDESCRIPTION = Sql.CreateParameter(cmd, "@DESCRIPTION", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_MassDelete
		/// <summary>
		/// spACL_ROLES_MassDelete
		/// </summary>
		public void spACL_ROLES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_MassDelete
		/// <summary>
		/// spACL_ROLES_MassDelete
		/// </summary>
		public void spACL_ROLES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_MassDelete
		/// <summary>
		/// spACL_ROLES_MassDelete
		/// </summary>
		public IDbCommand cmdACL_ROLES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_Update
		/// <summary>
		/// spACL_ROLES_Update
		/// </summary>
		public void spACL_ROLES_Update(ref Guid gID, string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_Update
		/// <summary>
		/// spACL_ROLES_Update
		/// </summary>
		public void spACL_ROLES_Update(ref Guid gID, string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_ROLES_Update
		/// <summary>
		/// spACL_ROLES_Update
		/// </summary>
		public IDbCommand cmdACL_ROLES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_ROLES_USERS_Delete
		/// <summary>
		/// spACL_ROLES_USERS_Delete
		/// </summary>
		public void spACL_ROLES_USERS_Delete(Guid gROLE_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_USERS_Delete
		/// <summary>
		/// spACL_ROLES_USERS_Delete
		/// </summary>
		public void spACL_ROLES_USERS_Delete(Guid gROLE_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_USERS_Delete
		/// <summary>
		/// spACL_ROLES_USERS_Delete
		/// </summary>
		public IDbCommand cmdACL_ROLES_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_USERS_MassUpdate
		/// <summary>
		/// spACL_ROLES_USERS_MassUpdate
		/// </summary>
		public void spACL_ROLES_USERS_MassUpdate(Guid gROLE_ID, string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_USERS_MassUpdate";
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_USERS_MassUpdate
		/// <summary>
		/// spACL_ROLES_USERS_MassUpdate
		/// </summary>
		public void spACL_ROLES_USERS_MassUpdate(Guid gROLE_ID, string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_USERS_MassUpdate";
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_USERS_MassUpdate
		/// <summary>
		/// spACL_ROLES_USERS_MassUpdate
		/// </summary>
		public IDbCommand cmdACL_ROLES_USERS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_USERS_MassUpdate";
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_USERS_Update
		/// <summary>
		/// spACL_ROLES_USERS_Update
		/// </summary>
		public void spACL_ROLES_USERS_Update(Guid gROLE_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_USERS_Update
		/// <summary>
		/// spACL_ROLES_USERS_Update
		/// </summary>
		public void spACL_ROLES_USERS_Update(Guid gROLE_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_USERS_Update
		/// <summary>
		/// spACL_ROLES_USERS_Update
		/// </summary>
		public IDbCommand cmdACL_ROLES_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACTIVITIES_Delete
		/// <summary>
		/// spACTIVITIES_Delete
		/// </summary>
		public void spACTIVITIES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACTIVITIES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACTIVITIES_Delete
		/// <summary>
		/// spACTIVITIES_Delete
		/// </summary>
		public void spACTIVITIES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACTIVITIES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACTIVITIES_Delete
		/// <summary>
		/// spACTIVITIES_Delete
		/// </summary>
		public IDbCommand cmdACTIVITIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACTIVITIES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACTIVITIES_UpdateDismiss
		/// <summary>
		/// spACTIVITIES_UpdateDismiss
		/// </summary>
		public void spACTIVITIES_UpdateDismiss(Guid gID, Guid gUSER_ID, bool bREMINDER_DISMISSED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACTIVITIES_UpdateDismiss";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parUSER_ID            = Sql.AddParameter(cmd, "@USER_ID"           , gUSER_ID             );
							IDbDataParameter parREMINDER_DISMISSED = Sql.AddParameter(cmd, "@REMINDER_DISMISSED", bREMINDER_DISMISSED  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACTIVITIES_UpdateDismiss
		/// <summary>
		/// spACTIVITIES_UpdateDismiss
		/// </summary>
		public void spACTIVITIES_UpdateDismiss(Guid gID, Guid gUSER_ID, bool bREMINDER_DISMISSED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACTIVITIES_UpdateDismiss";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parUSER_ID            = Sql.AddParameter(cmd, "@USER_ID"           , gUSER_ID             );
				IDbDataParameter parREMINDER_DISMISSED = Sql.AddParameter(cmd, "@REMINDER_DISMISSED", bREMINDER_DISMISSED  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACTIVITIES_UpdateDismiss
		/// <summary>
		/// spACTIVITIES_UpdateDismiss
		/// </summary>
		public IDbCommand cmdACTIVITIES_UpdateDismiss(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACTIVITIES_UpdateDismiss";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parUSER_ID            = Sql.CreateParameter(cmd, "@USER_ID"           , "Guid",  16);
			IDbDataParameter parREMINDER_DISMISSED = Sql.CreateParameter(cmd, "@REMINDER_DISMISSED", "bool",   1);
			return cmd;
		}
		#endregion

		#region spACTIVITIES_UpdateStatus
		/// <summary>
		/// spACTIVITIES_UpdateStatus
		/// </summary>
		public void spACTIVITIES_UpdateStatus(Guid gID, Guid gUSER_ID, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACTIVITIES_UpdateStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACTIVITIES_UpdateStatus
		/// <summary>
		/// spACTIVITIES_UpdateStatus
		/// </summary>
		public void spACTIVITIES_UpdateStatus(Guid gID, Guid gUSER_ID, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACTIVITIES_UpdateStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACTIVITIES_UpdateStatus
		/// <summary>
		/// spACTIVITIES_UpdateStatus
		/// </summary>
		public IDbCommand cmdACTIVITIES_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACTIVITIES_UpdateStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spAPPOINTMENTS_LEADS_Delete
		/// <summary>
		/// spAPPOINTMENTS_LEADS_Delete
		/// </summary>
		public void spAPPOINTMENTS_LEADS_Delete(Guid gID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spAPPOINTMENTS_LEADS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spAPPOINTMENTS_LEADS_Delete
		/// <summary>
		/// spAPPOINTMENTS_LEADS_Delete
		/// </summary>
		public void spAPPOINTMENTS_LEADS_Delete(Guid gID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spAPPOINTMENTS_LEADS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdAPPOINTMENTS_LEADS_Delete
		/// <summary>
		/// spAPPOINTMENTS_LEADS_Delete
		/// </summary>
		public IDbCommand cmdAPPOINTMENTS_LEADS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spAPPOINTMENTS_LEADS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spASSIGNED_SETS_AddSet
		/// <summary>
		/// spASSIGNED_SETS_AddSet
		/// </summary>
		public void spASSIGNED_SETS_AddSet(ref Guid gID, Guid gOLD_SET_ID, Guid gPRIMARY_USER_ID, Guid gNEW_SET_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spASSIGNED_SETS_AddSet";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOLD_SET_ID       = Sql.AddParameter(cmd, "@OLD_SET_ID"      , gOLD_SET_ID        );
							IDbDataParameter parPRIMARY_USER_ID  = Sql.AddParameter(cmd, "@PRIMARY_USER_ID" , gPRIMARY_USER_ID   );
							IDbDataParameter parNEW_SET_ID       = Sql.AddParameter(cmd, "@NEW_SET_ID"      , gNEW_SET_ID        );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spASSIGNED_SETS_AddSet
		/// <summary>
		/// spASSIGNED_SETS_AddSet
		/// </summary>
		public void spASSIGNED_SETS_AddSet(ref Guid gID, Guid gOLD_SET_ID, Guid gPRIMARY_USER_ID, Guid gNEW_SET_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spASSIGNED_SETS_AddSet";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOLD_SET_ID       = Sql.AddParameter(cmd, "@OLD_SET_ID"      , gOLD_SET_ID        );
				IDbDataParameter parPRIMARY_USER_ID  = Sql.AddParameter(cmd, "@PRIMARY_USER_ID" , gPRIMARY_USER_ID   );
				IDbDataParameter parNEW_SET_ID       = Sql.AddParameter(cmd, "@NEW_SET_ID"      , gNEW_SET_ID        );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdASSIGNED_SETS_AddSet
		/// <summary>
		/// spASSIGNED_SETS_AddSet
		/// </summary>
		public IDbCommand cmdASSIGNED_SETS_AddSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spASSIGNED_SETS_AddSet";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOLD_SET_ID       = Sql.CreateParameter(cmd, "@OLD_SET_ID"      , "Guid",  16);
			IDbDataParameter parPRIMARY_USER_ID  = Sql.CreateParameter(cmd, "@PRIMARY_USER_ID" , "Guid",  16);
			IDbDataParameter parNEW_SET_ID       = Sql.CreateParameter(cmd, "@NEW_SET_ID"      , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spASSIGNED_SETS_NormalizeSet
		/// <summary>
		/// spASSIGNED_SETS_NormalizeSet
		/// </summary>
		public void spASSIGNED_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_USER_ID, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spASSIGNED_SETS_NormalizeSet";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parPRIMARY_USER_ID   = Sql.AddParameter(cmd, "@PRIMARY_USER_ID"  , gPRIMARY_USER_ID    );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spASSIGNED_SETS_NormalizeSet
		/// <summary>
		/// spASSIGNED_SETS_NormalizeSet
		/// </summary>
		public void spASSIGNED_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_USER_ID, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spASSIGNED_SETS_NormalizeSet";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parPRIMARY_USER_ID   = Sql.AddParameter(cmd, "@PRIMARY_USER_ID"  , gPRIMARY_USER_ID    );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdASSIGNED_SETS_NormalizeSet
		/// <summary>
		/// spASSIGNED_SETS_NormalizeSet
		/// </summary>
		public IDbCommand cmdASSIGNED_SETS_NormalizeSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spASSIGNED_SETS_NormalizeSet";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parPRIMARY_USER_ID   = Sql.CreateParameter(cmd, "@PRIMARY_USER_ID"  , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spASSIGNED_SETS_UpdateNames
		/// <summary>
		/// spASSIGNED_SETS_UpdateNames
		/// </summary>
		public void spASSIGNED_SETS_UpdateNames(Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spASSIGNED_SETS_UpdateNames";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spASSIGNED_SETS_UpdateNames
		/// <summary>
		/// spASSIGNED_SETS_UpdateNames
		/// </summary>
		public void spASSIGNED_SETS_UpdateNames(Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spASSIGNED_SETS_UpdateNames";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdASSIGNED_SETS_UpdateNames
		/// <summary>
		/// spASSIGNED_SETS_UpdateNames
		/// </summary>
		public IDbCommand cmdASSIGNED_SETS_UpdateNames(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spASSIGNED_SETS_UpdateNames";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spAUDIT_EVENTS_Rebuild
		/// <summary>
		/// spAUDIT_EVENTS_Rebuild
		/// </summary>
		public void spAUDIT_EVENTS_Rebuild()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spAUDIT_EVENTS_Rebuild";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spAUDIT_EVENTS_Rebuild
		/// <summary>
		/// spAUDIT_EVENTS_Rebuild
		/// </summary>
		public void spAUDIT_EVENTS_Rebuild(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spAUDIT_EVENTS_Rebuild";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdAUDIT_EVENTS_Rebuild
		/// <summary>
		/// spAUDIT_EVENTS_Rebuild
		/// </summary>
		public IDbCommand cmdAUDIT_EVENTS_Rebuild(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spAUDIT_EVENTS_Rebuild";
			return cmd;
		}
		#endregion

		#region spBUG_ATTACHMENTS_Insert
		/// <summary>
		/// spBUG_ATTACHMENTS_Insert
		/// </summary>
		public void spBUG_ATTACHMENTS_Insert(ref Guid gID, Guid gBUG_ID, string sDESCRIPTION, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUG_ATTACHMENTS_Insert";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parBUG_ID            = Sql.AddParameter(cmd, "@BUG_ID"           , gBUG_ID             );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        , 255);
							IDbDataParameter parFILENAME          = Sql.AddParameter(cmd, "@FILENAME"         , sFILENAME           , 255);
							IDbDataParameter parFILE_EXT          = Sql.AddParameter(cmd, "@FILE_EXT"         , sFILE_EXT           ,  25);
							IDbDataParameter parFILE_MIME_TYPE    = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"   , sFILE_MIME_TYPE     , 100);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUG_ATTACHMENTS_Insert
		/// <summary>
		/// spBUG_ATTACHMENTS_Insert
		/// </summary>
		public void spBUG_ATTACHMENTS_Insert(ref Guid gID, Guid gBUG_ID, string sDESCRIPTION, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUG_ATTACHMENTS_Insert";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parBUG_ID            = Sql.AddParameter(cmd, "@BUG_ID"           , gBUG_ID             );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        , 255);
				IDbDataParameter parFILENAME          = Sql.AddParameter(cmd, "@FILENAME"         , sFILENAME           , 255);
				IDbDataParameter parFILE_EXT          = Sql.AddParameter(cmd, "@FILE_EXT"         , sFILE_EXT           ,  25);
				IDbDataParameter parFILE_MIME_TYPE    = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"   , sFILE_MIME_TYPE     , 100);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdBUG_ATTACHMENTS_Insert
		/// <summary>
		/// spBUG_ATTACHMENTS_Insert
		/// </summary>
		public IDbCommand cmdBUG_ATTACHMENTS_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUG_ATTACHMENTS_Insert";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parBUG_ID            = Sql.CreateParameter(cmd, "@BUG_ID"           , "Guid",  16);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 255);
			IDbDataParameter parFILENAME          = Sql.CreateParameter(cmd, "@FILENAME"         , "string", 255);
			IDbDataParameter parFILE_EXT          = Sql.CreateParameter(cmd, "@FILE_EXT"         , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE    = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"   , "string", 100);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spBUGS_ATTACHMENT_InitPointer
		/// <summary>
		/// spBUGS_ATTACHMENT_InitPointer
		/// </summary>
		public void spBUGS_ATTACHMENT_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_ATTACHMENT_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_ATTACHMENT_InitPointer
		/// <summary>
		/// spBUGS_ATTACHMENT_InitPointer
		/// </summary>
		public void spBUGS_ATTACHMENT_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_ATTACHMENT_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdBUGS_ATTACHMENT_InitPointer
		/// <summary>
		/// spBUGS_ATTACHMENT_InitPointer
		/// </summary>
		public IDbCommand cmdBUGS_ATTACHMENT_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_ATTACHMENT_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spBUGS_ATTACHMENT_ReadOffset
		/// <summary>
		/// spBUGS_ATTACHMENT_ReadOffset
		/// </summary>
		public void spBUGS_ATTACHMENT_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_ATTACHMENT_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_ATTACHMENT_ReadOffset
		/// <summary>
		/// spBUGS_ATTACHMENT_ReadOffset
		/// </summary>
		public void spBUGS_ATTACHMENT_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_ATTACHMENT_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdBUGS_ATTACHMENT_ReadOffset
		/// <summary>
		/// spBUGS_ATTACHMENT_ReadOffset
		/// </summary>
		public IDbCommand cmdBUGS_ATTACHMENT_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_ATTACHMENT_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spBUGS_ATTACHMENT_Update
		/// <summary>
		/// spBUGS_ATTACHMENT_Update
		/// </summary>
		public void spBUGS_ATTACHMENT_Update(Guid gID, byte[] binATTACHMENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_ATTACHMENT_Update";
							IDbDataParameter parID         = Sql.AddParameter(cmd, "@ID"        , gID          );
							IDbDataParameter parATTACHMENT = Sql.AddParameter(cmd, "@ATTACHMENT", binATTACHMENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_ATTACHMENT_Update
		/// <summary>
		/// spBUGS_ATTACHMENT_Update
		/// </summary>
		public void spBUGS_ATTACHMENT_Update(Guid gID, byte[] binATTACHMENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_ATTACHMENT_Update";
				IDbDataParameter parID         = Sql.AddParameter(cmd, "@ID"        , gID          );
				IDbDataParameter parATTACHMENT = Sql.AddParameter(cmd, "@ATTACHMENT", binATTACHMENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_ATTACHMENT_Update
		/// <summary>
		/// spBUGS_ATTACHMENT_Update
		/// </summary>
		public IDbCommand cmdBUGS_ATTACHMENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_ATTACHMENT_Update";
			IDbDataParameter parID         = Sql.CreateParameter(cmd, "@ID"        , "Guid",  16);
			IDbDataParameter parATTACHMENT = Sql.CreateParameter(cmd, "@ATTACHMENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spBUGS_ATTACHMENT_WriteOffset
		/// <summary>
		/// spBUGS_ATTACHMENT_WriteOffset
		/// </summary>
		public void spBUGS_ATTACHMENT_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_ATTACHMENT_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_ATTACHMENT_WriteOffset
		/// <summary>
		/// spBUGS_ATTACHMENT_WriteOffset
		/// </summary>
		public void spBUGS_ATTACHMENT_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_ATTACHMENT_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_ATTACHMENT_WriteOffset
		/// <summary>
		/// spBUGS_ATTACHMENT_WriteOffset
		/// </summary>
		public IDbCommand cmdBUGS_ATTACHMENT_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_ATTACHMENT_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spBUGS_Delete
		/// <summary>
		/// spBUGS_Delete
		/// </summary>
		public void spBUGS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_Delete
		/// <summary>
		/// spBUGS_Delete
		/// </summary>
		public void spBUGS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_Delete
		/// <summary>
		/// spBUGS_Delete
		/// </summary>
		public IDbCommand cmdBUGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spBUGS_MassDelete
		/// <summary>
		/// spBUGS_MassDelete
		/// </summary>
		public void spBUGS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_MassDelete
		/// <summary>
		/// spBUGS_MassDelete
		/// </summary>
		public void spBUGS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_MassDelete
		/// <summary>
		/// spBUGS_MassDelete
		/// </summary>
		public IDbCommand cmdBUGS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spBUGS_MassSync
		/// <summary>
		/// spBUGS_MassSync
		/// </summary>
		public void spBUGS_MassSync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_MassSync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_MassSync
		/// <summary>
		/// spBUGS_MassSync
		/// </summary>
		public void spBUGS_MassSync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_MassSync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_MassSync
		/// <summary>
		/// spBUGS_MassSync
		/// </summary>
		public IDbCommand cmdBUGS_MassSync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_MassSync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spBUGS_MassUnsync
		/// <summary>
		/// spBUGS_MassUnsync
		/// </summary>
		public void spBUGS_MassUnsync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_MassUnsync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_MassUnsync
		/// <summary>
		/// spBUGS_MassUnsync
		/// </summary>
		public void spBUGS_MassUnsync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_MassUnsync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_MassUnsync
		/// <summary>
		/// spBUGS_MassUnsync
		/// </summary>
		public IDbCommand cmdBUGS_MassUnsync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_MassUnsync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spBUGS_MassUpdate
		/// <summary>
		/// spBUGS_MassUpdate
		/// </summary>
		public void spBUGS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sSTATUS, string sPRIORITY, string sRESOLUTION, string sTYPE, string sSOURCE, string sPRODUCT_CATEGORY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parRESOLUTION        = Sql.AddParameter(cmd, "@RESOLUTION"       , sRESOLUTION         , 255);
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               , 255);
							IDbDataParameter parSOURCE            = Sql.AddParameter(cmd, "@SOURCE"           , sSOURCE             , 255);
							IDbDataParameter parPRODUCT_CATEGORY  = Sql.AddParameter(cmd, "@PRODUCT_CATEGORY" , sPRODUCT_CATEGORY   , 255);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_MassUpdate
		/// <summary>
		/// spBUGS_MassUpdate
		/// </summary>
		public void spBUGS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sSTATUS, string sPRIORITY, string sRESOLUTION, string sTYPE, string sSOURCE, string sPRODUCT_CATEGORY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parRESOLUTION        = Sql.AddParameter(cmd, "@RESOLUTION"       , sRESOLUTION         , 255);
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               , 255);
				IDbDataParameter parSOURCE            = Sql.AddParameter(cmd, "@SOURCE"           , sSOURCE             , 255);
				IDbDataParameter parPRODUCT_CATEGORY  = Sql.AddParameter(cmd, "@PRODUCT_CATEGORY" , sPRODUCT_CATEGORY   , 255);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_MassUpdate
		/// <summary>
		/// spBUGS_MassUpdate
		/// </summary>
		public IDbCommand cmdBUGS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parRESOLUTION        = Sql.CreateParameter(cmd, "@RESOLUTION"       , "string", 255);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string", 255);
			IDbDataParameter parSOURCE            = Sql.CreateParameter(cmd, "@SOURCE"           , "string", 255);
			IDbDataParameter parPRODUCT_CATEGORY  = Sql.CreateParameter(cmd, "@PRODUCT_CATEGORY" , "string", 255);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spBUGS_Merge
		/// <summary>
		/// spBUGS_Merge
		/// </summary>
		public void spBUGS_Merge(Guid gID, Guid gMERGE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_Merge";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_Merge
		/// <summary>
		/// spBUGS_Merge
		/// </summary>
		public void spBUGS_Merge(Guid gID, Guid gMERGE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_Merge";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_Merge
		/// <summary>
		/// spBUGS_Merge
		/// </summary>
		public IDbCommand cmdBUGS_Merge(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_Merge";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMERGE_ID         = Sql.CreateParameter(cmd, "@MERGE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spBUGS_New
		/// <summary>
		/// spBUGS_New
		/// </summary>
		public void spBUGS_New(ref Guid gID, string sNAME, string sPRIORITY, string sFOUND_IN_RELEASE, string sTYPE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parFOUND_IN_RELEASE  = Sql.AddParameter(cmd, "@FOUND_IN_RELEASE" , sFOUND_IN_RELEASE   , 255);
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               , 255);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_New
		/// <summary>
		/// spBUGS_New
		/// </summary>
		public void spBUGS_New(ref Guid gID, string sNAME, string sPRIORITY, string sFOUND_IN_RELEASE, string sTYPE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parFOUND_IN_RELEASE  = Sql.AddParameter(cmd, "@FOUND_IN_RELEASE" , sFOUND_IN_RELEASE   , 255);
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               , 255);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdBUGS_New
		/// <summary>
		/// spBUGS_New
		/// </summary>
		public IDbCommand cmdBUGS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parFOUND_IN_RELEASE  = Sql.CreateParameter(cmd, "@FOUND_IN_RELEASE" , "string", 255);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string", 255);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spBUGS_STREAM_InsertPost
		/// <summary>
		/// spBUGS_STREAM_InsertPost
		/// </summary>
		public void spBUGS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_STREAM_InsertPost
		/// <summary>
		/// spBUGS_STREAM_InsertPost
		/// </summary>
		public void spBUGS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_STREAM_InsertPost
		/// <summary>
		/// spBUGS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdBUGS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spBUGS_Undelete
		/// <summary>
		/// spBUGS_Undelete
		/// </summary>
		public void spBUGS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_Undelete
		/// <summary>
		/// spBUGS_Undelete
		/// </summary>
		public void spBUGS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_Undelete
		/// <summary>
		/// spBUGS_Undelete
		/// </summary>
		public IDbCommand cmdBUGS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spBUGS_Update
		/// <summary>
		/// spBUGS_Update
		/// </summary>
		public void spBUGS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, string sPRIORITY, string sDESCRIPTION, string sRESOLUTION, string sFOUND_IN_RELEASE, string sTYPE, string sFIXED_IN_RELEASE, string sWORK_LOG, string sSOURCE, string sPRODUCT_CATEGORY, string sPARENT_TYPE, Guid gPARENT_ID, string sBUG_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parRESOLUTION        = Sql.AddParameter(cmd, "@RESOLUTION"       , sRESOLUTION         , 255);
							IDbDataParameter parFOUND_IN_RELEASE  = Sql.AddParameter(cmd, "@FOUND_IN_RELEASE" , sFOUND_IN_RELEASE   , 255);
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               , 255);
							IDbDataParameter parFIXED_IN_RELEASE  = Sql.AddParameter(cmd, "@FIXED_IN_RELEASE" , sFIXED_IN_RELEASE   , 255);
							IDbDataParameter parWORK_LOG          = Sql.AddParameter(cmd, "@WORK_LOG"         , sWORK_LOG           );
							IDbDataParameter parSOURCE            = Sql.AddParameter(cmd, "@SOURCE"           , sSOURCE             , 255);
							IDbDataParameter parPRODUCT_CATEGORY  = Sql.AddParameter(cmd, "@PRODUCT_CATEGORY" , sPRODUCT_CATEGORY   , 255);
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parBUG_NUMBER        = Sql.AddParameter(cmd, "@BUG_NUMBER"       , sBUG_NUMBER         ,  30);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parEXCHANGE_FOLDER   = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"  , bEXCHANGE_FOLDER    );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_Update
		/// <summary>
		/// spBUGS_Update
		/// </summary>
		public void spBUGS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, string sPRIORITY, string sDESCRIPTION, string sRESOLUTION, string sFOUND_IN_RELEASE, string sTYPE, string sFIXED_IN_RELEASE, string sWORK_LOG, string sSOURCE, string sPRODUCT_CATEGORY, string sPARENT_TYPE, Guid gPARENT_ID, string sBUG_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parRESOLUTION        = Sql.AddParameter(cmd, "@RESOLUTION"       , sRESOLUTION         , 255);
				IDbDataParameter parFOUND_IN_RELEASE  = Sql.AddParameter(cmd, "@FOUND_IN_RELEASE" , sFOUND_IN_RELEASE   , 255);
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               , 255);
				IDbDataParameter parFIXED_IN_RELEASE  = Sql.AddParameter(cmd, "@FIXED_IN_RELEASE" , sFIXED_IN_RELEASE   , 255);
				IDbDataParameter parWORK_LOG          = Sql.AddParameter(cmd, "@WORK_LOG"         , sWORK_LOG           );
				IDbDataParameter parSOURCE            = Sql.AddParameter(cmd, "@SOURCE"           , sSOURCE             , 255);
				IDbDataParameter parPRODUCT_CATEGORY  = Sql.AddParameter(cmd, "@PRODUCT_CATEGORY" , sPRODUCT_CATEGORY   , 255);
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parBUG_NUMBER        = Sql.AddParameter(cmd, "@BUG_NUMBER"       , sBUG_NUMBER         ,  30);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parEXCHANGE_FOLDER   = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"  , bEXCHANGE_FOLDER    );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdBUGS_Update
		/// <summary>
		/// spBUGS_Update
		/// </summary>
		public IDbCommand cmdBUGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parRESOLUTION        = Sql.CreateParameter(cmd, "@RESOLUTION"       , "string", 255);
			IDbDataParameter parFOUND_IN_RELEASE  = Sql.CreateParameter(cmd, "@FOUND_IN_RELEASE" , "string", 255);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string", 255);
			IDbDataParameter parFIXED_IN_RELEASE  = Sql.CreateParameter(cmd, "@FIXED_IN_RELEASE" , "string", 255);
			IDbDataParameter parWORK_LOG          = Sql.CreateParameter(cmd, "@WORK_LOG"         , "string", 104857600);
			IDbDataParameter parSOURCE            = Sql.CreateParameter(cmd, "@SOURCE"           , "string", 255);
			IDbDataParameter parPRODUCT_CATEGORY  = Sql.CreateParameter(cmd, "@PRODUCT_CATEGORY" , "string", 255);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parBUG_NUMBER        = Sql.CreateParameter(cmd, "@BUG_NUMBER"       , "string",  30);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parEXCHANGE_FOLDER   = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"  , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spBUGS_USERS_Delete
		/// <summary>
		/// spBUGS_USERS_Delete
		/// </summary>
		public void spBUGS_USERS_Delete(Guid gBUG_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_USERS_Delete
		/// <summary>
		/// spBUGS_USERS_Delete
		/// </summary>
		public void spBUGS_USERS_Delete(Guid gBUG_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_USERS_Delete
		/// <summary>
		/// spBUGS_USERS_Delete
		/// </summary>
		public IDbCommand cmdBUGS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spBUGS_USERS_Update
		/// <summary>
		/// spBUGS_USERS_Update
		/// </summary>
		public void spBUGS_USERS_Update(Guid gBUG_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spBUGS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spBUGS_USERS_Update
		/// <summary>
		/// spBUGS_USERS_Update
		/// </summary>
		public void spBUGS_USERS_Update(Guid gBUG_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spBUGS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdBUGS_USERS_Update
		/// <summary>
		/// spBUGS_USERS_Update
		/// </summary>
		public IDbCommand cmdBUGS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spBUGS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALENDAR_Next
		/// <summary>
		/// spCALENDAR_Next
		/// </summary>
		public void spCALENDAR_Next(DateTime dtDATE_TIME, string sREPEAT_TYPE, Int32 nREPEAT_INTERVAL, string sREPEAT_DOW, Int32 nREPEAT_INDEX, ref DateTime dtDATE_START, ref DateTime dtWEEK_START, ref Int32 nWEEKDAY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALENDAR_Next";
							IDbDataParameter parDATE_TIME       = Sql.AddParameter(cmd, "@DATE_TIME"      , dtDATE_TIME       );
							IDbDataParameter parREPEAT_TYPE     = Sql.AddParameter(cmd, "@REPEAT_TYPE"    , sREPEAT_TYPE      ,  25);
							IDbDataParameter parREPEAT_INTERVAL = Sql.AddParameter(cmd, "@REPEAT_INTERVAL", nREPEAT_INTERVAL  );
							IDbDataParameter parREPEAT_DOW      = Sql.AddParameter(cmd, "@REPEAT_DOW"     , sREPEAT_DOW       ,   7);
							IDbDataParameter parREPEAT_INDEX    = Sql.AddParameter(cmd, "@REPEAT_INDEX"   , nREPEAT_INDEX     );
							IDbDataParameter parDATE_START      = Sql.AddParameter(cmd, "@DATE_START"     , dtDATE_START      );
							IDbDataParameter parWEEK_START      = Sql.AddParameter(cmd, "@WEEK_START"     , dtWEEK_START      );
							IDbDataParameter parWEEKDAY         = Sql.AddParameter(cmd, "@WEEKDAY"        , nWEEKDAY          );
							parDATE_START.Direction = ParameterDirection.InputOutput;
							parWEEK_START.Direction = ParameterDirection.InputOutput;
							parWEEKDAY.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							dtDATE_START = Sql.ToDateTime(parDATE_START.Value);
							dtWEEK_START = Sql.ToDateTime(parWEEK_START.Value);
							nWEEKDAY = Sql.ToInteger(parWEEKDAY.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALENDAR_Next
		/// <summary>
		/// spCALENDAR_Next
		/// </summary>
		public void spCALENDAR_Next(DateTime dtDATE_TIME, string sREPEAT_TYPE, Int32 nREPEAT_INTERVAL, string sREPEAT_DOW, Int32 nREPEAT_INDEX, ref DateTime dtDATE_START, ref DateTime dtWEEK_START, ref Int32 nWEEKDAY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALENDAR_Next";
				IDbDataParameter parDATE_TIME       = Sql.AddParameter(cmd, "@DATE_TIME"      , dtDATE_TIME       );
				IDbDataParameter parREPEAT_TYPE     = Sql.AddParameter(cmd, "@REPEAT_TYPE"    , sREPEAT_TYPE      ,  25);
				IDbDataParameter parREPEAT_INTERVAL = Sql.AddParameter(cmd, "@REPEAT_INTERVAL", nREPEAT_INTERVAL  );
				IDbDataParameter parREPEAT_DOW      = Sql.AddParameter(cmd, "@REPEAT_DOW"     , sREPEAT_DOW       ,   7);
				IDbDataParameter parREPEAT_INDEX    = Sql.AddParameter(cmd, "@REPEAT_INDEX"   , nREPEAT_INDEX     );
				IDbDataParameter parDATE_START      = Sql.AddParameter(cmd, "@DATE_START"     , dtDATE_START      );
				IDbDataParameter parWEEK_START      = Sql.AddParameter(cmd, "@WEEK_START"     , dtWEEK_START      );
				IDbDataParameter parWEEKDAY         = Sql.AddParameter(cmd, "@WEEKDAY"        , nWEEKDAY          );
				parDATE_START.Direction = ParameterDirection.InputOutput;
				parWEEK_START.Direction = ParameterDirection.InputOutput;
				parWEEKDAY.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				dtDATE_START = Sql.ToDateTime(parDATE_START.Value);
				dtWEEK_START = Sql.ToDateTime(parWEEK_START.Value);
				nWEEKDAY = Sql.ToInteger(parWEEKDAY.Value);
			}
		}
		#endregion

		#region cmdCALENDAR_Next
		/// <summary>
		/// spCALENDAR_Next
		/// </summary>
		public IDbCommand cmdCALENDAR_Next(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALENDAR_Next";
			IDbDataParameter parDATE_TIME       = Sql.CreateParameter(cmd, "@DATE_TIME"      , "DateTime",   8);
			IDbDataParameter parREPEAT_TYPE     = Sql.CreateParameter(cmd, "@REPEAT_TYPE"    , "string",  25);
			IDbDataParameter parREPEAT_INTERVAL = Sql.CreateParameter(cmd, "@REPEAT_INTERVAL", "Int32",   4);
			IDbDataParameter parREPEAT_DOW      = Sql.CreateParameter(cmd, "@REPEAT_DOW"     , "string",   7);
			IDbDataParameter parREPEAT_INDEX    = Sql.CreateParameter(cmd, "@REPEAT_INDEX"   , "Int32",   4);
			IDbDataParameter parDATE_START      = Sql.CreateParameter(cmd, "@DATE_START"     , "DateTime",   8);
			IDbDataParameter parWEEK_START      = Sql.CreateParameter(cmd, "@WEEK_START"     , "DateTime",   8);
			IDbDataParameter parWEEKDAY         = Sql.CreateParameter(cmd, "@WEEKDAY"        , "Int32",   4);
			parDATE_START.Direction = ParameterDirection.InputOutput;
			parWEEK_START.Direction = ParameterDirection.InputOutput;
			parWEEKDAY.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCALL_MARKETING_Delete
		/// <summary>
		/// spCALL_MARKETING_Delete
		/// </summary>
		public void spCALL_MARKETING_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALL_MARKETING_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALL_MARKETING_Delete
		/// <summary>
		/// spCALL_MARKETING_Delete
		/// </summary>
		public void spCALL_MARKETING_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALL_MARKETING_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALL_MARKETING_Delete
		/// <summary>
		/// spCALL_MARKETING_Delete
		/// </summary>
		public IDbCommand cmdCALL_MARKETING_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALL_MARKETING_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALL_MARKETING_Duplicate
		/// <summary>
		/// spCALL_MARKETING_Duplicate
		/// </summary>
		public void spCALL_MARKETING_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, Guid gCAMPAIGN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALL_MARKETING_Duplicate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALL_MARKETING_Duplicate
		/// <summary>
		/// spCALL_MARKETING_Duplicate
		/// </summary>
		public void spCALL_MARKETING_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, Guid gCAMPAIGN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALL_MARKETING_Duplicate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCALL_MARKETING_Duplicate
		/// <summary>
		/// spCALL_MARKETING_Duplicate
		/// </summary>
		public IDbCommand cmdCALL_MARKETING_Duplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALL_MARKETING_Duplicate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDUPLICATE_ID     = Sql.CreateParameter(cmd, "@DUPLICATE_ID"    , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCALL_MARKETING_GenerateCalls
		/// <summary>
		/// spCALL_MARKETING_GenerateCalls
		/// </summary>
		public void spCALL_MARKETING_GenerateCalls(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALL_MARKETING_GenerateCalls";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALL_MARKETING_GenerateCalls
		/// <summary>
		/// spCALL_MARKETING_GenerateCalls
		/// </summary>
		public void spCALL_MARKETING_GenerateCalls(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALL_MARKETING_GenerateCalls";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALL_MARKETING_GenerateCalls
		/// <summary>
		/// spCALL_MARKETING_GenerateCalls
		/// </summary>
		public IDbCommand cmdCALL_MARKETING_GenerateCalls(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALL_MARKETING_GenerateCalls";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALL_MARKETING_Update
		/// <summary>
		/// spCALL_MARKETING_Update
		/// </summary>
		public void spCALL_MARKETING_Update(ref Guid gID, Guid gCAMPAIGN_ID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, string sSTATUS, string sDISTRIBUTION, bool bALL_PROSPECT_LISTS, string sSUBJECT, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_START, DateTime dtDATE_END, Int32 nREMINDER_TIME, string sDESCRIPTION, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALL_MARKETING_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
							IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
							IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
							IDbDataParameter parDISTRIBUTION       = Sql.AddParameter(cmd, "@DISTRIBUTION"      , sDISTRIBUTION        ,  25);
							IDbDataParameter parALL_PROSPECT_LISTS = Sql.AddParameter(cmd, "@ALL_PROSPECT_LISTS", bALL_PROSPECT_LISTS  );
							IDbDataParameter parSUBJECT            = Sql.AddParameter(cmd, "@SUBJECT"           , sSUBJECT             ,  50);
							IDbDataParameter parDURATION_HOURS     = Sql.AddParameter(cmd, "@DURATION_HOURS"    , nDURATION_HOURS      );
							IDbDataParameter parDURATION_MINUTES   = Sql.AddParameter(cmd, "@DURATION_MINUTES"  , nDURATION_MINUTES    );
							IDbDataParameter parDATE_START         = Sql.AddParameter(cmd, "@DATE_START"        , dtDATE_START         );
							IDbDataParameter parDATE_END           = Sql.AddParameter(cmd, "@DATE_END"          , dtDATE_END           );
							IDbDataParameter parREMINDER_TIME      = Sql.AddParameter(cmd, "@REMINDER_TIME"     , nREMINDER_TIME       );
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parTEAM_SET_LIST      = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"     , sTEAM_SET_LIST       , 8000);
							IDbDataParameter parASSIGNED_SET_LIST  = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST" , sASSIGNED_SET_LIST   , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALL_MARKETING_Update
		/// <summary>
		/// spCALL_MARKETING_Update
		/// </summary>
		public void spCALL_MARKETING_Update(ref Guid gID, Guid gCAMPAIGN_ID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, string sSTATUS, string sDISTRIBUTION, bool bALL_PROSPECT_LISTS, string sSUBJECT, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_START, DateTime dtDATE_END, Int32 nREMINDER_TIME, string sDESCRIPTION, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALL_MARKETING_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
				IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
				IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
				IDbDataParameter parDISTRIBUTION       = Sql.AddParameter(cmd, "@DISTRIBUTION"      , sDISTRIBUTION        ,  25);
				IDbDataParameter parALL_PROSPECT_LISTS = Sql.AddParameter(cmd, "@ALL_PROSPECT_LISTS", bALL_PROSPECT_LISTS  );
				IDbDataParameter parSUBJECT            = Sql.AddParameter(cmd, "@SUBJECT"           , sSUBJECT             ,  50);
				IDbDataParameter parDURATION_HOURS     = Sql.AddParameter(cmd, "@DURATION_HOURS"    , nDURATION_HOURS      );
				IDbDataParameter parDURATION_MINUTES   = Sql.AddParameter(cmd, "@DURATION_MINUTES"  , nDURATION_MINUTES    );
				IDbDataParameter parDATE_START         = Sql.AddParameter(cmd, "@DATE_START"        , dtDATE_START         );
				IDbDataParameter parDATE_END           = Sql.AddParameter(cmd, "@DATE_END"          , dtDATE_END           );
				IDbDataParameter parREMINDER_TIME      = Sql.AddParameter(cmd, "@REMINDER_TIME"     , nREMINDER_TIME       );
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parTEAM_SET_LIST      = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"     , sTEAM_SET_LIST       , 8000);
				IDbDataParameter parASSIGNED_SET_LIST  = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST" , sASSIGNED_SET_LIST   , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCALL_MARKETING_Update
		/// <summary>
		/// spCALL_MARKETING_Update
		/// </summary>
		public IDbCommand cmdCALL_MARKETING_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALL_MARKETING_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID        = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"       , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID   = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"  , "Guid",  16);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string", 255);
			IDbDataParameter parSTATUS             = Sql.CreateParameter(cmd, "@STATUS"            , "string",  25);
			IDbDataParameter parDISTRIBUTION       = Sql.CreateParameter(cmd, "@DISTRIBUTION"      , "string",  25);
			IDbDataParameter parALL_PROSPECT_LISTS = Sql.CreateParameter(cmd, "@ALL_PROSPECT_LISTS", "bool",   1);
			IDbDataParameter parSUBJECT            = Sql.CreateParameter(cmd, "@SUBJECT"           , "string",  50);
			IDbDataParameter parDURATION_HOURS     = Sql.CreateParameter(cmd, "@DURATION_HOURS"    , "Int32",   4);
			IDbDataParameter parDURATION_MINUTES   = Sql.CreateParameter(cmd, "@DURATION_MINUTES"  , "Int32",   4);
			IDbDataParameter parDATE_START         = Sql.CreateParameter(cmd, "@DATE_START"        , "DateTime",   8);
			IDbDataParameter parDATE_END           = Sql.CreateParameter(cmd, "@DATE_END"          , "DateTime",   8);
			IDbDataParameter parREMINDER_TIME      = Sql.CreateParameter(cmd, "@REMINDER_TIME"     , "Int32",   4);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parTEAM_SET_LIST      = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"     , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST" , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCALL_MKTG_PRSPT_LST_Delete
		/// <summary>
		/// spCALL_MKTG_PRSPT_LST_Delete
		/// </summary>
		public void spCALL_MKTG_PRSPT_LST_Delete(Guid gCALL_MARKETING_ID, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALL_MKTG_PRSPT_LST_Delete";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parCALL_MARKETING_ID = Sql.AddParameter(cmd, "@CALL_MARKETING_ID", gCALL_MARKETING_ID  );
							IDbDataParameter parPROSPECT_LIST_ID  = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID" , gPROSPECT_LIST_ID   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALL_MKTG_PRSPT_LST_Delete
		/// <summary>
		/// spCALL_MKTG_PRSPT_LST_Delete
		/// </summary>
		public void spCALL_MKTG_PRSPT_LST_Delete(Guid gCALL_MARKETING_ID, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALL_MKTG_PRSPT_LST_Delete";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parCALL_MARKETING_ID = Sql.AddParameter(cmd, "@CALL_MARKETING_ID", gCALL_MARKETING_ID  );
				IDbDataParameter parPROSPECT_LIST_ID  = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID" , gPROSPECT_LIST_ID   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALL_MKTG_PRSPT_LST_Delete
		/// <summary>
		/// spCALL_MKTG_PRSPT_LST_Delete
		/// </summary>
		public IDbCommand cmdCALL_MKTG_PRSPT_LST_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALL_MKTG_PRSPT_LST_Delete";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parCALL_MARKETING_ID = Sql.CreateParameter(cmd, "@CALL_MARKETING_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID  = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID" , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALL_MKTG_PRSPT_LST_Update
		/// <summary>
		/// spCALL_MKTG_PRSPT_LST_Update
		/// </summary>
		public void spCALL_MKTG_PRSPT_LST_Update(Guid gCALL_MARKETING_ID, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALL_MKTG_PRSPT_LST_Update";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parCALL_MARKETING_ID = Sql.AddParameter(cmd, "@CALL_MARKETING_ID", gCALL_MARKETING_ID  );
							IDbDataParameter parPROSPECT_LIST_ID  = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID" , gPROSPECT_LIST_ID   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALL_MKTG_PRSPT_LST_Update
		/// <summary>
		/// spCALL_MKTG_PRSPT_LST_Update
		/// </summary>
		public void spCALL_MKTG_PRSPT_LST_Update(Guid gCALL_MARKETING_ID, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALL_MKTG_PRSPT_LST_Update";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parCALL_MARKETING_ID = Sql.AddParameter(cmd, "@CALL_MARKETING_ID", gCALL_MARKETING_ID  );
				IDbDataParameter parPROSPECT_LIST_ID  = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID" , gPROSPECT_LIST_ID   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALL_MKTG_PRSPT_LST_Update
		/// <summary>
		/// spCALL_MKTG_PRSPT_LST_Update
		/// </summary>
		public IDbCommand cmdCALL_MKTG_PRSPT_LST_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALL_MKTG_PRSPT_LST_Update";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parCALL_MARKETING_ID = Sql.CreateParameter(cmd, "@CALL_MARKETING_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID  = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID" , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_CONTACTS_Delete
		/// <summary>
		/// spCALLS_CONTACTS_Delete
		/// </summary>
		public void spCALLS_CONTACTS_Delete(Guid gCALL_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_CONTACTS_Delete
		/// <summary>
		/// spCALLS_CONTACTS_Delete
		/// </summary>
		public void spCALLS_CONTACTS_Delete(Guid gCALL_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_CONTACTS_Delete
		/// <summary>
		/// spCALLS_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdCALLS_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCALL_ID          = Sql.CreateParameter(cmd, "@CALL_ID"         , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_CONTACTS_Update
		/// <summary>
		/// spCALLS_CONTACTS_Update
		/// </summary>
		public void spCALLS_CONTACTS_Update(Guid gCALL_ID, Guid gCONTACT_ID, bool bREQUIRED, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_CONTACTS_Update
		/// <summary>
		/// spCALLS_CONTACTS_Update
		/// </summary>
		public void spCALLS_CONTACTS_Update(Guid gCALL_ID, Guid gCONTACT_ID, bool bREQUIRED, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_CONTACTS_Update
		/// <summary>
		/// spCALLS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdCALLS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCALL_ID          = Sql.CreateParameter(cmd, "@CALL_ID"         , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spCALLS_Delete
		/// <summary>
		/// spCALLS_Delete
		/// </summary>
		public void spCALLS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_Delete
		/// <summary>
		/// spCALLS_Delete
		/// </summary>
		public void spCALLS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_Delete
		/// <summary>
		/// spCALLS_Delete
		/// </summary>
		public IDbCommand cmdCALLS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_DeleteRecurrences
		/// <summary>
		/// spCALLS_DeleteRecurrences
		/// </summary>
		public void spCALLS_DeleteRecurrences(Guid gID, bool bDELETE_ALL)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_DeleteRecurrences";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDELETE_ALL       = Sql.AddParameter(cmd, "@DELETE_ALL"      , bDELETE_ALL        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_DeleteRecurrences
		/// <summary>
		/// spCALLS_DeleteRecurrences
		/// </summary>
		public void spCALLS_DeleteRecurrences(Guid gID, bool bDELETE_ALL, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_DeleteRecurrences";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDELETE_ALL       = Sql.AddParameter(cmd, "@DELETE_ALL"      , bDELETE_ALL        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_DeleteRecurrences
		/// <summary>
		/// spCALLS_DeleteRecurrences
		/// </summary>
		public IDbCommand cmdCALLS_DeleteRecurrences(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_DeleteRecurrences";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDELETE_ALL       = Sql.CreateParameter(cmd, "@DELETE_ALL"      , "bool",   1);
			return cmd;
		}
		#endregion

		#region spCALLS_EmailReminderSent
		/// <summary>
		/// spCALLS_EmailReminderSent
		/// </summary>
		public void spCALLS_EmailReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_EmailReminderSent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_EmailReminderSent
		/// <summary>
		/// spCALLS_EmailReminderSent
		/// </summary>
		public void spCALLS_EmailReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_EmailReminderSent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_EmailReminderSent
		/// <summary>
		/// spCALLS_EmailReminderSent
		/// </summary>
		public IDbCommand cmdCALLS_EmailReminderSent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_EmailReminderSent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_Import
		/// <summary>
		/// spCALLS_Import
		/// </summary>
		public void spCALLS_Import(ref Guid gID, DateTime dtDATE_MODIFIED, Guid gASSIGNED_USER_ID, string sNAME, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sSTATUS, string sDIRECTION, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, string sTEAM_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_Import";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parDATE_MODIFIED     = Sql.AddParameter(cmd, "@DATE_MODIFIED"    , dtDATE_MODIFIED     );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parDURATION_HOURS    = Sql.AddParameter(cmd, "@DURATION_HOURS"   , nDURATION_HOURS     );
							IDbDataParameter parDURATION_MINUTES  = Sql.AddParameter(cmd, "@DURATION_MINUTES" , nDURATION_MINUTES   );
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parDIRECTION         = Sql.AddParameter(cmd, "@DIRECTION"        , sDIRECTION          ,  25);
							IDbDataParameter parREMINDER_TIME     = Sql.AddParameter(cmd, "@REMINDER_TIME"    , nREMINDER_TIME      );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parINVITEE_LIST      = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"     , sINVITEE_LIST       , 8000);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parTEAM_NAME         = Sql.AddParameter(cmd, "@TEAM_NAME"        , sTEAM_NAME          , 128);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_Import
		/// <summary>
		/// spCALLS_Import
		/// </summary>
		public void spCALLS_Import(ref Guid gID, DateTime dtDATE_MODIFIED, Guid gASSIGNED_USER_ID, string sNAME, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sSTATUS, string sDIRECTION, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, string sTEAM_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_Import";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parDATE_MODIFIED     = Sql.AddParameter(cmd, "@DATE_MODIFIED"    , dtDATE_MODIFIED     );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parDURATION_HOURS    = Sql.AddParameter(cmd, "@DURATION_HOURS"   , nDURATION_HOURS     );
				IDbDataParameter parDURATION_MINUTES  = Sql.AddParameter(cmd, "@DURATION_MINUTES" , nDURATION_MINUTES   );
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parDIRECTION         = Sql.AddParameter(cmd, "@DIRECTION"        , sDIRECTION          ,  25);
				IDbDataParameter parREMINDER_TIME     = Sql.AddParameter(cmd, "@REMINDER_TIME"    , nREMINDER_TIME      );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parINVITEE_LIST      = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"     , sINVITEE_LIST       , 8000);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parTEAM_NAME         = Sql.AddParameter(cmd, "@TEAM_NAME"        , sTEAM_NAME          , 128);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCALLS_Import
		/// <summary>
		/// spCALLS_Import
		/// </summary>
		public IDbCommand cmdCALLS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_Import";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parDATE_MODIFIED     = Sql.CreateParameter(cmd, "@DATE_MODIFIED"    , "DateTime",   8);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parDURATION_HOURS    = Sql.CreateParameter(cmd, "@DURATION_HOURS"   , "Int32",   4);
			IDbDataParameter parDURATION_MINUTES  = Sql.CreateParameter(cmd, "@DURATION_MINUTES" , "Int32",   4);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parDIRECTION         = Sql.CreateParameter(cmd, "@DIRECTION"        , "string",  25);
			IDbDataParameter parREMINDER_TIME     = Sql.CreateParameter(cmd, "@REMINDER_TIME"    , "Int32",   4);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parINVITEE_LIST      = Sql.CreateParameter(cmd, "@INVITEE_LIST"     , "ansistring", 8000);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parTEAM_NAME         = Sql.CreateParameter(cmd, "@TEAM_NAME"        , "string", 128);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCALLS_InviteeMassUpdate
		/// <summary>
		/// spCALLS_InviteeMassUpdate
		/// </summary>
		public void spCALLS_InviteeMassUpdate(Guid gCALL_ID, string sID_LIST, bool bREQUIRED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_InviteeMassUpdate";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_InviteeMassUpdate
		/// <summary>
		/// spCALLS_InviteeMassUpdate
		/// </summary>
		public void spCALLS_InviteeMassUpdate(Guid gCALL_ID, string sID_LIST, bool bREQUIRED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_InviteeMassUpdate";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_InviteeMassUpdate
		/// <summary>
		/// spCALLS_InviteeMassUpdate
		/// </summary>
		public IDbCommand cmdCALLS_InviteeMassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_InviteeMassUpdate";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCALL_ID          = Sql.CreateParameter(cmd, "@CALL_ID"         , "Guid",  16);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			return cmd;
		}
		#endregion

		#region spCALLS_LEADS_Delete
		/// <summary>
		/// spCALLS_LEADS_Delete
		/// </summary>
		public void spCALLS_LEADS_Delete(Guid gCALL_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_LEADS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_LEADS_Delete
		/// <summary>
		/// spCALLS_LEADS_Delete
		/// </summary>
		public void spCALLS_LEADS_Delete(Guid gCALL_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_LEADS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_LEADS_Delete
		/// <summary>
		/// spCALLS_LEADS_Delete
		/// </summary>
		public IDbCommand cmdCALLS_LEADS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_LEADS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCALL_ID          = Sql.CreateParameter(cmd, "@CALL_ID"         , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_LEADS_Update
		/// <summary>
		/// spCALLS_LEADS_Update
		/// </summary>
		public void spCALLS_LEADS_Update(Guid gCALL_ID, Guid gLEAD_ID, bool bREQUIRED, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_LEADS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_LEADS_Update
		/// <summary>
		/// spCALLS_LEADS_Update
		/// </summary>
		public void spCALLS_LEADS_Update(Guid gCALL_ID, Guid gLEAD_ID, bool bREQUIRED, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_LEADS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_LEADS_Update
		/// <summary>
		/// spCALLS_LEADS_Update
		/// </summary>
		public IDbCommand cmdCALLS_LEADS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_LEADS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCALL_ID          = Sql.CreateParameter(cmd, "@CALL_ID"         , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spCALLS_MassDelete
		/// <summary>
		/// spCALLS_MassDelete
		/// </summary>
		public void spCALLS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_MassDelete
		/// <summary>
		/// spCALLS_MassDelete
		/// </summary>
		public void spCALLS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_MassDelete
		/// <summary>
		/// spCALLS_MassDelete
		/// </summary>
		public IDbCommand cmdCALLS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_MassUpdate
		/// <summary>
		/// spCALLS_MassUpdate
		/// </summary>
		public void spCALLS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, DateTime dtDATE_TIME, string sSTATUS, string sDIRECTION, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parDIRECTION         = Sql.AddParameter(cmd, "@DIRECTION"        , sDIRECTION          ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_MassUpdate
		/// <summary>
		/// spCALLS_MassUpdate
		/// </summary>
		public void spCALLS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, DateTime dtDATE_TIME, string sSTATUS, string sDIRECTION, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parDIRECTION         = Sql.AddParameter(cmd, "@DIRECTION"        , sDIRECTION          ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_MassUpdate
		/// <summary>
		/// spCALLS_MassUpdate
		/// </summary>
		public IDbCommand cmdCALLS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parDIRECTION         = Sql.CreateParameter(cmd, "@DIRECTION"        , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spCALLS_New
		/// <summary>
		/// spCALLS_New
		/// </summary>
		public void spCALLS_New(ref Guid gID, string sNAME, DateTime dtDATE_TIME, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_New
		/// <summary>
		/// spCALLS_New
		/// </summary>
		public void spCALLS_New(ref Guid gID, string sNAME, DateTime dtDATE_TIME, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCALLS_New
		/// <summary>
		/// spCALLS_New
		/// </summary>
		public IDbCommand cmdCALLS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCALLS_SmsReminderSent
		/// <summary>
		/// spCALLS_SmsReminderSent
		/// </summary>
		public void spCALLS_SmsReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_SmsReminderSent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_SmsReminderSent
		/// <summary>
		/// spCALLS_SmsReminderSent
		/// </summary>
		public void spCALLS_SmsReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_SmsReminderSent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_SmsReminderSent
		/// <summary>
		/// spCALLS_SmsReminderSent
		/// </summary>
		public IDbCommand cmdCALLS_SmsReminderSent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_SmsReminderSent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_Undelete
		/// <summary>
		/// spCALLS_Undelete
		/// </summary>
		public void spCALLS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_Undelete
		/// <summary>
		/// spCALLS_Undelete
		/// </summary>
		public void spCALLS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_Undelete
		/// <summary>
		/// spCALLS_Undelete
		/// </summary>
		public IDbCommand cmdCALLS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spCALLS_Update
		/// <summary>
		/// spCALLS_Update
		/// </summary>
		public void spCALLS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sSTATUS, string sDIRECTION, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, Int32 nEMAIL_REMINDER_TIME, bool bALL_DAY_EVENT, string sREPEAT_TYPE, Int32 nREPEAT_INTERVAL, string sREPEAT_DOW, DateTime dtREPEAT_UNTIL, Int32 nREPEAT_COUNT, Int32 nSMS_REMINDER_TIME, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 , 150);
							IDbDataParameter parDURATION_HOURS      = Sql.AddParameter(cmd, "@DURATION_HOURS"     , nDURATION_HOURS       );
							IDbDataParameter parDURATION_MINUTES    = Sql.AddParameter(cmd, "@DURATION_MINUTES"   , nDURATION_MINUTES     );
							IDbDataParameter parDATE_TIME           = Sql.AddParameter(cmd, "@DATE_TIME"          , dtDATE_TIME           );
							IDbDataParameter parPARENT_TYPE         = Sql.AddParameter(cmd, "@PARENT_TYPE"        , sPARENT_TYPE          ,  25);
							IDbDataParameter parPARENT_ID           = Sql.AddParameter(cmd, "@PARENT_ID"          , gPARENT_ID            );
							IDbDataParameter parSTATUS              = Sql.AddParameter(cmd, "@STATUS"             , sSTATUS               ,  25);
							IDbDataParameter parDIRECTION           = Sql.AddParameter(cmd, "@DIRECTION"          , sDIRECTION            ,  25);
							IDbDataParameter parREMINDER_TIME       = Sql.AddParameter(cmd, "@REMINDER_TIME"      , nREMINDER_TIME        );
							IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
							IDbDataParameter parINVITEE_LIST        = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"       , sINVITEE_LIST         , 8000);
							IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
							IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
							IDbDataParameter parEMAIL_REMINDER_TIME = Sql.AddParameter(cmd, "@EMAIL_REMINDER_TIME", nEMAIL_REMINDER_TIME  );
							IDbDataParameter parALL_DAY_EVENT       = Sql.AddParameter(cmd, "@ALL_DAY_EVENT"      , bALL_DAY_EVENT        );
							IDbDataParameter parREPEAT_TYPE         = Sql.AddParameter(cmd, "@REPEAT_TYPE"        , sREPEAT_TYPE          ,  25);
							IDbDataParameter parREPEAT_INTERVAL     = Sql.AddParameter(cmd, "@REPEAT_INTERVAL"    , nREPEAT_INTERVAL      );
							IDbDataParameter parREPEAT_DOW          = Sql.AddParameter(cmd, "@REPEAT_DOW"         , sREPEAT_DOW           ,   7);
							IDbDataParameter parREPEAT_UNTIL        = Sql.AddParameter(cmd, "@REPEAT_UNTIL"       , dtREPEAT_UNTIL        );
							IDbDataParameter parREPEAT_COUNT        = Sql.AddParameter(cmd, "@REPEAT_COUNT"       , nREPEAT_COUNT         );
							IDbDataParameter parSMS_REMINDER_TIME   = Sql.AddParameter(cmd, "@SMS_REMINDER_TIME"  , nSMS_REMINDER_TIME    );
							IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
							IDbDataParameter parIS_PRIVATE          = Sql.AddParameter(cmd, "@IS_PRIVATE"         , bIS_PRIVATE           );
							IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_Update
		/// <summary>
		/// spCALLS_Update
		/// </summary>
		public void spCALLS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sSTATUS, string sDIRECTION, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, Int32 nEMAIL_REMINDER_TIME, bool bALL_DAY_EVENT, string sREPEAT_TYPE, Int32 nREPEAT_INTERVAL, string sREPEAT_DOW, DateTime dtREPEAT_UNTIL, Int32 nREPEAT_COUNT, Int32 nSMS_REMINDER_TIME, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 , 150);
				IDbDataParameter parDURATION_HOURS      = Sql.AddParameter(cmd, "@DURATION_HOURS"     , nDURATION_HOURS       );
				IDbDataParameter parDURATION_MINUTES    = Sql.AddParameter(cmd, "@DURATION_MINUTES"   , nDURATION_MINUTES     );
				IDbDataParameter parDATE_TIME           = Sql.AddParameter(cmd, "@DATE_TIME"          , dtDATE_TIME           );
				IDbDataParameter parPARENT_TYPE         = Sql.AddParameter(cmd, "@PARENT_TYPE"        , sPARENT_TYPE          ,  25);
				IDbDataParameter parPARENT_ID           = Sql.AddParameter(cmd, "@PARENT_ID"          , gPARENT_ID            );
				IDbDataParameter parSTATUS              = Sql.AddParameter(cmd, "@STATUS"             , sSTATUS               ,  25);
				IDbDataParameter parDIRECTION           = Sql.AddParameter(cmd, "@DIRECTION"          , sDIRECTION            ,  25);
				IDbDataParameter parREMINDER_TIME       = Sql.AddParameter(cmd, "@REMINDER_TIME"      , nREMINDER_TIME        );
				IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
				IDbDataParameter parINVITEE_LIST        = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"       , sINVITEE_LIST         , 8000);
				IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
				IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
				IDbDataParameter parEMAIL_REMINDER_TIME = Sql.AddParameter(cmd, "@EMAIL_REMINDER_TIME", nEMAIL_REMINDER_TIME  );
				IDbDataParameter parALL_DAY_EVENT       = Sql.AddParameter(cmd, "@ALL_DAY_EVENT"      , bALL_DAY_EVENT        );
				IDbDataParameter parREPEAT_TYPE         = Sql.AddParameter(cmd, "@REPEAT_TYPE"        , sREPEAT_TYPE          ,  25);
				IDbDataParameter parREPEAT_INTERVAL     = Sql.AddParameter(cmd, "@REPEAT_INTERVAL"    , nREPEAT_INTERVAL      );
				IDbDataParameter parREPEAT_DOW          = Sql.AddParameter(cmd, "@REPEAT_DOW"         , sREPEAT_DOW           ,   7);
				IDbDataParameter parREPEAT_UNTIL        = Sql.AddParameter(cmd, "@REPEAT_UNTIL"       , dtREPEAT_UNTIL        );
				IDbDataParameter parREPEAT_COUNT        = Sql.AddParameter(cmd, "@REPEAT_COUNT"       , nREPEAT_COUNT         );
				IDbDataParameter parSMS_REMINDER_TIME   = Sql.AddParameter(cmd, "@SMS_REMINDER_TIME"  , nSMS_REMINDER_TIME    );
				IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
				IDbDataParameter parIS_PRIVATE          = Sql.AddParameter(cmd, "@IS_PRIVATE"         , bIS_PRIVATE           );
				IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCALLS_Update
		/// <summary>
		/// spCALLS_Update
		/// </summary>
		public IDbCommand cmdCALLS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID    = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"   , "Guid",  16);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string", 150);
			IDbDataParameter parDURATION_HOURS      = Sql.CreateParameter(cmd, "@DURATION_HOURS"     , "Int32",   4);
			IDbDataParameter parDURATION_MINUTES    = Sql.CreateParameter(cmd, "@DURATION_MINUTES"   , "Int32",   4);
			IDbDataParameter parDATE_TIME           = Sql.CreateParameter(cmd, "@DATE_TIME"          , "DateTime",   8);
			IDbDataParameter parPARENT_TYPE         = Sql.CreateParameter(cmd, "@PARENT_TYPE"        , "string",  25);
			IDbDataParameter parPARENT_ID           = Sql.CreateParameter(cmd, "@PARENT_ID"          , "Guid",  16);
			IDbDataParameter parSTATUS              = Sql.CreateParameter(cmd, "@STATUS"             , "string",  25);
			IDbDataParameter parDIRECTION           = Sql.CreateParameter(cmd, "@DIRECTION"          , "string",  25);
			IDbDataParameter parREMINDER_TIME       = Sql.CreateParameter(cmd, "@REMINDER_TIME"      , "Int32",   4);
			IDbDataParameter parDESCRIPTION         = Sql.CreateParameter(cmd, "@DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parINVITEE_LIST        = Sql.CreateParameter(cmd, "@INVITEE_LIST"       , "ansistring", 8000);
			IDbDataParameter parTEAM_ID             = Sql.CreateParameter(cmd, "@TEAM_ID"            , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST       = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"      , "ansistring", 8000);
			IDbDataParameter parEMAIL_REMINDER_TIME = Sql.CreateParameter(cmd, "@EMAIL_REMINDER_TIME", "Int32",   4);
			IDbDataParameter parALL_DAY_EVENT       = Sql.CreateParameter(cmd, "@ALL_DAY_EVENT"      , "bool",   1);
			IDbDataParameter parREPEAT_TYPE         = Sql.CreateParameter(cmd, "@REPEAT_TYPE"        , "string",  25);
			IDbDataParameter parREPEAT_INTERVAL     = Sql.CreateParameter(cmd, "@REPEAT_INTERVAL"    , "Int32",   4);
			IDbDataParameter parREPEAT_DOW          = Sql.CreateParameter(cmd, "@REPEAT_DOW"         , "string",   7);
			IDbDataParameter parREPEAT_UNTIL        = Sql.CreateParameter(cmd, "@REPEAT_UNTIL"       , "DateTime",   8);
			IDbDataParameter parREPEAT_COUNT        = Sql.CreateParameter(cmd, "@REPEAT_COUNT"       , "Int32",   4);
			IDbDataParameter parSMS_REMINDER_TIME   = Sql.CreateParameter(cmd, "@SMS_REMINDER_TIME"  , "Int32",   4);
			IDbDataParameter parTAG_SET_NAME        = Sql.CreateParameter(cmd, "@TAG_SET_NAME"       , "string", 4000);
			IDbDataParameter parIS_PRIVATE          = Sql.CreateParameter(cmd, "@IS_PRIVATE"         , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST   = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"  , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCALLS_UpdateAcceptStatus
		/// <summary>
		/// spCALLS_UpdateAcceptStatus
		/// </summary>
		public void spCALLS_UpdateAcceptStatus(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_UpdateAcceptStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_UpdateAcceptStatus
		/// <summary>
		/// spCALLS_UpdateAcceptStatus
		/// </summary>
		public void spCALLS_UpdateAcceptStatus(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_UpdateAcceptStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_UpdateAcceptStatus
		/// <summary>
		/// spCALLS_UpdateAcceptStatus
		/// </summary>
		public IDbCommand cmdCALLS_UpdateAcceptStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_UpdateAcceptStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spCALLS_USERS_Delete
		/// <summary>
		/// spCALLS_USERS_Delete
		/// </summary>
		public void spCALLS_USERS_Delete(Guid gCALL_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_USERS_Delete
		/// <summary>
		/// spCALLS_USERS_Delete
		/// </summary>
		public void spCALLS_USERS_Delete(Guid gCALL_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_USERS_Delete
		/// <summary>
		/// spCALLS_USERS_Delete
		/// </summary>
		public IDbCommand cmdCALLS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCALL_ID          = Sql.CreateParameter(cmd, "@CALL_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCALLS_USERS_Update
		/// <summary>
		/// spCALLS_USERS_Update
		/// </summary>
		public void spCALLS_USERS_Update(Guid gCALL_ID, Guid gUSER_ID, bool bREQUIRED, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCALLS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCALLS_USERS_Update
		/// <summary>
		/// spCALLS_USERS_Update
		/// </summary>
		public void spCALLS_USERS_Update(Guid gCALL_ID, Guid gUSER_ID, bool bREQUIRED, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCALLS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCALL_ID          = Sql.AddParameter(cmd, "@CALL_ID"         , gCALL_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCALLS_USERS_Update
		/// <summary>
		/// spCALLS_USERS_Update
		/// </summary>
		public IDbCommand cmdCALLS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCALLS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCALL_ID          = Sql.CreateParameter(cmd, "@CALL_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_LOG_BannerTracker
		/// <summary>
		/// spCAMPAIGN_LOG_BannerTracker
		/// </summary>
		public void spCAMPAIGN_LOG_BannerTracker(string sACTIVITY_TYPE, Guid gCAMPAIGN_TRKRS_ID, string sMORE_INFORMATION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_LOG_BannerTracker";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parACTIVITY_TYPE     = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"    , sACTIVITY_TYPE      ,  25);
							IDbDataParameter parCAMPAIGN_TRKRS_ID = Sql.AddParameter(cmd, "@CAMPAIGN_TRKRS_ID", gCAMPAIGN_TRKRS_ID  );
							IDbDataParameter parMORE_INFORMATION  = Sql.AddParameter(cmd, "@MORE_INFORMATION" , sMORE_INFORMATION   , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_LOG_BannerTracker
		/// <summary>
		/// spCAMPAIGN_LOG_BannerTracker
		/// </summary>
		public void spCAMPAIGN_LOG_BannerTracker(string sACTIVITY_TYPE, Guid gCAMPAIGN_TRKRS_ID, string sMORE_INFORMATION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_LOG_BannerTracker";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parACTIVITY_TYPE     = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"    , sACTIVITY_TYPE      ,  25);
				IDbDataParameter parCAMPAIGN_TRKRS_ID = Sql.AddParameter(cmd, "@CAMPAIGN_TRKRS_ID", gCAMPAIGN_TRKRS_ID  );
				IDbDataParameter parMORE_INFORMATION  = Sql.AddParameter(cmd, "@MORE_INFORMATION" , sMORE_INFORMATION   , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGN_LOG_BannerTracker
		/// <summary>
		/// spCAMPAIGN_LOG_BannerTracker
		/// </summary>
		public IDbCommand cmdCAMPAIGN_LOG_BannerTracker(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_LOG_BannerTracker";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parACTIVITY_TYPE     = Sql.CreateParameter(cmd, "@ACTIVITY_TYPE"    , "string",  25);
			IDbDataParameter parCAMPAIGN_TRKRS_ID = Sql.CreateParameter(cmd, "@CAMPAIGN_TRKRS_ID", "Guid",  16);
			IDbDataParameter parMORE_INFORMATION  = Sql.CreateParameter(cmd, "@MORE_INFORMATION" , "string", 100);
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_LOG_Delete
		/// <summary>
		/// spCAMPAIGN_LOG_Delete
		/// </summary>
		public void spCAMPAIGN_LOG_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_LOG_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_LOG_Delete
		/// <summary>
		/// spCAMPAIGN_LOG_Delete
		/// </summary>
		public void spCAMPAIGN_LOG_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_LOG_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGN_LOG_Delete
		/// <summary>
		/// spCAMPAIGN_LOG_Delete
		/// </summary>
		public IDbCommand cmdCAMPAIGN_LOG_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_LOG_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_LOG_InsertOnly
		/// <summary>
		/// spCAMPAIGN_LOG_InsertOnly
		/// </summary>
		public void spCAMPAIGN_LOG_InsertOnly(Guid gCAMPAIGN_ID, Guid gTARGET_TRACKER_KEY, Guid gTARGET_ID, string sTARGET_TYPE, string sACTIVITY_TYPE, Guid gRELATED_ID, string sRELATED_TYPE, Guid gMARKETING_ID, Guid gLIST_ID, string sMORE_INFORMATION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_LOG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
							IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
							IDbDataParameter parTARGET_ID          = Sql.AddParameter(cmd, "@TARGET_ID"         , gTARGET_ID           );
							IDbDataParameter parTARGET_TYPE        = Sql.AddParameter(cmd, "@TARGET_TYPE"       , sTARGET_TYPE         ,  25);
							IDbDataParameter parACTIVITY_TYPE      = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"     , sACTIVITY_TYPE       ,  25);
							IDbDataParameter parRELATED_ID         = Sql.AddParameter(cmd, "@RELATED_ID"        , gRELATED_ID          );
							IDbDataParameter parRELATED_TYPE       = Sql.AddParameter(cmd, "@RELATED_TYPE"      , sRELATED_TYPE        ,  25);
							IDbDataParameter parMARKETING_ID       = Sql.AddParameter(cmd, "@MARKETING_ID"      , gMARKETING_ID        );
							IDbDataParameter parLIST_ID            = Sql.AddParameter(cmd, "@LIST_ID"           , gLIST_ID             );
							IDbDataParameter parMORE_INFORMATION   = Sql.AddParameter(cmd, "@MORE_INFORMATION"  , sMORE_INFORMATION    , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_LOG_InsertOnly
		/// <summary>
		/// spCAMPAIGN_LOG_InsertOnly
		/// </summary>
		public void spCAMPAIGN_LOG_InsertOnly(Guid gCAMPAIGN_ID, Guid gTARGET_TRACKER_KEY, Guid gTARGET_ID, string sTARGET_TYPE, string sACTIVITY_TYPE, Guid gRELATED_ID, string sRELATED_TYPE, Guid gMARKETING_ID, Guid gLIST_ID, string sMORE_INFORMATION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_LOG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
				IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
				IDbDataParameter parTARGET_ID          = Sql.AddParameter(cmd, "@TARGET_ID"         , gTARGET_ID           );
				IDbDataParameter parTARGET_TYPE        = Sql.AddParameter(cmd, "@TARGET_TYPE"       , sTARGET_TYPE         ,  25);
				IDbDataParameter parACTIVITY_TYPE      = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"     , sACTIVITY_TYPE       ,  25);
				IDbDataParameter parRELATED_ID         = Sql.AddParameter(cmd, "@RELATED_ID"        , gRELATED_ID          );
				IDbDataParameter parRELATED_TYPE       = Sql.AddParameter(cmd, "@RELATED_TYPE"      , sRELATED_TYPE        ,  25);
				IDbDataParameter parMARKETING_ID       = Sql.AddParameter(cmd, "@MARKETING_ID"      , gMARKETING_ID        );
				IDbDataParameter parLIST_ID            = Sql.AddParameter(cmd, "@LIST_ID"           , gLIST_ID             );
				IDbDataParameter parMORE_INFORMATION   = Sql.AddParameter(cmd, "@MORE_INFORMATION"  , sMORE_INFORMATION    , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGN_LOG_InsertOnly
		/// <summary>
		/// spCAMPAIGN_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdCAMPAIGN_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_LOG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID        = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"       , "Guid",  16);
			IDbDataParameter parTARGET_TRACKER_KEY = Sql.CreateParameter(cmd, "@TARGET_TRACKER_KEY", "Guid",  16);
			IDbDataParameter parTARGET_ID          = Sql.CreateParameter(cmd, "@TARGET_ID"         , "Guid",  16);
			IDbDataParameter parTARGET_TYPE        = Sql.CreateParameter(cmd, "@TARGET_TYPE"       , "string",  25);
			IDbDataParameter parACTIVITY_TYPE      = Sql.CreateParameter(cmd, "@ACTIVITY_TYPE"     , "string",  25);
			IDbDataParameter parRELATED_ID         = Sql.CreateParameter(cmd, "@RELATED_ID"        , "Guid",  16);
			IDbDataParameter parRELATED_TYPE       = Sql.CreateParameter(cmd, "@RELATED_TYPE"      , "string",  25);
			IDbDataParameter parMARKETING_ID       = Sql.CreateParameter(cmd, "@MARKETING_ID"      , "Guid",  16);
			IDbDataParameter parLIST_ID            = Sql.CreateParameter(cmd, "@LIST_ID"           , "Guid",  16);
			IDbDataParameter parMORE_INFORMATION   = Sql.CreateParameter(cmd, "@MORE_INFORMATION"  , "string", 100);
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_LOG_Update
		/// <summary>
		/// spCAMPAIGN_LOG_Update
		/// </summary>
		public void spCAMPAIGN_LOG_Update(ref Guid gID, Guid gCAMPAIGN_ID, Guid gTARGET_TRACKER_KEY, Guid gTARGET_ID, string sTARGET_TYPE, string sACTIVITY_TYPE, DateTime dtACTIVITY_DATE, Guid gRELATED_ID, string sRELATED_TYPE, bool bARCHIVED, Int32 nHITS, Guid gLIST_ID, string sMORE_INFORMATION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_LOG_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
							IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
							IDbDataParameter parTARGET_ID          = Sql.AddParameter(cmd, "@TARGET_ID"         , gTARGET_ID           );
							IDbDataParameter parTARGET_TYPE        = Sql.AddParameter(cmd, "@TARGET_TYPE"       , sTARGET_TYPE         ,  25);
							IDbDataParameter parACTIVITY_TYPE      = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"     , sACTIVITY_TYPE       ,  25);
							IDbDataParameter parACTIVITY_DATE      = Sql.AddParameter(cmd, "@ACTIVITY_DATE"     , dtACTIVITY_DATE      );
							IDbDataParameter parRELATED_ID         = Sql.AddParameter(cmd, "@RELATED_ID"        , gRELATED_ID          );
							IDbDataParameter parRELATED_TYPE       = Sql.AddParameter(cmd, "@RELATED_TYPE"      , sRELATED_TYPE        ,  25);
							IDbDataParameter parARCHIVED           = Sql.AddParameter(cmd, "@ARCHIVED"          , bARCHIVED            );
							IDbDataParameter parHITS               = Sql.AddParameter(cmd, "@HITS"              , nHITS                );
							IDbDataParameter parLIST_ID            = Sql.AddParameter(cmd, "@LIST_ID"           , gLIST_ID             );
							IDbDataParameter parMORE_INFORMATION   = Sql.AddParameter(cmd, "@MORE_INFORMATION"  , sMORE_INFORMATION    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_LOG_Update
		/// <summary>
		/// spCAMPAIGN_LOG_Update
		/// </summary>
		public void spCAMPAIGN_LOG_Update(ref Guid gID, Guid gCAMPAIGN_ID, Guid gTARGET_TRACKER_KEY, Guid gTARGET_ID, string sTARGET_TYPE, string sACTIVITY_TYPE, DateTime dtACTIVITY_DATE, Guid gRELATED_ID, string sRELATED_TYPE, bool bARCHIVED, Int32 nHITS, Guid gLIST_ID, string sMORE_INFORMATION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_LOG_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
				IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
				IDbDataParameter parTARGET_ID          = Sql.AddParameter(cmd, "@TARGET_ID"         , gTARGET_ID           );
				IDbDataParameter parTARGET_TYPE        = Sql.AddParameter(cmd, "@TARGET_TYPE"       , sTARGET_TYPE         ,  25);
				IDbDataParameter parACTIVITY_TYPE      = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"     , sACTIVITY_TYPE       ,  25);
				IDbDataParameter parACTIVITY_DATE      = Sql.AddParameter(cmd, "@ACTIVITY_DATE"     , dtACTIVITY_DATE      );
				IDbDataParameter parRELATED_ID         = Sql.AddParameter(cmd, "@RELATED_ID"        , gRELATED_ID          );
				IDbDataParameter parRELATED_TYPE       = Sql.AddParameter(cmd, "@RELATED_TYPE"      , sRELATED_TYPE        ,  25);
				IDbDataParameter parARCHIVED           = Sql.AddParameter(cmd, "@ARCHIVED"          , bARCHIVED            );
				IDbDataParameter parHITS               = Sql.AddParameter(cmd, "@HITS"              , nHITS                );
				IDbDataParameter parLIST_ID            = Sql.AddParameter(cmd, "@LIST_ID"           , gLIST_ID             );
				IDbDataParameter parMORE_INFORMATION   = Sql.AddParameter(cmd, "@MORE_INFORMATION"  , sMORE_INFORMATION    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCAMPAIGN_LOG_Update
		/// <summary>
		/// spCAMPAIGN_LOG_Update
		/// </summary>
		public IDbCommand cmdCAMPAIGN_LOG_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_LOG_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID        = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"       , "Guid",  16);
			IDbDataParameter parTARGET_TRACKER_KEY = Sql.CreateParameter(cmd, "@TARGET_TRACKER_KEY", "Guid",  16);
			IDbDataParameter parTARGET_ID          = Sql.CreateParameter(cmd, "@TARGET_ID"         , "Guid",  16);
			IDbDataParameter parTARGET_TYPE        = Sql.CreateParameter(cmd, "@TARGET_TYPE"       , "string",  25);
			IDbDataParameter parACTIVITY_TYPE      = Sql.CreateParameter(cmd, "@ACTIVITY_TYPE"     , "string",  25);
			IDbDataParameter parACTIVITY_DATE      = Sql.CreateParameter(cmd, "@ACTIVITY_DATE"     , "DateTime",   8);
			IDbDataParameter parRELATED_ID         = Sql.CreateParameter(cmd, "@RELATED_ID"        , "Guid",  16);
			IDbDataParameter parRELATED_TYPE       = Sql.CreateParameter(cmd, "@RELATED_TYPE"      , "string",  25);
			IDbDataParameter parARCHIVED           = Sql.CreateParameter(cmd, "@ARCHIVED"          , "bool",   1);
			IDbDataParameter parHITS               = Sql.CreateParameter(cmd, "@HITS"              , "Int32",   4);
			IDbDataParameter parLIST_ID            = Sql.CreateParameter(cmd, "@LIST_ID"           , "Guid",  16);
			IDbDataParameter parMORE_INFORMATION   = Sql.CreateParameter(cmd, "@MORE_INFORMATION"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_LOG_UpdateTracker
		/// <summary>
		/// spCAMPAIGN_LOG_UpdateTracker
		/// </summary>
		public void spCAMPAIGN_LOG_UpdateTracker(Guid gTARGET_TRACKER_KEY, string sACTIVITY_TYPE, Guid gCAMPAIGN_TRKRS_ID, ref Guid gTARGET_ID, ref string sTARGET_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_LOG_UpdateTracker";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
							IDbDataParameter parACTIVITY_TYPE      = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"     , sACTIVITY_TYPE       ,  25);
							IDbDataParameter parCAMPAIGN_TRKRS_ID  = Sql.AddParameter(cmd, "@CAMPAIGN_TRKRS_ID" , gCAMPAIGN_TRKRS_ID   );
							IDbDataParameter parTARGET_ID          = Sql.AddParameter(cmd, "@TARGET_ID"         , gTARGET_ID           );
							IDbDataParameter parTARGET_TYPE        = Sql.AddParameter(cmd, "@TARGET_TYPE"       , sTARGET_TYPE         ,  25);
							parTARGET_ID.Direction = ParameterDirection.InputOutput;
							parTARGET_TYPE.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gTARGET_ID = Sql.ToGuid(parTARGET_ID.Value);
							sTARGET_TYPE = Sql.ToString(parTARGET_TYPE.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_LOG_UpdateTracker
		/// <summary>
		/// spCAMPAIGN_LOG_UpdateTracker
		/// </summary>
		public void spCAMPAIGN_LOG_UpdateTracker(Guid gTARGET_TRACKER_KEY, string sACTIVITY_TYPE, Guid gCAMPAIGN_TRKRS_ID, ref Guid gTARGET_ID, ref string sTARGET_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_LOG_UpdateTracker";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
				IDbDataParameter parACTIVITY_TYPE      = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"     , sACTIVITY_TYPE       ,  25);
				IDbDataParameter parCAMPAIGN_TRKRS_ID  = Sql.AddParameter(cmd, "@CAMPAIGN_TRKRS_ID" , gCAMPAIGN_TRKRS_ID   );
				IDbDataParameter parTARGET_ID          = Sql.AddParameter(cmd, "@TARGET_ID"         , gTARGET_ID           );
				IDbDataParameter parTARGET_TYPE        = Sql.AddParameter(cmd, "@TARGET_TYPE"       , sTARGET_TYPE         ,  25);
				parTARGET_ID.Direction = ParameterDirection.InputOutput;
				parTARGET_TYPE.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gTARGET_ID = Sql.ToGuid(parTARGET_ID.Value);
				sTARGET_TYPE = Sql.ToString(parTARGET_TYPE.Value);
			}
		}
		#endregion

		#region cmdCAMPAIGN_LOG_UpdateTracker
		/// <summary>
		/// spCAMPAIGN_LOG_UpdateTracker
		/// </summary>
		public IDbCommand cmdCAMPAIGN_LOG_UpdateTracker(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_LOG_UpdateTracker";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parTARGET_TRACKER_KEY = Sql.CreateParameter(cmd, "@TARGET_TRACKER_KEY", "Guid",  16);
			IDbDataParameter parACTIVITY_TYPE      = Sql.CreateParameter(cmd, "@ACTIVITY_TYPE"     , "string",  25);
			IDbDataParameter parCAMPAIGN_TRKRS_ID  = Sql.CreateParameter(cmd, "@CAMPAIGN_TRKRS_ID" , "Guid",  16);
			IDbDataParameter parTARGET_ID          = Sql.CreateParameter(cmd, "@TARGET_ID"         , "Guid",  16);
			IDbDataParameter parTARGET_TYPE        = Sql.CreateParameter(cmd, "@TARGET_TYPE"       , "string",  25);
			parTARGET_ID.Direction = ParameterDirection.InputOutput;
			parTARGET_TYPE.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_TRKRS_Delete
		/// <summary>
		/// spCAMPAIGN_TRKRS_Delete
		/// </summary>
		public void spCAMPAIGN_TRKRS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_TRKRS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_TRKRS_Delete
		/// <summary>
		/// spCAMPAIGN_TRKRS_Delete
		/// </summary>
		public void spCAMPAIGN_TRKRS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_TRKRS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGN_TRKRS_Delete
		/// <summary>
		/// spCAMPAIGN_TRKRS_Delete
		/// </summary>
		public IDbCommand cmdCAMPAIGN_TRKRS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_TRKRS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_TRKRS_Duplicate
		/// <summary>
		/// spCAMPAIGN_TRKRS_Duplicate
		/// </summary>
		public void spCAMPAIGN_TRKRS_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, Guid gCAMPAIGN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_TRKRS_Duplicate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_TRKRS_Duplicate
		/// <summary>
		/// spCAMPAIGN_TRKRS_Duplicate
		/// </summary>
		public void spCAMPAIGN_TRKRS_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, Guid gCAMPAIGN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_TRKRS_Duplicate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCAMPAIGN_TRKRS_Duplicate
		/// <summary>
		/// spCAMPAIGN_TRKRS_Duplicate
		/// </summary>
		public IDbCommand cmdCAMPAIGN_TRKRS_Duplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_TRKRS_Duplicate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDUPLICATE_ID     = Sql.CreateParameter(cmd, "@DUPLICATE_ID"    , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCAMPAIGN_TRKRS_Update
		/// <summary>
		/// spCAMPAIGN_TRKRS_Update
		/// </summary>
		public void spCAMPAIGN_TRKRS_Update(ref Guid gID, string sTRACKER_NAME, string sTRACKER_URL, Guid gCAMPAIGN_ID, bool bIS_OPTOUT, string sTRACKER_KEY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGN_TRKRS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTRACKER_NAME     = Sql.AddParameter(cmd, "@TRACKER_NAME"    , sTRACKER_NAME      ,  30);
							IDbDataParameter parTRACKER_URL      = Sql.AddParameter(cmd, "@TRACKER_URL"     , sTRACKER_URL       , 255);
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							IDbDataParameter parIS_OPTOUT        = Sql.AddParameter(cmd, "@IS_OPTOUT"       , bIS_OPTOUT         );
							IDbDataParameter parTRACKER_KEY      = Sql.AddParameter(cmd, "@TRACKER_KEY"     , sTRACKER_KEY       ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGN_TRKRS_Update
		/// <summary>
		/// spCAMPAIGN_TRKRS_Update
		/// </summary>
		public void spCAMPAIGN_TRKRS_Update(ref Guid gID, string sTRACKER_NAME, string sTRACKER_URL, Guid gCAMPAIGN_ID, bool bIS_OPTOUT, string sTRACKER_KEY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGN_TRKRS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTRACKER_NAME     = Sql.AddParameter(cmd, "@TRACKER_NAME"    , sTRACKER_NAME      ,  30);
				IDbDataParameter parTRACKER_URL      = Sql.AddParameter(cmd, "@TRACKER_URL"     , sTRACKER_URL       , 255);
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				IDbDataParameter parIS_OPTOUT        = Sql.AddParameter(cmd, "@IS_OPTOUT"       , bIS_OPTOUT         );
				IDbDataParameter parTRACKER_KEY      = Sql.AddParameter(cmd, "@TRACKER_KEY"     , sTRACKER_KEY       ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCAMPAIGN_TRKRS_Update
		/// <summary>
		/// spCAMPAIGN_TRKRS_Update
		/// </summary>
		public IDbCommand cmdCAMPAIGN_TRKRS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGN_TRKRS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTRACKER_NAME     = Sql.CreateParameter(cmd, "@TRACKER_NAME"    , "string",  30);
			IDbDataParameter parTRACKER_URL      = Sql.CreateParameter(cmd, "@TRACKER_URL"     , "string", 255);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			IDbDataParameter parIS_OPTOUT        = Sql.CreateParameter(cmd, "@IS_OPTOUT"       , "bool",   1);
			IDbDataParameter parTRACKER_KEY      = Sql.CreateParameter(cmd, "@TRACKER_KEY"     , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_Delete
		/// <summary>
		/// spCAMPAIGNS_Delete
		/// </summary>
		public void spCAMPAIGNS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_Delete
		/// <summary>
		/// spCAMPAIGNS_Delete
		/// </summary>
		public void spCAMPAIGNS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_Delete
		/// <summary>
		/// spCAMPAIGNS_Delete
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_DeleteTestEntries
		/// <summary>
		/// spCAMPAIGNS_DeleteTestEntries
		/// </summary>
		public void spCAMPAIGNS_DeleteTestEntries(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_DeleteTestEntries";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_DeleteTestEntries
		/// <summary>
		/// spCAMPAIGNS_DeleteTestEntries
		/// </summary>
		public void spCAMPAIGNS_DeleteTestEntries(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_DeleteTestEntries";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_DeleteTestEntries
		/// <summary>
		/// spCAMPAIGNS_DeleteTestEntries
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_DeleteTestEntries(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_DeleteTestEntries";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_Duplicate
		/// <summary>
		/// spCAMPAIGNS_Duplicate
		/// </summary>
		public void spCAMPAIGNS_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, string sCOPY_OF)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_Duplicate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
							IDbDataParameter parCOPY_OF          = Sql.AddParameter(cmd, "@COPY_OF"         , sCOPY_OF           ,  50);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_Duplicate
		/// <summary>
		/// spCAMPAIGNS_Duplicate
		/// </summary>
		public void spCAMPAIGNS_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, string sCOPY_OF, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_Duplicate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
				IDbDataParameter parCOPY_OF          = Sql.AddParameter(cmd, "@COPY_OF"         , sCOPY_OF           ,  50);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCAMPAIGNS_Duplicate
		/// <summary>
		/// spCAMPAIGNS_Duplicate
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_Duplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_Duplicate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDUPLICATE_ID     = Sql.CreateParameter(cmd, "@DUPLICATE_ID"    , "Guid",  16);
			IDbDataParameter parCOPY_OF          = Sql.CreateParameter(cmd, "@COPY_OF"         , "string",  50);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_GenerateCalls
		/// <summary>
		/// spCAMPAIGNS_GenerateCalls
		/// </summary>
		public void spCAMPAIGNS_GenerateCalls(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_GenerateCalls";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_GenerateCalls
		/// <summary>
		/// spCAMPAIGNS_GenerateCalls
		/// </summary>
		public void spCAMPAIGNS_GenerateCalls(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_GenerateCalls";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_GenerateCalls
		/// <summary>
		/// spCAMPAIGNS_GenerateCalls
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_GenerateCalls(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_GenerateCalls";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_InvalidEmail
		/// <summary>
		/// spCAMPAIGNS_InvalidEmail
		/// </summary>
		public void spCAMPAIGNS_InvalidEmail(Guid gRELATED_ID, string sRELATED_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_InvalidEmail";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_InvalidEmail
		/// <summary>
		/// spCAMPAIGNS_InvalidEmail
		/// </summary>
		public void spCAMPAIGNS_InvalidEmail(Guid gRELATED_ID, string sRELATED_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_InvalidEmail";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_InvalidEmail
		/// <summary>
		/// spCAMPAIGNS_InvalidEmail
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_InvalidEmail(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_InvalidEmail";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_TYPE     = Sql.CreateParameter(cmd, "@RELATED_TYPE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_MassDelete
		/// <summary>
		/// spCAMPAIGNS_MassDelete
		/// </summary>
		public void spCAMPAIGNS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_MassDelete
		/// <summary>
		/// spCAMPAIGNS_MassDelete
		/// </summary>
		public void spCAMPAIGNS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_MassDelete
		/// <summary>
		/// spCAMPAIGNS_MassDelete
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_MassUpdate
		/// <summary>
		/// spCAMPAIGNS_MassUpdate
		/// </summary>
		public void spCAMPAIGNS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, DateTime dtSTART_DATE, DateTime dtEND_DATE, string sSTATUS, string sCAMPAIGN_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parSTART_DATE        = Sql.AddParameter(cmd, "@START_DATE"       , dtSTART_DATE        );
							IDbDataParameter parEND_DATE          = Sql.AddParameter(cmd, "@END_DATE"         , dtEND_DATE          );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parCAMPAIGN_TYPE     = Sql.AddParameter(cmd, "@CAMPAIGN_TYPE"    , sCAMPAIGN_TYPE      ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_MassUpdate
		/// <summary>
		/// spCAMPAIGNS_MassUpdate
		/// </summary>
		public void spCAMPAIGNS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, DateTime dtSTART_DATE, DateTime dtEND_DATE, string sSTATUS, string sCAMPAIGN_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parSTART_DATE        = Sql.AddParameter(cmd, "@START_DATE"       , dtSTART_DATE        );
				IDbDataParameter parEND_DATE          = Sql.AddParameter(cmd, "@END_DATE"         , dtEND_DATE          );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parCAMPAIGN_TYPE     = Sql.AddParameter(cmd, "@CAMPAIGN_TYPE"    , sCAMPAIGN_TYPE      ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_MassUpdate
		/// <summary>
		/// spCAMPAIGNS_MassUpdate
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parSTART_DATE        = Sql.CreateParameter(cmd, "@START_DATE"       , "DateTime",   8);
			IDbDataParameter parEND_DATE          = Sql.CreateParameter(cmd, "@END_DATE"         , "DateTime",   8);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parCAMPAIGN_TYPE     = Sql.CreateParameter(cmd, "@CAMPAIGN_TYPE"    , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_New
		/// <summary>
		/// spCAMPAIGNS_New
		/// </summary>
		public void spCAMPAIGNS_New(ref Guid gID, string sNAME, DateTime dtEND_DATE, string sSTATUS, string sCAMPAIGN_TYPE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parEND_DATE          = Sql.AddParameter(cmd, "@END_DATE"         , dtEND_DATE          );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parCAMPAIGN_TYPE     = Sql.AddParameter(cmd, "@CAMPAIGN_TYPE"    , sCAMPAIGN_TYPE      ,  25);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_New
		/// <summary>
		/// spCAMPAIGNS_New
		/// </summary>
		public void spCAMPAIGNS_New(ref Guid gID, string sNAME, DateTime dtEND_DATE, string sSTATUS, string sCAMPAIGN_TYPE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parEND_DATE          = Sql.AddParameter(cmd, "@END_DATE"         , dtEND_DATE          );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parCAMPAIGN_TYPE     = Sql.AddParameter(cmd, "@CAMPAIGN_TYPE"    , sCAMPAIGN_TYPE      ,  25);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCAMPAIGNS_New
		/// <summary>
		/// spCAMPAIGNS_New
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parEND_DATE          = Sql.CreateParameter(cmd, "@END_DATE"         , "DateTime",   8);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parCAMPAIGN_TYPE     = Sql.CreateParameter(cmd, "@CAMPAIGN_TYPE"    , "string",  25);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_OptOut
		/// <summary>
		/// spCAMPAIGNS_OptOut
		/// </summary>
		public void spCAMPAIGNS_OptOut(Guid gRELATED_ID, string sRELATED_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_OptOut";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_OptOut
		/// <summary>
		/// spCAMPAIGNS_OptOut
		/// </summary>
		public void spCAMPAIGNS_OptOut(Guid gRELATED_ID, string sRELATED_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_OptOut";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_OptOut
		/// <summary>
		/// spCAMPAIGNS_OptOut
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_OptOut(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_OptOut";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_TYPE     = Sql.CreateParameter(cmd, "@RELATED_TYPE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_SendEmail
		/// <summary>
		/// spCAMPAIGNS_SendEmail
		/// </summary>
		public void spCAMPAIGNS_SendEmail(Guid gID, bool bTEST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_SendEmail";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTEST             = Sql.AddParameter(cmd, "@TEST"            , bTEST              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_SendEmail
		/// <summary>
		/// spCAMPAIGNS_SendEmail
		/// </summary>
		public void spCAMPAIGNS_SendEmail(Guid gID, bool bTEST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_SendEmail";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTEST             = Sql.AddParameter(cmd, "@TEST"            , bTEST              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_SendEmail
		/// <summary>
		/// spCAMPAIGNS_SendEmail
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_SendEmail(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_SendEmail";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTEST             = Sql.CreateParameter(cmd, "@TEST"            , "bool",   1);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_STREAM_InsertPost
		/// <summary>
		/// spCAMPAIGNS_STREAM_InsertPost
		/// </summary>
		public void spCAMPAIGNS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_STREAM_InsertPost
		/// <summary>
		/// spCAMPAIGNS_STREAM_InsertPost
		/// </summary>
		public void spCAMPAIGNS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_STREAM_InsertPost
		/// <summary>
		/// spCAMPAIGNS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_Undelete
		/// <summary>
		/// spCAMPAIGNS_Undelete
		/// </summary>
		public void spCAMPAIGNS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_Undelete
		/// <summary>
		/// spCAMPAIGNS_Undelete
		/// </summary>
		public void spCAMPAIGNS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_Undelete
		/// <summary>
		/// spCAMPAIGNS_Undelete
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_Update
		/// <summary>
		/// spCAMPAIGNS_Update
		/// </summary>
		public void spCAMPAIGNS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sREFER_URL, string sTRACKER_TEXT, DateTime dtSTART_DATE, DateTime dtEND_DATE, string sSTATUS, decimal dBUDGET, decimal dEXPECTED_COST, decimal dACTUAL_COST, decimal dEXPECTED_REVENUE, string sCAMPAIGN_TYPE, string sOBJECTIVE, string sCONTENT, Guid gCURRENCY_ID, Int32 nIMPRESSIONS, string sFREQUENCY, string sTRACKER_KEY, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, string sCAMPAIGN_NUMBER, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parREFER_URL         = Sql.AddParameter(cmd, "@REFER_URL"        , sREFER_URL          , 255);
							IDbDataParameter parTRACKER_TEXT      = Sql.AddParameter(cmd, "@TRACKER_TEXT"     , sTRACKER_TEXT       , 255);
							IDbDataParameter parSTART_DATE        = Sql.AddParameter(cmd, "@START_DATE"       , dtSTART_DATE        );
							IDbDataParameter parEND_DATE          = Sql.AddParameter(cmd, "@END_DATE"         , dtEND_DATE          );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parBUDGET            = Sql.AddParameter(cmd, "@BUDGET"           , dBUDGET             );
							IDbDataParameter parEXPECTED_COST     = Sql.AddParameter(cmd, "@EXPECTED_COST"    , dEXPECTED_COST      );
							IDbDataParameter parACTUAL_COST       = Sql.AddParameter(cmd, "@ACTUAL_COST"      , dACTUAL_COST        );
							IDbDataParameter parEXPECTED_REVENUE  = Sql.AddParameter(cmd, "@EXPECTED_REVENUE" , dEXPECTED_REVENUE   );
							IDbDataParameter parCAMPAIGN_TYPE     = Sql.AddParameter(cmd, "@CAMPAIGN_TYPE"    , sCAMPAIGN_TYPE      ,  25);
							IDbDataParameter parOBJECTIVE         = Sql.AddParameter(cmd, "@OBJECTIVE"        , sOBJECTIVE          );
							IDbDataParameter parCONTENT           = Sql.AddParameter(cmd, "@CONTENT"          , sCONTENT            );
							IDbDataParameter parCURRENCY_ID       = Sql.AddParameter(cmd, "@CURRENCY_ID"      , gCURRENCY_ID        );
							IDbDataParameter parIMPRESSIONS       = Sql.AddParameter(cmd, "@IMPRESSIONS"      , nIMPRESSIONS        );
							IDbDataParameter parFREQUENCY         = Sql.AddParameter(cmd, "@FREQUENCY"        , sFREQUENCY          ,  25);
							IDbDataParameter parTRACKER_KEY       = Sql.AddParameter(cmd, "@TRACKER_KEY"      , sTRACKER_KEY        ,  30);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parCAMPAIGN_NUMBER   = Sql.AddParameter(cmd, "@CAMPAIGN_NUMBER"  , sCAMPAIGN_NUMBER    ,  30);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_Update
		/// <summary>
		/// spCAMPAIGNS_Update
		/// </summary>
		public void spCAMPAIGNS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sREFER_URL, string sTRACKER_TEXT, DateTime dtSTART_DATE, DateTime dtEND_DATE, string sSTATUS, decimal dBUDGET, decimal dEXPECTED_COST, decimal dACTUAL_COST, decimal dEXPECTED_REVENUE, string sCAMPAIGN_TYPE, string sOBJECTIVE, string sCONTENT, Guid gCURRENCY_ID, Int32 nIMPRESSIONS, string sFREQUENCY, string sTRACKER_KEY, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, string sCAMPAIGN_NUMBER, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parREFER_URL         = Sql.AddParameter(cmd, "@REFER_URL"        , sREFER_URL          , 255);
				IDbDataParameter parTRACKER_TEXT      = Sql.AddParameter(cmd, "@TRACKER_TEXT"     , sTRACKER_TEXT       , 255);
				IDbDataParameter parSTART_DATE        = Sql.AddParameter(cmd, "@START_DATE"       , dtSTART_DATE        );
				IDbDataParameter parEND_DATE          = Sql.AddParameter(cmd, "@END_DATE"         , dtEND_DATE          );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parBUDGET            = Sql.AddParameter(cmd, "@BUDGET"           , dBUDGET             );
				IDbDataParameter parEXPECTED_COST     = Sql.AddParameter(cmd, "@EXPECTED_COST"    , dEXPECTED_COST      );
				IDbDataParameter parACTUAL_COST       = Sql.AddParameter(cmd, "@ACTUAL_COST"      , dACTUAL_COST        );
				IDbDataParameter parEXPECTED_REVENUE  = Sql.AddParameter(cmd, "@EXPECTED_REVENUE" , dEXPECTED_REVENUE   );
				IDbDataParameter parCAMPAIGN_TYPE     = Sql.AddParameter(cmd, "@CAMPAIGN_TYPE"    , sCAMPAIGN_TYPE      ,  25);
				IDbDataParameter parOBJECTIVE         = Sql.AddParameter(cmd, "@OBJECTIVE"        , sOBJECTIVE          );
				IDbDataParameter parCONTENT           = Sql.AddParameter(cmd, "@CONTENT"          , sCONTENT            );
				IDbDataParameter parCURRENCY_ID       = Sql.AddParameter(cmd, "@CURRENCY_ID"      , gCURRENCY_ID        );
				IDbDataParameter parIMPRESSIONS       = Sql.AddParameter(cmd, "@IMPRESSIONS"      , nIMPRESSIONS        );
				IDbDataParameter parFREQUENCY         = Sql.AddParameter(cmd, "@FREQUENCY"        , sFREQUENCY          ,  25);
				IDbDataParameter parTRACKER_KEY       = Sql.AddParameter(cmd, "@TRACKER_KEY"      , sTRACKER_KEY        ,  30);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parCAMPAIGN_NUMBER   = Sql.AddParameter(cmd, "@CAMPAIGN_NUMBER"  , sCAMPAIGN_NUMBER    ,  30);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCAMPAIGNS_Update
		/// <summary>
		/// spCAMPAIGNS_Update
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parREFER_URL         = Sql.CreateParameter(cmd, "@REFER_URL"        , "string", 255);
			IDbDataParameter parTRACKER_TEXT      = Sql.CreateParameter(cmd, "@TRACKER_TEXT"     , "string", 255);
			IDbDataParameter parSTART_DATE        = Sql.CreateParameter(cmd, "@START_DATE"       , "DateTime",   8);
			IDbDataParameter parEND_DATE          = Sql.CreateParameter(cmd, "@END_DATE"         , "DateTime",   8);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parBUDGET            = Sql.CreateParameter(cmd, "@BUDGET"           , "decimal",   8);
			IDbDataParameter parEXPECTED_COST     = Sql.CreateParameter(cmd, "@EXPECTED_COST"    , "decimal",   8);
			IDbDataParameter parACTUAL_COST       = Sql.CreateParameter(cmd, "@ACTUAL_COST"      , "decimal",   8);
			IDbDataParameter parEXPECTED_REVENUE  = Sql.CreateParameter(cmd, "@EXPECTED_REVENUE" , "decimal",   8);
			IDbDataParameter parCAMPAIGN_TYPE     = Sql.CreateParameter(cmd, "@CAMPAIGN_TYPE"    , "string",  25);
			IDbDataParameter parOBJECTIVE         = Sql.CreateParameter(cmd, "@OBJECTIVE"        , "string", 104857600);
			IDbDataParameter parCONTENT           = Sql.CreateParameter(cmd, "@CONTENT"          , "string", 104857600);
			IDbDataParameter parCURRENCY_ID       = Sql.CreateParameter(cmd, "@CURRENCY_ID"      , "Guid",  16);
			IDbDataParameter parIMPRESSIONS       = Sql.CreateParameter(cmd, "@IMPRESSIONS"      , "Int32",   4);
			IDbDataParameter parFREQUENCY         = Sql.CreateParameter(cmd, "@FREQUENCY"        , "string",  25);
			IDbDataParameter parTRACKER_KEY       = Sql.CreateParameter(cmd, "@TRACKER_KEY"      , "string",  30);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parCAMPAIGN_NUMBER   = Sql.CreateParameter(cmd, "@CAMPAIGN_NUMBER"  , "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCAMPAIGNS_UpdateDynamic
		/// <summary>
		/// spCAMPAIGNS_UpdateDynamic
		/// </summary>
		public void spCAMPAIGNS_UpdateDynamic(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCAMPAIGNS_UpdateDynamic";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCAMPAIGNS_UpdateDynamic
		/// <summary>
		/// spCAMPAIGNS_UpdateDynamic
		/// </summary>
		public void spCAMPAIGNS_UpdateDynamic(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCAMPAIGNS_UpdateDynamic";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCAMPAIGNS_UpdateDynamic
		/// <summary>
		/// spCAMPAIGNS_UpdateDynamic
		/// </summary>
		public IDbCommand cmdCAMPAIGNS_UpdateDynamic(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCAMPAIGNS_UpdateDynamic";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_BUGS_Delete
		/// <summary>
		/// spCASES_BUGS_Delete
		/// </summary>
		public void spCASES_BUGS_Delete(Guid gCASE_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_BUGS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_BUGS_Delete
		/// <summary>
		/// spCASES_BUGS_Delete
		/// </summary>
		public void spCASES_BUGS_Delete(Guid gCASE_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_BUGS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_BUGS_Delete
		/// <summary>
		/// spCASES_BUGS_Delete
		/// </summary>
		public IDbCommand cmdCASES_BUGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_BUGS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_BUGS_Update
		/// <summary>
		/// spCASES_BUGS_Update
		/// </summary>
		public void spCASES_BUGS_Update(Guid gCASE_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_BUGS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_BUGS_Update
		/// <summary>
		/// spCASES_BUGS_Update
		/// </summary>
		public void spCASES_BUGS_Update(Guid gCASE_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_BUGS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_BUGS_Update
		/// <summary>
		/// spCASES_BUGS_Update
		/// </summary>
		public IDbCommand cmdCASES_BUGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_BUGS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_Delete
		/// <summary>
		/// spCASES_Delete
		/// </summary>
		public void spCASES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_Delete
		/// <summary>
		/// spCASES_Delete
		/// </summary>
		public void spCASES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_Delete
		/// <summary>
		/// spCASES_Delete
		/// </summary>
		public IDbCommand cmdCASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_MassDelete
		/// <summary>
		/// spCASES_MassDelete
		/// </summary>
		public void spCASES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_MassDelete
		/// <summary>
		/// spCASES_MassDelete
		/// </summary>
		public void spCASES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_MassDelete
		/// <summary>
		/// spCASES_MassDelete
		/// </summary>
		public IDbCommand cmdCASES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_MassSync
		/// <summary>
		/// spCASES_MassSync
		/// </summary>
		public void spCASES_MassSync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_MassSync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_MassSync
		/// <summary>
		/// spCASES_MassSync
		/// </summary>
		public void spCASES_MassSync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_MassSync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_MassSync
		/// <summary>
		/// spCASES_MassSync
		/// </summary>
		public IDbCommand cmdCASES_MassSync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_MassSync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_MassUnsync
		/// <summary>
		/// spCASES_MassUnsync
		/// </summary>
		public void spCASES_MassUnsync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_MassUnsync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_MassUnsync
		/// <summary>
		/// spCASES_MassUnsync
		/// </summary>
		public void spCASES_MassUnsync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_MassUnsync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_MassUnsync
		/// <summary>
		/// spCASES_MassUnsync
		/// </summary>
		public IDbCommand cmdCASES_MassUnsync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_MassUnsync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_MassUpdate
		/// <summary>
		/// spCASES_MassUpdate
		/// </summary>
		public void spCASES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sSTATUS, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_MassUpdate
		/// <summary>
		/// spCASES_MassUpdate
		/// </summary>
		public void spCASES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sSTATUS, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_MassUpdate
		/// <summary>
		/// spCASES_MassUpdate
		/// </summary>
		public IDbCommand cmdCASES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parACCOUNT_ID        = Sql.CreateParameter(cmd, "@ACCOUNT_ID"       , "Guid",  16);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spCASES_Merge
		/// <summary>
		/// spCASES_Merge
		/// </summary>
		public void spCASES_Merge(Guid gID, Guid gMERGE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_Merge";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_Merge
		/// <summary>
		/// spCASES_Merge
		/// </summary>
		public void spCASES_Merge(Guid gID, Guid gMERGE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_Merge";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_Merge
		/// <summary>
		/// spCASES_Merge
		/// </summary>
		public IDbCommand cmdCASES_Merge(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_Merge";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMERGE_ID         = Sql.CreateParameter(cmd, "@MERGE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_New
		/// <summary>
		/// spCASES_New
		/// </summary>
		public void spCASES_New(ref Guid gID, string sNAME, string sACCOUNT_NAME, Guid gACCOUNT_ID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gB2C_CONTACT_ID, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parACCOUNT_NAME      = Sql.AddParameter(cmd, "@ACCOUNT_NAME"     , sACCOUNT_NAME       , 100);
							IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parB2C_CONTACT_ID    = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"   , gB2C_CONTACT_ID     );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_New
		/// <summary>
		/// spCASES_New
		/// </summary>
		public void spCASES_New(ref Guid gID, string sNAME, string sACCOUNT_NAME, Guid gACCOUNT_ID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gB2C_CONTACT_ID, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parACCOUNT_NAME      = Sql.AddParameter(cmd, "@ACCOUNT_NAME"     , sACCOUNT_NAME       , 100);
				IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parB2C_CONTACT_ID    = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"   , gB2C_CONTACT_ID     );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCASES_New
		/// <summary>
		/// spCASES_New
		/// </summary>
		public IDbCommand cmdCASES_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parACCOUNT_NAME      = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"     , "string", 100);
			IDbDataParameter parACCOUNT_ID        = Sql.CreateParameter(cmd, "@ACCOUNT_ID"       , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parB2C_CONTACT_ID    = Sql.CreateParameter(cmd, "@B2C_CONTACT_ID"   , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCASES_STREAM_InsertPost
		/// <summary>
		/// spCASES_STREAM_InsertPost
		/// </summary>
		public void spCASES_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_STREAM_InsertPost
		/// <summary>
		/// spCASES_STREAM_InsertPost
		/// </summary>
		public void spCASES_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_STREAM_InsertPost
		/// <summary>
		/// spCASES_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdCASES_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_Undelete
		/// <summary>
		/// spCASES_Undelete
		/// </summary>
		public void spCASES_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_Undelete
		/// <summary>
		/// spCASES_Undelete
		/// </summary>
		public void spCASES_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_Undelete
		/// <summary>
		/// spCASES_Undelete
		/// </summary>
		public IDbCommand cmdCASES_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spCASES_Update
		/// <summary>
		/// spCASES_Update
		/// </summary>
		public void spCASES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sACCOUNT_NAME, Guid gACCOUNT_ID, string sSTATUS, string sPRIORITY, string sDESCRIPTION, string sRESOLUTION, string sPARENT_TYPE, Guid gPARENT_ID, string sCASE_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, string sTYPE, string sWORK_LOG, Guid gB2C_CONTACT_ID, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parACCOUNT_NAME      = Sql.AddParameter(cmd, "@ACCOUNT_NAME"     , sACCOUNT_NAME       , 100);
							IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parRESOLUTION        = Sql.AddParameter(cmd, "@RESOLUTION"       , sRESOLUTION         );
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parCASE_NUMBER       = Sql.AddParameter(cmd, "@CASE_NUMBER"      , sCASE_NUMBER        ,  30);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parEXCHANGE_FOLDER   = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"  , bEXCHANGE_FOLDER    );
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  25);
							IDbDataParameter parWORK_LOG          = Sql.AddParameter(cmd, "@WORK_LOG"         , sWORK_LOG           );
							IDbDataParameter parB2C_CONTACT_ID    = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"   , gB2C_CONTACT_ID     );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_Update
		/// <summary>
		/// spCASES_Update
		/// </summary>
		public void spCASES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sACCOUNT_NAME, Guid gACCOUNT_ID, string sSTATUS, string sPRIORITY, string sDESCRIPTION, string sRESOLUTION, string sPARENT_TYPE, Guid gPARENT_ID, string sCASE_NUMBER, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bEXCHANGE_FOLDER, string sTYPE, string sWORK_LOG, Guid gB2C_CONTACT_ID, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parACCOUNT_NAME      = Sql.AddParameter(cmd, "@ACCOUNT_NAME"     , sACCOUNT_NAME       , 100);
				IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parRESOLUTION        = Sql.AddParameter(cmd, "@RESOLUTION"       , sRESOLUTION         );
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parCASE_NUMBER       = Sql.AddParameter(cmd, "@CASE_NUMBER"      , sCASE_NUMBER        ,  30);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parEXCHANGE_FOLDER   = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"  , bEXCHANGE_FOLDER    );
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  25);
				IDbDataParameter parWORK_LOG          = Sql.AddParameter(cmd, "@WORK_LOG"         , sWORK_LOG           );
				IDbDataParameter parB2C_CONTACT_ID    = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"   , gB2C_CONTACT_ID     );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCASES_Update
		/// <summary>
		/// spCASES_Update
		/// </summary>
		public IDbCommand cmdCASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parACCOUNT_NAME      = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"     , "string", 100);
			IDbDataParameter parACCOUNT_ID        = Sql.CreateParameter(cmd, "@ACCOUNT_ID"       , "Guid",  16);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parRESOLUTION        = Sql.CreateParameter(cmd, "@RESOLUTION"       , "string", 104857600);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parCASE_NUMBER       = Sql.CreateParameter(cmd, "@CASE_NUMBER"      , "string",  30);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parEXCHANGE_FOLDER   = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"  , "bool",   1);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string",  25);
			IDbDataParameter parWORK_LOG          = Sql.CreateParameter(cmd, "@WORK_LOG"         , "string", 104857600);
			IDbDataParameter parB2C_CONTACT_ID    = Sql.CreateParameter(cmd, "@B2C_CONTACT_ID"   , "Guid",  16);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCASES_USERS_Delete
		/// <summary>
		/// spCASES_USERS_Delete
		/// </summary>
		public void spCASES_USERS_Delete(Guid gCASE_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_USERS_Delete
		/// <summary>
		/// spCASES_USERS_Delete
		/// </summary>
		public void spCASES_USERS_Delete(Guid gCASE_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_USERS_Delete
		/// <summary>
		/// spCASES_USERS_Delete
		/// </summary>
		public IDbCommand cmdCASES_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCASES_USERS_Update
		/// <summary>
		/// spCASES_USERS_Update
		/// </summary>
		public void spCASES_USERS_Update(Guid gCASE_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCASES_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCASES_USERS_Update
		/// <summary>
		/// spCASES_USERS_Update
		/// </summary>
		public void spCASES_USERS_Update(Guid gCASE_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCASES_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCASES_USERS_Update
		/// <summary>
		/// spCASES_USERS_Update
		/// </summary>
		public IDbCommand cmdCASES_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCASES_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCHAT_CHANNELS_Delete
		/// <summary>
		/// spCHAT_CHANNELS_Delete
		/// </summary>
		public void spCHAT_CHANNELS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCHAT_CHANNELS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCHAT_CHANNELS_Delete
		/// <summary>
		/// spCHAT_CHANNELS_Delete
		/// </summary>
		public void spCHAT_CHANNELS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCHAT_CHANNELS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCHAT_CHANNELS_Delete
		/// <summary>
		/// spCHAT_CHANNELS_Delete
		/// </summary>
		public IDbCommand cmdCHAT_CHANNELS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCHAT_CHANNELS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCHAT_CHANNELS_Update
		/// <summary>
		/// spCHAT_CHANNELS_Update
		/// </summary>
		public void spCHAT_CHANNELS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, Guid gPARENT_ID, string sPARENT_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCHAT_CHANNELS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCHAT_CHANNELS_Update
		/// <summary>
		/// spCHAT_CHANNELS_Update
		/// </summary>
		public void spCHAT_CHANNELS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, Guid gPARENT_ID, string sPARENT_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCHAT_CHANNELS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCHAT_CHANNELS_Update
		/// <summary>
		/// spCHAT_CHANNELS_Update
		/// </summary>
		public IDbCommand cmdCHAT_CHANNELS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCHAT_CHANNELS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCHAT_MESSAGES_Delete
		/// <summary>
		/// spCHAT_MESSAGES_Delete
		/// </summary>
		public void spCHAT_MESSAGES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCHAT_MESSAGES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCHAT_MESSAGES_Delete
		/// <summary>
		/// spCHAT_MESSAGES_Delete
		/// </summary>
		public void spCHAT_MESSAGES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCHAT_MESSAGES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCHAT_MESSAGES_Delete
		/// <summary>
		/// spCHAT_MESSAGES_Delete
		/// </summary>
		public IDbCommand cmdCHAT_MESSAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCHAT_MESSAGES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCHAT_MESSAGES_Update
		/// <summary>
		/// spCHAT_MESSAGES_Update
		/// </summary>
		public void spCHAT_MESSAGES_Update(ref Guid gID, Guid gCHAT_CHANNEL_ID, string sNAME, Guid gPARENT_ID, string sPARENT_TYPE, Guid gNOTE_ATTACHMENT_ID, string sDESCRIPTION, string sTAG_SET_NAME, bool bIS_PRIVATE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCHAT_MESSAGES_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parCHAT_CHANNEL_ID    = Sql.AddParameter(cmd, "@CHAT_CHANNEL_ID"   , gCHAT_CHANNEL_ID     );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 400);
							IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
							IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
							IDbDataParameter parNOTE_ATTACHMENT_ID = Sql.AddParameter(cmd, "@NOTE_ATTACHMENT_ID", gNOTE_ATTACHMENT_ID  );
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parTAG_SET_NAME       = Sql.AddParameter(cmd, "@TAG_SET_NAME"      , sTAG_SET_NAME        , 4000);
							IDbDataParameter parIS_PRIVATE         = Sql.AddParameter(cmd, "@IS_PRIVATE"        , bIS_PRIVATE          );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCHAT_MESSAGES_Update
		/// <summary>
		/// spCHAT_MESSAGES_Update
		/// </summary>
		public void spCHAT_MESSAGES_Update(ref Guid gID, Guid gCHAT_CHANNEL_ID, string sNAME, Guid gPARENT_ID, string sPARENT_TYPE, Guid gNOTE_ATTACHMENT_ID, string sDESCRIPTION, string sTAG_SET_NAME, bool bIS_PRIVATE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCHAT_MESSAGES_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parCHAT_CHANNEL_ID    = Sql.AddParameter(cmd, "@CHAT_CHANNEL_ID"   , gCHAT_CHANNEL_ID     );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 400);
				IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
				IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
				IDbDataParameter parNOTE_ATTACHMENT_ID = Sql.AddParameter(cmd, "@NOTE_ATTACHMENT_ID", gNOTE_ATTACHMENT_ID  );
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parTAG_SET_NAME       = Sql.AddParameter(cmd, "@TAG_SET_NAME"      , sTAG_SET_NAME        , 4000);
				IDbDataParameter parIS_PRIVATE         = Sql.AddParameter(cmd, "@IS_PRIVATE"        , bIS_PRIVATE          );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCHAT_MESSAGES_Update
		/// <summary>
		/// spCHAT_MESSAGES_Update
		/// </summary>
		public IDbCommand cmdCHAT_MESSAGES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCHAT_MESSAGES_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parCHAT_CHANNEL_ID    = Sql.CreateParameter(cmd, "@CHAT_CHANNEL_ID"   , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string", 400);
			IDbDataParameter parPARENT_ID          = Sql.CreateParameter(cmd, "@PARENT_ID"         , "Guid",  16);
			IDbDataParameter parPARENT_TYPE        = Sql.CreateParameter(cmd, "@PARENT_TYPE"       , "string",  25);
			IDbDataParameter parNOTE_ATTACHMENT_ID = Sql.CreateParameter(cmd, "@NOTE_ATTACHMENT_ID", "Guid",  16);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parTAG_SET_NAME       = Sql.CreateParameter(cmd, "@TAG_SET_NAME"      , "string", 4000);
			IDbDataParameter parIS_PRIVATE         = Sql.CreateParameter(cmd, "@IS_PRIVATE"        , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCONFIG_BusinessMode
		/// <summary>
		/// spCONFIG_BusinessMode
		/// </summary>
		public void spCONFIG_BusinessMode(string sBUSINESS_MODE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_BusinessMode";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBUSINESS_MODE    = Sql.AddParameter(cmd, "@BUSINESS_MODE"   , sBUSINESS_MODE     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_BusinessMode
		/// <summary>
		/// spCONFIG_BusinessMode
		/// </summary>
		public void spCONFIG_BusinessMode(string sBUSINESS_MODE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_BusinessMode";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBUSINESS_MODE    = Sql.AddParameter(cmd, "@BUSINESS_MODE"   , sBUSINESS_MODE     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_BusinessMode
		/// <summary>
		/// spCONFIG_BusinessMode
		/// </summary>
		public IDbCommand cmdCONFIG_BusinessMode(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_BusinessMode";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBUSINESS_MODE    = Sql.CreateParameter(cmd, "@BUSINESS_MODE"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spCONFIG_Delete
		/// <summary>
		/// spCONFIG_Delete
		/// </summary>
		public void spCONFIG_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_Delete
		/// <summary>
		/// spCONFIG_Delete
		/// </summary>
		public void spCONFIG_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_Delete
		/// <summary>
		/// spCONFIG_Delete
		/// </summary>
		public IDbCommand cmdCONFIG_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONFIG_InsertOnly
		/// <summary>
		/// spCONFIG_InsertOnly
		/// </summary>
		public void spCONFIG_InsertOnly(string sCATEGORY, string sNAME, string sVALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
							IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_InsertOnly
		/// <summary>
		/// spCONFIG_InsertOnly
		/// </summary>
		public void spCONFIG_InsertOnly(string sCATEGORY, string sNAME, string sVALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
				IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_InsertOnly
		/// <summary>
		/// spCONFIG_InsertOnly
		/// </summary>
		public IDbCommand cmdCONFIG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  32);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  60);
			IDbDataParameter parVALUE            = Sql.CreateParameter(cmd, "@VALUE"           , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spCONFIG_MassDelete
		/// <summary>
		/// spCONFIG_MassDelete
		/// </summary>
		public void spCONFIG_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_MassDelete
		/// <summary>
		/// spCONFIG_MassDelete
		/// </summary>
		public void spCONFIG_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_MassDelete
		/// <summary>
		/// spCONFIG_MassDelete
		/// </summary>
		public IDbCommand cmdCONFIG_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONFIG_OpportunitiesMode
		/// <summary>
		/// spCONFIG_OpportunitiesMode
		/// </summary>
		public void spCONFIG_OpportunitiesMode(string sOPPORTUNITIES_MODE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_OpportunitiesMode";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parOPPORTUNITIES_MODE = Sql.AddParameter(cmd, "@OPPORTUNITIES_MODE", sOPPORTUNITIES_MODE  ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_OpportunitiesMode
		/// <summary>
		/// spCONFIG_OpportunitiesMode
		/// </summary>
		public void spCONFIG_OpportunitiesMode(string sOPPORTUNITIES_MODE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_OpportunitiesMode";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parOPPORTUNITIES_MODE = Sql.AddParameter(cmd, "@OPPORTUNITIES_MODE", sOPPORTUNITIES_MODE  ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_OpportunitiesMode
		/// <summary>
		/// spCONFIG_OpportunitiesMode
		/// </summary>
		public IDbCommand cmdCONFIG_OpportunitiesMode(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_OpportunitiesMode";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parOPPORTUNITIES_MODE = Sql.CreateParameter(cmd, "@OPPORTUNITIES_MODE", "string",  25);
			return cmd;
		}
		#endregion

		#region spCONFIG_Update
		/// <summary>
		/// spCONFIG_Update
		/// </summary>
		public void spCONFIG_Update(string sCATEGORY, string sNAME, string sVALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
							IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_Update
		/// <summary>
		/// spCONFIG_Update
		/// </summary>
		public void spCONFIG_Update(string sCATEGORY, string sNAME, string sVALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
				IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_Update
		/// <summary>
		/// spCONFIG_Update
		/// </summary>
		public IDbCommand cmdCONFIG_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  32);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  60);
			IDbDataParameter parVALUE            = Sql.CreateParameter(cmd, "@VALUE"           , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spCONTACTS_BUGS_Delete
		/// <summary>
		/// spCONTACTS_BUGS_Delete
		/// </summary>
		public void spCONTACTS_BUGS_Delete(Guid gCONTACT_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_BUGS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_BUGS_Delete
		/// <summary>
		/// spCONTACTS_BUGS_Delete
		/// </summary>
		public void spCONTACTS_BUGS_Delete(Guid gCONTACT_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_BUGS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_BUGS_Delete
		/// <summary>
		/// spCONTACTS_BUGS_Delete
		/// </summary>
		public IDbCommand cmdCONTACTS_BUGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_BUGS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_BUGS_Update
		/// <summary>
		/// spCONTACTS_BUGS_Update
		/// </summary>
		public void spCONTACTS_BUGS_Update(Guid gCONTACT_ID, Guid gBUG_ID, string sCONTACT_ROLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_BUGS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_BUGS_Update
		/// <summary>
		/// spCONTACTS_BUGS_Update
		/// </summary>
		public void spCONTACTS_BUGS_Update(Guid gCONTACT_ID, Guid gBUG_ID, string sCONTACT_ROLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_BUGS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_BUGS_Update
		/// <summary>
		/// spCONTACTS_BUGS_Update
		/// </summary>
		public IDbCommand cmdCONTACTS_BUGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_BUGS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			IDbDataParameter parCONTACT_ROLE     = Sql.CreateParameter(cmd, "@CONTACT_ROLE"    , "string",  50);
			return cmd;
		}
		#endregion

		#region spCONTACTS_CASES_Delete
		/// <summary>
		/// spCONTACTS_CASES_Delete
		/// </summary>
		public void spCONTACTS_CASES_Delete(Guid gCONTACT_ID, Guid gCASE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_CASES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_CASES_Delete
		/// <summary>
		/// spCONTACTS_CASES_Delete
		/// </summary>
		public void spCONTACTS_CASES_Delete(Guid gCONTACT_ID, Guid gCASE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_CASES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_CASES_Delete
		/// <summary>
		/// spCONTACTS_CASES_Delete
		/// </summary>
		public IDbCommand cmdCONTACTS_CASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_CASES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_CASES_Update
		/// <summary>
		/// spCONTACTS_CASES_Update
		/// </summary>
		public void spCONTACTS_CASES_Update(Guid gCONTACT_ID, Guid gCASE_ID, string sCONTACT_ROLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_CASES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_CASES_Update
		/// <summary>
		/// spCONTACTS_CASES_Update
		/// </summary>
		public void spCONTACTS_CASES_Update(Guid gCONTACT_ID, Guid gCASE_ID, string sCONTACT_ROLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_CASES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_CASES_Update
		/// <summary>
		/// spCONTACTS_CASES_Update
		/// </summary>
		public IDbCommand cmdCONTACTS_CASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_CASES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parCONTACT_ROLE     = Sql.CreateParameter(cmd, "@CONTACT_ROLE"    , "string",  50);
			return cmd;
		}
		#endregion

		#region spCONTACTS_ConvertLead
		/// <summary>
		/// spCONTACTS_ConvertLead
		/// </summary>
		public void spCONTACTS_ConvertLead(ref Guid gID, Guid gLEAD_ID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, Guid gACCOUNT_ID, string sLEAD_SOURCE, string sTITLE, string sDEPARTMENT, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, Guid gOPPORTUNITY_ID, string sOPPORTUNITY_NAME, string sOPPORTUNITY_AMOUNT, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_ConvertLead";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  25);
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parOPPORTUNITY_ID             = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"            , gOPPORTUNITY_ID              );
							IDbDataParameter parOPPORTUNITY_NAME           = Sql.AddParameter(cmd, "@OPPORTUNITY_NAME"          , sOPPORTUNITY_NAME            , 255);
							IDbDataParameter parOPPORTUNITY_AMOUNT         = Sql.AddParameter(cmd, "@OPPORTUNITY_AMOUNT"        , sOPPORTUNITY_AMOUNT          ,  50);
							IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_ConvertLead
		/// <summary>
		/// spCONTACTS_ConvertLead
		/// </summary>
		public void spCONTACTS_ConvertLead(ref Guid gID, Guid gLEAD_ID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, Guid gACCOUNT_ID, string sLEAD_SOURCE, string sTITLE, string sDEPARTMENT, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, Guid gOPPORTUNITY_ID, string sOPPORTUNITY_NAME, string sOPPORTUNITY_AMOUNT, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_ConvertLead";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  25);
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parOPPORTUNITY_ID             = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"            , gOPPORTUNITY_ID              );
				IDbDataParameter parOPPORTUNITY_NAME           = Sql.AddParameter(cmd, "@OPPORTUNITY_NAME"          , sOPPORTUNITY_NAME            , 255);
				IDbDataParameter parOPPORTUNITY_AMOUNT         = Sql.AddParameter(cmd, "@OPPORTUNITY_AMOUNT"        , sOPPORTUNITY_AMOUNT          ,  50);
				IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCONTACTS_ConvertLead
		/// <summary>
		/// spCONTACTS_ConvertLead
		/// </summary>
		public IDbCommand cmdCONTACTS_ConvertLead(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_ConvertLead";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parLEAD_ID                    = Sql.CreateParameter(cmd, "@LEAD_ID"                   , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parACCOUNT_ID                 = Sql.CreateParameter(cmd, "@ACCOUNT_ID"                , "Guid",  16);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string",  25);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 100);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parOPPORTUNITY_ID             = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"            , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_NAME           = Sql.CreateParameter(cmd, "@OPPORTUNITY_NAME"          , "string", 255);
			IDbDataParameter parOPPORTUNITY_AMOUNT         = Sql.CreateParameter(cmd, "@OPPORTUNITY_AMOUNT"        , "string",  50);
			IDbDataParameter parCAMPAIGN_ID                = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"               , "Guid",  16);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCONTACTS_Delete
		/// <summary>
		/// spCONTACTS_Delete
		/// </summary>
		public void spCONTACTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_Delete
		/// <summary>
		/// spCONTACTS_Delete
		/// </summary>
		public void spCONTACTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_Delete
		/// <summary>
		/// spCONTACTS_Delete
		/// </summary>
		public IDbCommand cmdCONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_DIRECT_REPORTS_Delete
		/// <summary>
		/// spCONTACTS_DIRECT_REPORTS_Delete
		/// </summary>
		public void spCONTACTS_DIRECT_REPORTS_Delete(Guid gCONTACT_ID, Guid gREPORTS_TO_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Dele";
							else
								cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parREPORTS_TO_ID    = Sql.AddParameter(cmd, "@REPORTS_TO_ID"   , gREPORTS_TO_ID     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_DIRECT_REPORTS_Delete
		/// <summary>
		/// spCONTACTS_DIRECT_REPORTS_Delete
		/// </summary>
		public void spCONTACTS_DIRECT_REPORTS_Delete(Guid gCONTACT_ID, Guid gREPORTS_TO_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Dele";
				else
					cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parREPORTS_TO_ID    = Sql.AddParameter(cmd, "@REPORTS_TO_ID"   , gREPORTS_TO_ID     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_DIRECT_REPORTS_Delete
		/// <summary>
		/// spCONTACTS_DIRECT_REPORTS_Delete
		/// </summary>
		public IDbCommand cmdCONTACTS_DIRECT_REPORTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Dele";
			else
				cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parREPORTS_TO_ID    = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"   , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_DIRECT_REPORTS_Update
		/// <summary>
		/// spCONTACTS_DIRECT_REPORTS_Update
		/// </summary>
		public void spCONTACTS_DIRECT_REPORTS_Update(Guid gCONTACT_ID, Guid gREPORTS_TO_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Upda";
							else
								cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parREPORTS_TO_ID    = Sql.AddParameter(cmd, "@REPORTS_TO_ID"   , gREPORTS_TO_ID     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_DIRECT_REPORTS_Update
		/// <summary>
		/// spCONTACTS_DIRECT_REPORTS_Update
		/// </summary>
		public void spCONTACTS_DIRECT_REPORTS_Update(Guid gCONTACT_ID, Guid gREPORTS_TO_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Upda";
				else
					cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parREPORTS_TO_ID    = Sql.AddParameter(cmd, "@REPORTS_TO_ID"   , gREPORTS_TO_ID     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_DIRECT_REPORTS_Update
		/// <summary>
		/// spCONTACTS_DIRECT_REPORTS_Update
		/// </summary>
		public IDbCommand cmdCONTACTS_DIRECT_REPORTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Upda";
			else
				cmd.CommandText = "spCONTACTS_DIRECT_REPORTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parREPORTS_TO_ID    = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"   , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_DOCUMENTS_Delete
		/// <summary>
		/// spCONTACTS_DOCUMENTS_Delete
		/// </summary>
		public void spCONTACTS_DOCUMENTS_Delete(Guid gCONTACT_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_DOCUMENTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_DOCUMENTS_Delete
		/// <summary>
		/// spCONTACTS_DOCUMENTS_Delete
		/// </summary>
		public void spCONTACTS_DOCUMENTS_Delete(Guid gCONTACT_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_DOCUMENTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_DOCUMENTS_Delete
		/// <summary>
		/// spCONTACTS_DOCUMENTS_Delete
		/// </summary>
		public IDbCommand cmdCONTACTS_DOCUMENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_DOCUMENTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_DOCUMENTS_GetLatest
		/// <summary>
		/// spCONTACTS_DOCUMENTS_GetLatest
		/// </summary>
		public void spCONTACTS_DOCUMENTS_GetLatest(Guid gCONTACT_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_DOCUMENTS_GetLatest";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_DOCUMENTS_GetLatest
		/// <summary>
		/// spCONTACTS_DOCUMENTS_GetLatest
		/// </summary>
		public void spCONTACTS_DOCUMENTS_GetLatest(Guid gCONTACT_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_DOCUMENTS_GetLatest";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_DOCUMENTS_GetLatest
		/// <summary>
		/// spCONTACTS_DOCUMENTS_GetLatest
		/// </summary>
		public IDbCommand cmdCONTACTS_DOCUMENTS_GetLatest(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_DOCUMENTS_GetLatest";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_DOCUMENTS_Update
		/// <summary>
		/// spCONTACTS_DOCUMENTS_Update
		/// </summary>
		public void spCONTACTS_DOCUMENTS_Update(Guid gCONTACT_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_DOCUMENTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_DOCUMENTS_Update
		/// <summary>
		/// spCONTACTS_DOCUMENTS_Update
		/// </summary>
		public void spCONTACTS_DOCUMENTS_Update(Guid gCONTACT_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_DOCUMENTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_DOCUMENTS_Update
		/// <summary>
		/// spCONTACTS_DOCUMENTS_Update
		/// </summary>
		public IDbCommand cmdCONTACTS_DOCUMENTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_DOCUMENTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_Import
		/// <summary>
		/// spCONTACTS_Import
		/// </summary>
		public void spCONTACTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, Guid gACCOUNT_ID, string sLEAD_SOURCE, string sTITLE, string sDEPARTMENT, Guid gREPORTS_TO_ID, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, bool bSYNC_CONTACT, Guid gTEAM_ID, string sACCOUNT_NAME, string sTEAM_SET_LIST, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sPRIMARY_ADDRESS_STREET1, string sPRIMARY_ADDRESS_STREET2, string sPRIMARY_ADDRESS_STREET3, string sALT_ADDRESS_STREET1, string sALT_ADDRESS_STREET2, string sALT_ADDRESS_STREET3, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, Guid gLEAD_ID, string sTAG_SET_NAME, string sPICTURE, string sCONTACT_NUMBER, string sASSIGNED_SET_LIST, string sTEAM_NAME, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_Import";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  50);
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
							IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
							IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
							IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
							IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
							IDbDataParameter parSYNC_CONTACT               = Sql.AddParameter(cmd, "@SYNC_CONTACT"              , bSYNC_CONTACT                );
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 100);
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parDATE_ENTERED               = Sql.AddParameter(cmd, "@DATE_ENTERED"              , dtDATE_ENTERED               );
							IDbDataParameter parDATE_MODIFIED              = Sql.AddParameter(cmd, "@DATE_MODIFIED"             , dtDATE_MODIFIED              );
							IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , sPRIMARY_ADDRESS_STREET1     , 150);
							IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , sPRIMARY_ADDRESS_STREET2     , 150);
							IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , sPRIMARY_ADDRESS_STREET3     , 150);
							IDbDataParameter parALT_ADDRESS_STREET1        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET1"       , sALT_ADDRESS_STREET1         , 150);
							IDbDataParameter parALT_ADDRESS_STREET2        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET2"       , sALT_ADDRESS_STREET2         , 150);
							IDbDataParameter parALT_ADDRESS_STREET3        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET3"       , sALT_ADDRESS_STREET3         , 150);
							IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
							IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
							IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
							IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
							IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
							IDbDataParameter parCONTACT_NUMBER             = Sql.AddParameter(cmd, "@CONTACT_NUMBER"            , sCONTACT_NUMBER              ,  30);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							IDbDataParameter parTEAM_NAME                  = Sql.AddParameter(cmd, "@TEAM_NAME"                 , sTEAM_NAME                   , 128);
							IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
							IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_Import
		/// <summary>
		/// spCONTACTS_Import
		/// </summary>
		public void spCONTACTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, Guid gACCOUNT_ID, string sLEAD_SOURCE, string sTITLE, string sDEPARTMENT, Guid gREPORTS_TO_ID, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, bool bSYNC_CONTACT, Guid gTEAM_ID, string sACCOUNT_NAME, string sTEAM_SET_LIST, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sPRIMARY_ADDRESS_STREET1, string sPRIMARY_ADDRESS_STREET2, string sPRIMARY_ADDRESS_STREET3, string sALT_ADDRESS_STREET1, string sALT_ADDRESS_STREET2, string sALT_ADDRESS_STREET3, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, Guid gLEAD_ID, string sTAG_SET_NAME, string sPICTURE, string sCONTACT_NUMBER, string sASSIGNED_SET_LIST, string sTEAM_NAME, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_Import";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  50);
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
				IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
				IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
				IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
				IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
				IDbDataParameter parSYNC_CONTACT               = Sql.AddParameter(cmd, "@SYNC_CONTACT"              , bSYNC_CONTACT                );
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 100);
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parDATE_ENTERED               = Sql.AddParameter(cmd, "@DATE_ENTERED"              , dtDATE_ENTERED               );
				IDbDataParameter parDATE_MODIFIED              = Sql.AddParameter(cmd, "@DATE_MODIFIED"             , dtDATE_MODIFIED              );
				IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , sPRIMARY_ADDRESS_STREET1     , 150);
				IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , sPRIMARY_ADDRESS_STREET2     , 150);
				IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , sPRIMARY_ADDRESS_STREET3     , 150);
				IDbDataParameter parALT_ADDRESS_STREET1        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET1"       , sALT_ADDRESS_STREET1         , 150);
				IDbDataParameter parALT_ADDRESS_STREET2        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET2"       , sALT_ADDRESS_STREET2         , 150);
				IDbDataParameter parALT_ADDRESS_STREET3        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET3"       , sALT_ADDRESS_STREET3         , 150);
				IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
				IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
				IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
				IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
				IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
				IDbDataParameter parCONTACT_NUMBER             = Sql.AddParameter(cmd, "@CONTACT_NUMBER"            , sCONTACT_NUMBER              ,  30);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				IDbDataParameter parTEAM_NAME                  = Sql.AddParameter(cmd, "@TEAM_NAME"                 , sTEAM_NAME                   , 128);
				IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
				IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCONTACTS_Import
		/// <summary>
		/// spCONTACTS_Import
		/// </summary>
		public IDbCommand cmdCONTACTS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_Import";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parACCOUNT_ID                 = Sql.CreateParameter(cmd, "@ACCOUNT_ID"                , "Guid",  16);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string",  50);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 100);
			IDbDataParameter parREPORTS_TO_ID              = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"             , "Guid",  16);
			IDbDataParameter parBIRTHDATE                  = Sql.CreateParameter(cmd, "@BIRTHDATE"                 , "DateTime",   8);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parASSISTANT                  = Sql.CreateParameter(cmd, "@ASSISTANT"                 , "string",  75);
			IDbDataParameter parASSISTANT_PHONE            = Sql.CreateParameter(cmd, "@ASSISTANT_PHONE"           , "string",  25);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parPARENT_TYPE                = Sql.CreateParameter(cmd, "@PARENT_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_ID                  = Sql.CreateParameter(cmd, "@PARENT_ID"                 , "Guid",  16);
			IDbDataParameter parSYNC_CONTACT               = Sql.CreateParameter(cmd, "@SYNC_CONTACT"              , "bool",   1);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parACCOUNT_NAME               = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"              , "string", 100);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parDATE_ENTERED               = Sql.CreateParameter(cmd, "@DATE_ENTERED"              , "DateTime",   8);
			IDbDataParameter parDATE_MODIFIED              = Sql.CreateParameter(cmd, "@DATE_MODIFIED"             , "DateTime",   8);
			IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET1        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET1"       , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET2        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET2"       , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET3        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET3"       , "string", 150);
			IDbDataParameter parSMS_OPT_IN                 = Sql.CreateParameter(cmd, "@SMS_OPT_IN"                , "string",  25);
			IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.CreateParameter(cmd, "@TWITTER_SCREEN_NAME"       , "string",  20);
			IDbDataParameter parLEAD_ID                    = Sql.CreateParameter(cmd, "@LEAD_ID"                   , "Guid",  16);
			IDbDataParameter parTAG_SET_NAME               = Sql.CreateParameter(cmd, "@TAG_SET_NAME"              , "string", 4000);
			IDbDataParameter parPICTURE                    = Sql.CreateParameter(cmd, "@PICTURE"                   , "string", 104857600);
			IDbDataParameter parCONTACT_NUMBER             = Sql.CreateParameter(cmd, "@CONTACT_NUMBER"            , "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			IDbDataParameter parTEAM_NAME                  = Sql.CreateParameter(cmd, "@TEAM_NAME"                 , "string", 128);
			IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.CreateParameter(cmd, "@DP_BUSINESS_PURPOSE"       , "string", 104857600);
			IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.CreateParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , "DateTime",   8);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCONTACTS_InsRelated
		/// <summary>
		/// spCONTACTS_InsRelated
		/// </summary>
		public void spCONTACTS_InsRelated(Guid gCONTACT_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_InsRelated";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_InsRelated
		/// <summary>
		/// spCONTACTS_InsRelated
		/// </summary>
		public void spCONTACTS_InsRelated(Guid gCONTACT_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_InsRelated";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_InsRelated
		/// <summary>
		/// spCONTACTS_InsRelated
		/// </summary>
		public IDbCommand cmdCONTACTS_InsRelated(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_InsRelated";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_MassDelete
		/// <summary>
		/// spCONTACTS_MassDelete
		/// </summary>
		public void spCONTACTS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_MassDelete
		/// <summary>
		/// spCONTACTS_MassDelete
		/// </summary>
		public void spCONTACTS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_MassDelete
		/// <summary>
		/// spCONTACTS_MassDelete
		/// </summary>
		public IDbCommand cmdCONTACTS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_MassSync
		/// <summary>
		/// spCONTACTS_MassSync
		/// </summary>
		public void spCONTACTS_MassSync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_MassSync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_MassSync
		/// <summary>
		/// spCONTACTS_MassSync
		/// </summary>
		public void spCONTACTS_MassSync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_MassSync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_MassSync
		/// <summary>
		/// spCONTACTS_MassSync
		/// </summary>
		public IDbCommand cmdCONTACTS_MassSync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_MassSync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_MassUnsync
		/// <summary>
		/// spCONTACTS_MassUnsync
		/// </summary>
		public void spCONTACTS_MassUnsync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_MassUnsync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_MassUnsync
		/// <summary>
		/// spCONTACTS_MassUnsync
		/// </summary>
		public void spCONTACTS_MassUnsync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_MassUnsync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_MassUnsync
		/// <summary>
		/// spCONTACTS_MassUnsync
		/// </summary>
		public IDbCommand cmdCONTACTS_MassUnsync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_MassUnsync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_MassUpdate
		/// <summary>
		/// spCONTACTS_MassUpdate
		/// </summary>
		public void spCONTACTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sLEAD_SOURCE, Guid gREPORTS_TO_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
							IDbDataParameter parLEAD_SOURCE       = Sql.AddParameter(cmd, "@LEAD_SOURCE"      , sLEAD_SOURCE        , 100);
							IDbDataParameter parREPORTS_TO_ID     = Sql.AddParameter(cmd, "@REPORTS_TO_ID"    , gREPORTS_TO_ID      );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_MassUpdate
		/// <summary>
		/// spCONTACTS_MassUpdate
		/// </summary>
		public void spCONTACTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sLEAD_SOURCE, Guid gREPORTS_TO_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
				IDbDataParameter parLEAD_SOURCE       = Sql.AddParameter(cmd, "@LEAD_SOURCE"      , sLEAD_SOURCE        , 100);
				IDbDataParameter parREPORTS_TO_ID     = Sql.AddParameter(cmd, "@REPORTS_TO_ID"    , gREPORTS_TO_ID      );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_MassUpdate
		/// <summary>
		/// spCONTACTS_MassUpdate
		/// </summary>
		public IDbCommand cmdCONTACTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parACCOUNT_ID        = Sql.CreateParameter(cmd, "@ACCOUNT_ID"       , "Guid",  16);
			IDbDataParameter parLEAD_SOURCE       = Sql.CreateParameter(cmd, "@LEAD_SOURCE"      , "string", 100);
			IDbDataParameter parREPORTS_TO_ID     = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"    , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spCONTACTS_Merge
		/// <summary>
		/// spCONTACTS_Merge
		/// </summary>
		public void spCONTACTS_Merge(Guid gID, Guid gMERGE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_Merge";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_Merge
		/// <summary>
		/// spCONTACTS_Merge
		/// </summary>
		public void spCONTACTS_Merge(Guid gID, Guid gMERGE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_Merge";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_Merge
		/// <summary>
		/// spCONTACTS_Merge
		/// </summary>
		public IDbCommand cmdCONTACTS_Merge(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_Merge";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMERGE_ID         = Sql.CreateParameter(cmd, "@MERGE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_New
		/// <summary>
		/// spCONTACTS_New
		/// </summary>
		public void spCONTACTS_New(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, string sPHONE_WORK, string sEMAIL1, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parFIRST_NAME        = Sql.AddParameter(cmd, "@FIRST_NAME"       , sFIRST_NAME         , 100);
							IDbDataParameter parLAST_NAME         = Sql.AddParameter(cmd, "@LAST_NAME"        , sLAST_NAME          , 100);
							IDbDataParameter parPHONE_WORK        = Sql.AddParameter(cmd, "@PHONE_WORK"       , sPHONE_WORK         ,  25);
							IDbDataParameter parEMAIL1            = Sql.AddParameter(cmd, "@EMAIL1"           , sEMAIL1             , 100);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_New
		/// <summary>
		/// spCONTACTS_New
		/// </summary>
		public void spCONTACTS_New(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, string sPHONE_WORK, string sEMAIL1, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parFIRST_NAME        = Sql.AddParameter(cmd, "@FIRST_NAME"       , sFIRST_NAME         , 100);
				IDbDataParameter parLAST_NAME         = Sql.AddParameter(cmd, "@LAST_NAME"        , sLAST_NAME          , 100);
				IDbDataParameter parPHONE_WORK        = Sql.AddParameter(cmd, "@PHONE_WORK"       , sPHONE_WORK         ,  25);
				IDbDataParameter parEMAIL1            = Sql.AddParameter(cmd, "@EMAIL1"           , sEMAIL1             , 100);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCONTACTS_New
		/// <summary>
		/// spCONTACTS_New
		/// </summary>
		public IDbCommand cmdCONTACTS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parFIRST_NAME        = Sql.CreateParameter(cmd, "@FIRST_NAME"       , "string", 100);
			IDbDataParameter parLAST_NAME         = Sql.CreateParameter(cmd, "@LAST_NAME"        , "string", 100);
			IDbDataParameter parPHONE_WORK        = Sql.CreateParameter(cmd, "@PHONE_WORK"       , "string",  25);
			IDbDataParameter parEMAIL1            = Sql.CreateParameter(cmd, "@EMAIL1"           , "string", 100);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCONTACTS_PortalUpdate
		/// <summary>
		/// spCONTACTS_PortalUpdate
		/// </summary>
		public void spCONTACTS_PortalUpdate(Guid gID, bool bPORTAL_ACTIVE, string sPORTAL_NAME, string sPORTAL_PASSWORD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_PortalUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPORTAL_ACTIVE    = Sql.AddParameter(cmd, "@PORTAL_ACTIVE"   , bPORTAL_ACTIVE     );
							IDbDataParameter parPORTAL_NAME      = Sql.AddParameter(cmd, "@PORTAL_NAME"     , sPORTAL_NAME       , 255);
							IDbDataParameter parPORTAL_PASSWORD  = Sql.AddParameter(cmd, "@PORTAL_PASSWORD" , sPORTAL_PASSWORD   ,  32);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_PortalUpdate
		/// <summary>
		/// spCONTACTS_PortalUpdate
		/// </summary>
		public void spCONTACTS_PortalUpdate(Guid gID, bool bPORTAL_ACTIVE, string sPORTAL_NAME, string sPORTAL_PASSWORD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_PortalUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPORTAL_ACTIVE    = Sql.AddParameter(cmd, "@PORTAL_ACTIVE"   , bPORTAL_ACTIVE     );
				IDbDataParameter parPORTAL_NAME      = Sql.AddParameter(cmd, "@PORTAL_NAME"     , sPORTAL_NAME       , 255);
				IDbDataParameter parPORTAL_PASSWORD  = Sql.AddParameter(cmd, "@PORTAL_PASSWORD" , sPORTAL_PASSWORD   ,  32);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_PortalUpdate
		/// <summary>
		/// spCONTACTS_PortalUpdate
		/// </summary>
		public IDbCommand cmdCONTACTS_PortalUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_PortalUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPORTAL_ACTIVE    = Sql.CreateParameter(cmd, "@PORTAL_ACTIVE"   , "bool",   1);
			IDbDataParameter parPORTAL_NAME      = Sql.CreateParameter(cmd, "@PORTAL_NAME"     , "string", 255);
			IDbDataParameter parPORTAL_PASSWORD  = Sql.CreateParameter(cmd, "@PORTAL_PASSWORD" , "string",  32);
			return cmd;
		}
		#endregion

		#region spCONTACTS_REPORTS_TO_Update
		/// <summary>
		/// spCONTACTS_REPORTS_TO_Update
		/// </summary>
		public void spCONTACTS_REPORTS_TO_Update(Guid gCONTACT_ID, Guid gREPORTS_TO_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_REPORTS_TO_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parREPORTS_TO_ID    = Sql.AddParameter(cmd, "@REPORTS_TO_ID"   , gREPORTS_TO_ID     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_REPORTS_TO_Update
		/// <summary>
		/// spCONTACTS_REPORTS_TO_Update
		/// </summary>
		public void spCONTACTS_REPORTS_TO_Update(Guid gCONTACT_ID, Guid gREPORTS_TO_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_REPORTS_TO_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parREPORTS_TO_ID    = Sql.AddParameter(cmd, "@REPORTS_TO_ID"   , gREPORTS_TO_ID     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_REPORTS_TO_Update
		/// <summary>
		/// spCONTACTS_REPORTS_TO_Update
		/// </summary>
		public IDbCommand cmdCONTACTS_REPORTS_TO_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_REPORTS_TO_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parREPORTS_TO_ID    = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"   , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_STREAM_InsertPost
		/// <summary>
		/// spCONTACTS_STREAM_InsertPost
		/// </summary>
		public void spCONTACTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_STREAM_InsertPost
		/// <summary>
		/// spCONTACTS_STREAM_InsertPost
		/// </summary>
		public void spCONTACTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_STREAM_InsertPost
		/// <summary>
		/// spCONTACTS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdCONTACTS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTACTS_Undelete
		/// <summary>
		/// spCONTACTS_Undelete
		/// </summary>
		public void spCONTACTS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_Undelete
		/// <summary>
		/// spCONTACTS_Undelete
		/// </summary>
		public void spCONTACTS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_Undelete
		/// <summary>
		/// spCONTACTS_Undelete
		/// </summary>
		public IDbCommand cmdCONTACTS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spCONTACTS_Update
		/// <summary>
		/// spCONTACTS_Update
		/// </summary>
		public void spCONTACTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, Guid gACCOUNT_ID, string sLEAD_SOURCE, string sTITLE, string sDEPARTMENT, Guid gREPORTS_TO_ID, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, bool bSYNC_CONTACT, Guid gTEAM_ID, string sTEAM_SET_LIST, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sPICTURE, Guid gLEAD_ID, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sCONTACT_NUMBER, string sASSIGNED_SET_LIST, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_Update";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  50);
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
							IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
							IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
							IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
							IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
							IDbDataParameter parSYNC_CONTACT               = Sql.AddParameter(cmd, "@SYNC_CONTACT"              , bSYNC_CONTACT                );
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
							IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
							IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
							IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
							IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
							IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
							IDbDataParameter parCONTACT_NUMBER             = Sql.AddParameter(cmd, "@CONTACT_NUMBER"            , sCONTACT_NUMBER              ,  30);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
							IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_Update
		/// <summary>
		/// spCONTACTS_Update
		/// </summary>
		public void spCONTACTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, Guid gACCOUNT_ID, string sLEAD_SOURCE, string sTITLE, string sDEPARTMENT, Guid gREPORTS_TO_ID, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, bool bSYNC_CONTACT, Guid gTEAM_ID, string sTEAM_SET_LIST, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sPICTURE, Guid gLEAD_ID, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sCONTACT_NUMBER, string sASSIGNED_SET_LIST, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_Update";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  50);
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
				IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
				IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
				IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
				IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
				IDbDataParameter parSYNC_CONTACT               = Sql.AddParameter(cmd, "@SYNC_CONTACT"              , bSYNC_CONTACT                );
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
				IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
				IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
				IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
				IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
				IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
				IDbDataParameter parCONTACT_NUMBER             = Sql.AddParameter(cmd, "@CONTACT_NUMBER"            , sCONTACT_NUMBER              ,  30);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
				IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCONTACTS_Update
		/// <summary>
		/// spCONTACTS_Update
		/// </summary>
		public IDbCommand cmdCONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_Update";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parACCOUNT_ID                 = Sql.CreateParameter(cmd, "@ACCOUNT_ID"                , "Guid",  16);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string",  50);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 100);
			IDbDataParameter parREPORTS_TO_ID              = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"             , "Guid",  16);
			IDbDataParameter parBIRTHDATE                  = Sql.CreateParameter(cmd, "@BIRTHDATE"                 , "DateTime",   8);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parASSISTANT                  = Sql.CreateParameter(cmd, "@ASSISTANT"                 , "string",  75);
			IDbDataParameter parASSISTANT_PHONE            = Sql.CreateParameter(cmd, "@ASSISTANT_PHONE"           , "string",  25);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parPARENT_TYPE                = Sql.CreateParameter(cmd, "@PARENT_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_ID                  = Sql.CreateParameter(cmd, "@PARENT_ID"                 , "Guid",  16);
			IDbDataParameter parSYNC_CONTACT               = Sql.CreateParameter(cmd, "@SYNC_CONTACT"              , "bool",   1);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parSMS_OPT_IN                 = Sql.CreateParameter(cmd, "@SMS_OPT_IN"                , "string",  25);
			IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.CreateParameter(cmd, "@TWITTER_SCREEN_NAME"       , "string",  20);
			IDbDataParameter parPICTURE                    = Sql.CreateParameter(cmd, "@PICTURE"                   , "string", 104857600);
			IDbDataParameter parLEAD_ID                    = Sql.CreateParameter(cmd, "@LEAD_ID"                   , "Guid",  16);
			IDbDataParameter parEXCHANGE_FOLDER            = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"           , "bool",   1);
			IDbDataParameter parTAG_SET_NAME               = Sql.CreateParameter(cmd, "@TAG_SET_NAME"              , "string", 4000);
			IDbDataParameter parCONTACT_NUMBER             = Sql.CreateParameter(cmd, "@CONTACT_NUMBER"            , "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.CreateParameter(cmd, "@DP_BUSINESS_PURPOSE"       , "string", 104857600);
			IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.CreateParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , "DateTime",   8);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCONTACTS_USERS_Delete
		/// <summary>
		/// spCONTACTS_USERS_Delete
		/// </summary>
		public void spCONTACTS_USERS_Delete(Guid gCONTACT_ID, Guid gUSER_ID, string sSERVICE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parSERVICE_NAME     = Sql.AddParameter(cmd, "@SERVICE_NAME"    , sSERVICE_NAME      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_USERS_Delete
		/// <summary>
		/// spCONTACTS_USERS_Delete
		/// </summary>
		public void spCONTACTS_USERS_Delete(Guid gCONTACT_ID, Guid gUSER_ID, string sSERVICE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parSERVICE_NAME     = Sql.AddParameter(cmd, "@SERVICE_NAME"    , sSERVICE_NAME      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_USERS_Delete
		/// <summary>
		/// spCONTACTS_USERS_Delete
		/// </summary>
		public IDbCommand cmdCONTACTS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parSERVICE_NAME     = Sql.CreateParameter(cmd, "@SERVICE_NAME"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spCONTACTS_USERS_Update
		/// <summary>
		/// spCONTACTS_USERS_Update
		/// </summary>
		public void spCONTACTS_USERS_Update(Guid gCONTACT_ID, Guid gUSER_ID, string sSERVICE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTACTS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parSERVICE_NAME     = Sql.AddParameter(cmd, "@SERVICE_NAME"    , sSERVICE_NAME      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTACTS_USERS_Update
		/// <summary>
		/// spCONTACTS_USERS_Update
		/// </summary>
		public void spCONTACTS_USERS_Update(Guid gCONTACT_ID, Guid gUSER_ID, string sSERVICE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTACTS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parSERVICE_NAME     = Sql.AddParameter(cmd, "@SERVICE_NAME"    , sSERVICE_NAME      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTACTS_USERS_Update
		/// <summary>
		/// spCONTACTS_USERS_Update
		/// </summary>
		public IDbCommand cmdCONTACTS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTACTS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parSERVICE_NAME     = Sql.CreateParameter(cmd, "@SERVICE_NAME"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spCONTRACTS_CONTACTS_Update
		/// <summary>
		/// spCONTRACTS_CONTACTS_Update
		/// </summary>
		public void spCONTRACTS_CONTACTS_Update(Guid gCONTRACT_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTRACTS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTRACTS_CONTACTS_Update
		/// <summary>
		/// spCONTRACTS_CONTACTS_Update
		/// </summary>
		public void spCONTRACTS_CONTACTS_Update(Guid gCONTRACT_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTRACTS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTRACTS_CONTACTS_Update
		/// <summary>
		/// spCONTRACTS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdCONTRACTS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTRACTS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTRACT_ID      = Sql.CreateParameter(cmd, "@CONTRACT_ID"     , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTRACTS_DOCUMENTS_Update
		/// <summary>
		/// spCONTRACTS_DOCUMENTS_Update
		/// </summary>
		public void spCONTRACTS_DOCUMENTS_Update(Guid gCONTRACT_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTRACTS_DOCUMENTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTRACTS_DOCUMENTS_Update
		/// <summary>
		/// spCONTRACTS_DOCUMENTS_Update
		/// </summary>
		public void spCONTRACTS_DOCUMENTS_Update(Guid gCONTRACT_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTRACTS_DOCUMENTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTRACTS_DOCUMENTS_Update
		/// <summary>
		/// spCONTRACTS_DOCUMENTS_Update
		/// </summary>
		public IDbCommand cmdCONTRACTS_DOCUMENTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTRACTS_DOCUMENTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTRACT_ID      = Sql.CreateParameter(cmd, "@CONTRACT_ID"     , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTRACTS_OPPORTUNITIES_Update
		/// <summary>
		/// spCONTRACTS_OPPORTUNITIES_Update
		/// </summary>
		public void spCONTRACTS_OPPORTUNITIES_Update(Guid gCONTRACT_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spCONTRACTS_OPPORTUNITIES_Upda";
							else
								cmd.CommandText = "spCONTRACTS_OPPORTUNITIES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTRACTS_OPPORTUNITIES_Update
		/// <summary>
		/// spCONTRACTS_OPPORTUNITIES_Update
		/// </summary>
		public void spCONTRACTS_OPPORTUNITIES_Update(Guid gCONTRACT_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spCONTRACTS_OPPORTUNITIES_Upda";
				else
					cmd.CommandText = "spCONTRACTS_OPPORTUNITIES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTRACTS_OPPORTUNITIES_Update
		/// <summary>
		/// spCONTRACTS_OPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdCONTRACTS_OPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spCONTRACTS_OPPORTUNITIES_Upda";
			else
				cmd.CommandText = "spCONTRACTS_OPPORTUNITIES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTRACT_ID      = Sql.CreateParameter(cmd, "@CONTRACT_ID"     , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONTRACTS_QUOTES_Update
		/// <summary>
		/// spCONTRACTS_QUOTES_Update
		/// </summary>
		public void spCONTRACTS_QUOTES_Update(Guid gCONTRACT_ID, Guid gQUOTE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONTRACTS_QUOTES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONTRACTS_QUOTES_Update
		/// <summary>
		/// spCONTRACTS_QUOTES_Update
		/// </summary>
		public void spCONTRACTS_QUOTES_Update(Guid gCONTRACT_ID, Guid gQUOTE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONTRACTS_QUOTES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCONTRACT_ID      = Sql.AddParameter(cmd, "@CONTRACT_ID"     , gCONTRACT_ID       );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONTRACTS_QUOTES_Update
		/// <summary>
		/// spCONTRACTS_QUOTES_Update
		/// </summary>
		public IDbCommand cmdCONTRACTS_QUOTES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONTRACTS_QUOTES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCONTRACT_ID      = Sql.CreateParameter(cmd, "@CONTRACT_ID"     , "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_Delete
		/// <summary>
		/// spCURRENCIES_Delete
		/// </summary>
		public void spCURRENCIES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_Delete
		/// <summary>
		/// spCURRENCIES_Delete
		/// </summary>
		public void spCURRENCIES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_Delete
		/// <summary>
		/// spCURRENCIES_Delete
		/// </summary>
		public IDbCommand cmdCURRENCIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_InsertOnly
		/// <summary>
		/// spCURRENCIES_InsertOnly
		/// </summary>
		public void spCURRENCIES_InsertOnly(Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
							IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
							IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
							IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_InsertOnly
		/// <summary>
		/// spCURRENCIES_InsertOnly
		/// </summary>
		public void spCURRENCIES_InsertOnly(Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
				IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
				IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
				IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_InsertOnly
		/// <summary>
		/// spCURRENCIES_InsertOnly
		/// </summary>
		public IDbCommand cmdCURRENCIES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  36);
			IDbDataParameter parSYMBOL           = Sql.CreateParameter(cmd, "@SYMBOL"          , "string",  36);
			IDbDataParameter parISO4217          = Sql.CreateParameter(cmd, "@ISO4217"         , "string",   3);
			IDbDataParameter parCONVERSION_RATE  = Sql.CreateParameter(cmd, "@CONVERSION_RATE" , "float",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_InsertOnlyByISO
		/// <summary>
		/// spCURRENCIES_InsertOnlyByISO
		/// </summary>
		public void spCURRENCIES_InsertOnlyByISO(string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_InsertOnlyByISO";
							IDbDataParameter parNAME            = Sql.AddParameter(cmd, "@NAME"           , sNAME             ,  36);
							IDbDataParameter parSYMBOL          = Sql.AddParameter(cmd, "@SYMBOL"         , sSYMBOL           ,  36);
							IDbDataParameter parISO4217         = Sql.AddParameter(cmd, "@ISO4217"        , sISO4217          ,   3);
							IDbDataParameter parCONVERSION_RATE = Sql.AddParameter(cmd, "@CONVERSION_RATE", flCONVERSION_RATE );
							IDbDataParameter parSTATUS          = Sql.AddParameter(cmd, "@STATUS"         , sSTATUS           ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_InsertOnlyByISO
		/// <summary>
		/// spCURRENCIES_InsertOnlyByISO
		/// </summary>
		public void spCURRENCIES_InsertOnlyByISO(string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_InsertOnlyByISO";
				IDbDataParameter parNAME            = Sql.AddParameter(cmd, "@NAME"           , sNAME             ,  36);
				IDbDataParameter parSYMBOL          = Sql.AddParameter(cmd, "@SYMBOL"         , sSYMBOL           ,  36);
				IDbDataParameter parISO4217         = Sql.AddParameter(cmd, "@ISO4217"        , sISO4217          ,   3);
				IDbDataParameter parCONVERSION_RATE = Sql.AddParameter(cmd, "@CONVERSION_RATE", flCONVERSION_RATE );
				IDbDataParameter parSTATUS          = Sql.AddParameter(cmd, "@STATUS"         , sSTATUS           ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_InsertOnlyByISO
		/// <summary>
		/// spCURRENCIES_InsertOnlyByISO
		/// </summary>
		public IDbCommand cmdCURRENCIES_InsertOnlyByISO(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_InsertOnlyByISO";
			IDbDataParameter parNAME            = Sql.CreateParameter(cmd, "@NAME"           , "string",  36);
			IDbDataParameter parSYMBOL          = Sql.CreateParameter(cmd, "@SYMBOL"         , "string",  36);
			IDbDataParameter parISO4217         = Sql.CreateParameter(cmd, "@ISO4217"        , "string",   3);
			IDbDataParameter parCONVERSION_RATE = Sql.CreateParameter(cmd, "@CONVERSION_RATE", "float",   8);
			IDbDataParameter parSTATUS          = Sql.CreateParameter(cmd, "@STATUS"         , "string",  25);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_MassUpdate
		/// <summary>
		/// spCURRENCIES_MassUpdate
		/// </summary>
		public void spCURRENCIES_MassUpdate(string sID_LIST, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_MassUpdate
		/// <summary>
		/// spCURRENCIES_MassUpdate
		/// </summary>
		public void spCURRENCIES_MassUpdate(string sID_LIST, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_MassUpdate
		/// <summary>
		/// spCURRENCIES_MassUpdate
		/// </summary>
		public IDbCommand cmdCURRENCIES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_Update
		/// <summary>
		/// spCURRENCIES_Update
		/// </summary>
		public void spCURRENCIES_Update(ref Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
							IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
							IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
							IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_Update
		/// <summary>
		/// spCURRENCIES_Update
		/// </summary>
		public void spCURRENCIES_Update(ref Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
				IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
				IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
				IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCURRENCIES_Update
		/// <summary>
		/// spCURRENCIES_Update
		/// </summary>
		public IDbCommand cmdCURRENCIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  36);
			IDbDataParameter parSYMBOL           = Sql.CreateParameter(cmd, "@SYMBOL"          , "string",  36);
			IDbDataParameter parISO4217          = Sql.CreateParameter(cmd, "@ISO4217"         , "string",   3);
			IDbDataParameter parCONVERSION_RATE  = Sql.CreateParameter(cmd, "@CONVERSION_RATE" , "float",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCURRENCIES_UpdateRateByISO
		/// <summary>
		/// spCURRENCIES_UpdateRateByISO
		/// </summary>
		public void spCURRENCIES_UpdateRateByISO(string sISO4217, float flCONVERSION_RATE, Guid gSYSTEM_CURRENCY_LOG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_UpdateRateByISO";
							IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
							IDbDataParameter parISO4217                = Sql.AddParameter(cmd, "@ISO4217"               , sISO4217                 ,   3);
							IDbDataParameter parCONVERSION_RATE        = Sql.AddParameter(cmd, "@CONVERSION_RATE"       , flCONVERSION_RATE        );
							IDbDataParameter parSYSTEM_CURRENCY_LOG_ID = Sql.AddParameter(cmd, "@SYSTEM_CURRENCY_LOG_ID", gSYSTEM_CURRENCY_LOG_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_UpdateRateByISO
		/// <summary>
		/// spCURRENCIES_UpdateRateByISO
		/// </summary>
		public void spCURRENCIES_UpdateRateByISO(string sISO4217, float flCONVERSION_RATE, Guid gSYSTEM_CURRENCY_LOG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_UpdateRateByISO";
				IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
				IDbDataParameter parISO4217                = Sql.AddParameter(cmd, "@ISO4217"               , sISO4217                 ,   3);
				IDbDataParameter parCONVERSION_RATE        = Sql.AddParameter(cmd, "@CONVERSION_RATE"       , flCONVERSION_RATE        );
				IDbDataParameter parSYSTEM_CURRENCY_LOG_ID = Sql.AddParameter(cmd, "@SYSTEM_CURRENCY_LOG_ID", gSYSTEM_CURRENCY_LOG_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_UpdateRateByISO
		/// <summary>
		/// spCURRENCIES_UpdateRateByISO
		/// </summary>
		public IDbCommand cmdCURRENCIES_UpdateRateByISO(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_UpdateRateByISO";
			IDbDataParameter parMODIFIED_USER_ID       = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"      , "Guid",  16);
			IDbDataParameter parISO4217                = Sql.CreateParameter(cmd, "@ISO4217"               , "string",   3);
			IDbDataParameter parCONVERSION_RATE        = Sql.CreateParameter(cmd, "@CONVERSION_RATE"       , "float",   8);
			IDbDataParameter parSYSTEM_CURRENCY_LOG_ID = Sql.CreateParameter(cmd, "@SYSTEM_CURRENCY_LOG_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARD_APPS_InsertOnly
		/// <summary>
		/// spDASHBOARD_APPS_InsertOnly
		/// </summary>
		public void spDASHBOARD_APPS_InsertOnly(string sNAME, string sCATEGORY, string sMODULE_NAME, string sTITLE, string sSETTINGS_EDITVIEW, string sSCRIPT_URL, bool bIS_ADMIN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARD_APPS_InsertOnly";
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  25);
							IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  50);
							IDbDataParameter parTITLE             = Sql.AddParameter(cmd, "@TITLE"            , sTITLE              , 100);
							IDbDataParameter parSETTINGS_EDITVIEW = Sql.AddParameter(cmd, "@SETTINGS_EDITVIEW", sSETTINGS_EDITVIEW  ,  50);
							IDbDataParameter parSCRIPT_URL        = Sql.AddParameter(cmd, "@SCRIPT_URL"       , sSCRIPT_URL         , 2083);
							IDbDataParameter parIS_ADMIN          = Sql.AddParameter(cmd, "@IS_ADMIN"         , bIS_ADMIN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARD_APPS_InsertOnly
		/// <summary>
		/// spDASHBOARD_APPS_InsertOnly
		/// </summary>
		public void spDASHBOARD_APPS_InsertOnly(string sNAME, string sCATEGORY, string sMODULE_NAME, string sTITLE, string sSETTINGS_EDITVIEW, string sSCRIPT_URL, bool bIS_ADMIN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARD_APPS_InsertOnly";
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  25);
				IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  50);
				IDbDataParameter parTITLE             = Sql.AddParameter(cmd, "@TITLE"            , sTITLE              , 100);
				IDbDataParameter parSETTINGS_EDITVIEW = Sql.AddParameter(cmd, "@SETTINGS_EDITVIEW", sSETTINGS_EDITVIEW  ,  50);
				IDbDataParameter parSCRIPT_URL        = Sql.AddParameter(cmd, "@SCRIPT_URL"       , sSCRIPT_URL         , 2083);
				IDbDataParameter parIS_ADMIN          = Sql.AddParameter(cmd, "@IS_ADMIN"         , bIS_ADMIN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARD_APPS_InsertOnly
		/// <summary>
		/// spDASHBOARD_APPS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHBOARD_APPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARD_APPS_InsertOnly";
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parCATEGORY          = Sql.CreateParameter(cmd, "@CATEGORY"         , "string",  25);
			IDbDataParameter parMODULE_NAME       = Sql.CreateParameter(cmd, "@MODULE_NAME"      , "string",  50);
			IDbDataParameter parTITLE             = Sql.CreateParameter(cmd, "@TITLE"            , "string", 100);
			IDbDataParameter parSETTINGS_EDITVIEW = Sql.CreateParameter(cmd, "@SETTINGS_EDITVIEW", "string",  50);
			IDbDataParameter parSCRIPT_URL        = Sql.CreateParameter(cmd, "@SCRIPT_URL"       , "string", 2083);
			IDbDataParameter parIS_ADMIN          = Sql.CreateParameter(cmd, "@IS_ADMIN"         , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_Delete
		/// <summary>
		/// spDASHBOARDS_Delete
		/// </summary>
		public void spDASHBOARDS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_Delete
		/// <summary>
		/// spDASHBOARDS_Delete
		/// </summary>
		public void spDASHBOARDS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_Delete
		/// <summary>
		/// spDASHBOARDS_Delete
		/// </summary>
		public IDbCommand cmdDASHBOARDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_InsertOnly(Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_InsertOnly(Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHBOARDS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 100);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_AddReport
		/// <summary>
		/// spDASHBOARDS_PANELS_AddReport
		/// </summary>
		public void spDASHBOARDS_PANELS_AddReport(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gDASHBOARD_ID, string sDASHBOARD_CATEGORY, Guid gREPORT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_AddReport";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
							IDbDataParameter parDASHBOARD_CATEGORY = Sql.AddParameter(cmd, "@DASHBOARD_CATEGORY", sDASHBOARD_CATEGORY  ,  50);
							IDbDataParameter parREPORT_ID          = Sql.AddParameter(cmd, "@REPORT_ID"         , gREPORT_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_AddReport
		/// <summary>
		/// spDASHBOARDS_PANELS_AddReport
		/// </summary>
		public void spDASHBOARDS_PANELS_AddReport(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gDASHBOARD_ID, string sDASHBOARD_CATEGORY, Guid gREPORT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_AddReport";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
				IDbDataParameter parDASHBOARD_CATEGORY = Sql.AddParameter(cmd, "@DASHBOARD_CATEGORY", sDASHBOARD_CATEGORY  ,  50);
				IDbDataParameter parREPORT_ID          = Sql.AddParameter(cmd, "@REPORT_ID"         , gREPORT_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_AddReport
		/// <summary>
		/// spDASHBOARDS_PANELS_AddReport
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_AddReport(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_AddReport";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID   = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"  , "Guid",  16);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			IDbDataParameter parDASHBOARD_ID       = Sql.CreateParameter(cmd, "@DASHBOARD_ID"      , "Guid",  16);
			IDbDataParameter parDASHBOARD_CATEGORY = Sql.CreateParameter(cmd, "@DASHBOARD_CATEGORY", "string",  50);
			IDbDataParameter parREPORT_ID          = Sql.CreateParameter(cmd, "@REPORT_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_Delete
		/// <summary>
		/// spDASHBOARDS_PANELS_Delete
		/// </summary>
		public void spDASHBOARDS_PANELS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_Delete
		/// <summary>
		/// spDASHBOARDS_PANELS_Delete
		/// </summary>
		public void spDASHBOARDS_PANELS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_Delete
		/// <summary>
		/// spDASHBOARDS_PANELS_Delete
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_PANELS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_PANELS_InsertOnly(Guid gDASHBOARD_ID, string sDASHBOARD_APP_NAME, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_InsertOnly";
							IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
							IDbDataParameter parDASHBOARD_APP_NAME = Sql.AddParameter(cmd, "@DASHBOARD_APP_NAME", sDASHBOARD_APP_NAME  , 150);
							IDbDataParameter parPANEL_ORDER        = Sql.AddParameter(cmd, "@PANEL_ORDER"       , nPANEL_ORDER         );
							IDbDataParameter parROW_INDEX          = Sql.AddParameter(cmd, "@ROW_INDEX"         , nROW_INDEX           );
							IDbDataParameter parCOLUMN_WIDTH       = Sql.AddParameter(cmd, "@COLUMN_WIDTH"      , nCOLUMN_WIDTH        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_PANELS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_PANELS_InsertOnly(Guid gDASHBOARD_ID, string sDASHBOARD_APP_NAME, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_InsertOnly";
				IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
				IDbDataParameter parDASHBOARD_APP_NAME = Sql.AddParameter(cmd, "@DASHBOARD_APP_NAME", sDASHBOARD_APP_NAME  , 150);
				IDbDataParameter parPANEL_ORDER        = Sql.AddParameter(cmd, "@PANEL_ORDER"       , nPANEL_ORDER         );
				IDbDataParameter parROW_INDEX          = Sql.AddParameter(cmd, "@ROW_INDEX"         , nROW_INDEX           );
				IDbDataParameter parCOLUMN_WIDTH       = Sql.AddParameter(cmd, "@COLUMN_WIDTH"      , nCOLUMN_WIDTH        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_PANELS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_InsertOnly";
			IDbDataParameter parDASHBOARD_ID       = Sql.CreateParameter(cmd, "@DASHBOARD_ID"      , "Guid",  16);
			IDbDataParameter parDASHBOARD_APP_NAME = Sql.CreateParameter(cmd, "@DASHBOARD_APP_NAME", "string", 150);
			IDbDataParameter parPANEL_ORDER        = Sql.CreateParameter(cmd, "@PANEL_ORDER"       , "Int32",   4);
			IDbDataParameter parROW_INDEX          = Sql.CreateParameter(cmd, "@ROW_INDEX"         , "Int32",   4);
			IDbDataParameter parCOLUMN_WIDTH       = Sql.CreateParameter(cmd, "@COLUMN_WIDTH"      , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_Update
		/// <summary>
		/// spDASHBOARDS_PANELS_Update
		/// </summary>
		public void spDASHBOARDS_PANELS_Update(ref Guid gID, Guid gDASHBOARD_ID, Guid gDASHBOARD_APP_ID, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDASHBOARD_ID     = Sql.AddParameter(cmd, "@DASHBOARD_ID"    , gDASHBOARD_ID      );
							IDbDataParameter parDASHBOARD_APP_ID = Sql.AddParameter(cmd, "@DASHBOARD_APP_ID", gDASHBOARD_APP_ID  );
							IDbDataParameter parPANEL_ORDER      = Sql.AddParameter(cmd, "@PANEL_ORDER"     , nPANEL_ORDER       );
							IDbDataParameter parROW_INDEX        = Sql.AddParameter(cmd, "@ROW_INDEX"       , nROW_INDEX         );
							IDbDataParameter parCOLUMN_WIDTH     = Sql.AddParameter(cmd, "@COLUMN_WIDTH"    , nCOLUMN_WIDTH      );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_Update
		/// <summary>
		/// spDASHBOARDS_PANELS_Update
		/// </summary>
		public void spDASHBOARDS_PANELS_Update(ref Guid gID, Guid gDASHBOARD_ID, Guid gDASHBOARD_APP_ID, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDASHBOARD_ID     = Sql.AddParameter(cmd, "@DASHBOARD_ID"    , gDASHBOARD_ID      );
				IDbDataParameter parDASHBOARD_APP_ID = Sql.AddParameter(cmd, "@DASHBOARD_APP_ID", gDASHBOARD_APP_ID  );
				IDbDataParameter parPANEL_ORDER      = Sql.AddParameter(cmd, "@PANEL_ORDER"     , nPANEL_ORDER       );
				IDbDataParameter parROW_INDEX        = Sql.AddParameter(cmd, "@ROW_INDEX"       , nROW_INDEX         );
				IDbDataParameter parCOLUMN_WIDTH     = Sql.AddParameter(cmd, "@COLUMN_WIDTH"    , nCOLUMN_WIDTH      );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_Update
		/// <summary>
		/// spDASHBOARDS_PANELS_Update
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDASHBOARD_ID     = Sql.CreateParameter(cmd, "@DASHBOARD_ID"    , "Guid",  16);
			IDbDataParameter parDASHBOARD_APP_ID = Sql.CreateParameter(cmd, "@DASHBOARD_APP_ID", "Guid",  16);
			IDbDataParameter parPANEL_ORDER      = Sql.CreateParameter(cmd, "@PANEL_ORDER"     , "Int32",   4);
			IDbDataParameter parROW_INDEX        = Sql.CreateParameter(cmd, "@ROW_INDEX"       , "Int32",   4);
			IDbDataParameter parCOLUMN_WIDTH     = Sql.CreateParameter(cmd, "@COLUMN_WIDTH"    , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_Update
		/// <summary>
		/// spDASHBOARDS_Update
		/// </summary>
		public void spDASHBOARDS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sNAME, string sCATEGORY, string sDESCRIPTION, string sCONTENT, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 100);
							IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  50);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parCONTENT           = Sql.AddParameter(cmd, "@CONTENT"          , sCONTENT            );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_Update
		/// <summary>
		/// spDASHBOARDS_Update
		/// </summary>
		public void spDASHBOARDS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sNAME, string sCATEGORY, string sDESCRIPTION, string sCONTENT, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 100);
				IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  50);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parCONTENT           = Sql.AddParameter(cmd, "@CONTENT"          , sCONTENT            );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDASHBOARDS_Update
		/// <summary>
		/// spDASHBOARDS_Update
		/// </summary>
		public IDbCommand cmdDASHBOARDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 100);
			IDbDataParameter parCATEGORY          = Sql.CreateParameter(cmd, "@CATEGORY"         , "string",  50);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parCONTENT           = Sql.CreateParameter(cmd, "@CONTENT"          , "string", 104857600);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDASHLETS_Delete
		/// <summary>
		/// spDASHLETS_Delete
		/// </summary>
		public void spDASHLETS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_Delete
		/// <summary>
		/// spDASHLETS_Delete
		/// </summary>
		public void spDASHLETS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_Delete
		/// <summary>
		/// spDASHLETS_Delete
		/// </summary>
		public IDbCommand cmdDASHLETS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_InsertOnly
		/// <summary>
		/// spDASHLETS_InsertOnly
		/// </summary>
		public void spDASHLETS_InsertOnly(string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bALLOW_MULTIPLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_InsertOnly";
							IDbDataParameter parCATEGORY       = Sql.AddParameter(cmd, "@CATEGORY"      , sCATEGORY        ,  25);
							IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  50);
							IDbDataParameter parCONTROL_NAME   = Sql.AddParameter(cmd, "@CONTROL_NAME"  , sCONTROL_NAME    , 100);
							IDbDataParameter parTITLE          = Sql.AddParameter(cmd, "@TITLE"         , sTITLE           , 100);
							IDbDataParameter parALLOW_MULTIPLE = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE", bALLOW_MULTIPLE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_InsertOnly
		/// <summary>
		/// spDASHLETS_InsertOnly
		/// </summary>
		public void spDASHLETS_InsertOnly(string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bALLOW_MULTIPLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_InsertOnly";
				IDbDataParameter parCATEGORY       = Sql.AddParameter(cmd, "@CATEGORY"      , sCATEGORY        ,  25);
				IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  50);
				IDbDataParameter parCONTROL_NAME   = Sql.AddParameter(cmd, "@CONTROL_NAME"  , sCONTROL_NAME    , 100);
				IDbDataParameter parTITLE          = Sql.AddParameter(cmd, "@TITLE"         , sTITLE           , 100);
				IDbDataParameter parALLOW_MULTIPLE = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE", bALLOW_MULTIPLE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_InsertOnly
		/// <summary>
		/// spDASHLETS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHLETS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_InsertOnly";
			IDbDataParameter parCATEGORY       = Sql.CreateParameter(cmd, "@CATEGORY"      , "string",  25);
			IDbDataParameter parMODULE_NAME    = Sql.CreateParameter(cmd, "@MODULE_NAME"   , "string",  50);
			IDbDataParameter parCONTROL_NAME   = Sql.CreateParameter(cmd, "@CONTROL_NAME"  , "string", 100);
			IDbDataParameter parTITLE          = Sql.CreateParameter(cmd, "@TITLE"         , "string", 100);
			IDbDataParameter parALLOW_MULTIPLE = Sql.CreateParameter(cmd, "@ALLOW_MULTIPLE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spDASHLETS_Update
		/// <summary>
		/// spDASHLETS_Update
		/// </summary>
		public void spDASHLETS_Update(ref Guid gID, string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bDASHLET_ENABLED, bool bALLOW_MULTIPLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
							IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
							IDbDataParameter parDASHLET_ENABLED  = Sql.AddParameter(cmd, "@DASHLET_ENABLED" , bDASHLET_ENABLED   );
							IDbDataParameter parALLOW_MULTIPLE   = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE"  , bALLOW_MULTIPLE    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_Update
		/// <summary>
		/// spDASHLETS_Update
		/// </summary>
		public void spDASHLETS_Update(ref Guid gID, string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bDASHLET_ENABLED, bool bALLOW_MULTIPLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
				IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
				IDbDataParameter parDASHLET_ENABLED  = Sql.AddParameter(cmd, "@DASHLET_ENABLED" , bDASHLET_ENABLED   );
				IDbDataParameter parALLOW_MULTIPLE   = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE"  , bALLOW_MULTIPLE    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDASHLETS_Update
		/// <summary>
		/// spDASHLETS_Update
		/// </summary>
		public IDbCommand cmdDASHLETS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  25);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parCONTROL_NAME     = Sql.CreateParameter(cmd, "@CONTROL_NAME"    , "string", 100);
			IDbDataParameter parTITLE            = Sql.CreateParameter(cmd, "@TITLE"           , "string", 100);
			IDbDataParameter parDASHLET_ENABLED  = Sql.CreateParameter(cmd, "@DASHLET_ENABLED" , "bool",   1);
			IDbDataParameter parALLOW_MULTIPLE   = Sql.CreateParameter(cmd, "@ALLOW_MULTIPLE"  , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Delete
		/// <summary>
		/// spDASHLETS_USERS_Delete
		/// </summary>
		public void spDASHLETS_USERS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Delete
		/// <summary>
		/// spDASHLETS_USERS_Delete
		/// </summary>
		public void spDASHLETS_USERS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Delete
		/// <summary>
		/// spDASHLETS_USERS_Delete
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Disable
		/// <summary>
		/// spDASHLETS_USERS_Disable
		/// </summary>
		public void spDASHLETS_USERS_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Disable
		/// <summary>
		/// spDASHLETS_USERS_Disable
		/// </summary>
		public void spDASHLETS_USERS_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Disable
		/// <summary>
		/// spDASHLETS_USERS_Disable
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Enable
		/// <summary>
		/// spDASHLETS_USERS_Enable
		/// </summary>
		public void spDASHLETS_USERS_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Enable
		/// <summary>
		/// spDASHLETS_USERS_Enable
		/// </summary>
		public void spDASHLETS_USERS_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Enable
		/// <summary>
		/// spDASHLETS_USERS_Enable
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Init
		/// <summary>
		/// spDASHLETS_USERS_Init
		/// </summary>
		public void spDASHLETS_USERS_Init(Guid gASSIGNED_USER_ID, string sDETAIL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Init";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Init
		/// <summary>
		/// spDASHLETS_USERS_Init
		/// </summary>
		public void spDASHLETS_USERS_Init(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Init";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Init
		/// <summary>
		/// spDASHLETS_USERS_Init
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Init(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Init";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_InitDisable
		/// <summary>
		/// spDASHLETS_USERS_InitDisable
		/// </summary>
		public void spDASHLETS_USERS_InitDisable(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_InitDisable";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_InitDisable
		/// <summary>
		/// spDASHLETS_USERS_InitDisable
		/// </summary>
		public void spDASHLETS_USERS_InitDisable(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_InitDisable";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_InitDisable
		/// <summary>
		/// spDASHLETS_USERS_InitDisable
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_InitDisable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_InitDisable";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parCONTROL_NAME     = Sql.CreateParameter(cmd, "@CONTROL_NAME"    , "string", 100);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MassUpdate
		/// <summary>
		/// spDASHLETS_USERS_MassUpdate
		/// </summary>
		public void spDASHLETS_USERS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sDETAIL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MassUpdate
		/// <summary>
		/// spDASHLETS_USERS_MassUpdate
		/// </summary>
		public void spDASHLETS_USERS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sDETAIL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MassUpdate
		/// <summary>
		/// spDASHLETS_USERS_MassUpdate
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MoveDown
		/// <summary>
		/// spDASHLETS_USERS_MoveDown
		/// </summary>
		public void spDASHLETS_USERS_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MoveDown
		/// <summary>
		/// spDASHLETS_USERS_MoveDown
		/// </summary>
		public void spDASHLETS_USERS_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MoveDown
		/// <summary>
		/// spDASHLETS_USERS_MoveDown
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MoveItem
		/// <summary>
		/// spDASHLETS_USERS_MoveItem
		/// </summary>
		public void spDASHLETS_USERS_MoveItem(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MoveItem
		/// <summary>
		/// spDASHLETS_USERS_MoveItem
		/// </summary>
		public void spDASHLETS_USERS_MoveItem(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MoveItem
		/// <summary>
		/// spDASHLETS_USERS_MoveItem
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MoveUp
		/// <summary>
		/// spDASHLETS_USERS_MoveUp
		/// </summary>
		public void spDASHLETS_USERS_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MoveUp
		/// <summary>
		/// spDASHLETS_USERS_MoveUp
		/// </summary>
		public void spDASHLETS_USERS_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MoveUp
		/// <summary>
		/// spDASHLETS_USERS_MoveUp
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Reorder
		/// <summary>
		/// spDASHLETS_USERS_Reorder
		/// </summary>
		public void spDASHLETS_USERS_Reorder(Guid gASSIGNED_USER_ID, string sDETAIL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Reorder
		/// <summary>
		/// spDASHLETS_USERS_Reorder
		/// </summary>
		public void spDASHLETS_USERS_Reorder(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Reorder
		/// <summary>
		/// spDASHLETS_USERS_Reorder
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_UpdateTitle
		/// <summary>
		/// spDASHLETS_USERS_UpdateTitle
		/// </summary>
		public void spDASHLETS_USERS_UpdateTitle(Guid gID, string sTITLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_UpdateTitle";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_UpdateTitle
		/// <summary>
		/// spDASHLETS_USERS_UpdateTitle
		/// </summary>
		public void spDASHLETS_USERS_UpdateTitle(Guid gID, string sTITLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_UpdateTitle";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_UpdateTitle
		/// <summary>
		/// spDASHLETS_USERS_UpdateTitle
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_UpdateTitle(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_UpdateTitle";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTITLE            = Sql.CreateParameter(cmd, "@TITLE"           , "string", 100);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_Delete
		/// <summary>
		/// spDETAILVIEWS_Delete
		/// </summary>
		public void spDETAILVIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_Delete
		/// <summary>
		/// spDETAILVIEWS_Delete
		/// </summary>
		public void spDETAILVIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_Delete
		/// <summary>
		/// spDETAILVIEWS_Delete
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_CnvBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_CnvBound
		/// </summary>
		public void spDETAILVIEWS_FIELDS_CnvBound(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_CnvBound";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_CnvBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_CnvBound
		/// </summary>
		public void spDETAILVIEWS_FIELDS_CnvBound(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_CnvBound";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_CnvBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_CnvBound
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_CnvBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_CnvBound";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_CnvTags
		/// <summary>
		/// spDETAILVIEWS_FIELDS_CnvTags
		/// </summary>
		public void spDETAILVIEWS_FIELDS_CnvTags(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_CnvTags";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_CnvTags
		/// <summary>
		/// spDETAILVIEWS_FIELDS_CnvTags
		/// </summary>
		public void spDETAILVIEWS_FIELDS_CnvTags(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_CnvTags";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_CnvTags
		/// <summary>
		/// spDETAILVIEWS_FIELDS_CnvTags
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_CnvTags(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_CnvTags";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Delete
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Delete
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Delete
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Delete
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_Delete
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Delete
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBlank(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBlank";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBlank(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBlank";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBlank
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsBlank(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBlank";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBound
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBound(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBound";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBound
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBound(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBound";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBound
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBound";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBoundList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sLIST_NAME, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundL";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundList";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBoundList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sLIST_NAME, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundL";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundList";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBoundList
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsBoundList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundL";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundList";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parLIST_NAME   = Sql.CreateParameter(cmd, "@LIST_NAME"  , "string",  50);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsButton
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsButton
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsButton(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsButton";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsButton
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsButton
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsButton(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsButton";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsButton
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsButton
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsButton";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsCheckBox(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckB";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckBox";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsCheckBox(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckB";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckBox";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsCheckBox(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckB";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckBox";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsDependList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sPARENT_FIELD, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDepend";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDependList";
							IDbDataParameter parDETAIL_NAME  = Sql.AddParameter(cmd, "@DETAIL_NAME" , sDETAIL_NAME   ,  50);
							IDbDataParameter parFIELD_INDEX  = Sql.AddParameter(cmd, "@FIELD_INDEX" , nFIELD_INDEX   );
							IDbDataParameter parDATA_LABEL   = Sql.AddParameter(cmd, "@DATA_LABEL"  , sDATA_LABEL    , 150);
							IDbDataParameter parDATA_FIELD   = Sql.AddParameter(cmd, "@DATA_FIELD"  , sDATA_FIELD    , 1000);
							IDbDataParameter parDATA_FORMAT  = Sql.AddParameter(cmd, "@DATA_FORMAT" , sDATA_FORMAT   );
							IDbDataParameter parPARENT_FIELD = Sql.AddParameter(cmd, "@PARENT_FIELD", sPARENT_FIELD  ,  30);
							IDbDataParameter parCOLSPAN      = Sql.AddParameter(cmd, "@COLSPAN"     , nCOLSPAN       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsDependList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sPARENT_FIELD, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDepend";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDependList";
				IDbDataParameter parDETAIL_NAME  = Sql.AddParameter(cmd, "@DETAIL_NAME" , sDETAIL_NAME   ,  50);
				IDbDataParameter parFIELD_INDEX  = Sql.AddParameter(cmd, "@FIELD_INDEX" , nFIELD_INDEX   );
				IDbDataParameter parDATA_LABEL   = Sql.AddParameter(cmd, "@DATA_LABEL"  , sDATA_LABEL    , 150);
				IDbDataParameter parDATA_FIELD   = Sql.AddParameter(cmd, "@DATA_FIELD"  , sDATA_FIELD    , 1000);
				IDbDataParameter parDATA_FORMAT  = Sql.AddParameter(cmd, "@DATA_FORMAT" , sDATA_FORMAT   );
				IDbDataParameter parPARENT_FIELD = Sql.AddParameter(cmd, "@PARENT_FIELD", sPARENT_FIELD  ,  30);
				IDbDataParameter parCOLSPAN      = Sql.AddParameter(cmd, "@COLSPAN"     , nCOLSPAN       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsDependList
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsDependList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDepend";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDependList";
			IDbDataParameter parDETAIL_NAME  = Sql.CreateParameter(cmd, "@DETAIL_NAME" , "string",  50);
			IDbDataParameter parFIELD_INDEX  = Sql.CreateParameter(cmd, "@FIELD_INDEX" , "Int32",   4);
			IDbDataParameter parDATA_LABEL   = Sql.CreateParameter(cmd, "@DATA_LABEL"  , "string", 150);
			IDbDataParameter parDATA_FIELD   = Sql.CreateParameter(cmd, "@DATA_FIELD"  , "string", 1000);
			IDbDataParameter parDATA_FORMAT  = Sql.CreateParameter(cmd, "@DATA_FORMAT" , "string", 104857600);
			IDbDataParameter parPARENT_FIELD = Sql.CreateParameter(cmd, "@PARENT_FIELD", "string",  30);
			IDbDataParameter parCOLSPAN      = Sql.CreateParameter(cmd, "@COLSPAN"     , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsertOnly(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnl";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnly";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parFIELD_TYPE  = Sql.AddParameter(cmd, "@FIELD_TYPE" , sFIELD_TYPE   ,  25);
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							IDbDataParameter parTOOL_TIP    = Sql.AddParameter(cmd, "@TOOL_TIP"   , sTOOL_TIP     , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsertOnly(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnl";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnly";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parFIELD_TYPE  = Sql.AddParameter(cmd, "@FIELD_TYPE" , sFIELD_TYPE   ,  25);
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				IDbDataParameter parTOOL_TIP    = Sql.AddParameter(cmd, "@TOOL_TIP"   , sTOOL_TIP     , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsertOnly
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnl";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnly";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parFIELD_TYPE  = Sql.CreateParameter(cmd, "@FIELD_TYPE" , "string",  25);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parURL_FIELD   = Sql.CreateParameter(cmd, "@URL_FIELD"  , "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parLIST_NAME   = Sql.CreateParameter(cmd, "@LIST_NAME"  , "string",  50);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			IDbDataParameter parTOOL_TIP    = Sql.CreateParameter(cmd, "@TOOL_TIP"   , "string", 150);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHeader(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHeader";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHeader(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHeader";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHeader
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsHeader(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHeader";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHyperLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHyperLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHyperLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperL";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperLink";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHyperLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHyperLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHyperLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperL";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperLink";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsHyperLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHyperLink
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsHyperLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperL";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperLink";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parURL_FIELD   = Sql.CreateParameter(cmd, "@URL_FIELD"  , "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsJavaScript
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsJavaScript
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsJavaScript(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaSc";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaScript";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsJavaScript
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsJavaScript
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsJavaScript(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaSc";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaScript";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsJavaScript
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsJavaScript
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsJavaScript(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaSc";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaScript";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parURL_FIELD   = Sql.CreateParameter(cmd, "@URL_FIELD"  , "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModule
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModule
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModule(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModule
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModule
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModule(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsModule
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModule
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsModule(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parMODULE_TYPE = Sql.CreateParameter(cmd, "@MODULE_TYPE", "string",  25);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModuleLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModuleLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModuleLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FORMAT, string sURL_TARGET, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModuleLink";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModuleLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModuleLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModuleLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FORMAT, string sURL_TARGET, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModuleLink";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsModuleLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModuleLink
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsModuleLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModuleLink";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parMODULE_TYPE = Sql.CreateParameter(cmd, "@MODULE_TYPE", "string",  25);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsSeparator(string sDETAIL_NAME, Int32 nFIELD_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSepara";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSeparator";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsSeparator(string sDETAIL_NAME, Int32 nFIELD_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSepara";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSeparator";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsSeparator
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsSeparator(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSepara";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSeparator";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsTags
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsTags
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsTags(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsTags";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsTags
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsTags
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsTags(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsTags";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsTags
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsTags
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsTags(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsTags";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Update
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Update
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Update(ref Guid gID, string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP, string sMODULE_TYPE, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  25);
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       );
							IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
							IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
							IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
							IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
							IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Update
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Update
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Update(ref Guid gID, string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP, string sMODULE_TYPE, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  25);
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       );
				IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
				IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
				IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
				IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
				IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_Update
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Update
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parFIELD_TYPE       = Sql.CreateParameter(cmd, "@FIELD_TYPE"      , "string",  25);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 1000);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_FIELD        = Sql.CreateParameter(cmd, "@URL_FIELD"       , "string", 104857600);
			IDbDataParameter parURL_FORMAT       = Sql.CreateParameter(cmd, "@URL_FORMAT"      , "string", 104857600);
			IDbDataParameter parURL_TARGET       = Sql.CreateParameter(cmd, "@URL_TARGET"      , "string",  60);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parTOOL_TIP         = Sql.CreateParameter(cmd, "@TOOL_TIP"        , "string", 150);
			IDbDataParameter parMODULE_TYPE      = Sql.CreateParameter(cmd, "@MODULE_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_FIELD     = Sql.CreateParameter(cmd, "@PARENT_FIELD"    , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateTip(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateTip";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateTip(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateTip";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateTip
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_UpdateTip(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateTip";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parTOOL_TIP         = Sql.CreateParameter(cmd, "@TOOL_TIP"        , "string", 150);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateUrl
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateUrl
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateUrl(string sDETAIL_NAME, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateUrl";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
							IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
							IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
							IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateUrl
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateUrl
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateUrl(string sDETAIL_NAME, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateUrl";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
				IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
				IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
				IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_UpdateUrl
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateUrl
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_UpdateUrl(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateUrl";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 1000);
			IDbDataParameter parURL_FIELD        = Sql.CreateParameter(cmd, "@URL_FIELD"       , "string", 104857600);
			IDbDataParameter parURL_FORMAT       = Sql.CreateParameter(cmd, "@URL_FORMAT"      , "string", 104857600);
			IDbDataParameter parURL_TARGET       = Sql.CreateParameter(cmd, "@URL_TARGET"      , "string",  60);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
							IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
							IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
							IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
				IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
				IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
				IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_InsertOnly
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string",  50);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parVIEW_NAME    = Sql.CreateParameter(cmd, "@VIEW_NAME"   , "string",  50);
			IDbDataParameter parLABEL_WIDTH  = Sql.CreateParameter(cmd, "@LABEL_WIDTH" , "string",  10);
			IDbDataParameter parFIELD_WIDTH  = Sql.CreateParameter(cmd, "@FIELD_WIDTH" , "string",  10);
			IDbDataParameter parDATA_COLUMNS = Sql.CreateParameter(cmd, "@DATA_COLUMNS", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_De";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_De";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_De";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Di";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Di";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Di";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Down(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Do";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Down";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Down(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Do";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Down";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Down(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Do";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Down";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_En";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_En";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_En";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_InsertOnly(string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_In";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_InsertOnly";
							IDbDataParameter parDETAIL_NAME        = Sql.AddParameter(cmd, "@DETAIL_NAME"       , sDETAIL_NAME         ,  50);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  50);
							IDbDataParameter parCONTROL_NAME       = Sql.AddParameter(cmd, "@CONTROL_NAME"      , sCONTROL_NAME        , 100);
							IDbDataParameter parRELATIONSHIP_ORDER = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER", nRELATIONSHIP_ORDER  );
							IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               , 100);
							IDbDataParameter parTABLE_NAME         = Sql.AddParameter(cmd, "@TABLE_NAME"        , sTABLE_NAME          ,  50);
							IDbDataParameter parPRIMARY_FIELD      = Sql.AddParameter(cmd, "@PRIMARY_FIELD"     , sPRIMARY_FIELD       , 255);
							IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
							IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_InsertOnly(string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_In";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_InsertOnly";
				IDbDataParameter parDETAIL_NAME        = Sql.AddParameter(cmd, "@DETAIL_NAME"       , sDETAIL_NAME         ,  50);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  50);
				IDbDataParameter parCONTROL_NAME       = Sql.AddParameter(cmd, "@CONTROL_NAME"      , sCONTROL_NAME        , 100);
				IDbDataParameter parRELATIONSHIP_ORDER = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER", nRELATIONSHIP_ORDER  );
				IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               , 100);
				IDbDataParameter parTABLE_NAME         = Sql.AddParameter(cmd, "@TABLE_NAME"        , sTABLE_NAME          ,  50);
				IDbDataParameter parPRIMARY_FIELD      = Sql.AddParameter(cmd, "@PRIMARY_FIELD"     , sPRIMARY_FIELD       , 255);
				IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
				IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_In";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_InsertOnly";
			IDbDataParameter parDETAIL_NAME        = Sql.CreateParameter(cmd, "@DETAIL_NAME"       , "string",  50);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  50);
			IDbDataParameter parCONTROL_NAME       = Sql.CreateParameter(cmd, "@CONTROL_NAME"      , "string", 100);
			IDbDataParameter parRELATIONSHIP_ORDER = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER", "Int32",   4);
			IDbDataParameter parTITLE              = Sql.CreateParameter(cmd, "@TITLE"             , "string", 100);
			IDbDataParameter parTABLE_NAME         = Sql.CreateParameter(cmd, "@TABLE_NAME"        , "string",  50);
			IDbDataParameter parPRIMARY_FIELD      = Sql.CreateParameter(cmd, "@PRIMARY_FIELD"     , "string", 255);
			IDbDataParameter parSORT_FIELD         = Sql.CreateParameter(cmd, "@SORT_FIELD"        , "string",  50);
			IDbDataParameter parSORT_DIRECTION     = Sql.CreateParameter(cmd, "@SORT_DIRECTION"    , "string",  10);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Item(string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_It";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Item";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Item(string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_It";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Item";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Item(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_It";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Item";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Mo";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Mo";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Mo";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION, bool bRELATIONSHIP_ENABLED, string sINSIGHT_VIEW, string sINSIGHT_LABEL)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Update";
							IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
							IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
							IDbDataParameter parDETAIL_NAME          = Sql.AddParameter(cmd, "@DETAIL_NAME"         , sDETAIL_NAME           ,  50);
							IDbDataParameter parMODULE_NAME          = Sql.AddParameter(cmd, "@MODULE_NAME"         , sMODULE_NAME           ,  50);
							IDbDataParameter parCONTROL_NAME         = Sql.AddParameter(cmd, "@CONTROL_NAME"        , sCONTROL_NAME          , 100);
							IDbDataParameter parRELATIONSHIP_ORDER   = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"  , nRELATIONSHIP_ORDER    );
							IDbDataParameter parTITLE                = Sql.AddParameter(cmd, "@TITLE"               , sTITLE                 , 100);
							IDbDataParameter parTABLE_NAME           = Sql.AddParameter(cmd, "@TABLE_NAME"          , sTABLE_NAME            ,  50);
							IDbDataParameter parPRIMARY_FIELD        = Sql.AddParameter(cmd, "@PRIMARY_FIELD"       , sPRIMARY_FIELD         , 255);
							IDbDataParameter parSORT_FIELD           = Sql.AddParameter(cmd, "@SORT_FIELD"          , sSORT_FIELD            ,  50);
							IDbDataParameter parSORT_DIRECTION       = Sql.AddParameter(cmd, "@SORT_DIRECTION"      , sSORT_DIRECTION        ,  10);
							IDbDataParameter parRELATIONSHIP_ENABLED = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED", bRELATIONSHIP_ENABLED  );
							IDbDataParameter parINSIGHT_VIEW         = Sql.AddParameter(cmd, "@INSIGHT_VIEW"        , sINSIGHT_VIEW          ,  50);
							IDbDataParameter parINSIGHT_LABEL        = Sql.AddParameter(cmd, "@INSIGHT_LABEL"       , sINSIGHT_LABEL         , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION, bool bRELATIONSHIP_ENABLED, string sINSIGHT_VIEW, string sINSIGHT_LABEL, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Update";
				IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
				IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
				IDbDataParameter parDETAIL_NAME          = Sql.AddParameter(cmd, "@DETAIL_NAME"         , sDETAIL_NAME           ,  50);
				IDbDataParameter parMODULE_NAME          = Sql.AddParameter(cmd, "@MODULE_NAME"         , sMODULE_NAME           ,  50);
				IDbDataParameter parCONTROL_NAME         = Sql.AddParameter(cmd, "@CONTROL_NAME"        , sCONTROL_NAME          , 100);
				IDbDataParameter parRELATIONSHIP_ORDER   = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"  , nRELATIONSHIP_ORDER    );
				IDbDataParameter parTITLE                = Sql.AddParameter(cmd, "@TITLE"               , sTITLE                 , 100);
				IDbDataParameter parTABLE_NAME           = Sql.AddParameter(cmd, "@TABLE_NAME"          , sTABLE_NAME            ,  50);
				IDbDataParameter parPRIMARY_FIELD        = Sql.AddParameter(cmd, "@PRIMARY_FIELD"       , sPRIMARY_FIELD         , 255);
				IDbDataParameter parSORT_FIELD           = Sql.AddParameter(cmd, "@SORT_FIELD"          , sSORT_FIELD            ,  50);
				IDbDataParameter parSORT_DIRECTION       = Sql.AddParameter(cmd, "@SORT_DIRECTION"      , sSORT_DIRECTION        ,  10);
				IDbDataParameter parRELATIONSHIP_ENABLED = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED", bRELATIONSHIP_ENABLED  );
				IDbDataParameter parINSIGHT_VIEW         = Sql.AddParameter(cmd, "@INSIGHT_VIEW"        , sINSIGHT_VIEW          ,  50);
				IDbDataParameter parINSIGHT_LABEL        = Sql.AddParameter(cmd, "@INSIGHT_LABEL"       , sINSIGHT_LABEL         , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Update";
			IDbDataParameter parID                   = Sql.CreateParameter(cmd, "@ID"                  , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID     = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"    , "Guid",  16);
			IDbDataParameter parDETAIL_NAME          = Sql.CreateParameter(cmd, "@DETAIL_NAME"         , "string",  50);
			IDbDataParameter parMODULE_NAME          = Sql.CreateParameter(cmd, "@MODULE_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_NAME         = Sql.CreateParameter(cmd, "@CONTROL_NAME"        , "string", 100);
			IDbDataParameter parRELATIONSHIP_ORDER   = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER"  , "Int32",   4);
			IDbDataParameter parTITLE                = Sql.CreateParameter(cmd, "@TITLE"               , "string", 100);
			IDbDataParameter parTABLE_NAME           = Sql.CreateParameter(cmd, "@TABLE_NAME"          , "string",  50);
			IDbDataParameter parPRIMARY_FIELD        = Sql.CreateParameter(cmd, "@PRIMARY_FIELD"       , "string", 255);
			IDbDataParameter parSORT_FIELD           = Sql.CreateParameter(cmd, "@SORT_FIELD"          , "string",  50);
			IDbDataParameter parSORT_DIRECTION       = Sql.CreateParameter(cmd, "@SORT_DIRECTION"      , "string",  10);
			IDbDataParameter parRELATIONSHIP_ENABLED = Sql.CreateParameter(cmd, "@RELATIONSHIP_ENABLED", "bool",   1);
			IDbDataParameter parINSIGHT_VIEW         = Sql.CreateParameter(cmd, "@INSIGHT_VIEW"        , "string",  50);
			IDbDataParameter parINSIGHT_LABEL        = Sql.CreateParameter(cmd, "@INSIGHT_LABEL"       , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_UpdateInsight
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_UpdateInsight
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_UpdateInsight(string sDETAIL_NAME, string sCONTROL_NAME, string sINSIGHT_LABEL, string sINSIGHT_VIEW, string sINSIGHT_OPERATOR)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_UpdateInsight";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
							IDbDataParameter parINSIGHT_LABEL    = Sql.AddParameter(cmd, "@INSIGHT_LABEL"   , sINSIGHT_LABEL     , 100);
							IDbDataParameter parINSIGHT_VIEW     = Sql.AddParameter(cmd, "@INSIGHT_VIEW"    , sINSIGHT_VIEW      ,  50);
							IDbDataParameter parINSIGHT_OPERATOR = Sql.AddParameter(cmd, "@INSIGHT_OPERATOR", sINSIGHT_OPERATOR  , 2000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_UpdateInsight
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_UpdateInsight
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_UpdateInsight(string sDETAIL_NAME, string sCONTROL_NAME, string sINSIGHT_LABEL, string sINSIGHT_VIEW, string sINSIGHT_OPERATOR, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_UpdateInsight";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
				IDbDataParameter parINSIGHT_LABEL    = Sql.AddParameter(cmd, "@INSIGHT_LABEL"   , sINSIGHT_LABEL     , 100);
				IDbDataParameter parINSIGHT_VIEW     = Sql.AddParameter(cmd, "@INSIGHT_VIEW"    , sINSIGHT_VIEW      ,  50);
				IDbDataParameter parINSIGHT_OPERATOR = Sql.AddParameter(cmd, "@INSIGHT_OPERATOR", sINSIGHT_OPERATOR  , 2000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_UpdateInsight
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_UpdateInsight
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_UpdateInsight(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_UpdateInsight";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parCONTROL_NAME     = Sql.CreateParameter(cmd, "@CONTROL_NAME"    , "string", 100);
			IDbDataParameter parINSIGHT_LABEL    = Sql.CreateParameter(cmd, "@INSIGHT_LABEL"   , "string", 100);
			IDbDataParameter parINSIGHT_VIEW     = Sql.CreateParameter(cmd, "@INSIGHT_VIEW"    , "string",  50);
			IDbDataParameter parINSIGHT_OPERATOR = Sql.CreateParameter(cmd, "@INSIGHT_OPERATOR", "string", 2000);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_Update
		/// <summary>
		/// spDETAILVIEWS_Update
		/// </summary>
		public void spDETAILVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parLABEL_WIDTH        = Sql.AddParameter(cmd, "@LABEL_WIDTH"       , sLABEL_WIDTH         ,  10);
							IDbDataParameter parFIELD_WIDTH        = Sql.AddParameter(cmd, "@FIELD_WIDTH"       , sFIELD_WIDTH         ,  10);
							IDbDataParameter parDATA_COLUMNS       = Sql.AddParameter(cmd, "@DATA_COLUMNS"      , nDATA_COLUMNS        );
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_Update
		/// <summary>
		/// spDETAILVIEWS_Update
		/// </summary>
		public void spDETAILVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parLABEL_WIDTH        = Sql.AddParameter(cmd, "@LABEL_WIDTH"       , sLABEL_WIDTH         ,  10);
				IDbDataParameter parFIELD_WIDTH        = Sql.AddParameter(cmd, "@FIELD_WIDTH"       , sFIELD_WIDTH         ,  10);
				IDbDataParameter parDATA_COLUMNS       = Sql.AddParameter(cmd, "@DATA_COLUMNS"      , nDATA_COLUMNS        );
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDETAILVIEWS_Update
		/// <summary>
		/// spDETAILVIEWS_Update
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parLABEL_WIDTH        = Sql.CreateParameter(cmd, "@LABEL_WIDTH"       , "string",  10);
			IDbDataParameter parFIELD_WIDTH        = Sql.CreateParameter(cmd, "@FIELD_WIDTH"       , "string",  10);
			IDbDataParameter parDATA_COLUMNS       = Sql.CreateParameter(cmd, "@DATA_COLUMNS"      , "Int32",   4);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_UpdateEvents
		/// <summary>
		/// spDETAILVIEWS_UpdateEvents
		/// </summary>
		public void spDETAILVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_UpdateEvents";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_UpdateEvents
		/// <summary>
		/// spDETAILVIEWS_UpdateEvents
		/// </summary>
		public void spDETAILVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_UpdateEvents";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_UpdateEvents
		/// <summary>
		/// spDETAILVIEWS_UpdateEvents
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_UpdateEvents(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_UpdateEvents";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spDOCUMENT_REVISIONS_Delete
		/// <summary>
		/// spDOCUMENT_REVISIONS_Delete
		/// </summary>
		public void spDOCUMENT_REVISIONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENT_REVISIONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENT_REVISIONS_Delete
		/// <summary>
		/// spDOCUMENT_REVISIONS_Delete
		/// </summary>
		public void spDOCUMENT_REVISIONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENT_REVISIONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENT_REVISIONS_Delete
		/// <summary>
		/// spDOCUMENT_REVISIONS_Delete
		/// </summary>
		public IDbCommand cmdDOCUMENT_REVISIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENT_REVISIONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENT_REVISIONS_Duplicate
		/// <summary>
		/// spDOCUMENT_REVISIONS_Duplicate
		/// </summary>
		public void spDOCUMENT_REVISIONS_Duplicate(ref Guid gID, Guid gDOCUMENT_ID, Guid gDUPLICATE_ID, string sREVISION, string sCHANGE_LOG)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENT_REVISIONS_Duplicate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
							IDbDataParameter parREVISION         = Sql.AddParameter(cmd, "@REVISION"        , sREVISION          ,  25);
							IDbDataParameter parCHANGE_LOG       = Sql.AddParameter(cmd, "@CHANGE_LOG"      , sCHANGE_LOG        , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENT_REVISIONS_Duplicate
		/// <summary>
		/// spDOCUMENT_REVISIONS_Duplicate
		/// </summary>
		public void spDOCUMENT_REVISIONS_Duplicate(ref Guid gID, Guid gDOCUMENT_ID, Guid gDUPLICATE_ID, string sREVISION, string sCHANGE_LOG, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENT_REVISIONS_Duplicate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
				IDbDataParameter parREVISION         = Sql.AddParameter(cmd, "@REVISION"        , sREVISION          ,  25);
				IDbDataParameter parCHANGE_LOG       = Sql.AddParameter(cmd, "@CHANGE_LOG"      , sCHANGE_LOG        , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDOCUMENT_REVISIONS_Duplicate
		/// <summary>
		/// spDOCUMENT_REVISIONS_Duplicate
		/// </summary>
		public IDbCommand cmdDOCUMENT_REVISIONS_Duplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENT_REVISIONS_Duplicate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			IDbDataParameter parDUPLICATE_ID     = Sql.CreateParameter(cmd, "@DUPLICATE_ID"    , "Guid",  16);
			IDbDataParameter parREVISION         = Sql.CreateParameter(cmd, "@REVISION"        , "string",  25);
			IDbDataParameter parCHANGE_LOG       = Sql.CreateParameter(cmd, "@CHANGE_LOG"      , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDOCUMENT_REVISIONS_Insert
		/// <summary>
		/// spDOCUMENT_REVISIONS_Insert
		/// </summary>
		public void spDOCUMENT_REVISIONS_Insert(ref Guid gID, Guid gDOCUMENT_ID, string sREVISION, string sCHANGE_LOG, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENT_REVISIONS_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							IDbDataParameter parREVISION         = Sql.AddParameter(cmd, "@REVISION"        , sREVISION          ,  25);
							IDbDataParameter parCHANGE_LOG       = Sql.AddParameter(cmd, "@CHANGE_LOG"      , sCHANGE_LOG        , 255);
							IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
							IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
							IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENT_REVISIONS_Insert
		/// <summary>
		/// spDOCUMENT_REVISIONS_Insert
		/// </summary>
		public void spDOCUMENT_REVISIONS_Insert(ref Guid gID, Guid gDOCUMENT_ID, string sREVISION, string sCHANGE_LOG, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENT_REVISIONS_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				IDbDataParameter parREVISION         = Sql.AddParameter(cmd, "@REVISION"        , sREVISION          ,  25);
				IDbDataParameter parCHANGE_LOG       = Sql.AddParameter(cmd, "@CHANGE_LOG"      , sCHANGE_LOG        , 255);
				IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
				IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
				IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDOCUMENT_REVISIONS_Insert
		/// <summary>
		/// spDOCUMENT_REVISIONS_Insert
		/// </summary>
		public IDbCommand cmdDOCUMENT_REVISIONS_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENT_REVISIONS_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			IDbDataParameter parREVISION         = Sql.CreateParameter(cmd, "@REVISION"        , "string",  25);
			IDbDataParameter parCHANGE_LOG       = Sql.CreateParameter(cmd, "@CHANGE_LOG"      , "string", 255);
			IDbDataParameter parFILENAME         = Sql.CreateParameter(cmd, "@FILENAME"        , "string", 255);
			IDbDataParameter parFILE_EXT         = Sql.CreateParameter(cmd, "@FILE_EXT"        , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE   = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_BUGS_Delete
		/// <summary>
		/// spDOCUMENTS_BUGS_Delete
		/// </summary>
		public void spDOCUMENTS_BUGS_Delete(Guid gBUG_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_BUGS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_BUGS_Delete
		/// <summary>
		/// spDOCUMENTS_BUGS_Delete
		/// </summary>
		public void spDOCUMENTS_BUGS_Delete(Guid gBUG_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_BUGS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_BUGS_Delete
		/// <summary>
		/// spDOCUMENTS_BUGS_Delete
		/// </summary>
		public IDbCommand cmdDOCUMENTS_BUGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_BUGS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_BUGS_GetLatest
		/// <summary>
		/// spDOCUMENTS_BUGS_GetLatest
		/// </summary>
		public void spDOCUMENTS_BUGS_GetLatest(Guid gBUG_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_BUGS_GetLatest";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_BUGS_GetLatest
		/// <summary>
		/// spDOCUMENTS_BUGS_GetLatest
		/// </summary>
		public void spDOCUMENTS_BUGS_GetLatest(Guid gBUG_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_BUGS_GetLatest";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_BUGS_GetLatest
		/// <summary>
		/// spDOCUMENTS_BUGS_GetLatest
		/// </summary>
		public IDbCommand cmdDOCUMENTS_BUGS_GetLatest(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_BUGS_GetLatest";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_BUGS_Update
		/// <summary>
		/// spDOCUMENTS_BUGS_Update
		/// </summary>
		public void spDOCUMENTS_BUGS_Update(Guid gBUG_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_BUGS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_BUGS_Update
		/// <summary>
		/// spDOCUMENTS_BUGS_Update
		/// </summary>
		public void spDOCUMENTS_BUGS_Update(Guid gBUG_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_BUGS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_BUGS_Update
		/// <summary>
		/// spDOCUMENTS_BUGS_Update
		/// </summary>
		public IDbCommand cmdDOCUMENTS_BUGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_BUGS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_CASES_Delete
		/// <summary>
		/// spDOCUMENTS_CASES_Delete
		/// </summary>
		public void spDOCUMENTS_CASES_Delete(Guid gCASE_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_CASES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_CASES_Delete
		/// <summary>
		/// spDOCUMENTS_CASES_Delete
		/// </summary>
		public void spDOCUMENTS_CASES_Delete(Guid gCASE_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_CASES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_CASES_Delete
		/// <summary>
		/// spDOCUMENTS_CASES_Delete
		/// </summary>
		public IDbCommand cmdDOCUMENTS_CASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_CASES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_CASES_GetLatest
		/// <summary>
		/// spDOCUMENTS_CASES_GetLatest
		/// </summary>
		public void spDOCUMENTS_CASES_GetLatest(Guid gCASE_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_CASES_GetLatest";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_CASES_GetLatest
		/// <summary>
		/// spDOCUMENTS_CASES_GetLatest
		/// </summary>
		public void spDOCUMENTS_CASES_GetLatest(Guid gCASE_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_CASES_GetLatest";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_CASES_GetLatest
		/// <summary>
		/// spDOCUMENTS_CASES_GetLatest
		/// </summary>
		public IDbCommand cmdDOCUMENTS_CASES_GetLatest(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_CASES_GetLatest";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_CASES_Update
		/// <summary>
		/// spDOCUMENTS_CASES_Update
		/// </summary>
		public void spDOCUMENTS_CASES_Update(Guid gCASE_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_CASES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_CASES_Update
		/// <summary>
		/// spDOCUMENTS_CASES_Update
		/// </summary>
		public void spDOCUMENTS_CASES_Update(Guid gCASE_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_CASES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_CASES_Update
		/// <summary>
		/// spDOCUMENTS_CASES_Update
		/// </summary>
		public IDbCommand cmdDOCUMENTS_CASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_CASES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_CONTENT_InitPointer
		/// <summary>
		/// spDOCUMENTS_CONTENT_InitPointer
		/// </summary>
		public void spDOCUMENTS_CONTENT_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDOCUMENTS_CONTENT_InitPointe";
							else
								cmd.CommandText = "spDOCUMENTS_CONTENT_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_CONTENT_InitPointer
		/// <summary>
		/// spDOCUMENTS_CONTENT_InitPointer
		/// </summary>
		public void spDOCUMENTS_CONTENT_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDOCUMENTS_CONTENT_InitPointe";
				else
					cmd.CommandText = "spDOCUMENTS_CONTENT_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdDOCUMENTS_CONTENT_InitPointer
		/// <summary>
		/// spDOCUMENTS_CONTENT_InitPointer
		/// </summary>
		public IDbCommand cmdDOCUMENTS_CONTENT_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDOCUMENTS_CONTENT_InitPointe";
			else
				cmd.CommandText = "spDOCUMENTS_CONTENT_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_CONTENT_ReadOffset
		/// <summary>
		/// spDOCUMENTS_CONTENT_ReadOffset
		/// </summary>
		public void spDOCUMENTS_CONTENT_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_CONTENT_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_CONTENT_ReadOffset
		/// <summary>
		/// spDOCUMENTS_CONTENT_ReadOffset
		/// </summary>
		public void spDOCUMENTS_CONTENT_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_CONTENT_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdDOCUMENTS_CONTENT_ReadOffset
		/// <summary>
		/// spDOCUMENTS_CONTENT_ReadOffset
		/// </summary>
		public IDbCommand cmdDOCUMENTS_CONTENT_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_CONTENT_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_CONTENT_Update
		/// <summary>
		/// spDOCUMENTS_CONTENT_Update
		/// </summary>
		public void spDOCUMENTS_CONTENT_Update(Guid gID, byte[] binCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_CONTENT_Update";
							IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
							IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_CONTENT_Update
		/// <summary>
		/// spDOCUMENTS_CONTENT_Update
		/// </summary>
		public void spDOCUMENTS_CONTENT_Update(Guid gID, byte[] binCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_CONTENT_Update";
				IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
				IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_CONTENT_Update
		/// <summary>
		/// spDOCUMENTS_CONTENT_Update
		/// </summary>
		public IDbCommand cmdDOCUMENTS_CONTENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_CONTENT_Update";
			IDbDataParameter parID      = Sql.CreateParameter(cmd, "@ID"     , "Guid",  16);
			IDbDataParameter parCONTENT = Sql.CreateParameter(cmd, "@CONTENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_CONTENT_WriteOffset
		/// <summary>
		/// spDOCUMENTS_CONTENT_WriteOffset
		/// </summary>
		public void spDOCUMENTS_CONTENT_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDOCUMENTS_CONTENT_WriteOffse";
							else
								cmd.CommandText = "spDOCUMENTS_CONTENT_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_CONTENT_WriteOffset
		/// <summary>
		/// spDOCUMENTS_CONTENT_WriteOffset
		/// </summary>
		public void spDOCUMENTS_CONTENT_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDOCUMENTS_CONTENT_WriteOffse";
				else
					cmd.CommandText = "spDOCUMENTS_CONTENT_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_CONTENT_WriteOffset
		/// <summary>
		/// spDOCUMENTS_CONTENT_WriteOffset
		/// </summary>
		public IDbCommand cmdDOCUMENTS_CONTENT_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDOCUMENTS_CONTENT_WriteOffse";
			else
				cmd.CommandText = "spDOCUMENTS_CONTENT_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_Delete
		/// <summary>
		/// spDOCUMENTS_Delete
		/// </summary>
		public void spDOCUMENTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_Delete
		/// <summary>
		/// spDOCUMENTS_Delete
		/// </summary>
		public void spDOCUMENTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_Delete
		/// <summary>
		/// spDOCUMENTS_Delete
		/// </summary>
		public IDbCommand cmdDOCUMENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_InsRelated
		/// <summary>
		/// spDOCUMENTS_InsRelated
		/// </summary>
		public void spDOCUMENTS_InsRelated(Guid gDOCUMENT_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_InsRelated";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_InsRelated
		/// <summary>
		/// spDOCUMENTS_InsRelated
		/// </summary>
		public void spDOCUMENTS_InsRelated(Guid gDOCUMENT_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_InsRelated";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_InsRelated
		/// <summary>
		/// spDOCUMENTS_InsRelated
		/// </summary>
		public IDbCommand cmdDOCUMENTS_InsRelated(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_InsRelated";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_MassDelete
		/// <summary>
		/// spDOCUMENTS_MassDelete
		/// </summary>
		public void spDOCUMENTS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_MassDelete
		/// <summary>
		/// spDOCUMENTS_MassDelete
		/// </summary>
		public void spDOCUMENTS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_MassDelete
		/// <summary>
		/// spDOCUMENTS_MassDelete
		/// </summary>
		public IDbCommand cmdDOCUMENTS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_MassUpdate
		/// <summary>
		/// spDOCUMENTS_MassUpdate
		/// </summary>
		public void spDOCUMENTS_MassUpdate(string sID_LIST, DateTime dtACTIVE_DATE, DateTime dtEXP_DATE, string sCATEGORY_ID, string sSUBCATEGORY_ID, string sSTATUS_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACTIVE_DATE      = Sql.AddParameter(cmd, "@ACTIVE_DATE"     , dtACTIVE_DATE      );
							IDbDataParameter parEXP_DATE         = Sql.AddParameter(cmd, "@EXP_DATE"        , dtEXP_DATE         );
							IDbDataParameter parCATEGORY_ID      = Sql.AddParameter(cmd, "@CATEGORY_ID"     , sCATEGORY_ID       ,  25);
							IDbDataParameter parSUBCATEGORY_ID   = Sql.AddParameter(cmd, "@SUBCATEGORY_ID"  , sSUBCATEGORY_ID    ,  25);
							IDbDataParameter parSTATUS_ID        = Sql.AddParameter(cmd, "@STATUS_ID"       , sSTATUS_ID         ,  25);
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
							IDbDataParameter parTEAM_SET_ADD     = Sql.AddParameter(cmd, "@TEAM_SET_ADD"    , bTEAM_SET_ADD      );
							IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
							IDbDataParameter parTAG_SET_ADD      = Sql.AddParameter(cmd, "@TAG_SET_ADD"     , bTAG_SET_ADD       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_MassUpdate
		/// <summary>
		/// spDOCUMENTS_MassUpdate
		/// </summary>
		public void spDOCUMENTS_MassUpdate(string sID_LIST, DateTime dtACTIVE_DATE, DateTime dtEXP_DATE, string sCATEGORY_ID, string sSUBCATEGORY_ID, string sSTATUS_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACTIVE_DATE      = Sql.AddParameter(cmd, "@ACTIVE_DATE"     , dtACTIVE_DATE      );
				IDbDataParameter parEXP_DATE         = Sql.AddParameter(cmd, "@EXP_DATE"        , dtEXP_DATE         );
				IDbDataParameter parCATEGORY_ID      = Sql.AddParameter(cmd, "@CATEGORY_ID"     , sCATEGORY_ID       ,  25);
				IDbDataParameter parSUBCATEGORY_ID   = Sql.AddParameter(cmd, "@SUBCATEGORY_ID"  , sSUBCATEGORY_ID    ,  25);
				IDbDataParameter parSTATUS_ID        = Sql.AddParameter(cmd, "@STATUS_ID"       , sSTATUS_ID         ,  25);
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
				IDbDataParameter parTEAM_SET_ADD     = Sql.AddParameter(cmd, "@TEAM_SET_ADD"    , bTEAM_SET_ADD      );
				IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
				IDbDataParameter parTAG_SET_ADD      = Sql.AddParameter(cmd, "@TAG_SET_ADD"     , bTAG_SET_ADD       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_MassUpdate
		/// <summary>
		/// spDOCUMENTS_MassUpdate
		/// </summary>
		public IDbCommand cmdDOCUMENTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACTIVE_DATE      = Sql.CreateParameter(cmd, "@ACTIVE_DATE"     , "DateTime",   8);
			IDbDataParameter parEXP_DATE         = Sql.CreateParameter(cmd, "@EXP_DATE"        , "DateTime",   8);
			IDbDataParameter parCATEGORY_ID      = Sql.CreateParameter(cmd, "@CATEGORY_ID"     , "string",  25);
			IDbDataParameter parSUBCATEGORY_ID   = Sql.CreateParameter(cmd, "@SUBCATEGORY_ID"  , "string",  25);
			IDbDataParameter parSTATUS_ID        = Sql.CreateParameter(cmd, "@STATUS_ID"       , "string",  25);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST    = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"   , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD     = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"    , "bool",   1);
			IDbDataParameter parTAG_SET_NAME     = Sql.CreateParameter(cmd, "@TAG_SET_NAME"    , "string", 4000);
			IDbDataParameter parTAG_SET_ADD      = Sql.CreateParameter(cmd, "@TAG_SET_ADD"     , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_QUOTES_Update
		/// <summary>
		/// spDOCUMENTS_QUOTES_Update
		/// </summary>
		public void spDOCUMENTS_QUOTES_Update(Guid gDOCUMENT_ID, Guid gQUOTE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_QUOTES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_QUOTES_Update
		/// <summary>
		/// spDOCUMENTS_QUOTES_Update
		/// </summary>
		public void spDOCUMENTS_QUOTES_Update(Guid gDOCUMENT_ID, Guid gQUOTE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_QUOTES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_QUOTES_Update
		/// <summary>
		/// spDOCUMENTS_QUOTES_Update
		/// </summary>
		public IDbCommand cmdDOCUMENTS_QUOTES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_QUOTES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_STREAM_InsertPost
		/// <summary>
		/// spDOCUMENTS_STREAM_InsertPost
		/// </summary>
		public void spDOCUMENTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_STREAM_InsertPost
		/// <summary>
		/// spDOCUMENTS_STREAM_InsertPost
		/// </summary>
		public void spDOCUMENTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_STREAM_InsertPost
		/// <summary>
		/// spDOCUMENTS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdDOCUMENTS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_Undelete
		/// <summary>
		/// spDOCUMENTS_Undelete
		/// </summary>
		public void spDOCUMENTS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_Undelete
		/// <summary>
		/// spDOCUMENTS_Undelete
		/// </summary>
		public void spDOCUMENTS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDOCUMENTS_Undelete
		/// <summary>
		/// spDOCUMENTS_Undelete
		/// </summary>
		public IDbCommand cmdDOCUMENTS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spDOCUMENTS_Update
		/// <summary>
		/// spDOCUMENTS_Update
		/// </summary>
		public void spDOCUMENTS_Update(ref Guid gID, string sDOCUMENT_NAME, DateTime dtACTIVE_DATE, DateTime dtEXP_DATE, string sCATEGORY_ID, string sSUBCATEGORY_ID, string sSTATUS_ID, string sDESCRIPTION, bool bMAIL_MERGE_DOCUMENT, Guid gRELATED_DOC_ID, Guid gRELATED_DOC_REV_ID, bool bIS_TEMPLATE, string sTEMPLATE_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sPRIMARY_MODULE, string sSECONDARY_MODULE, Guid gASSIGNED_USER_ID, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDOCUMENTS_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parDOCUMENT_NAME       = Sql.AddParameter(cmd, "@DOCUMENT_NAME"      , sDOCUMENT_NAME        , 255);
							IDbDataParameter parACTIVE_DATE         = Sql.AddParameter(cmd, "@ACTIVE_DATE"        , dtACTIVE_DATE         );
							IDbDataParameter parEXP_DATE            = Sql.AddParameter(cmd, "@EXP_DATE"           , dtEXP_DATE            );
							IDbDataParameter parCATEGORY_ID         = Sql.AddParameter(cmd, "@CATEGORY_ID"        , sCATEGORY_ID          ,  25);
							IDbDataParameter parSUBCATEGORY_ID      = Sql.AddParameter(cmd, "@SUBCATEGORY_ID"     , sSUBCATEGORY_ID       ,  25);
							IDbDataParameter parSTATUS_ID           = Sql.AddParameter(cmd, "@STATUS_ID"          , sSTATUS_ID            ,  25);
							IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
							IDbDataParameter parMAIL_MERGE_DOCUMENT = Sql.AddParameter(cmd, "@MAIL_MERGE_DOCUMENT", bMAIL_MERGE_DOCUMENT  );
							IDbDataParameter parRELATED_DOC_ID      = Sql.AddParameter(cmd, "@RELATED_DOC_ID"     , gRELATED_DOC_ID       );
							IDbDataParameter parRELATED_DOC_REV_ID  = Sql.AddParameter(cmd, "@RELATED_DOC_REV_ID" , gRELATED_DOC_REV_ID   );
							IDbDataParameter parIS_TEMPLATE         = Sql.AddParameter(cmd, "@IS_TEMPLATE"        , bIS_TEMPLATE          );
							IDbDataParameter parTEMPLATE_TYPE       = Sql.AddParameter(cmd, "@TEMPLATE_TYPE"      , sTEMPLATE_TYPE        ,  25);
							IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
							IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
							IDbDataParameter parPRIMARY_MODULE      = Sql.AddParameter(cmd, "@PRIMARY_MODULE"     , sPRIMARY_MODULE       ,  25);
							IDbDataParameter parSECONDARY_MODULE    = Sql.AddParameter(cmd, "@SECONDARY_MODULE"   , sSECONDARY_MODULE     ,  25);
							IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
							IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
							IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDOCUMENTS_Update
		/// <summary>
		/// spDOCUMENTS_Update
		/// </summary>
		public void spDOCUMENTS_Update(ref Guid gID, string sDOCUMENT_NAME, DateTime dtACTIVE_DATE, DateTime dtEXP_DATE, string sCATEGORY_ID, string sSUBCATEGORY_ID, string sSTATUS_ID, string sDESCRIPTION, bool bMAIL_MERGE_DOCUMENT, Guid gRELATED_DOC_ID, Guid gRELATED_DOC_REV_ID, bool bIS_TEMPLATE, string sTEMPLATE_TYPE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sPRIMARY_MODULE, string sSECONDARY_MODULE, Guid gASSIGNED_USER_ID, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDOCUMENTS_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parDOCUMENT_NAME       = Sql.AddParameter(cmd, "@DOCUMENT_NAME"      , sDOCUMENT_NAME        , 255);
				IDbDataParameter parACTIVE_DATE         = Sql.AddParameter(cmd, "@ACTIVE_DATE"        , dtACTIVE_DATE         );
				IDbDataParameter parEXP_DATE            = Sql.AddParameter(cmd, "@EXP_DATE"           , dtEXP_DATE            );
				IDbDataParameter parCATEGORY_ID         = Sql.AddParameter(cmd, "@CATEGORY_ID"        , sCATEGORY_ID          ,  25);
				IDbDataParameter parSUBCATEGORY_ID      = Sql.AddParameter(cmd, "@SUBCATEGORY_ID"     , sSUBCATEGORY_ID       ,  25);
				IDbDataParameter parSTATUS_ID           = Sql.AddParameter(cmd, "@STATUS_ID"          , sSTATUS_ID            ,  25);
				IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
				IDbDataParameter parMAIL_MERGE_DOCUMENT = Sql.AddParameter(cmd, "@MAIL_MERGE_DOCUMENT", bMAIL_MERGE_DOCUMENT  );
				IDbDataParameter parRELATED_DOC_ID      = Sql.AddParameter(cmd, "@RELATED_DOC_ID"     , gRELATED_DOC_ID       );
				IDbDataParameter parRELATED_DOC_REV_ID  = Sql.AddParameter(cmd, "@RELATED_DOC_REV_ID" , gRELATED_DOC_REV_ID   );
				IDbDataParameter parIS_TEMPLATE         = Sql.AddParameter(cmd, "@IS_TEMPLATE"        , bIS_TEMPLATE          );
				IDbDataParameter parTEMPLATE_TYPE       = Sql.AddParameter(cmd, "@TEMPLATE_TYPE"      , sTEMPLATE_TYPE        ,  25);
				IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
				IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
				IDbDataParameter parPRIMARY_MODULE      = Sql.AddParameter(cmd, "@PRIMARY_MODULE"     , sPRIMARY_MODULE       ,  25);
				IDbDataParameter parSECONDARY_MODULE    = Sql.AddParameter(cmd, "@SECONDARY_MODULE"   , sSECONDARY_MODULE     ,  25);
				IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
				IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
				IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDOCUMENTS_Update
		/// <summary>
		/// spDOCUMENTS_Update
		/// </summary>
		public IDbCommand cmdDOCUMENTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDOCUMENTS_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parDOCUMENT_NAME       = Sql.CreateParameter(cmd, "@DOCUMENT_NAME"      , "string", 255);
			IDbDataParameter parACTIVE_DATE         = Sql.CreateParameter(cmd, "@ACTIVE_DATE"        , "DateTime",   8);
			IDbDataParameter parEXP_DATE            = Sql.CreateParameter(cmd, "@EXP_DATE"           , "DateTime",   8);
			IDbDataParameter parCATEGORY_ID         = Sql.CreateParameter(cmd, "@CATEGORY_ID"        , "string",  25);
			IDbDataParameter parSUBCATEGORY_ID      = Sql.CreateParameter(cmd, "@SUBCATEGORY_ID"     , "string",  25);
			IDbDataParameter parSTATUS_ID           = Sql.CreateParameter(cmd, "@STATUS_ID"          , "string",  25);
			IDbDataParameter parDESCRIPTION         = Sql.CreateParameter(cmd, "@DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parMAIL_MERGE_DOCUMENT = Sql.CreateParameter(cmd, "@MAIL_MERGE_DOCUMENT", "bool",   1);
			IDbDataParameter parRELATED_DOC_ID      = Sql.CreateParameter(cmd, "@RELATED_DOC_ID"     , "Guid",  16);
			IDbDataParameter parRELATED_DOC_REV_ID  = Sql.CreateParameter(cmd, "@RELATED_DOC_REV_ID" , "Guid",  16);
			IDbDataParameter parIS_TEMPLATE         = Sql.CreateParameter(cmd, "@IS_TEMPLATE"        , "bool",   1);
			IDbDataParameter parTEMPLATE_TYPE       = Sql.CreateParameter(cmd, "@TEMPLATE_TYPE"      , "string",  25);
			IDbDataParameter parTEAM_ID             = Sql.CreateParameter(cmd, "@TEAM_ID"            , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST       = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"      , "ansistring", 8000);
			IDbDataParameter parPRIMARY_MODULE      = Sql.CreateParameter(cmd, "@PRIMARY_MODULE"     , "string",  25);
			IDbDataParameter parSECONDARY_MODULE    = Sql.CreateParameter(cmd, "@SECONDARY_MODULE"   , "string",  25);
			IDbDataParameter parASSIGNED_USER_ID    = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"   , "Guid",  16);
			IDbDataParameter parTAG_SET_NAME        = Sql.CreateParameter(cmd, "@TAG_SET_NAME"       , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST   = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"  , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_CopyDefault
		/// <summary>
		/// spDYNAMIC_BUTTONS_CopyDefault
		/// </summary>
		public void spDYNAMIC_BUTTONS_CopyDefault(string sSOURCE_VIEW_NAME, string sNEW_VIEW_NAME, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_CopyDefault";
							IDbDataParameter parSOURCE_VIEW_NAME = Sql.AddParameter(cmd, "@SOURCE_VIEW_NAME", sSOURCE_VIEW_NAME  ,  50);
							IDbDataParameter parNEW_VIEW_NAME    = Sql.AddParameter(cmd, "@NEW_VIEW_NAME"   , sNEW_VIEW_NAME     ,  50);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_CopyDefault
		/// <summary>
		/// spDYNAMIC_BUTTONS_CopyDefault
		/// </summary>
		public void spDYNAMIC_BUTTONS_CopyDefault(string sSOURCE_VIEW_NAME, string sNEW_VIEW_NAME, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_CopyDefault";
				IDbDataParameter parSOURCE_VIEW_NAME = Sql.AddParameter(cmd, "@SOURCE_VIEW_NAME", sSOURCE_VIEW_NAME  ,  50);
				IDbDataParameter parNEW_VIEW_NAME    = Sql.AddParameter(cmd, "@NEW_VIEW_NAME"   , sNEW_VIEW_NAME     ,  50);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_CopyDefault
		/// <summary>
		/// spDYNAMIC_BUTTONS_CopyDefault
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_CopyDefault(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_CopyDefault";
			IDbDataParameter parSOURCE_VIEW_NAME = Sql.CreateParameter(cmd, "@SOURCE_VIEW_NAME", "string",  50);
			IDbDataParameter parNEW_VIEW_NAME    = Sql.CreateParameter(cmd, "@NEW_VIEW_NAME"   , "string",  50);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Delete
		/// <summary>
		/// spDYNAMIC_BUTTONS_Delete
		/// </summary>
		public void spDYNAMIC_BUTTONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Delete
		/// <summary>
		/// spDYNAMIC_BUTTONS_Delete
		/// </summary>
		public void spDYNAMIC_BUTTONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_Delete
		/// <summary>
		/// spDYNAMIC_BUTTONS_Delete
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButton
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButton
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButton(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sARGUMENT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsButton";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButton
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButton
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButton(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sARGUMENT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsButton";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsButton
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButton
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsButton";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButtonLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButtonLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButtonLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sURL_TARGET, bool bMOBILE_ONLY, string sONCLICK_SCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLin";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLink";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButtonLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButtonLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButtonLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sURL_TARGET, bool bMOBILE_ONLY, string sONCLICK_SCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLin";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLink";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsButtonLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButtonLink
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsButtonLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLin";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLink";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancel";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							IDbDataParameter parMOBILE_ONLY   = Sql.AddParameter(cmd, "@MOBILE_ONLY"  , bMOBILE_ONLY    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancel";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				IDbDataParameter parMOBILE_ONLY   = Sql.AddParameter(cmd, "@MOBILE_ONLY"  , bMOBILE_ONLY    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancel
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsCancel(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancel";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			IDbDataParameter parMOBILE_ONLY   = Sql.CreateParameter(cmd, "@MOBILE_ONLY"  , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancelEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancelEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancelEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdi";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdit";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancelEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancelEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancelEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdi";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdit";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsCancelEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancelEdit
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsCancelEdit(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdi";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdit";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDelete
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDelete
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDelete(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsDelete";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDelete
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDelete
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDelete(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsDelete";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsDelete
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDelete
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsDelete";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsDuplicate";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsDuplicate";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDuplicate
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsDuplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsDuplicate";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsEdit";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsEdit";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsEdit
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsEdit(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsEdit";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsertOnly
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsertOnly
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsertOnly(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsertOnly";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsertOnly
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsertOnly
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsertOnly(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsertOnly";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsertOnly
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsertOnly
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsertOnly";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parCONTROL_TYPE       = Sql.CreateParameter(cmd, "@CONTROL_TYPE"      , "string",  25);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parCONTROL_CSSCLASS   = Sql.CreateParameter(cmd, "@CONTROL_CSSCLASS"  , "string",  50);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			IDbDataParameter parADMIN_ONLY         = Sql.CreateParameter(cmd, "@ADMIN_ONLY"        , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsHyperLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsHyperLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsHyperLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, string sURL_TARGET, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsHyperLink";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsHyperLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsHyperLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsHyperLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, string sURL_TARGET, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsHyperLink";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsHyperLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsHyperLink
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsHyperLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsHyperLink";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopup
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopup
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopup(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sONCLICK_SCRIPT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sARGUMENT_FIELD, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopup";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopup
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopup
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopup(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sONCLICK_SCRIPT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sARGUMENT_FIELD, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopup";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsPopup
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopup
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsPopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopup";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCanc";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCancel";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCanc";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCancel";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsPopupCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupCancel
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsPopupCancel(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCanc";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCancel";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupClear
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupClear
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupClear(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClea";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClear";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupClear
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupClear
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupClear(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClea";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClear";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsPopupClear
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupClear
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsPopupClear(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClea";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClear";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSave
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSave
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSave(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsSave";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSave
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSave
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSave(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSave";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSave
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSave
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSave(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsSave";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveConcurrency(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcu";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcurrency";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveConcurrency(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcu";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcurrency";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSaveConcurrency
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSaveConcurrency(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcu";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcurrency";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDupli";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDuplicate";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDupli";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDuplicate";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSaveDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSaveDuplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDupli";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDuplicate";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveNew
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveNew
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveNew(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveNew";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveNew
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveNew
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveNew(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveNew";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSaveNew
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveNew
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSaveNew(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveNew";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsViewLog
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsViewLog
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsViewLog(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsViewLog";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsViewLog
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsViewLog
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsViewLog(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsViewLog";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsViewLog
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsViewLog
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsViewLog(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsViewLog";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDo";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDo";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_ORDER_MoveDown
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_ORDER_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDo";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveItem(string sVIEW_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveIt";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parVIEW_NAME        = Sql.AddParameter(cmd, "@VIEW_NAME"       , sVIEW_NAME         ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveItem(string sVIEW_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveIt";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parVIEW_NAME        = Sql.AddParameter(cmd, "@VIEW_NAME"       , sVIEW_NAME         ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_ORDER_MoveItem
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_ORDER_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveIt";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parVIEW_NAME        = Sql.CreateParameter(cmd, "@VIEW_NAME"       , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_ORDER_MoveUp
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_ORDER_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Update
		/// <summary>
		/// spDYNAMIC_BUTTONS_Update
		/// </summary>
		public void spDYNAMIC_BUTTONS_Update(ref Guid gID, string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY, bool bEXCLUDE_MOBILE, bool bHIDDEN, string sBUSINESS_RULE, string sBUSINESS_SCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      );
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
							IDbDataParameter parEXCLUDE_MOBILE     = Sql.AddParameter(cmd, "@EXCLUDE_MOBILE"    , bEXCLUDE_MOBILE      );
							IDbDataParameter parHIDDEN             = Sql.AddParameter(cmd, "@HIDDEN"            , bHIDDEN              );
							IDbDataParameter parBUSINESS_RULE      = Sql.AddParameter(cmd, "@BUSINESS_RULE"     , sBUSINESS_RULE       );
							IDbDataParameter parBUSINESS_SCRIPT    = Sql.AddParameter(cmd, "@BUSINESS_SCRIPT"   , sBUSINESS_SCRIPT     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Update
		/// <summary>
		/// spDYNAMIC_BUTTONS_Update
		/// </summary>
		public void spDYNAMIC_BUTTONS_Update(ref Guid gID, string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY, bool bEXCLUDE_MOBILE, bool bHIDDEN, string sBUSINESS_RULE, string sBUSINESS_SCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      );
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
				IDbDataParameter parEXCLUDE_MOBILE     = Sql.AddParameter(cmd, "@EXCLUDE_MOBILE"    , bEXCLUDE_MOBILE      );
				IDbDataParameter parHIDDEN             = Sql.AddParameter(cmd, "@HIDDEN"            , bHIDDEN              );
				IDbDataParameter parBUSINESS_RULE      = Sql.AddParameter(cmd, "@BUSINESS_RULE"     , sBUSINESS_RULE       );
				IDbDataParameter parBUSINESS_SCRIPT    = Sql.AddParameter(cmd, "@BUSINESS_SCRIPT"   , sBUSINESS_SCRIPT     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_Update
		/// <summary>
		/// spDYNAMIC_BUTTONS_Update
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parCONTROL_TYPE       = Sql.CreateParameter(cmd, "@CONTROL_TYPE"      , "string",  25);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parCONTROL_CSSCLASS   = Sql.CreateParameter(cmd, "@CONTROL_CSSCLASS"  , "string",  50);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 104857600);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			IDbDataParameter parADMIN_ONLY         = Sql.CreateParameter(cmd, "@ADMIN_ONLY"        , "bool",   1);
			IDbDataParameter parEXCLUDE_MOBILE     = Sql.CreateParameter(cmd, "@EXCLUDE_MOBILE"    , "bool",   1);
			IDbDataParameter parHIDDEN             = Sql.CreateParameter(cmd, "@HIDDEN"            , "bool",   1);
			IDbDataParameter parBUSINESS_RULE      = Sql.CreateParameter(cmd, "@BUSINESS_RULE"     , "string", 104857600);
			IDbDataParameter parBUSINESS_SCRIPT    = Sql.CreateParameter(cmd, "@BUSINESS_SCRIPT"   , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_Delete
		/// <summary>
		/// spEDITVIEWS_Delete
		/// </summary>
		public void spEDITVIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_Delete
		/// <summary>
		/// spEDITVIEWS_Delete
		/// </summary>
		public void spEDITVIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_Delete
		/// <summary>
		/// spEDITVIEWS_Delete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvAutoComplete
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvAutoComplete(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvAutoComp";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvAutoComplete";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parMODULE_TYPE       = Sql.AddParameter(cmd, "@MODULE_TYPE"      , sMODULE_TYPE        ,  25);
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvAutoComplete
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvAutoComplete(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvAutoComp";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvAutoComplete";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parMODULE_TYPE       = Sql.AddParameter(cmd, "@MODULE_TYPE"      , sMODULE_TYPE        ,  25);
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvAutoComplete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvAutoComplete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvAutoComp";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvAutoComplete";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parMODULE_TYPE       = Sql.CreateParameter(cmd, "@MODULE_TYPE"      , "string",  25);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvBound
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvBound(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_CnvBound";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvBound
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvBound(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvBound";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvBound
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_CnvBound";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvBoundLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvBoundLst
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvBoundLst(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_CnvBoundLst";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvBoundLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvBoundLst
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvBoundLst(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvBoundLst";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvBoundLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvBoundLst
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvBoundLst(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_CnvBoundLst";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCACHE_NAME       = Sql.CreateParameter(cmd, "@CACHE_NAME"      , "string",  50);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_CnvChange";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvChange";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvChange
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvChange(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_CnvChange";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvControl
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvControl(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sFIELD_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_CnvControl";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  50);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvControl
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvControl(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sFIELD_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvControl";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  50);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvControl
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvControl(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_CnvControl";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parFIELD_TYPE       = Sql.CreateParameter(cmd, "@FIELD_TYPE"      , "string",  50);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvModulePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvModulePopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvModulePo";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvModulePopup";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvModulePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvModulePopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvModulePo";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvModulePopup";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvModulePopup
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvModulePopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvModulePo";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvModulePopup";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parMODULE_TYPE      = Sql.CreateParameter(cmd, "@MODULE_TYPE"     , "string",  25);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvNaicsSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvNaicsSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvNaicsSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvNaicsSel";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvNaicsSelect";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvNaicsSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvNaicsSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvNaicsSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvNaicsSel";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvNaicsSelect";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvNaicsSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvNaicsSelect
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvNaicsSelect(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvNaicsSel";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvNaicsSelect";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvTagSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvTagSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvTagSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvTagSelec";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvTagSelect";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvTagSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvTagSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvTagSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvTagSelec";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvTagSelect";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvTagSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvTagSelect
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvTagSelect(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvTagSelec";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvTagSelect";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvZipCodePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvZipCodePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvZipCodePopup(string sEDIT_NAME, string sDATA_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvZipCodeP";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_CnvZipCodePopup";
							IDbDataParameter parEDIT_NAME  = Sql.AddParameter(cmd, "@EDIT_NAME" , sEDIT_NAME   ,  50);
							IDbDataParameter parDATA_FIELD = Sql.AddParameter(cmd, "@DATA_FIELD", sDATA_FIELD  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_CnvZipCodePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvZipCodePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_CnvZipCodePopup(string sEDIT_NAME, string sDATA_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvZipCodeP";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_CnvZipCodePopup";
				IDbDataParameter parEDIT_NAME  = Sql.AddParameter(cmd, "@EDIT_NAME" , sEDIT_NAME   ,  50);
				IDbDataParameter parDATA_FIELD = Sql.AddParameter(cmd, "@DATA_FIELD", sDATA_FIELD  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_CnvZipCodePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_CnvZipCodePopup
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_CnvZipCodePopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvZipCodeP";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_CnvZipCodePopup";
			IDbDataParameter parEDIT_NAME  = Sql.CreateParameter(cmd, "@EDIT_NAME" , "string",  50);
			IDbDataParameter parDATA_FIELD = Sql.CreateParameter(cmd, "@DATA_FIELD", "string", 100);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Delete
		/// <summary>
		/// spEDITVIEWS_FIELDS_Delete
		/// </summary>
		public void spEDITVIEWS_FIELDS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Delete
		/// <summary>
		/// spEDITVIEWS_FIELDS_Delete
		/// </summary>
		public void spEDITVIEWS_FIELDS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_Delete
		/// <summary>
		/// spEDITVIEWS_FIELDS_Delete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsAutoComplete
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsAutoComplete(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComp";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComplete";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parMODULE_TYPE       = Sql.AddParameter(cmd, "@MODULE_TYPE"      , sMODULE_TYPE        ,  25);
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsAutoComplete
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsAutoComplete(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComp";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComplete";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parMODULE_TYPE       = Sql.AddParameter(cmd, "@MODULE_TYPE"      , sMODULE_TYPE        ,  25);
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsAutoComplete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsAutoComplete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComp";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComplete";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parMODULE_TYPE       = Sql.CreateParameter(cmd, "@MODULE_TYPE"      , "string",  25);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBlank(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsBlank";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBlank(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBlank";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBlank
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsBlank(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsBlank";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBound
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBound(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsBound";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBound
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBound(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBound";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBound
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsBound";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBoundList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundLis";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundList";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBoundList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundLis";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundList";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBoundList
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsBoundList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundLis";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundList";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCACHE_NAME       = Sql.CreateParameter(cmd, "@CACHE_NAME"      , "string",  50);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 100);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsButton
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsButton
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsButton(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsButton";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsButton
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsButton
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsButton(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsButton";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsButton
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsButton
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsButton";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsChange";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsChange";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsChange
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsChange(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsChange";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckBox(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckBox";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckBox(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckBox";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsCheckBox(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckBox";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckLst
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckLst(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, string sDATA_FORMAT, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckLst";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckLst
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckLst(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, string sDATA_FORMAT, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckLst";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsCheckLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckLst
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsCheckLst(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckLst";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCACHE_NAME       = Sql.CreateParameter(cmd, "@CACHE_NAME"      , "string",  50);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 100);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsControl
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsControl(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sFIELD_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsControl";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  50);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsControl
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsControl(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sFIELD_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsControl";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  50);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsControl
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsControl(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsControl";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parFIELD_TYPE       = Sql.CreateParameter(cmd, "@FIELD_TYPE"      , "string",  50);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDatePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDatePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDatePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsDatePick";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDatePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDatePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDatePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDatePick";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsDatePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDatePick
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsDatePick(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsDatePick";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDateRng
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDateRng
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDateRng(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsDateRng";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDateRng
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDateRng
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDateRng(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDateRng";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsDateRng
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDateRng
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsDateRng(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsDateRng";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDependList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sPARENT_FIELD, Int32 nCOLSPAN, Int32 nFORMAT_ROWS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependLi";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependList";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDependList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sPARENT_FIELD, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependLi";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependList";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDependList
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsDependList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependLi";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependList";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parPARENT_FIELD     = Sql.CreateParameter(cmd, "@PARENT_FIELD"    , "string",  30);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsFile
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsFile
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsFile(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsFile";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsFile
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsFile
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsFile(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsFile";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsFile
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsFile
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsFile(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsFile";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHeader(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsHeader";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHeader(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHeader";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHeader
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsHeader(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsHeader";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHidden
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHidden
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHidden(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsHidden";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHidden
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHidden
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHidden(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHidden";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsHidden
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHidden
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsHidden(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsHidden";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 100);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHtmlEditor
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHtmlEditor
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHtmlEditor(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEdit";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEditor";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHtmlEditor
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHtmlEditor
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHtmlEditor(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEdit";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEditor";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsHtmlEditor
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHtmlEditor
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsHtmlEditor(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEdit";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEditor";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			IDbDataParameter parFORMAT_COLUMNS   = Sql.CreateParameter(cmd, "@FORMAT_COLUMNS"  , "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsLabel
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsLabel
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsLabel(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsLabel";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsLabel
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsLabel
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsLabel(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsLabel";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsLabel
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsLabel
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsLabel(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsLabel";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 100);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsModulePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsModulePopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePo";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePopup";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsModulePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsModulePopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePo";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePopup";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsModulePopup
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsModulePopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePo";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePopup";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parMODULE_TYPE      = Sql.CreateParameter(cmd, "@MODULE_TYPE"     , "string",  25);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsMultiLine
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsMultiLine
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsMultiLine(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLin";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLine";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsMultiLine
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsMultiLine
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsMultiLine(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLin";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLine";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsMultiLine
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsMultiLine
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsMultiLine(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLin";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLine";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			IDbDataParameter parFORMAT_COLUMNS   = Sql.CreateParameter(cmd, "@FORMAT_COLUMNS"  , "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsNaicsSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsNaicsSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsNaicsSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsNaicsSel";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsNaicsSelect";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsNaicsSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsNaicsSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsNaicsSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsNaicsSel";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsNaicsSelect";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsNaicsSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsNaicsSelect
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsNaicsSelect(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsNaicsSel";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsNaicsSelect";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPassword
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPassword
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPassword(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsPassword";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPassword
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPassword
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPassword(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsPassword";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsPassword
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPassword
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsPassword(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsPassword";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsPopup";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsPopup";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsPopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPopup
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsPopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsPopup";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parMODULE_TYPE      = Sql.CreateParameter(cmd, "@MODULE_TYPE"     , "string",  25);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsRadio
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsRadio
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsRadio(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsRadio";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsRadio
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsRadio
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsRadio(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsRadio";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsRadio
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsRadio
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsRadio(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsRadio";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCACHE_NAME       = Sql.CreateParameter(cmd, "@CACHE_NAME"      , "string",  50);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsSeparator(string sEDIT_NAME, Int32 nFIELD_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparato";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparator";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsSeparator(string sEDIT_NAME, Int32 nFIELD_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparato";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparator";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsSeparator
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsSeparator(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparato";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparator";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTagSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTagSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTagSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsTagSelec";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsTagSelect";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTagSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTagSelect
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTagSelect(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsTagSelec";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsTagSelect";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsTagSelect
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTagSelect
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsTagSelect(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTagSelec";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTagSelect";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeEdit
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeEdit
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeEdit(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeEdit";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeEdit
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeEdit
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeEdit(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeEdit";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsTimeEdit
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeEdit
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsTimeEdit(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeEdit";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeNew
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeNew
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeNew(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeNew";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeNew
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeNew
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeNew(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeNew";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsTimeNew
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeNew
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsTimeNew(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeNew";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimePick";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimePick";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsTimePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimePick
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsTimePick(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimePick";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsValidator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsValidator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsValidator(string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_VALIDATOR_NAME, string sDATA_FIELD, string sFIELD_VALIDATOR_MESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidato";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidator";
							IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
							IDbDataParameter parFIELD_INDEX             = Sql.AddParameter(cmd, "@FIELD_INDEX"            , nFIELD_INDEX              );
							IDbDataParameter parFIELD_VALIDATOR_NAME    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_NAME"   , sFIELD_VALIDATOR_NAME     ,  50);
							IDbDataParameter parDATA_FIELD              = Sql.AddParameter(cmd, "@DATA_FIELD"             , sDATA_FIELD               , 100);
							IDbDataParameter parFIELD_VALIDATOR_MESSAGE = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE", sFIELD_VALIDATOR_MESSAGE  , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsValidator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsValidator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsValidator(string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_VALIDATOR_NAME, string sDATA_FIELD, string sFIELD_VALIDATOR_MESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidato";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidator";
				IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
				IDbDataParameter parFIELD_INDEX             = Sql.AddParameter(cmd, "@FIELD_INDEX"            , nFIELD_INDEX              );
				IDbDataParameter parFIELD_VALIDATOR_NAME    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_NAME"   , sFIELD_VALIDATOR_NAME     ,  50);
				IDbDataParameter parDATA_FIELD              = Sql.AddParameter(cmd, "@DATA_FIELD"             , sDATA_FIELD               , 100);
				IDbDataParameter parFIELD_VALIDATOR_MESSAGE = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE", sFIELD_VALIDATOR_MESSAGE  , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsValidator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsValidator
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsValidator(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidato";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidator";
			IDbDataParameter parEDIT_NAME               = Sql.CreateParameter(cmd, "@EDIT_NAME"              , "string",  50);
			IDbDataParameter parFIELD_INDEX             = Sql.CreateParameter(cmd, "@FIELD_INDEX"            , "Int32",   4);
			IDbDataParameter parFIELD_VALIDATOR_NAME    = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_NAME"   , "string",  50);
			IDbDataParameter parDATA_FIELD              = Sql.CreateParameter(cmd, "@DATA_FIELD"             , "string", 100);
			IDbDataParameter parFIELD_VALIDATOR_MESSAGE = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_MESSAGE", "string", 150);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsZipCode
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsZipCode
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsZipCode(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsZipCode";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsZipCode
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsZipCode
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsZipCode(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsZipCode";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsZipCode
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsZipCode
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsZipCode(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsZipCode";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_LstChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_LstChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_LstChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_LstChange";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_LstChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_LstChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_LstChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_LstChange";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_LstChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_LstChange
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_LstChange(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_LstChange";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_MergeView
		/// <summary>
		/// spEDITVIEWS_FIELDS_MergeView
		/// </summary>
		public void spEDITVIEWS_FIELDS_MergeView(string sEDIT_NAME, string sMERGE_NAME, string sDATA_LABEL1, string sDATA_LABEL2)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_MergeView";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parMERGE_NAME  = Sql.AddParameter(cmd, "@MERGE_NAME" , sMERGE_NAME   ,  50);
							IDbDataParameter parDATA_LABEL1 = Sql.AddParameter(cmd, "@DATA_LABEL1", sDATA_LABEL1  , 150);
							IDbDataParameter parDATA_LABEL2 = Sql.AddParameter(cmd, "@DATA_LABEL2", sDATA_LABEL2  , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_MergeView
		/// <summary>
		/// spEDITVIEWS_FIELDS_MergeView
		/// </summary>
		public void spEDITVIEWS_FIELDS_MergeView(string sEDIT_NAME, string sMERGE_NAME, string sDATA_LABEL1, string sDATA_LABEL2, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_MergeView";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parMERGE_NAME  = Sql.AddParameter(cmd, "@MERGE_NAME" , sMERGE_NAME   ,  50);
				IDbDataParameter parDATA_LABEL1 = Sql.AddParameter(cmd, "@DATA_LABEL1", sDATA_LABEL1  , 150);
				IDbDataParameter parDATA_LABEL2 = Sql.AddParameter(cmd, "@DATA_LABEL2", sDATA_LABEL2  , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_MergeView
		/// <summary>
		/// spEDITVIEWS_FIELDS_MergeView
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_MergeView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_MergeView";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parMERGE_NAME  = Sql.CreateParameter(cmd, "@MERGE_NAME" , "string",  50);
			IDbDataParameter parDATA_LABEL1 = Sql.CreateParameter(cmd, "@DATA_LABEL1", "string", 150);
			IDbDataParameter parDATA_LABEL2 = Sql.CreateParameter(cmd, "@DATA_LABEL2", "string", 150);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Update
		/// <summary>
		/// spEDITVIEWS_FIELDS_Update
		/// </summary>
		public void spEDITVIEWS_FIELDS_Update(ref Guid gID, string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDISPLAY_FIELD, string sCACHE_NAME, bool bDATA_REQUIRED, bool bUI_REQUIRED, string sONCLICK_SCRIPT, string sFORMAT_SCRIPT, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, Int32 nROWSPAN, string sMODULE_TYPE, string sTOOL_TIP, Guid gFIELD_VALIDATOR_ID, string sFIELD_VALIDATOR_MESSAGE, string sDATA_FORMAT, string sRELATED_SOURCE_MODULE_NAME, string sRELATED_SOURCE_VIEW_NAME, string sRELATED_SOURCE_ID_FIELD, string sRELATED_SOURCE_NAME_FIELD, string sRELATED_VIEW_NAME, string sRELATED_ID_FIELD, string sRELATED_NAME_FIELD, string sRELATED_JOIN_FIELD, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_Update";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parEDIT_NAME                  = Sql.AddParameter(cmd, "@EDIT_NAME"                 , sEDIT_NAME                   ,  50);
							IDbDataParameter parFIELD_INDEX                = Sql.AddParameter(cmd, "@FIELD_INDEX"               , nFIELD_INDEX                 );
							IDbDataParameter parFIELD_TYPE                 = Sql.AddParameter(cmd, "@FIELD_TYPE"                , sFIELD_TYPE                  ,  25);
							IDbDataParameter parDATA_LABEL                 = Sql.AddParameter(cmd, "@DATA_LABEL"                , sDATA_LABEL                  , 150);
							IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  , 100);
							IDbDataParameter parDISPLAY_FIELD              = Sql.AddParameter(cmd, "@DISPLAY_FIELD"             , sDISPLAY_FIELD               , 100);
							IDbDataParameter parCACHE_NAME                 = Sql.AddParameter(cmd, "@CACHE_NAME"                , sCACHE_NAME                  ,  50);
							IDbDataParameter parDATA_REQUIRED              = Sql.AddParameter(cmd, "@DATA_REQUIRED"             , bDATA_REQUIRED               );
							IDbDataParameter parUI_REQUIRED                = Sql.AddParameter(cmd, "@UI_REQUIRED"               , bUI_REQUIRED                 );
							IDbDataParameter parONCLICK_SCRIPT             = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"            , sONCLICK_SCRIPT              );
							IDbDataParameter parFORMAT_SCRIPT              = Sql.AddParameter(cmd, "@FORMAT_SCRIPT"             , sFORMAT_SCRIPT               , 255);
							IDbDataParameter parFORMAT_TAB_INDEX           = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX"          , nFORMAT_TAB_INDEX            );
							IDbDataParameter parFORMAT_MAX_LENGTH          = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH"         , nFORMAT_MAX_LENGTH           );
							IDbDataParameter parFORMAT_SIZE                = Sql.AddParameter(cmd, "@FORMAT_SIZE"               , nFORMAT_SIZE                 );
							IDbDataParameter parFORMAT_ROWS                = Sql.AddParameter(cmd, "@FORMAT_ROWS"               , nFORMAT_ROWS                 );
							IDbDataParameter parFORMAT_COLUMNS             = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"            , nFORMAT_COLUMNS              );
							IDbDataParameter parCOLSPAN                    = Sql.AddParameter(cmd, "@COLSPAN"                   , nCOLSPAN                     );
							IDbDataParameter parROWSPAN                    = Sql.AddParameter(cmd, "@ROWSPAN"                   , nROWSPAN                     );
							IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
							IDbDataParameter parTOOL_TIP                   = Sql.AddParameter(cmd, "@TOOL_TIP"                  , sTOOL_TIP                    , 150);
							IDbDataParameter parFIELD_VALIDATOR_ID         = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_ID"        , gFIELD_VALIDATOR_ID          );
							IDbDataParameter parFIELD_VALIDATOR_MESSAGE    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE"   , sFIELD_VALIDATOR_MESSAGE     , 150);
							IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 , 100);
							IDbDataParameter parRELATED_SOURCE_MODULE_NAME = Sql.AddParameter(cmd, "@RELATED_SOURCE_MODULE_NAME", sRELATED_SOURCE_MODULE_NAME  ,  50);
							IDbDataParameter parRELATED_SOURCE_VIEW_NAME   = Sql.AddParameter(cmd, "@RELATED_SOURCE_VIEW_NAME"  , sRELATED_SOURCE_VIEW_NAME    ,  50);
							IDbDataParameter parRELATED_SOURCE_ID_FIELD    = Sql.AddParameter(cmd, "@RELATED_SOURCE_ID_FIELD"   , sRELATED_SOURCE_ID_FIELD     ,  30);
							IDbDataParameter parRELATED_SOURCE_NAME_FIELD  = Sql.AddParameter(cmd, "@RELATED_SOURCE_NAME_FIELD" , sRELATED_SOURCE_NAME_FIELD   , 100);
							IDbDataParameter parRELATED_VIEW_NAME          = Sql.AddParameter(cmd, "@RELATED_VIEW_NAME"         , sRELATED_VIEW_NAME           ,  50);
							IDbDataParameter parRELATED_ID_FIELD           = Sql.AddParameter(cmd, "@RELATED_ID_FIELD"          , sRELATED_ID_FIELD            ,  30);
							IDbDataParameter parRELATED_NAME_FIELD         = Sql.AddParameter(cmd, "@RELATED_NAME_FIELD"        , sRELATED_NAME_FIELD          , 100);
							IDbDataParameter parRELATED_JOIN_FIELD         = Sql.AddParameter(cmd, "@RELATED_JOIN_FIELD"        , sRELATED_JOIN_FIELD          ,  30);
							IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Update
		/// <summary>
		/// spEDITVIEWS_FIELDS_Update
		/// </summary>
		public void spEDITVIEWS_FIELDS_Update(ref Guid gID, string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDISPLAY_FIELD, string sCACHE_NAME, bool bDATA_REQUIRED, bool bUI_REQUIRED, string sONCLICK_SCRIPT, string sFORMAT_SCRIPT, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, Int32 nROWSPAN, string sMODULE_TYPE, string sTOOL_TIP, Guid gFIELD_VALIDATOR_ID, string sFIELD_VALIDATOR_MESSAGE, string sDATA_FORMAT, string sRELATED_SOURCE_MODULE_NAME, string sRELATED_SOURCE_VIEW_NAME, string sRELATED_SOURCE_ID_FIELD, string sRELATED_SOURCE_NAME_FIELD, string sRELATED_VIEW_NAME, string sRELATED_ID_FIELD, string sRELATED_NAME_FIELD, string sRELATED_JOIN_FIELD, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_Update";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parEDIT_NAME                  = Sql.AddParameter(cmd, "@EDIT_NAME"                 , sEDIT_NAME                   ,  50);
				IDbDataParameter parFIELD_INDEX                = Sql.AddParameter(cmd, "@FIELD_INDEX"               , nFIELD_INDEX                 );
				IDbDataParameter parFIELD_TYPE                 = Sql.AddParameter(cmd, "@FIELD_TYPE"                , sFIELD_TYPE                  ,  25);
				IDbDataParameter parDATA_LABEL                 = Sql.AddParameter(cmd, "@DATA_LABEL"                , sDATA_LABEL                  , 150);
				IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  , 100);
				IDbDataParameter parDISPLAY_FIELD              = Sql.AddParameter(cmd, "@DISPLAY_FIELD"             , sDISPLAY_FIELD               , 100);
				IDbDataParameter parCACHE_NAME                 = Sql.AddParameter(cmd, "@CACHE_NAME"                , sCACHE_NAME                  ,  50);
				IDbDataParameter parDATA_REQUIRED              = Sql.AddParameter(cmd, "@DATA_REQUIRED"             , bDATA_REQUIRED               );
				IDbDataParameter parUI_REQUIRED                = Sql.AddParameter(cmd, "@UI_REQUIRED"               , bUI_REQUIRED                 );
				IDbDataParameter parONCLICK_SCRIPT             = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"            , sONCLICK_SCRIPT              );
				IDbDataParameter parFORMAT_SCRIPT              = Sql.AddParameter(cmd, "@FORMAT_SCRIPT"             , sFORMAT_SCRIPT               , 255);
				IDbDataParameter parFORMAT_TAB_INDEX           = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX"          , nFORMAT_TAB_INDEX            );
				IDbDataParameter parFORMAT_MAX_LENGTH          = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH"         , nFORMAT_MAX_LENGTH           );
				IDbDataParameter parFORMAT_SIZE                = Sql.AddParameter(cmd, "@FORMAT_SIZE"               , nFORMAT_SIZE                 );
				IDbDataParameter parFORMAT_ROWS                = Sql.AddParameter(cmd, "@FORMAT_ROWS"               , nFORMAT_ROWS                 );
				IDbDataParameter parFORMAT_COLUMNS             = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"            , nFORMAT_COLUMNS              );
				IDbDataParameter parCOLSPAN                    = Sql.AddParameter(cmd, "@COLSPAN"                   , nCOLSPAN                     );
				IDbDataParameter parROWSPAN                    = Sql.AddParameter(cmd, "@ROWSPAN"                   , nROWSPAN                     );
				IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
				IDbDataParameter parTOOL_TIP                   = Sql.AddParameter(cmd, "@TOOL_TIP"                  , sTOOL_TIP                    , 150);
				IDbDataParameter parFIELD_VALIDATOR_ID         = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_ID"        , gFIELD_VALIDATOR_ID          );
				IDbDataParameter parFIELD_VALIDATOR_MESSAGE    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE"   , sFIELD_VALIDATOR_MESSAGE     , 150);
				IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 , 100);
				IDbDataParameter parRELATED_SOURCE_MODULE_NAME = Sql.AddParameter(cmd, "@RELATED_SOURCE_MODULE_NAME", sRELATED_SOURCE_MODULE_NAME  ,  50);
				IDbDataParameter parRELATED_SOURCE_VIEW_NAME   = Sql.AddParameter(cmd, "@RELATED_SOURCE_VIEW_NAME"  , sRELATED_SOURCE_VIEW_NAME    ,  50);
				IDbDataParameter parRELATED_SOURCE_ID_FIELD    = Sql.AddParameter(cmd, "@RELATED_SOURCE_ID_FIELD"   , sRELATED_SOURCE_ID_FIELD     ,  30);
				IDbDataParameter parRELATED_SOURCE_NAME_FIELD  = Sql.AddParameter(cmd, "@RELATED_SOURCE_NAME_FIELD" , sRELATED_SOURCE_NAME_FIELD   , 100);
				IDbDataParameter parRELATED_VIEW_NAME          = Sql.AddParameter(cmd, "@RELATED_VIEW_NAME"         , sRELATED_VIEW_NAME           ,  50);
				IDbDataParameter parRELATED_ID_FIELD           = Sql.AddParameter(cmd, "@RELATED_ID_FIELD"          , sRELATED_ID_FIELD            ,  30);
				IDbDataParameter parRELATED_NAME_FIELD         = Sql.AddParameter(cmd, "@RELATED_NAME_FIELD"        , sRELATED_NAME_FIELD          , 100);
				IDbDataParameter parRELATED_JOIN_FIELD         = Sql.AddParameter(cmd, "@RELATED_JOIN_FIELD"        , sRELATED_JOIN_FIELD          ,  30);
				IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_Update
		/// <summary>
		/// spEDITVIEWS_FIELDS_Update
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_Update";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parEDIT_NAME                  = Sql.CreateParameter(cmd, "@EDIT_NAME"                 , "string",  50);
			IDbDataParameter parFIELD_INDEX                = Sql.CreateParameter(cmd, "@FIELD_INDEX"               , "Int32",   4);
			IDbDataParameter parFIELD_TYPE                 = Sql.CreateParameter(cmd, "@FIELD_TYPE"                , "string",  25);
			IDbDataParameter parDATA_LABEL                 = Sql.CreateParameter(cmd, "@DATA_LABEL"                , "string", 150);
			IDbDataParameter parDATA_FIELD                 = Sql.CreateParameter(cmd, "@DATA_FIELD"                , "string", 100);
			IDbDataParameter parDISPLAY_FIELD              = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"             , "string", 100);
			IDbDataParameter parCACHE_NAME                 = Sql.CreateParameter(cmd, "@CACHE_NAME"                , "string",  50);
			IDbDataParameter parDATA_REQUIRED              = Sql.CreateParameter(cmd, "@DATA_REQUIRED"             , "bool",   1);
			IDbDataParameter parUI_REQUIRED                = Sql.CreateParameter(cmd, "@UI_REQUIRED"               , "bool",   1);
			IDbDataParameter parONCLICK_SCRIPT             = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"            , "string", 104857600);
			IDbDataParameter parFORMAT_SCRIPT              = Sql.CreateParameter(cmd, "@FORMAT_SCRIPT"             , "string", 255);
			IDbDataParameter parFORMAT_TAB_INDEX           = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX"          , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH          = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH"         , "Int32",   4);
			IDbDataParameter parFORMAT_SIZE                = Sql.CreateParameter(cmd, "@FORMAT_SIZE"               , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS                = Sql.CreateParameter(cmd, "@FORMAT_ROWS"               , "Int32",   4);
			IDbDataParameter parFORMAT_COLUMNS             = Sql.CreateParameter(cmd, "@FORMAT_COLUMNS"            , "Int32",   4);
			IDbDataParameter parCOLSPAN                    = Sql.CreateParameter(cmd, "@COLSPAN"                   , "Int32",   4);
			IDbDataParameter parROWSPAN                    = Sql.CreateParameter(cmd, "@ROWSPAN"                   , "Int32",   4);
			IDbDataParameter parMODULE_TYPE                = Sql.CreateParameter(cmd, "@MODULE_TYPE"               , "string",  25);
			IDbDataParameter parTOOL_TIP                   = Sql.CreateParameter(cmd, "@TOOL_TIP"                  , "string", 150);
			IDbDataParameter parFIELD_VALIDATOR_ID         = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_ID"        , "Guid",  16);
			IDbDataParameter parFIELD_VALIDATOR_MESSAGE    = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_MESSAGE"   , "string", 150);
			IDbDataParameter parDATA_FORMAT                = Sql.CreateParameter(cmd, "@DATA_FORMAT"               , "string", 100);
			IDbDataParameter parRELATED_SOURCE_MODULE_NAME = Sql.CreateParameter(cmd, "@RELATED_SOURCE_MODULE_NAME", "string",  50);
			IDbDataParameter parRELATED_SOURCE_VIEW_NAME   = Sql.CreateParameter(cmd, "@RELATED_SOURCE_VIEW_NAME"  , "string",  50);
			IDbDataParameter parRELATED_SOURCE_ID_FIELD    = Sql.CreateParameter(cmd, "@RELATED_SOURCE_ID_FIELD"   , "string",  30);
			IDbDataParameter parRELATED_SOURCE_NAME_FIELD  = Sql.CreateParameter(cmd, "@RELATED_SOURCE_NAME_FIELD" , "string", 100);
			IDbDataParameter parRELATED_VIEW_NAME          = Sql.CreateParameter(cmd, "@RELATED_VIEW_NAME"         , "string",  50);
			IDbDataParameter parRELATED_ID_FIELD           = Sql.CreateParameter(cmd, "@RELATED_ID_FIELD"          , "string",  30);
			IDbDataParameter parRELATED_NAME_FIELD         = Sql.CreateParameter(cmd, "@RELATED_NAME_FIELD"        , "string", 100);
			IDbDataParameter parRELATED_JOIN_FIELD         = Sql.CreateParameter(cmd, "@RELATED_JOIN_FIELD"        , "string",  30);
			IDbDataParameter parPARENT_FIELD               = Sql.CreateParameter(cmd, "@PARENT_FIELD"              , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateDataFormat
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateDataFormat
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateDataFormat(string sEDIT_NAME, string sDATA_FIELD, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataF";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataFormat";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateDataFormat
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateDataFormat
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateDataFormat(string sEDIT_NAME, string sDATA_FIELD, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataF";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataFormat";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_UpdateDataFormat
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateDataFormat
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_UpdateDataFormat(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataF";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataFormat";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 100);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateOnClick
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateOnClick
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateOnClick(string sEDIT_NAME, string sDATA_FIELD, string sONCLICK_SCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnCli";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnClick";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateOnClick
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateOnClick
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateOnClick(string sEDIT_NAME, string sDATA_FIELD, string sONCLICK_SCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnCli";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnClick";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_UpdateOnClick
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateOnClick
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_UpdateOnClick(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnCli";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnClick";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateTip(string sEDIT_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateTip";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateTip(string sEDIT_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateTip";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateTip
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_UpdateTip(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateTip";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parTOOL_TIP         = Sql.CreateParameter(cmd, "@TOOL_TIP"        , "string", 150);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
							IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
							IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
							IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
				IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
				IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
				IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_InsertOnly
		/// </summary>
		public IDbCommand cmdEDITVIEWS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string",  50);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parVIEW_NAME    = Sql.CreateParameter(cmd, "@VIEW_NAME"   , "string",  50);
			IDbDataParameter parLABEL_WIDTH  = Sql.CreateParameter(cmd, "@LABEL_WIDTH" , "string",  10);
			IDbDataParameter parFIELD_WIDTH  = Sql.CreateParameter(cmd, "@FIELD_WIDTH" , "string",  10);
			IDbDataParameter parDATA_COLUMNS = Sql.CreateParameter(cmd, "@DATA_COLUMNS", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Dele";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Dele";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Dele";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disa";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disa";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disa";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Down(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Down";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Down(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Down";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Down(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Down";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enab";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enab";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enab";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_InsertOnly(string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, bool bRELATIONSHIP_ENABLED, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Inse";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_InsertOnly";
							IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
							IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
							IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
							IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
							IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
							IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
							IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
							IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
							IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_InsertOnly(string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, bool bRELATIONSHIP_ENABLED, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Inse";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_InsertOnly";
				IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
				IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
				IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
				IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
				IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
				IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
				IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
				IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
				IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Inse";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_InsertOnly";
			IDbDataParameter parEDIT_NAME               = Sql.CreateParameter(cmd, "@EDIT_NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME             = Sql.CreateParameter(cmd, "@MODULE_NAME"            , "string",  50);
			IDbDataParameter parCONTROL_NAME            = Sql.CreateParameter(cmd, "@CONTROL_NAME"           , "string", 100);
			IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ENABLED"   , "bool",   1);
			IDbDataParameter parRELATIONSHIP_ORDER      = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER"     , "Int32",   4);
			IDbDataParameter parNEW_RECORD_ENABLED      = Sql.CreateParameter(cmd, "@NEW_RECORD_ENABLED"     , "bool",   1);
			IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.CreateParameter(cmd, "@EXISTING_RECORD_ENABLED", "bool",   1);
			IDbDataParameter parTITLE                   = Sql.CreateParameter(cmd, "@TITLE"                  , "string", 100);
			IDbDataParameter parALTERNATE_VIEW          = Sql.CreateParameter(cmd, "@ALTERNATE_VIEW"         , "string",  50);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Item(string sEDIT_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Item";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Item(string sEDIT_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Item";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Item(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Item";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Move";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Move";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Move";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW, bool bRELATIONSHIP_ENABLED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Upda";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Update";
							IDbDataParameter parID                      = Sql.AddParameter(cmd, "@ID"                     , gID                       );
							IDbDataParameter parMODIFIED_USER_ID        = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"       ,  Security.USER_ID         );
							IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
							IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
							IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
							IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
							IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
							IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
							IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
							IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
							IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW, bool bRELATIONSHIP_ENABLED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Upda";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Update";
				IDbDataParameter parID                      = Sql.AddParameter(cmd, "@ID"                     , gID                       );
				IDbDataParameter parMODIFIED_USER_ID        = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"       ,  Security.USER_ID         );
				IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
				IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
				IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
				IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
				IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
				IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
				IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
				IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
				IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Upda";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Update";
			IDbDataParameter parID                      = Sql.CreateParameter(cmd, "@ID"                     , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID        = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"       , "Guid",  16);
			IDbDataParameter parEDIT_NAME               = Sql.CreateParameter(cmd, "@EDIT_NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME             = Sql.CreateParameter(cmd, "@MODULE_NAME"            , "string",  50);
			IDbDataParameter parCONTROL_NAME            = Sql.CreateParameter(cmd, "@CONTROL_NAME"           , "string", 100);
			IDbDataParameter parRELATIONSHIP_ORDER      = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER"     , "Int32",   4);
			IDbDataParameter parNEW_RECORD_ENABLED      = Sql.CreateParameter(cmd, "@NEW_RECORD_ENABLED"     , "bool",   1);
			IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.CreateParameter(cmd, "@EXISTING_RECORD_ENABLED", "bool",   1);
			IDbDataParameter parTITLE                   = Sql.CreateParameter(cmd, "@TITLE"                  , "string", 100);
			IDbDataParameter parALTERNATE_VIEW          = Sql.CreateParameter(cmd, "@ALTERNATE_VIEW"         , "string",  50);
			IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ENABLED"   , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_Update
		/// <summary>
		/// spEDITVIEWS_Update
		/// </summary>
		public void spEDITVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
							IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
							IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  50);
							IDbDataParameter parLABEL_WIDTH         = Sql.AddParameter(cmd, "@LABEL_WIDTH"        , sLABEL_WIDTH          ,  10);
							IDbDataParameter parFIELD_WIDTH         = Sql.AddParameter(cmd, "@FIELD_WIDTH"        , sFIELD_WIDTH          ,  10);
							IDbDataParameter parDATA_COLUMNS        = Sql.AddParameter(cmd, "@DATA_COLUMNS"       , nDATA_COLUMNS         );
							IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
							IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
							IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
							IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
							IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
							IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
							IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_Update
		/// <summary>
		/// spEDITVIEWS_Update
		/// </summary>
		public void spEDITVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
				IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
				IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  50);
				IDbDataParameter parLABEL_WIDTH         = Sql.AddParameter(cmd, "@LABEL_WIDTH"        , sLABEL_WIDTH          ,  10);
				IDbDataParameter parFIELD_WIDTH         = Sql.AddParameter(cmd, "@FIELD_WIDTH"        , sFIELD_WIDTH          ,  10);
				IDbDataParameter parDATA_COLUMNS        = Sql.AddParameter(cmd, "@DATA_COLUMNS"       , nDATA_COLUMNS         );
				IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
				IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
				IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
				IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
				IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
				IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
				IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEDITVIEWS_Update
		/// <summary>
		/// spEDITVIEWS_Update
		/// </summary>
		public IDbCommand cmdEDITVIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string",  50);
			IDbDataParameter parMODULE_NAME         = Sql.CreateParameter(cmd, "@MODULE_NAME"        , "string",  25);
			IDbDataParameter parVIEW_NAME           = Sql.CreateParameter(cmd, "@VIEW_NAME"          , "string",  50);
			IDbDataParameter parLABEL_WIDTH         = Sql.CreateParameter(cmd, "@LABEL_WIDTH"        , "string",  10);
			IDbDataParameter parFIELD_WIDTH         = Sql.CreateParameter(cmd, "@FIELD_WIDTH"        , "string",  10);
			IDbDataParameter parDATA_COLUMNS        = Sql.CreateParameter(cmd, "@DATA_COLUMNS"       , "Int32",   4);
			IDbDataParameter parNEW_EVENT_ID        = Sql.CreateParameter(cmd, "@NEW_EVENT_ID"       , "Guid",  16);
			IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parVALIDATION_EVENT_ID = Sql.CreateParameter(cmd, "@VALIDATION_EVENT_ID", "Guid",  16);
			IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_SAVE_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_SAVE_EVENT_ID" , "Guid",  16);
			IDbDataParameter parSCRIPT              = Sql.CreateParameter(cmd, "@SCRIPT"             , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_UpdateEvents
		/// <summary>
		/// spEDITVIEWS_UpdateEvents
		/// </summary>
		public void spEDITVIEWS_UpdateEvents(string sNAME, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_UpdateEvents";
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
							IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
							IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
							IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
							IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
							IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
							IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
							IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_UpdateEvents
		/// <summary>
		/// spEDITVIEWS_UpdateEvents
		/// </summary>
		public void spEDITVIEWS_UpdateEvents(string sNAME, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_UpdateEvents";
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
				IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
				IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
				IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
				IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
				IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
				IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
				IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_UpdateEvents
		/// <summary>
		/// spEDITVIEWS_UpdateEvents
		/// </summary>
		public IDbCommand cmdEDITVIEWS_UpdateEvents(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_UpdateEvents";
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string",  50);
			IDbDataParameter parNEW_EVENT_ID        = Sql.CreateParameter(cmd, "@NEW_EVENT_ID"       , "Guid",  16);
			IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parVALIDATION_EVENT_ID = Sql.CreateParameter(cmd, "@VALIDATION_EVENT_ID", "Guid",  16);
			IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_SAVE_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_SAVE_EVENT_ID" , "Guid",  16);
			IDbDataParameter parSCRIPT              = Sql.CreateParameter(cmd, "@SCRIPT"             , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spEMAIL_CLIENT_SYNC_Delete
		/// <summary>
		/// spEMAIL_CLIENT_SYNC_Delete
		/// </summary>
		public void spEMAIL_CLIENT_SYNC_Delete(Guid gASSIGNED_USER_ID, Guid gLOCAL_ID, string sREMOTE_KEY, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_CLIENT_SYNC_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parLOCAL_ID         = Sql.AddParameter(cmd, "@LOCAL_ID"        , gLOCAL_ID          );
							IDbDataParameter parREMOTE_KEY       = Sql.AddAnsiParam(cmd, "@REMOTE_KEY"      , sREMOTE_KEY        , 800);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_CLIENT_SYNC_Delete
		/// <summary>
		/// spEMAIL_CLIENT_SYNC_Delete
		/// </summary>
		public void spEMAIL_CLIENT_SYNC_Delete(Guid gASSIGNED_USER_ID, Guid gLOCAL_ID, string sREMOTE_KEY, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_CLIENT_SYNC_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parLOCAL_ID         = Sql.AddParameter(cmd, "@LOCAL_ID"        , gLOCAL_ID          );
				IDbDataParameter parREMOTE_KEY       = Sql.AddAnsiParam(cmd, "@REMOTE_KEY"      , sREMOTE_KEY        , 800);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_CLIENT_SYNC_Delete
		/// <summary>
		/// spEMAIL_CLIENT_SYNC_Delete
		/// </summary>
		public IDbCommand cmdEMAIL_CLIENT_SYNC_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_CLIENT_SYNC_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parLOCAL_ID         = Sql.CreateParameter(cmd, "@LOCAL_ID"        , "Guid",  16);
			IDbDataParameter parREMOTE_KEY       = Sql.CreateParameter(cmd, "@REMOTE_KEY"      , "ansistring", 800);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spEMAIL_CLIENT_SYNC_Update
		/// <summary>
		/// spEMAIL_CLIENT_SYNC_Update
		/// </summary>
		public void spEMAIL_CLIENT_SYNC_Update(Guid gASSIGNED_USER_ID, Guid gLOCAL_ID, string sREMOTE_KEY, string sMODULE_NAME, Guid gPARENT_ID, DateTime dtREMOTE_DATE_MODIFIED, DateTime dtREMOTE_DATE_MODIFIED_UTC)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_CLIENT_SYNC_Update";
							IDbDataParameter parMODIFIED_USER_ID         = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"        ,  Security.USER_ID          );
							IDbDataParameter parASSIGNED_USER_ID         = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"        , gASSIGNED_USER_ID          );
							IDbDataParameter parLOCAL_ID                 = Sql.AddParameter(cmd, "@LOCAL_ID"                , gLOCAL_ID                  );
							IDbDataParameter parREMOTE_KEY               = Sql.AddAnsiParam(cmd, "@REMOTE_KEY"              , sREMOTE_KEY                , 800);
							IDbDataParameter parMODULE_NAME              = Sql.AddParameter(cmd, "@MODULE_NAME"             , sMODULE_NAME               ,  25);
							IDbDataParameter parPARENT_ID                = Sql.AddParameter(cmd, "@PARENT_ID"               , gPARENT_ID                 );
							IDbDataParameter parREMOTE_DATE_MODIFIED     = Sql.AddParameter(cmd, "@REMOTE_DATE_MODIFIED"    , dtREMOTE_DATE_MODIFIED     );
							IDbDataParameter parREMOTE_DATE_MODIFIED_UTC = Sql.AddParameter(cmd, "@REMOTE_DATE_MODIFIED_UTC", dtREMOTE_DATE_MODIFIED_UTC );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_CLIENT_SYNC_Update
		/// <summary>
		/// spEMAIL_CLIENT_SYNC_Update
		/// </summary>
		public void spEMAIL_CLIENT_SYNC_Update(Guid gASSIGNED_USER_ID, Guid gLOCAL_ID, string sREMOTE_KEY, string sMODULE_NAME, Guid gPARENT_ID, DateTime dtREMOTE_DATE_MODIFIED, DateTime dtREMOTE_DATE_MODIFIED_UTC, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_CLIENT_SYNC_Update";
				IDbDataParameter parMODIFIED_USER_ID         = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"        ,  Security.USER_ID          );
				IDbDataParameter parASSIGNED_USER_ID         = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"        , gASSIGNED_USER_ID          );
				IDbDataParameter parLOCAL_ID                 = Sql.AddParameter(cmd, "@LOCAL_ID"                , gLOCAL_ID                  );
				IDbDataParameter parREMOTE_KEY               = Sql.AddAnsiParam(cmd, "@REMOTE_KEY"              , sREMOTE_KEY                , 800);
				IDbDataParameter parMODULE_NAME              = Sql.AddParameter(cmd, "@MODULE_NAME"             , sMODULE_NAME               ,  25);
				IDbDataParameter parPARENT_ID                = Sql.AddParameter(cmd, "@PARENT_ID"               , gPARENT_ID                 );
				IDbDataParameter parREMOTE_DATE_MODIFIED     = Sql.AddParameter(cmd, "@REMOTE_DATE_MODIFIED"    , dtREMOTE_DATE_MODIFIED     );
				IDbDataParameter parREMOTE_DATE_MODIFIED_UTC = Sql.AddParameter(cmd, "@REMOTE_DATE_MODIFIED_UTC", dtREMOTE_DATE_MODIFIED_UTC );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_CLIENT_SYNC_Update
		/// <summary>
		/// spEMAIL_CLIENT_SYNC_Update
		/// </summary>
		public IDbCommand cmdEMAIL_CLIENT_SYNC_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_CLIENT_SYNC_Update";
			IDbDataParameter parMODIFIED_USER_ID         = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"        , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID         = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"        , "Guid",  16);
			IDbDataParameter parLOCAL_ID                 = Sql.CreateParameter(cmd, "@LOCAL_ID"                , "Guid",  16);
			IDbDataParameter parREMOTE_KEY               = Sql.CreateParameter(cmd, "@REMOTE_KEY"              , "ansistring", 800);
			IDbDataParameter parMODULE_NAME              = Sql.CreateParameter(cmd, "@MODULE_NAME"             , "string",  25);
			IDbDataParameter parPARENT_ID                = Sql.CreateParameter(cmd, "@PARENT_ID"               , "Guid",  16);
			IDbDataParameter parREMOTE_DATE_MODIFIED     = Sql.CreateParameter(cmd, "@REMOTE_DATE_MODIFIED"    , "DateTime",   8);
			IDbDataParameter parREMOTE_DATE_MODIFIED_UTC = Sql.CreateParameter(cmd, "@REMOTE_DATE_MODIFIED_UTC", "DateTime",   8);
			return cmd;
		}
		#endregion

		#region spEMAIL_IMAGE_InitPointer
		/// <summary>
		/// spEMAIL_IMAGE_InitPointer
		/// </summary>
		public void spEMAIL_IMAGE_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_IMAGE_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_IMAGE_InitPointer
		/// <summary>
		/// spEMAIL_IMAGE_InitPointer
		/// </summary>
		public void spEMAIL_IMAGE_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_IMAGE_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdEMAIL_IMAGE_InitPointer
		/// <summary>
		/// spEMAIL_IMAGE_InitPointer
		/// </summary>
		public IDbCommand cmdEMAIL_IMAGE_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_IMAGE_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAIL_IMAGE_ReadOffset
		/// <summary>
		/// spEMAIL_IMAGE_ReadOffset
		/// </summary>
		public void spEMAIL_IMAGE_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_IMAGE_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_IMAGE_ReadOffset
		/// <summary>
		/// spEMAIL_IMAGE_ReadOffset
		/// </summary>
		public void spEMAIL_IMAGE_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_IMAGE_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdEMAIL_IMAGE_ReadOffset
		/// <summary>
		/// spEMAIL_IMAGE_ReadOffset
		/// </summary>
		public IDbCommand cmdEMAIL_IMAGE_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_IMAGE_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAIL_IMAGE_WriteOffset
		/// <summary>
		/// spEMAIL_IMAGE_WriteOffset
		/// </summary>
		public void spEMAIL_IMAGE_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_IMAGE_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_IMAGE_WriteOffset
		/// <summary>
		/// spEMAIL_IMAGE_WriteOffset
		/// </summary>
		public void spEMAIL_IMAGE_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_IMAGE_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_IMAGE_WriteOffset
		/// <summary>
		/// spEMAIL_IMAGE_WriteOffset
		/// </summary>
		public IDbCommand cmdEMAIL_IMAGE_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_IMAGE_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spEMAIL_IMAGES_CONTENT_Update
		/// <summary>
		/// spEMAIL_IMAGES_CONTENT_Update
		/// </summary>
		public void spEMAIL_IMAGES_CONTENT_Update(Guid gID, byte[] binCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_IMAGES_CONTENT_Update";
							IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
							IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_IMAGES_CONTENT_Update
		/// <summary>
		/// spEMAIL_IMAGES_CONTENT_Update
		/// </summary>
		public void spEMAIL_IMAGES_CONTENT_Update(Guid gID, byte[] binCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_IMAGES_CONTENT_Update";
				IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
				IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_IMAGES_CONTENT_Update
		/// <summary>
		/// spEMAIL_IMAGES_CONTENT_Update
		/// </summary>
		public IDbCommand cmdEMAIL_IMAGES_CONTENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_IMAGES_CONTENT_Update";
			IDbDataParameter parID      = Sql.CreateParameter(cmd, "@ID"     , "Guid",  16);
			IDbDataParameter parCONTENT = Sql.CreateParameter(cmd, "@CONTENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spEMAIL_IMAGES_Copy
		/// <summary>
		/// spEMAIL_IMAGES_Copy
		/// </summary>
		public void spEMAIL_IMAGES_Copy(ref Guid gID, Guid gCOPY_ID, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_IMAGES_Copy";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCOPY_ID          = Sql.AddParameter(cmd, "@COPY_ID"         , gCOPY_ID           );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_IMAGES_Copy
		/// <summary>
		/// spEMAIL_IMAGES_Copy
		/// </summary>
		public void spEMAIL_IMAGES_Copy(ref Guid gID, Guid gCOPY_ID, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_IMAGES_Copy";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCOPY_ID          = Sql.AddParameter(cmd, "@COPY_ID"         , gCOPY_ID           );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAIL_IMAGES_Copy
		/// <summary>
		/// spEMAIL_IMAGES_Copy
		/// </summary>
		public IDbCommand cmdEMAIL_IMAGES_Copy(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_IMAGES_Copy";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCOPY_ID          = Sql.CreateParameter(cmd, "@COPY_ID"         , "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAIL_IMAGES_Delete
		/// <summary>
		/// spEMAIL_IMAGES_Delete
		/// </summary>
		public void spEMAIL_IMAGES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_IMAGES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_IMAGES_Delete
		/// <summary>
		/// spEMAIL_IMAGES_Delete
		/// </summary>
		public void spEMAIL_IMAGES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_IMAGES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_IMAGES_Delete
		/// <summary>
		/// spEMAIL_IMAGES_Delete
		/// </summary>
		public IDbCommand cmdEMAIL_IMAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_IMAGES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_IMAGES_Insert
		/// <summary>
		/// spEMAIL_IMAGES_Insert
		/// </summary>
		public void spEMAIL_IMAGES_Insert(ref Guid gID, Guid gPARENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_IMAGES_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
							IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
							IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_IMAGES_Insert
		/// <summary>
		/// spEMAIL_IMAGES_Insert
		/// </summary>
		public void spEMAIL_IMAGES_Insert(ref Guid gID, Guid gPARENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_IMAGES_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
				IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
				IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAIL_IMAGES_Insert
		/// <summary>
		/// spEMAIL_IMAGES_Insert
		/// </summary>
		public IDbCommand cmdEMAIL_IMAGES_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_IMAGES_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parFILENAME         = Sql.CreateParameter(cmd, "@FILENAME"        , "string", 255);
			IDbDataParameter parFILE_EXT         = Sql.CreateParameter(cmd, "@FILE_EXT"        , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE   = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAIL_MARKETING_Delete
		/// <summary>
		/// spEMAIL_MARKETING_Delete
		/// </summary>
		public void spEMAIL_MARKETING_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_MARKETING_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_MARKETING_Delete
		/// <summary>
		/// spEMAIL_MARKETING_Delete
		/// </summary>
		public void spEMAIL_MARKETING_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_MARKETING_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_MARKETING_Delete
		/// <summary>
		/// spEMAIL_MARKETING_Delete
		/// </summary>
		public IDbCommand cmdEMAIL_MARKETING_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_MARKETING_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_MARKETING_Duplicate
		/// <summary>
		/// spEMAIL_MARKETING_Duplicate
		/// </summary>
		public void spEMAIL_MARKETING_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, Guid gCAMPAIGN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_MARKETING_Duplicate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_MARKETING_Duplicate
		/// <summary>
		/// spEMAIL_MARKETING_Duplicate
		/// </summary>
		public void spEMAIL_MARKETING_Duplicate(ref Guid gID, Guid gDUPLICATE_ID, Guid gCAMPAIGN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_MARKETING_Duplicate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDUPLICATE_ID     = Sql.AddParameter(cmd, "@DUPLICATE_ID"    , gDUPLICATE_ID      );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAIL_MARKETING_Duplicate
		/// <summary>
		/// spEMAIL_MARKETING_Duplicate
		/// </summary>
		public IDbCommand cmdEMAIL_MARKETING_Duplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_MARKETING_Duplicate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDUPLICATE_ID     = Sql.CreateParameter(cmd, "@DUPLICATE_ID"    , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAIL_MARKETING_Update
		/// <summary>
		/// spEMAIL_MARKETING_Update
		/// </summary>
		public void spEMAIL_MARKETING_Update(ref Guid gID, string sNAME, string sFROM_ADDR, string sFROM_NAME, DateTime dtDATE_TIME, Guid gTEMPLATE_ID, Guid gCAMPAIGN_ID, Guid gINBOUND_EMAIL_ID, string sSTATUS, bool bALL_PROSPECT_LISTS, string sREPLY_TO_NAME, string sREPLY_TO_ADDR)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_MARKETING_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
							IDbDataParameter parFROM_ADDR          = Sql.AddParameter(cmd, "@FROM_ADDR"         , sFROM_ADDR           , 100);
							IDbDataParameter parFROM_NAME          = Sql.AddParameter(cmd, "@FROM_NAME"         , sFROM_NAME           , 100);
							IDbDataParameter parDATE_TIME          = Sql.AddParameter(cmd, "@DATE_TIME"         , dtDATE_TIME          );
							IDbDataParameter parTEMPLATE_ID        = Sql.AddParameter(cmd, "@TEMPLATE_ID"       , gTEMPLATE_ID         );
							IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
							IDbDataParameter parINBOUND_EMAIL_ID   = Sql.AddParameter(cmd, "@INBOUND_EMAIL_ID"  , gINBOUND_EMAIL_ID    );
							IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
							IDbDataParameter parALL_PROSPECT_LISTS = Sql.AddParameter(cmd, "@ALL_PROSPECT_LISTS", bALL_PROSPECT_LISTS  );
							IDbDataParameter parREPLY_TO_NAME      = Sql.AddParameter(cmd, "@REPLY_TO_NAME"     , sREPLY_TO_NAME       , 100);
							IDbDataParameter parREPLY_TO_ADDR      = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"     , sREPLY_TO_ADDR       , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_MARKETING_Update
		/// <summary>
		/// spEMAIL_MARKETING_Update
		/// </summary>
		public void spEMAIL_MARKETING_Update(ref Guid gID, string sNAME, string sFROM_ADDR, string sFROM_NAME, DateTime dtDATE_TIME, Guid gTEMPLATE_ID, Guid gCAMPAIGN_ID, Guid gINBOUND_EMAIL_ID, string sSTATUS, bool bALL_PROSPECT_LISTS, string sREPLY_TO_NAME, string sREPLY_TO_ADDR, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_MARKETING_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
				IDbDataParameter parFROM_ADDR          = Sql.AddParameter(cmd, "@FROM_ADDR"         , sFROM_ADDR           , 100);
				IDbDataParameter parFROM_NAME          = Sql.AddParameter(cmd, "@FROM_NAME"         , sFROM_NAME           , 100);
				IDbDataParameter parDATE_TIME          = Sql.AddParameter(cmd, "@DATE_TIME"         , dtDATE_TIME          );
				IDbDataParameter parTEMPLATE_ID        = Sql.AddParameter(cmd, "@TEMPLATE_ID"       , gTEMPLATE_ID         );
				IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
				IDbDataParameter parINBOUND_EMAIL_ID   = Sql.AddParameter(cmd, "@INBOUND_EMAIL_ID"  , gINBOUND_EMAIL_ID    );
				IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
				IDbDataParameter parALL_PROSPECT_LISTS = Sql.AddParameter(cmd, "@ALL_PROSPECT_LISTS", bALL_PROSPECT_LISTS  );
				IDbDataParameter parREPLY_TO_NAME      = Sql.AddParameter(cmd, "@REPLY_TO_NAME"     , sREPLY_TO_NAME       , 100);
				IDbDataParameter parREPLY_TO_ADDR      = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"     , sREPLY_TO_ADDR       , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAIL_MARKETING_Update
		/// <summary>
		/// spEMAIL_MARKETING_Update
		/// </summary>
		public IDbCommand cmdEMAIL_MARKETING_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_MARKETING_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string", 255);
			IDbDataParameter parFROM_ADDR          = Sql.CreateParameter(cmd, "@FROM_ADDR"         , "string", 100);
			IDbDataParameter parFROM_NAME          = Sql.CreateParameter(cmd, "@FROM_NAME"         , "string", 100);
			IDbDataParameter parDATE_TIME          = Sql.CreateParameter(cmd, "@DATE_TIME"         , "DateTime",   8);
			IDbDataParameter parTEMPLATE_ID        = Sql.CreateParameter(cmd, "@TEMPLATE_ID"       , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID        = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"       , "Guid",  16);
			IDbDataParameter parINBOUND_EMAIL_ID   = Sql.CreateParameter(cmd, "@INBOUND_EMAIL_ID"  , "Guid",  16);
			IDbDataParameter parSTATUS             = Sql.CreateParameter(cmd, "@STATUS"            , "string",  25);
			IDbDataParameter parALL_PROSPECT_LISTS = Sql.CreateParameter(cmd, "@ALL_PROSPECT_LISTS", "bool",   1);
			IDbDataParameter parREPLY_TO_NAME      = Sql.CreateParameter(cmd, "@REPLY_TO_NAME"     , "string", 100);
			IDbDataParameter parREPLY_TO_ADDR      = Sql.CreateParameter(cmd, "@REPLY_TO_ADDR"     , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAIL_MKTG_PRSPT_LST_Delete
		/// <summary>
		/// spEMAIL_MKTG_PRSPT_LST_Delete
		/// </summary>
		public void spEMAIL_MKTG_PRSPT_LST_Delete(Guid gEMAIL_MARKETING_ID, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_MKTG_PRSPT_LST_Delete";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parEMAIL_MARKETING_ID = Sql.AddParameter(cmd, "@EMAIL_MARKETING_ID", gEMAIL_MARKETING_ID  );
							IDbDataParameter parPROSPECT_LIST_ID   = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID"  , gPROSPECT_LIST_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_MKTG_PRSPT_LST_Delete
		/// <summary>
		/// spEMAIL_MKTG_PRSPT_LST_Delete
		/// </summary>
		public void spEMAIL_MKTG_PRSPT_LST_Delete(Guid gEMAIL_MARKETING_ID, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_MKTG_PRSPT_LST_Delete";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parEMAIL_MARKETING_ID = Sql.AddParameter(cmd, "@EMAIL_MARKETING_ID", gEMAIL_MARKETING_ID  );
				IDbDataParameter parPROSPECT_LIST_ID   = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID"  , gPROSPECT_LIST_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_MKTG_PRSPT_LST_Delete
		/// <summary>
		/// spEMAIL_MKTG_PRSPT_LST_Delete
		/// </summary>
		public IDbCommand cmdEMAIL_MKTG_PRSPT_LST_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_MKTG_PRSPT_LST_Delete";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parEMAIL_MARKETING_ID = Sql.CreateParameter(cmd, "@EMAIL_MARKETING_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID   = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_MKTG_PRSPT_LST_Update
		/// <summary>
		/// spEMAIL_MKTG_PRSPT_LST_Update
		/// </summary>
		public void spEMAIL_MKTG_PRSPT_LST_Update(Guid gEMAIL_MARKETING_ID, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_MKTG_PRSPT_LST_Update";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parEMAIL_MARKETING_ID = Sql.AddParameter(cmd, "@EMAIL_MARKETING_ID", gEMAIL_MARKETING_ID  );
							IDbDataParameter parPROSPECT_LIST_ID   = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID"  , gPROSPECT_LIST_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_MKTG_PRSPT_LST_Update
		/// <summary>
		/// spEMAIL_MKTG_PRSPT_LST_Update
		/// </summary>
		public void spEMAIL_MKTG_PRSPT_LST_Update(Guid gEMAIL_MARKETING_ID, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_MKTG_PRSPT_LST_Update";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parEMAIL_MARKETING_ID = Sql.AddParameter(cmd, "@EMAIL_MARKETING_ID", gEMAIL_MARKETING_ID  );
				IDbDataParameter parPROSPECT_LIST_ID   = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID"  , gPROSPECT_LIST_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_MKTG_PRSPT_LST_Update
		/// <summary>
		/// spEMAIL_MKTG_PRSPT_LST_Update
		/// </summary>
		public IDbCommand cmdEMAIL_MKTG_PRSPT_LST_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_MKTG_PRSPT_LST_Update";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parEMAIL_MARKETING_ID = Sql.CreateParameter(cmd, "@EMAIL_MARKETING_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID   = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_MRKT_PROSPECT_LISTS_Delete
		/// <summary>
		/// spEMAIL_MRKT_PROSPECT_LISTS_Delete
		/// </summary>
		public void spEMAIL_MRKT_PROSPECT_LISTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_De";
							else
								cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_MRKT_PROSPECT_LISTS_Delete
		/// <summary>
		/// spEMAIL_MRKT_PROSPECT_LISTS_Delete
		/// </summary>
		public void spEMAIL_MRKT_PROSPECT_LISTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_De";
				else
					cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_MRKT_PROSPECT_LISTS_Delete
		/// <summary>
		/// spEMAIL_MRKT_PROSPECT_LISTS_Delete
		/// </summary>
		public IDbCommand cmdEMAIL_MRKT_PROSPECT_LISTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_De";
			else
				cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_MRKT_PROSPECT_LISTS_Update
		/// <summary>
		/// spEMAIL_MRKT_PROSPECT_LISTS_Update
		/// </summary>
		public void spEMAIL_MRKT_PROSPECT_LISTS_Update(ref Guid gID, Guid gPROSPECT_LIST_ID, Guid gEMAIL_MARKETING_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Up";
							else
								cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parPROSPECT_LIST_ID   = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID"  , gPROSPECT_LIST_ID    );
							IDbDataParameter parEMAIL_MARKETING_ID = Sql.AddParameter(cmd, "@EMAIL_MARKETING_ID", gEMAIL_MARKETING_ID  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_MRKT_PROSPECT_LISTS_Update
		/// <summary>
		/// spEMAIL_MRKT_PROSPECT_LISTS_Update
		/// </summary>
		public void spEMAIL_MRKT_PROSPECT_LISTS_Update(ref Guid gID, Guid gPROSPECT_LIST_ID, Guid gEMAIL_MARKETING_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Up";
				else
					cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parPROSPECT_LIST_ID   = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID"  , gPROSPECT_LIST_ID    );
				IDbDataParameter parEMAIL_MARKETING_ID = Sql.AddParameter(cmd, "@EMAIL_MARKETING_ID", gEMAIL_MARKETING_ID  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAIL_MRKT_PROSPECT_LISTS_Update
		/// <summary>
		/// spEMAIL_MRKT_PROSPECT_LISTS_Update
		/// </summary>
		public IDbCommand cmdEMAIL_MRKT_PROSPECT_LISTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Up";
			else
				cmd.CommandText = "spEMAIL_MRKT_PROSPECT_LISTS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID   = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID"  , "Guid",  16);
			IDbDataParameter parEMAIL_MARKETING_ID = Sql.CreateParameter(cmd, "@EMAIL_MARKETING_ID", "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAIL_TEMPLATES_Delete
		/// <summary>
		/// spEMAIL_TEMPLATES_Delete
		/// </summary>
		public void spEMAIL_TEMPLATES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_TEMPLATES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_TEMPLATES_Delete
		/// <summary>
		/// spEMAIL_TEMPLATES_Delete
		/// </summary>
		public void spEMAIL_TEMPLATES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_TEMPLATES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_TEMPLATES_Delete
		/// <summary>
		/// spEMAIL_TEMPLATES_Delete
		/// </summary>
		public IDbCommand cmdEMAIL_TEMPLATES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_TEMPLATES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_TEMPLATES_MassDelete
		/// <summary>
		/// spEMAIL_TEMPLATES_MassDelete
		/// </summary>
		public void spEMAIL_TEMPLATES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_TEMPLATES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_TEMPLATES_MassDelete
		/// <summary>
		/// spEMAIL_TEMPLATES_MassDelete
		/// </summary>
		public void spEMAIL_TEMPLATES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_TEMPLATES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_TEMPLATES_MassDelete
		/// <summary>
		/// spEMAIL_TEMPLATES_MassDelete
		/// </summary>
		public IDbCommand cmdEMAIL_TEMPLATES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_TEMPLATES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_TEMPLATES_STREAM_InsertPost
		/// <summary>
		/// spEMAIL_TEMPLATES_STREAM_InsertPost
		/// </summary>
		public void spEMAIL_TEMPLATES_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEMAIL_TEMPLATES_STREAM_Inser";
							else
								cmd.CommandText = "spEMAIL_TEMPLATES_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_TEMPLATES_STREAM_InsertPost
		/// <summary>
		/// spEMAIL_TEMPLATES_STREAM_InsertPost
		/// </summary>
		public void spEMAIL_TEMPLATES_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEMAIL_TEMPLATES_STREAM_Inser";
				else
					cmd.CommandText = "spEMAIL_TEMPLATES_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_TEMPLATES_STREAM_InsertPost
		/// <summary>
		/// spEMAIL_TEMPLATES_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdEMAIL_TEMPLATES_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEMAIL_TEMPLATES_STREAM_Inser";
			else
				cmd.CommandText = "spEMAIL_TEMPLATES_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAIL_TEMPLATES_Undelete
		/// <summary>
		/// spEMAIL_TEMPLATES_Undelete
		/// </summary>
		public void spEMAIL_TEMPLATES_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_TEMPLATES_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_TEMPLATES_Undelete
		/// <summary>
		/// spEMAIL_TEMPLATES_Undelete
		/// </summary>
		public void spEMAIL_TEMPLATES_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_TEMPLATES_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAIL_TEMPLATES_Undelete
		/// <summary>
		/// spEMAIL_TEMPLATES_Undelete
		/// </summary>
		public IDbCommand cmdEMAIL_TEMPLATES_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_TEMPLATES_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spEMAIL_TEMPLATES_Update
		/// <summary>
		/// spEMAIL_TEMPLATES_Update
		/// </summary>
		public void spEMAIL_TEMPLATES_Update(ref Guid gID, bool bPUBLISHED, bool bREAD_ONLY, string sNAME, string sDESCRIPTION, string sSUBJECT, string sBODY, string sBODY_HTML, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAIL_TEMPLATES_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parPUBLISHED         = Sql.AddParameter(cmd, "@PUBLISHED"        , bPUBLISHED          );
							IDbDataParameter parREAD_ONLY         = Sql.AddParameter(cmd, "@READ_ONLY"        , bREAD_ONLY          );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parSUBJECT           = Sql.AddParameter(cmd, "@SUBJECT"          , sSUBJECT            , 255);
							IDbDataParameter parBODY              = Sql.AddParameter(cmd, "@BODY"             , sBODY               );
							IDbDataParameter parBODY_HTML         = Sql.AddParameter(cmd, "@BODY_HTML"        , sBODY_HTML          );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAIL_TEMPLATES_Update
		/// <summary>
		/// spEMAIL_TEMPLATES_Update
		/// </summary>
		public void spEMAIL_TEMPLATES_Update(ref Guid gID, bool bPUBLISHED, bool bREAD_ONLY, string sNAME, string sDESCRIPTION, string sSUBJECT, string sBODY, string sBODY_HTML, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAIL_TEMPLATES_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parPUBLISHED         = Sql.AddParameter(cmd, "@PUBLISHED"        , bPUBLISHED          );
				IDbDataParameter parREAD_ONLY         = Sql.AddParameter(cmd, "@READ_ONLY"        , bREAD_ONLY          );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parSUBJECT           = Sql.AddParameter(cmd, "@SUBJECT"          , sSUBJECT            , 255);
				IDbDataParameter parBODY              = Sql.AddParameter(cmd, "@BODY"             , sBODY               );
				IDbDataParameter parBODY_HTML         = Sql.AddParameter(cmd, "@BODY_HTML"        , sBODY_HTML          );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAIL_TEMPLATES_Update
		/// <summary>
		/// spEMAIL_TEMPLATES_Update
		/// </summary>
		public IDbCommand cmdEMAIL_TEMPLATES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAIL_TEMPLATES_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parPUBLISHED         = Sql.CreateParameter(cmd, "@PUBLISHED"        , "bool",   1);
			IDbDataParameter parREAD_ONLY         = Sql.CreateParameter(cmd, "@READ_ONLY"        , "bool",   1);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parSUBJECT           = Sql.CreateParameter(cmd, "@SUBJECT"          , "string", 255);
			IDbDataParameter parBODY              = Sql.CreateParameter(cmd, "@BODY"             , "string", 104857600);
			IDbDataParameter parBODY_HTML         = Sql.CreateParameter(cmd, "@BODY_HTML"        , "string", 104857600);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILMAN_Delete
		/// <summary>
		/// spEMAILMAN_Delete
		/// </summary>
		public void spEMAILMAN_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_Delete
		/// <summary>
		/// spEMAILMAN_Delete
		/// </summary>
		public void spEMAILMAN_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILMAN_Delete
		/// <summary>
		/// spEMAILMAN_Delete
		/// </summary>
		public IDbCommand cmdEMAILMAN_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILMAN_MassDelete
		/// <summary>
		/// spEMAILMAN_MassDelete
		/// </summary>
		public void spEMAILMAN_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_MassDelete
		/// <summary>
		/// spEMAILMAN_MassDelete
		/// </summary>
		public void spEMAILMAN_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILMAN_MassDelete
		/// <summary>
		/// spEMAILMAN_MassDelete
		/// </summary>
		public IDbCommand cmdEMAILMAN_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILMAN_RemoveDuplicates
		/// <summary>
		/// spEMAILMAN_RemoveDuplicates
		/// </summary>
		public void spEMAILMAN_RemoveDuplicates(Guid gCAMPAIGN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_RemoveDuplicates";
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_RemoveDuplicates
		/// <summary>
		/// spEMAILMAN_RemoveDuplicates
		/// </summary>
		public void spEMAILMAN_RemoveDuplicates(Guid gCAMPAIGN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_RemoveDuplicates";
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILMAN_RemoveDuplicates
		/// <summary>
		/// spEMAILMAN_RemoveDuplicates
		/// </summary>
		public IDbCommand cmdEMAILMAN_RemoveDuplicates(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_RemoveDuplicates";
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILMAN_SendFailed
		/// <summary>
		/// spEMAILMAN_SendFailed
		/// </summary>
		public void spEMAILMAN_SendFailed(Guid gID, string sACTIVITY_TYPE, bool bABORT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_SendFailed";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parACTIVITY_TYPE    = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"   , sACTIVITY_TYPE     ,  25);
							IDbDataParameter parABORT            = Sql.AddParameter(cmd, "@ABORT"           , bABORT             );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_SendFailed
		/// <summary>
		/// spEMAILMAN_SendFailed
		/// </summary>
		public void spEMAILMAN_SendFailed(Guid gID, string sACTIVITY_TYPE, bool bABORT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_SendFailed";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parACTIVITY_TYPE    = Sql.AddParameter(cmd, "@ACTIVITY_TYPE"   , sACTIVITY_TYPE     ,  25);
				IDbDataParameter parABORT            = Sql.AddParameter(cmd, "@ABORT"           , bABORT             );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILMAN_SendFailed
		/// <summary>
		/// spEMAILMAN_SendFailed
		/// </summary>
		public IDbCommand cmdEMAILMAN_SendFailed(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_SendFailed";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parACTIVITY_TYPE    = Sql.CreateParameter(cmd, "@ACTIVITY_TYPE"   , "string",  25);
			IDbDataParameter parABORT            = Sql.CreateParameter(cmd, "@ABORT"           , "bool",   1);
			return cmd;
		}
		#endregion

		#region spEMAILMAN_SendSuccessful
		/// <summary>
		/// spEMAILMAN_SendSuccessful
		/// </summary>
		public void spEMAILMAN_SendSuccessful(Guid gID, Guid gTARGET_TRACKER_KEY, Guid gEMAIL_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_SendSuccessful";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
							IDbDataParameter parEMAIL_ID           = Sql.AddParameter(cmd, "@EMAIL_ID"          , gEMAIL_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_SendSuccessful
		/// <summary>
		/// spEMAILMAN_SendSuccessful
		/// </summary>
		public void spEMAILMAN_SendSuccessful(Guid gID, Guid gTARGET_TRACKER_KEY, Guid gEMAIL_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_SendSuccessful";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
				IDbDataParameter parEMAIL_ID           = Sql.AddParameter(cmd, "@EMAIL_ID"          , gEMAIL_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILMAN_SendSuccessful
		/// <summary>
		/// spEMAILMAN_SendSuccessful
		/// </summary>
		public IDbCommand cmdEMAILMAN_SendSuccessful(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_SendSuccessful";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parTARGET_TRACKER_KEY = Sql.CreateParameter(cmd, "@TARGET_TRACKER_KEY", "Guid",  16);
			IDbDataParameter parEMAIL_ID           = Sql.CreateParameter(cmd, "@EMAIL_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILMAN_SENT_Delete
		/// <summary>
		/// spEMAILMAN_SENT_Delete
		/// </summary>
		public void spEMAILMAN_SENT_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_SENT_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_SENT_Delete
		/// <summary>
		/// spEMAILMAN_SENT_Delete
		/// </summary>
		public void spEMAILMAN_SENT_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_SENT_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILMAN_SENT_Delete
		/// <summary>
		/// spEMAILMAN_SENT_Delete
		/// </summary>
		public IDbCommand cmdEMAILMAN_SENT_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_SENT_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILMAN_SENT_Update
		/// <summary>
		/// spEMAILMAN_SENT_Update
		/// </summary>
		public void spEMAILMAN_SENT_Update(ref Guid gID, Guid gUSER_ID, Guid gTEMPLATE_ID, string sFROM_EMAIL, string sFROM_NAME, Guid gMODULE_ID, Guid gCAMPAIGN_ID, Guid gMARKETING_ID, Guid gLIST_ID, string sMODULE, DateTime dtSEND_DATE_TIME, bool bINVALID_EMAIL, bool bIN_QUEUE, DateTime dtIN_QUEUE_DATE, Int32 nSEND_ATTEMPTS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_SENT_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parTEMPLATE_ID      = Sql.AddParameter(cmd, "@TEMPLATE_ID"     , gTEMPLATE_ID       );
							IDbDataParameter parFROM_EMAIL       = Sql.AddParameter(cmd, "@FROM_EMAIL"      , sFROM_EMAIL        , 255);
							IDbDataParameter parFROM_NAME        = Sql.AddParameter(cmd, "@FROM_NAME"       , sFROM_NAME         , 255);
							IDbDataParameter parMODULE_ID        = Sql.AddParameter(cmd, "@MODULE_ID"       , gMODULE_ID         );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							IDbDataParameter parMARKETING_ID     = Sql.AddParameter(cmd, "@MARKETING_ID"    , gMARKETING_ID      );
							IDbDataParameter parLIST_ID          = Sql.AddParameter(cmd, "@LIST_ID"         , gLIST_ID           );
							IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            , 100);
							IDbDataParameter parSEND_DATE_TIME   = Sql.AddParameter(cmd, "@SEND_DATE_TIME"  , dtSEND_DATE_TIME   );
							IDbDataParameter parINVALID_EMAIL    = Sql.AddParameter(cmd, "@INVALID_EMAIL"   , bINVALID_EMAIL     );
							IDbDataParameter parIN_QUEUE         = Sql.AddParameter(cmd, "@IN_QUEUE"        , bIN_QUEUE          );
							IDbDataParameter parIN_QUEUE_DATE    = Sql.AddParameter(cmd, "@IN_QUEUE_DATE"   , dtIN_QUEUE_DATE    );
							IDbDataParameter parSEND_ATTEMPTS    = Sql.AddParameter(cmd, "@SEND_ATTEMPTS"   , nSEND_ATTEMPTS     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_SENT_Update
		/// <summary>
		/// spEMAILMAN_SENT_Update
		/// </summary>
		public void spEMAILMAN_SENT_Update(ref Guid gID, Guid gUSER_ID, Guid gTEMPLATE_ID, string sFROM_EMAIL, string sFROM_NAME, Guid gMODULE_ID, Guid gCAMPAIGN_ID, Guid gMARKETING_ID, Guid gLIST_ID, string sMODULE, DateTime dtSEND_DATE_TIME, bool bINVALID_EMAIL, bool bIN_QUEUE, DateTime dtIN_QUEUE_DATE, Int32 nSEND_ATTEMPTS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_SENT_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parTEMPLATE_ID      = Sql.AddParameter(cmd, "@TEMPLATE_ID"     , gTEMPLATE_ID       );
				IDbDataParameter parFROM_EMAIL       = Sql.AddParameter(cmd, "@FROM_EMAIL"      , sFROM_EMAIL        , 255);
				IDbDataParameter parFROM_NAME        = Sql.AddParameter(cmd, "@FROM_NAME"       , sFROM_NAME         , 255);
				IDbDataParameter parMODULE_ID        = Sql.AddParameter(cmd, "@MODULE_ID"       , gMODULE_ID         );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				IDbDataParameter parMARKETING_ID     = Sql.AddParameter(cmd, "@MARKETING_ID"    , gMARKETING_ID      );
				IDbDataParameter parLIST_ID          = Sql.AddParameter(cmd, "@LIST_ID"         , gLIST_ID           );
				IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            , 100);
				IDbDataParameter parSEND_DATE_TIME   = Sql.AddParameter(cmd, "@SEND_DATE_TIME"  , dtSEND_DATE_TIME   );
				IDbDataParameter parINVALID_EMAIL    = Sql.AddParameter(cmd, "@INVALID_EMAIL"   , bINVALID_EMAIL     );
				IDbDataParameter parIN_QUEUE         = Sql.AddParameter(cmd, "@IN_QUEUE"        , bIN_QUEUE          );
				IDbDataParameter parIN_QUEUE_DATE    = Sql.AddParameter(cmd, "@IN_QUEUE_DATE"   , dtIN_QUEUE_DATE    );
				IDbDataParameter parSEND_ATTEMPTS    = Sql.AddParameter(cmd, "@SEND_ATTEMPTS"   , nSEND_ATTEMPTS     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAILMAN_SENT_Update
		/// <summary>
		/// spEMAILMAN_SENT_Update
		/// </summary>
		public IDbCommand cmdEMAILMAN_SENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_SENT_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parTEMPLATE_ID      = Sql.CreateParameter(cmd, "@TEMPLATE_ID"     , "Guid",  16);
			IDbDataParameter parFROM_EMAIL       = Sql.CreateParameter(cmd, "@FROM_EMAIL"      , "string", 255);
			IDbDataParameter parFROM_NAME        = Sql.CreateParameter(cmd, "@FROM_NAME"       , "string", 255);
			IDbDataParameter parMODULE_ID        = Sql.CreateParameter(cmd, "@MODULE_ID"       , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			IDbDataParameter parMARKETING_ID     = Sql.CreateParameter(cmd, "@MARKETING_ID"    , "Guid",  16);
			IDbDataParameter parLIST_ID          = Sql.CreateParameter(cmd, "@LIST_ID"         , "Guid",  16);
			IDbDataParameter parMODULE           = Sql.CreateParameter(cmd, "@MODULE"          , "string", 100);
			IDbDataParameter parSEND_DATE_TIME   = Sql.CreateParameter(cmd, "@SEND_DATE_TIME"  , "DateTime",   8);
			IDbDataParameter parINVALID_EMAIL    = Sql.CreateParameter(cmd, "@INVALID_EMAIL"   , "bool",   1);
			IDbDataParameter parIN_QUEUE         = Sql.CreateParameter(cmd, "@IN_QUEUE"        , "bool",   1);
			IDbDataParameter parIN_QUEUE_DATE    = Sql.CreateParameter(cmd, "@IN_QUEUE_DATE"   , "DateTime",   8);
			IDbDataParameter parSEND_ATTEMPTS    = Sql.CreateParameter(cmd, "@SEND_ATTEMPTS"   , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILMAN_Update
		/// <summary>
		/// spEMAILMAN_Update
		/// </summary>
		public void spEMAILMAN_Update(ref Guid gID, Guid gUSER_ID, Guid gCAMPAIGN_ID, Guid gMARKETING_ID, Guid gLIST_ID, DateTime dtSEND_DATE_TIME, bool bIN_QUEUE, DateTime dtIN_QUEUE_DATE, Int32 nSEND_ATTEMPTS, Guid gRELATED_ID, string sRELATED_TYPE, string sEMAILMAN_NUMBER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILMAN_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							IDbDataParameter parMARKETING_ID     = Sql.AddParameter(cmd, "@MARKETING_ID"    , gMARKETING_ID      );
							IDbDataParameter parLIST_ID          = Sql.AddParameter(cmd, "@LIST_ID"         , gLIST_ID           );
							IDbDataParameter parSEND_DATE_TIME   = Sql.AddParameter(cmd, "@SEND_DATE_TIME"  , dtSEND_DATE_TIME   );
							IDbDataParameter parIN_QUEUE         = Sql.AddParameter(cmd, "@IN_QUEUE"        , bIN_QUEUE          );
							IDbDataParameter parIN_QUEUE_DATE    = Sql.AddParameter(cmd, "@IN_QUEUE_DATE"   , dtIN_QUEUE_DATE    );
							IDbDataParameter parSEND_ATTEMPTS    = Sql.AddParameter(cmd, "@SEND_ATTEMPTS"   , nSEND_ATTEMPTS     );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      , 100);
							IDbDataParameter parEMAILMAN_NUMBER  = Sql.AddParameter(cmd, "@EMAILMAN_NUMBER" , sEMAILMAN_NUMBER   ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILMAN_Update
		/// <summary>
		/// spEMAILMAN_Update
		/// </summary>
		public void spEMAILMAN_Update(ref Guid gID, Guid gUSER_ID, Guid gCAMPAIGN_ID, Guid gMARKETING_ID, Guid gLIST_ID, DateTime dtSEND_DATE_TIME, bool bIN_QUEUE, DateTime dtIN_QUEUE_DATE, Int32 nSEND_ATTEMPTS, Guid gRELATED_ID, string sRELATED_TYPE, string sEMAILMAN_NUMBER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILMAN_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				IDbDataParameter parMARKETING_ID     = Sql.AddParameter(cmd, "@MARKETING_ID"    , gMARKETING_ID      );
				IDbDataParameter parLIST_ID          = Sql.AddParameter(cmd, "@LIST_ID"         , gLIST_ID           );
				IDbDataParameter parSEND_DATE_TIME   = Sql.AddParameter(cmd, "@SEND_DATE_TIME"  , dtSEND_DATE_TIME   );
				IDbDataParameter parIN_QUEUE         = Sql.AddParameter(cmd, "@IN_QUEUE"        , bIN_QUEUE          );
				IDbDataParameter parIN_QUEUE_DATE    = Sql.AddParameter(cmd, "@IN_QUEUE_DATE"   , dtIN_QUEUE_DATE    );
				IDbDataParameter parSEND_ATTEMPTS    = Sql.AddParameter(cmd, "@SEND_ATTEMPTS"   , nSEND_ATTEMPTS     );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      , 100);
				IDbDataParameter parEMAILMAN_NUMBER  = Sql.AddParameter(cmd, "@EMAILMAN_NUMBER" , sEMAILMAN_NUMBER   ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAILMAN_Update
		/// <summary>
		/// spEMAILMAN_Update
		/// </summary>
		public IDbCommand cmdEMAILMAN_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILMAN_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			IDbDataParameter parMARKETING_ID     = Sql.CreateParameter(cmd, "@MARKETING_ID"    , "Guid",  16);
			IDbDataParameter parLIST_ID          = Sql.CreateParameter(cmd, "@LIST_ID"         , "Guid",  16);
			IDbDataParameter parSEND_DATE_TIME   = Sql.CreateParameter(cmd, "@SEND_DATE_TIME"  , "DateTime",   8);
			IDbDataParameter parIN_QUEUE         = Sql.CreateParameter(cmd, "@IN_QUEUE"        , "bool",   1);
			IDbDataParameter parIN_QUEUE_DATE    = Sql.CreateParameter(cmd, "@IN_QUEUE_DATE"   , "DateTime",   8);
			IDbDataParameter parSEND_ATTEMPTS    = Sql.CreateParameter(cmd, "@SEND_ATTEMPTS"   , "Int32",   4);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_TYPE     = Sql.CreateParameter(cmd, "@RELATED_TYPE"    , "string", 100);
			IDbDataParameter parEMAILMAN_NUMBER  = Sql.CreateParameter(cmd, "@EMAILMAN_NUMBER" , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILS_ACCOUNTS_Delete
		/// <summary>
		/// spEMAILS_ACCOUNTS_Delete
		/// </summary>
		public void spEMAILS_ACCOUNTS_Delete(Guid gEMAIL_ID, Guid gACCOUNT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_ACCOUNTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_ACCOUNTS_Delete
		/// <summary>
		/// spEMAILS_ACCOUNTS_Delete
		/// </summary>
		public void spEMAILS_ACCOUNTS_Delete(Guid gEMAIL_ID, Guid gACCOUNT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_ACCOUNTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_ACCOUNTS_Delete
		/// <summary>
		/// spEMAILS_ACCOUNTS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_ACCOUNTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_ACCOUNTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_ACCOUNTS_Update
		/// <summary>
		/// spEMAILS_ACCOUNTS_Update
		/// </summary>
		public void spEMAILS_ACCOUNTS_Update(Guid gEMAIL_ID, Guid gACCOUNT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_ACCOUNTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_ACCOUNTS_Update
		/// <summary>
		/// spEMAILS_ACCOUNTS_Update
		/// </summary>
		public void spEMAILS_ACCOUNTS_Update(Guid gEMAIL_ID, Guid gACCOUNT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_ACCOUNTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_ACCOUNTS_Update
		/// <summary>
		/// spEMAILS_ACCOUNTS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_ACCOUNTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_ACCOUNTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_ArchiveContent
		/// <summary>
		/// spEMAILS_ArchiveContent
		/// </summary>
		public void spEMAILS_ArchiveContent(Guid gID, string sNAME, string sDESCRIPTION, string sDESCRIPTION_HTML, bool bINCLUDE_CC)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_ArchiveContent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							IDbDataParameter parDESCRIPTION_HTML = Sql.AddParameter(cmd, "@DESCRIPTION_HTML", sDESCRIPTION_HTML  );
							IDbDataParameter parINCLUDE_CC       = Sql.AddParameter(cmd, "@INCLUDE_CC"      , bINCLUDE_CC        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_ArchiveContent
		/// <summary>
		/// spEMAILS_ArchiveContent
		/// </summary>
		public void spEMAILS_ArchiveContent(Guid gID, string sNAME, string sDESCRIPTION, string sDESCRIPTION_HTML, bool bINCLUDE_CC, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_ArchiveContent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				IDbDataParameter parDESCRIPTION_HTML = Sql.AddParameter(cmd, "@DESCRIPTION_HTML", sDESCRIPTION_HTML  );
				IDbDataParameter parINCLUDE_CC       = Sql.AddParameter(cmd, "@INCLUDE_CC"      , bINCLUDE_CC        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_ArchiveContent
		/// <summary>
		/// spEMAILS_ArchiveContent
		/// </summary>
		public IDbCommand cmdEMAILS_ArchiveContent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_ArchiveContent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			IDbDataParameter parDESCRIPTION_HTML = Sql.CreateParameter(cmd, "@DESCRIPTION_HTML", "string", 104857600);
			IDbDataParameter parINCLUDE_CC       = Sql.CreateParameter(cmd, "@INCLUDE_CC"      , "bool",   1);
			return cmd;
		}
		#endregion

		#region spEMAILS_BUGS_Delete
		/// <summary>
		/// spEMAILS_BUGS_Delete
		/// </summary>
		public void spEMAILS_BUGS_Delete(Guid gEMAIL_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_BUGS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_BUGS_Delete
		/// <summary>
		/// spEMAILS_BUGS_Delete
		/// </summary>
		public void spEMAILS_BUGS_Delete(Guid gEMAIL_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_BUGS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_BUGS_Delete
		/// <summary>
		/// spEMAILS_BUGS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_BUGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_BUGS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_BUGS_Update
		/// <summary>
		/// spEMAILS_BUGS_Update
		/// </summary>
		public void spEMAILS_BUGS_Update(Guid gEMAIL_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_BUGS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_BUGS_Update
		/// <summary>
		/// spEMAILS_BUGS_Update
		/// </summary>
		public void spEMAILS_BUGS_Update(Guid gEMAIL_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_BUGS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_BUGS_Update
		/// <summary>
		/// spEMAILS_BUGS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_BUGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_BUGS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_CampaignRef
		/// <summary>
		/// spEMAILS_CampaignRef
		/// </summary>
		public void spEMAILS_CampaignRef(ref Guid gID, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, string sDESCRIPTION, string sDESCRIPTION_HTML, string sFROM_ADDR, string sFROM_NAME, string sTO_ADDRS, string sTO_ADDRS_IDS, string sTO_ADDRS_NAMES, string sTO_ADDRS_EMAILS, string sTYPE, string sSTATUS, string sRELATED_TYPE, Guid gRELATED_ID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gTEAM_SET_ID, Guid gASSIGNED_SET_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_CampaignRef";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							IDbDataParameter parDESCRIPTION_HTML = Sql.AddParameter(cmd, "@DESCRIPTION_HTML", sDESCRIPTION_HTML  );
							IDbDataParameter parFROM_ADDR        = Sql.AddParameter(cmd, "@FROM_ADDR"       , sFROM_ADDR         , 100);
							IDbDataParameter parFROM_NAME        = Sql.AddParameter(cmd, "@FROM_NAME"       , sFROM_NAME         , 100);
							IDbDataParameter parTO_ADDRS         = Sql.AddParameter(cmd, "@TO_ADDRS"        , sTO_ADDRS          );
							IDbDataParameter parTO_ADDRS_IDS     = Sql.AddAnsiParam(cmd, "@TO_ADDRS_IDS"    , sTO_ADDRS_IDS      , 8000);
							IDbDataParameter parTO_ADDRS_NAMES   = Sql.AddParameter(cmd, "@TO_ADDRS_NAMES"  , sTO_ADDRS_NAMES    );
							IDbDataParameter parTO_ADDRS_EMAILS  = Sql.AddParameter(cmd, "@TO_ADDRS_EMAILS" , sTO_ADDRS_EMAILS   );
							IDbDataParameter parTYPE             = Sql.AddParameter(cmd, "@TYPE"            , sTYPE              ,  25);
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      ,  25);
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parTEAM_SET_ID      = Sql.AddParameter(cmd, "@TEAM_SET_ID"     , gTEAM_SET_ID       );
							IDbDataParameter parASSIGNED_SET_ID  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ID" , gASSIGNED_SET_ID   );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_CampaignRef
		/// <summary>
		/// spEMAILS_CampaignRef
		/// </summary>
		public void spEMAILS_CampaignRef(ref Guid gID, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, string sDESCRIPTION, string sDESCRIPTION_HTML, string sFROM_ADDR, string sFROM_NAME, string sTO_ADDRS, string sTO_ADDRS_IDS, string sTO_ADDRS_NAMES, string sTO_ADDRS_EMAILS, string sTYPE, string sSTATUS, string sRELATED_TYPE, Guid gRELATED_ID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gTEAM_SET_ID, Guid gASSIGNED_SET_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_CampaignRef";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				IDbDataParameter parDESCRIPTION_HTML = Sql.AddParameter(cmd, "@DESCRIPTION_HTML", sDESCRIPTION_HTML  );
				IDbDataParameter parFROM_ADDR        = Sql.AddParameter(cmd, "@FROM_ADDR"       , sFROM_ADDR         , 100);
				IDbDataParameter parFROM_NAME        = Sql.AddParameter(cmd, "@FROM_NAME"       , sFROM_NAME         , 100);
				IDbDataParameter parTO_ADDRS         = Sql.AddParameter(cmd, "@TO_ADDRS"        , sTO_ADDRS          );
				IDbDataParameter parTO_ADDRS_IDS     = Sql.AddAnsiParam(cmd, "@TO_ADDRS_IDS"    , sTO_ADDRS_IDS      , 8000);
				IDbDataParameter parTO_ADDRS_NAMES   = Sql.AddParameter(cmd, "@TO_ADDRS_NAMES"  , sTO_ADDRS_NAMES    );
				IDbDataParameter parTO_ADDRS_EMAILS  = Sql.AddParameter(cmd, "@TO_ADDRS_EMAILS" , sTO_ADDRS_EMAILS   );
				IDbDataParameter parTYPE             = Sql.AddParameter(cmd, "@TYPE"            , sTYPE              ,  25);
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parRELATED_TYPE     = Sql.AddParameter(cmd, "@RELATED_TYPE"    , sRELATED_TYPE      ,  25);
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parTEAM_SET_ID      = Sql.AddParameter(cmd, "@TEAM_SET_ID"     , gTEAM_SET_ID       );
				IDbDataParameter parASSIGNED_SET_ID  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ID" , gASSIGNED_SET_ID   );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAILS_CampaignRef
		/// <summary>
		/// spEMAILS_CampaignRef
		/// </summary>
		public IDbCommand cmdEMAILS_CampaignRef(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_CampaignRef";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			IDbDataParameter parDESCRIPTION_HTML = Sql.CreateParameter(cmd, "@DESCRIPTION_HTML", "string", 104857600);
			IDbDataParameter parFROM_ADDR        = Sql.CreateParameter(cmd, "@FROM_ADDR"       , "string", 100);
			IDbDataParameter parFROM_NAME        = Sql.CreateParameter(cmd, "@FROM_NAME"       , "string", 100);
			IDbDataParameter parTO_ADDRS         = Sql.CreateParameter(cmd, "@TO_ADDRS"        , "string", 104857600);
			IDbDataParameter parTO_ADDRS_IDS     = Sql.CreateParameter(cmd, "@TO_ADDRS_IDS"    , "ansistring", 8000);
			IDbDataParameter parTO_ADDRS_NAMES   = Sql.CreateParameter(cmd, "@TO_ADDRS_NAMES"  , "string", 104857600);
			IDbDataParameter parTO_ADDRS_EMAILS  = Sql.CreateParameter(cmd, "@TO_ADDRS_EMAILS" , "string", 104857600);
			IDbDataParameter parTYPE             = Sql.CreateParameter(cmd, "@TYPE"            , "string",  25);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parRELATED_TYPE     = Sql.CreateParameter(cmd, "@RELATED_TYPE"    , "string",  25);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_SET_ID      = Sql.CreateParameter(cmd, "@TEAM_SET_ID"     , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ID" , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILS_CASES_Delete
		/// <summary>
		/// spEMAILS_CASES_Delete
		/// </summary>
		public void spEMAILS_CASES_Delete(Guid gEMAIL_ID, Guid gCASE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_CASES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_CASES_Delete
		/// <summary>
		/// spEMAILS_CASES_Delete
		/// </summary>
		public void spEMAILS_CASES_Delete(Guid gEMAIL_ID, Guid gCASE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_CASES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_CASES_Delete
		/// <summary>
		/// spEMAILS_CASES_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_CASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_CASES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_CASES_Update
		/// <summary>
		/// spEMAILS_CASES_Update
		/// </summary>
		public void spEMAILS_CASES_Update(Guid gEMAIL_ID, Guid gCASE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_CASES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_CASES_Update
		/// <summary>
		/// spEMAILS_CASES_Update
		/// </summary>
		public void spEMAILS_CASES_Update(Guid gEMAIL_ID, Guid gCASE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_CASES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_CASES_Update
		/// <summary>
		/// spEMAILS_CASES_Update
		/// </summary>
		public IDbCommand cmdEMAILS_CASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_CASES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_CONTACTS_Delete
		/// <summary>
		/// spEMAILS_CONTACTS_Delete
		/// </summary>
		public void spEMAILS_CONTACTS_Delete(Guid gEMAIL_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_CONTACTS_Delete
		/// <summary>
		/// spEMAILS_CONTACTS_Delete
		/// </summary>
		public void spEMAILS_CONTACTS_Delete(Guid gEMAIL_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_CONTACTS_Delete
		/// <summary>
		/// spEMAILS_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_CONTACTS_Update
		/// <summary>
		/// spEMAILS_CONTACTS_Update
		/// </summary>
		public void spEMAILS_CONTACTS_Update(Guid gEMAIL_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_CONTACTS_Update
		/// <summary>
		/// spEMAILS_CONTACTS_Update
		/// </summary>
		public void spEMAILS_CONTACTS_Update(Guid gEMAIL_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_CONTACTS_Update
		/// <summary>
		/// spEMAILS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_CONTRACTS_Update
		/// <summary>
		/// spEMAILS_CONTRACTS_Update
		/// </summary>
		public void spEMAILS_CONTRACTS_Update(Guid gEMAIL_ID, Guid gQUOTE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_CONTRACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_CONTRACTS_Update
		/// <summary>
		/// spEMAILS_CONTRACTS_Update
		/// </summary>
		public void spEMAILS_CONTRACTS_Update(Guid gEMAIL_ID, Guid gQUOTE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_CONTRACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_CONTRACTS_Update
		/// <summary>
		/// spEMAILS_CONTRACTS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_CONTRACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_CONTRACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_Delete
		/// <summary>
		/// spEMAILS_Delete
		/// </summary>
		public void spEMAILS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_Delete
		/// <summary>
		/// spEMAILS_Delete
		/// </summary>
		public void spEMAILS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_Delete
		/// <summary>
		/// spEMAILS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_GetMailbox
		/// <summary>
		/// spEMAILS_GetMailbox
		/// </summary>
		public void spEMAILS_GetMailbox(Guid gID, ref string sMAIL_SENDTYPE, ref string sMAIL_SMTPSERVER, ref Int32 nMAIL_SMTPPORT, ref string sMAIL_SMTPUSER, ref string sMAIL_SMTPPASS, ref bool bMAIL_SMTPAUTH_REQ, ref bool bMAIL_SMTPSSL, ref Guid gOAUTH_USER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_GetMailbox";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
							IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
							IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
							IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
							IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
							IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
							IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , bMAIL_SMTPSSL       );
							IDbDataParameter parOAUTH_USER_ID     = Sql.AddParameter(cmd, "@OAUTH_USER_ID"    , gOAUTH_USER_ID      );
							parMAIL_SENDTYPE.Direction = ParameterDirection.InputOutput;
							parMAIL_SMTPSERVER.Direction = ParameterDirection.InputOutput;
							parMAIL_SMTPPORT.Direction = ParameterDirection.InputOutput;
							parMAIL_SMTPUSER.Direction = ParameterDirection.InputOutput;
							parMAIL_SMTPPASS.Direction = ParameterDirection.InputOutput;
							parMAIL_SMTPAUTH_REQ.Direction = ParameterDirection.InputOutput;
							parMAIL_SMTPSSL.Direction = ParameterDirection.InputOutput;
							parOAUTH_USER_ID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sMAIL_SENDTYPE = Sql.ToString(parMAIL_SENDTYPE.Value);
							sMAIL_SMTPSERVER = Sql.ToString(parMAIL_SMTPSERVER.Value);
							nMAIL_SMTPPORT = Sql.ToInteger(parMAIL_SMTPPORT.Value);
							sMAIL_SMTPUSER = Sql.ToString(parMAIL_SMTPUSER.Value);
							sMAIL_SMTPPASS = Sql.ToString(parMAIL_SMTPPASS.Value);
							bMAIL_SMTPAUTH_REQ = Sql.ToBoolean(parMAIL_SMTPAUTH_REQ.Value);
							bMAIL_SMTPSSL = Sql.ToBoolean(parMAIL_SMTPSSL.Value);
							gOAUTH_USER_ID = Sql.ToGuid(parOAUTH_USER_ID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_GetMailbox
		/// <summary>
		/// spEMAILS_GetMailbox
		/// </summary>
		public void spEMAILS_GetMailbox(Guid gID, ref string sMAIL_SENDTYPE, ref string sMAIL_SMTPSERVER, ref Int32 nMAIL_SMTPPORT, ref string sMAIL_SMTPUSER, ref string sMAIL_SMTPPASS, ref bool bMAIL_SMTPAUTH_REQ, ref bool bMAIL_SMTPSSL, ref Guid gOAUTH_USER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_GetMailbox";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
				IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
				IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
				IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
				IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
				IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
				IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , bMAIL_SMTPSSL       );
				IDbDataParameter parOAUTH_USER_ID     = Sql.AddParameter(cmd, "@OAUTH_USER_ID"    , gOAUTH_USER_ID      );
				parMAIL_SENDTYPE.Direction = ParameterDirection.InputOutput;
				parMAIL_SMTPSERVER.Direction = ParameterDirection.InputOutput;
				parMAIL_SMTPPORT.Direction = ParameterDirection.InputOutput;
				parMAIL_SMTPUSER.Direction = ParameterDirection.InputOutput;
				parMAIL_SMTPPASS.Direction = ParameterDirection.InputOutput;
				parMAIL_SMTPAUTH_REQ.Direction = ParameterDirection.InputOutput;
				parMAIL_SMTPSSL.Direction = ParameterDirection.InputOutput;
				parOAUTH_USER_ID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sMAIL_SENDTYPE = Sql.ToString(parMAIL_SENDTYPE.Value);
				sMAIL_SMTPSERVER = Sql.ToString(parMAIL_SMTPSERVER.Value);
				nMAIL_SMTPPORT = Sql.ToInteger(parMAIL_SMTPPORT.Value);
				sMAIL_SMTPUSER = Sql.ToString(parMAIL_SMTPUSER.Value);
				sMAIL_SMTPPASS = Sql.ToString(parMAIL_SMTPPASS.Value);
				bMAIL_SMTPAUTH_REQ = Sql.ToBoolean(parMAIL_SMTPAUTH_REQ.Value);
				bMAIL_SMTPSSL = Sql.ToBoolean(parMAIL_SMTPSSL.Value);
				gOAUTH_USER_ID = Sql.ToGuid(parOAUTH_USER_ID.Value);
			}
		}
		#endregion

		#region cmdEMAILS_GetMailbox
		/// <summary>
		/// spEMAILS_GetMailbox
		/// </summary>
		public IDbCommand cmdEMAILS_GetMailbox(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_GetMailbox";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMAIL_SENDTYPE     = Sql.CreateParameter(cmd, "@MAIL_SENDTYPE"    , "string",  25);
			IDbDataParameter parMAIL_SMTPSERVER   = Sql.CreateParameter(cmd, "@MAIL_SMTPSERVER"  , "string", 100);
			IDbDataParameter parMAIL_SMTPPORT     = Sql.CreateParameter(cmd, "@MAIL_SMTPPORT"    , "Int32",   4);
			IDbDataParameter parMAIL_SMTPUSER     = Sql.CreateParameter(cmd, "@MAIL_SMTPUSER"    , "string", 100);
			IDbDataParameter parMAIL_SMTPPASS     = Sql.CreateParameter(cmd, "@MAIL_SMTPPASS"    , "string", 100);
			IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.CreateParameter(cmd, "@MAIL_SMTPAUTH_REQ", "bool",   1);
			IDbDataParameter parMAIL_SMTPSSL      = Sql.CreateParameter(cmd, "@MAIL_SMTPSSL"     , "bool",   1);
			IDbDataParameter parOAUTH_USER_ID     = Sql.CreateParameter(cmd, "@OAUTH_USER_ID"    , "Guid",  16);
			parMAIL_SENDTYPE.Direction = ParameterDirection.InputOutput;
			parMAIL_SMTPSERVER.Direction = ParameterDirection.InputOutput;
			parMAIL_SMTPPORT.Direction = ParameterDirection.InputOutput;
			parMAIL_SMTPUSER.Direction = ParameterDirection.InputOutput;
			parMAIL_SMTPPASS.Direction = ParameterDirection.InputOutput;
			parMAIL_SMTPAUTH_REQ.Direction = ParameterDirection.InputOutput;
			parMAIL_SMTPSSL.Direction = ParameterDirection.InputOutput;
			parOAUTH_USER_ID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILS_InsertInbound
		/// <summary>
		/// spEMAILS_InsertInbound
		/// </summary>
		public void spEMAILS_InsertInbound(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, DateTime dtDATE_TIME, string sDESCRIPTION, string sDESCRIPTION_HTML, string sFROM_ADDR, string sFROM_NAME, string sTO_ADDRS, string sCC_ADDRS, string sBCC_ADDRS, string sTO_ADDRS_NAMES, string sTO_ADDRS_EMAILS, string sCC_ADDRS_NAMES, string sCC_ADDRS_EMAILS, string sBCC_ADDRS_NAMES, string sBCC_ADDRS_EMAILS, string sTYPE, string sSTATUS, string sMESSAGE_ID, string sREPLY_TO_NAME, string sREPLY_TO_ADDR, string sINTENT, Guid gMAILBOX_ID, Guid gTARGET_TRACKER_KEY, string sRAW_SOURCE, Guid gTEAM_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_InsertInbound";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
							IDbDataParameter parDATE_TIME          = Sql.AddParameter(cmd, "@DATE_TIME"         , dtDATE_TIME          );
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parDESCRIPTION_HTML   = Sql.AddParameter(cmd, "@DESCRIPTION_HTML"  , sDESCRIPTION_HTML    );
							IDbDataParameter parFROM_ADDR          = Sql.AddParameter(cmd, "@FROM_ADDR"         , sFROM_ADDR           , 100);
							IDbDataParameter parFROM_NAME          = Sql.AddParameter(cmd, "@FROM_NAME"         , sFROM_NAME           , 100);
							IDbDataParameter parTO_ADDRS           = Sql.AddParameter(cmd, "@TO_ADDRS"          , sTO_ADDRS            );
							IDbDataParameter parCC_ADDRS           = Sql.AddParameter(cmd, "@CC_ADDRS"          , sCC_ADDRS            );
							IDbDataParameter parBCC_ADDRS          = Sql.AddParameter(cmd, "@BCC_ADDRS"         , sBCC_ADDRS           );
							IDbDataParameter parTO_ADDRS_NAMES     = Sql.AddParameter(cmd, "@TO_ADDRS_NAMES"    , sTO_ADDRS_NAMES      );
							IDbDataParameter parTO_ADDRS_EMAILS    = Sql.AddAnsiParam(cmd, "@TO_ADDRS_EMAILS"   , sTO_ADDRS_EMAILS     , 8000);
							IDbDataParameter parCC_ADDRS_NAMES     = Sql.AddParameter(cmd, "@CC_ADDRS_NAMES"    , sCC_ADDRS_NAMES      );
							IDbDataParameter parCC_ADDRS_EMAILS    = Sql.AddAnsiParam(cmd, "@CC_ADDRS_EMAILS"   , sCC_ADDRS_EMAILS     , 8000);
							IDbDataParameter parBCC_ADDRS_NAMES    = Sql.AddParameter(cmd, "@BCC_ADDRS_NAMES"   , sBCC_ADDRS_NAMES     );
							IDbDataParameter parBCC_ADDRS_EMAILS   = Sql.AddAnsiParam(cmd, "@BCC_ADDRS_EMAILS"  , sBCC_ADDRS_EMAILS    , 8000);
							IDbDataParameter parTYPE               = Sql.AddParameter(cmd, "@TYPE"              , sTYPE                ,  25);
							IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
							IDbDataParameter parMESSAGE_ID         = Sql.AddAnsiParam(cmd, "@MESSAGE_ID"        , sMESSAGE_ID          , 851);
							IDbDataParameter parREPLY_TO_NAME      = Sql.AddParameter(cmd, "@REPLY_TO_NAME"     , sREPLY_TO_NAME       , 100);
							IDbDataParameter parREPLY_TO_ADDR      = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"     , sREPLY_TO_ADDR       , 100);
							IDbDataParameter parINTENT             = Sql.AddParameter(cmd, "@INTENT"            , sINTENT              ,  25);
							IDbDataParameter parMAILBOX_ID         = Sql.AddParameter(cmd, "@MAILBOX_ID"        , gMAILBOX_ID          );
							IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
							IDbDataParameter parRAW_SOURCE         = Sql.AddParameter(cmd, "@RAW_SOURCE"        , sRAW_SOURCE          );
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_InsertInbound
		/// <summary>
		/// spEMAILS_InsertInbound
		/// </summary>
		public void spEMAILS_InsertInbound(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, DateTime dtDATE_TIME, string sDESCRIPTION, string sDESCRIPTION_HTML, string sFROM_ADDR, string sFROM_NAME, string sTO_ADDRS, string sCC_ADDRS, string sBCC_ADDRS, string sTO_ADDRS_NAMES, string sTO_ADDRS_EMAILS, string sCC_ADDRS_NAMES, string sCC_ADDRS_EMAILS, string sBCC_ADDRS_NAMES, string sBCC_ADDRS_EMAILS, string sTYPE, string sSTATUS, string sMESSAGE_ID, string sREPLY_TO_NAME, string sREPLY_TO_ADDR, string sINTENT, Guid gMAILBOX_ID, Guid gTARGET_TRACKER_KEY, string sRAW_SOURCE, Guid gTEAM_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_InsertInbound";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
				IDbDataParameter parDATE_TIME          = Sql.AddParameter(cmd, "@DATE_TIME"         , dtDATE_TIME          );
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parDESCRIPTION_HTML   = Sql.AddParameter(cmd, "@DESCRIPTION_HTML"  , sDESCRIPTION_HTML    );
				IDbDataParameter parFROM_ADDR          = Sql.AddParameter(cmd, "@FROM_ADDR"         , sFROM_ADDR           , 100);
				IDbDataParameter parFROM_NAME          = Sql.AddParameter(cmd, "@FROM_NAME"         , sFROM_NAME           , 100);
				IDbDataParameter parTO_ADDRS           = Sql.AddParameter(cmd, "@TO_ADDRS"          , sTO_ADDRS            );
				IDbDataParameter parCC_ADDRS           = Sql.AddParameter(cmd, "@CC_ADDRS"          , sCC_ADDRS            );
				IDbDataParameter parBCC_ADDRS          = Sql.AddParameter(cmd, "@BCC_ADDRS"         , sBCC_ADDRS           );
				IDbDataParameter parTO_ADDRS_NAMES     = Sql.AddParameter(cmd, "@TO_ADDRS_NAMES"    , sTO_ADDRS_NAMES      );
				IDbDataParameter parTO_ADDRS_EMAILS    = Sql.AddAnsiParam(cmd, "@TO_ADDRS_EMAILS"   , sTO_ADDRS_EMAILS     , 8000);
				IDbDataParameter parCC_ADDRS_NAMES     = Sql.AddParameter(cmd, "@CC_ADDRS_NAMES"    , sCC_ADDRS_NAMES      );
				IDbDataParameter parCC_ADDRS_EMAILS    = Sql.AddAnsiParam(cmd, "@CC_ADDRS_EMAILS"   , sCC_ADDRS_EMAILS     , 8000);
				IDbDataParameter parBCC_ADDRS_NAMES    = Sql.AddParameter(cmd, "@BCC_ADDRS_NAMES"   , sBCC_ADDRS_NAMES     );
				IDbDataParameter parBCC_ADDRS_EMAILS   = Sql.AddAnsiParam(cmd, "@BCC_ADDRS_EMAILS"  , sBCC_ADDRS_EMAILS    , 8000);
				IDbDataParameter parTYPE               = Sql.AddParameter(cmd, "@TYPE"              , sTYPE                ,  25);
				IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
				IDbDataParameter parMESSAGE_ID         = Sql.AddAnsiParam(cmd, "@MESSAGE_ID"        , sMESSAGE_ID          , 851);
				IDbDataParameter parREPLY_TO_NAME      = Sql.AddParameter(cmd, "@REPLY_TO_NAME"     , sREPLY_TO_NAME       , 100);
				IDbDataParameter parREPLY_TO_ADDR      = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"     , sREPLY_TO_ADDR       , 100);
				IDbDataParameter parINTENT             = Sql.AddParameter(cmd, "@INTENT"            , sINTENT              ,  25);
				IDbDataParameter parMAILBOX_ID         = Sql.AddParameter(cmd, "@MAILBOX_ID"        , gMAILBOX_ID          );
				IDbDataParameter parTARGET_TRACKER_KEY = Sql.AddParameter(cmd, "@TARGET_TRACKER_KEY", gTARGET_TRACKER_KEY  );
				IDbDataParameter parRAW_SOURCE         = Sql.AddParameter(cmd, "@RAW_SOURCE"        , sRAW_SOURCE          );
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAILS_InsertInbound
		/// <summary>
		/// spEMAILS_InsertInbound
		/// </summary>
		public IDbCommand cmdEMAILS_InsertInbound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_InsertInbound";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID   = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string", 255);
			IDbDataParameter parDATE_TIME          = Sql.CreateParameter(cmd, "@DATE_TIME"         , "DateTime",   8);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parDESCRIPTION_HTML   = Sql.CreateParameter(cmd, "@DESCRIPTION_HTML"  , "string", 104857600);
			IDbDataParameter parFROM_ADDR          = Sql.CreateParameter(cmd, "@FROM_ADDR"         , "string", 100);
			IDbDataParameter parFROM_NAME          = Sql.CreateParameter(cmd, "@FROM_NAME"         , "string", 100);
			IDbDataParameter parTO_ADDRS           = Sql.CreateParameter(cmd, "@TO_ADDRS"          , "string", 104857600);
			IDbDataParameter parCC_ADDRS           = Sql.CreateParameter(cmd, "@CC_ADDRS"          , "string", 104857600);
			IDbDataParameter parBCC_ADDRS          = Sql.CreateParameter(cmd, "@BCC_ADDRS"         , "string", 104857600);
			IDbDataParameter parTO_ADDRS_NAMES     = Sql.CreateParameter(cmd, "@TO_ADDRS_NAMES"    , "string", 104857600);
			IDbDataParameter parTO_ADDRS_EMAILS    = Sql.CreateParameter(cmd, "@TO_ADDRS_EMAILS"   , "ansistring", 8000);
			IDbDataParameter parCC_ADDRS_NAMES     = Sql.CreateParameter(cmd, "@CC_ADDRS_NAMES"    , "string", 104857600);
			IDbDataParameter parCC_ADDRS_EMAILS    = Sql.CreateParameter(cmd, "@CC_ADDRS_EMAILS"   , "ansistring", 8000);
			IDbDataParameter parBCC_ADDRS_NAMES    = Sql.CreateParameter(cmd, "@BCC_ADDRS_NAMES"   , "string", 104857600);
			IDbDataParameter parBCC_ADDRS_EMAILS   = Sql.CreateParameter(cmd, "@BCC_ADDRS_EMAILS"  , "ansistring", 8000);
			IDbDataParameter parTYPE               = Sql.CreateParameter(cmd, "@TYPE"              , "string",  25);
			IDbDataParameter parSTATUS             = Sql.CreateParameter(cmd, "@STATUS"            , "string",  25);
			IDbDataParameter parMESSAGE_ID         = Sql.CreateParameter(cmd, "@MESSAGE_ID"        , "ansistring", 851);
			IDbDataParameter parREPLY_TO_NAME      = Sql.CreateParameter(cmd, "@REPLY_TO_NAME"     , "string", 100);
			IDbDataParameter parREPLY_TO_ADDR      = Sql.CreateParameter(cmd, "@REPLY_TO_ADDR"     , "string", 100);
			IDbDataParameter parINTENT             = Sql.CreateParameter(cmd, "@INTENT"            , "string",  25);
			IDbDataParameter parMAILBOX_ID         = Sql.CreateParameter(cmd, "@MAILBOX_ID"        , "Guid",  16);
			IDbDataParameter parTARGET_TRACKER_KEY = Sql.CreateParameter(cmd, "@TARGET_TRACKER_KEY", "Guid",  16);
			IDbDataParameter parRAW_SOURCE         = Sql.CreateParameter(cmd, "@RAW_SOURCE"        , "string", 104857600);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILS_INVOICES_Update
		/// <summary>
		/// spEMAILS_INVOICES_Update
		/// </summary>
		public void spEMAILS_INVOICES_Update(Guid gEMAIL_ID, Guid gINVOICE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_INVOICES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parINVOICE_ID       = Sql.AddParameter(cmd, "@INVOICE_ID"      , gINVOICE_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_INVOICES_Update
		/// <summary>
		/// spEMAILS_INVOICES_Update
		/// </summary>
		public void spEMAILS_INVOICES_Update(Guid gEMAIL_ID, Guid gINVOICE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_INVOICES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parINVOICE_ID       = Sql.AddParameter(cmd, "@INVOICE_ID"      , gINVOICE_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_INVOICES_Update
		/// <summary>
		/// spEMAILS_INVOICES_Update
		/// </summary>
		public IDbCommand cmdEMAILS_INVOICES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_INVOICES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parINVOICE_ID       = Sql.CreateParameter(cmd, "@INVOICE_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_LEADS_Delete
		/// <summary>
		/// spEMAILS_LEADS_Delete
		/// </summary>
		public void spEMAILS_LEADS_Delete(Guid gEMAIL_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_LEADS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_LEADS_Delete
		/// <summary>
		/// spEMAILS_LEADS_Delete
		/// </summary>
		public void spEMAILS_LEADS_Delete(Guid gEMAIL_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_LEADS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_LEADS_Delete
		/// <summary>
		/// spEMAILS_LEADS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_LEADS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_LEADS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_LEADS_Update
		/// <summary>
		/// spEMAILS_LEADS_Update
		/// </summary>
		public void spEMAILS_LEADS_Update(Guid gEMAIL_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_LEADS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_LEADS_Update
		/// <summary>
		/// spEMAILS_LEADS_Update
		/// </summary>
		public void spEMAILS_LEADS_Update(Guid gEMAIL_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_LEADS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_LEADS_Update
		/// <summary>
		/// spEMAILS_LEADS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_LEADS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_LEADS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_MassAssign
		/// <summary>
		/// spEMAILS_MassAssign
		/// </summary>
		public void spEMAILS_MassAssign(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_MassAssign";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_MassAssign
		/// <summary>
		/// spEMAILS_MassAssign
		/// </summary>
		public void spEMAILS_MassAssign(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_MassAssign";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_MassAssign
		/// <summary>
		/// spEMAILS_MassAssign
		/// </summary>
		public IDbCommand cmdEMAILS_MassAssign(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_MassAssign";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_MassDelete
		/// <summary>
		/// spEMAILS_MassDelete
		/// </summary>
		public void spEMAILS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_MassDelete
		/// <summary>
		/// spEMAILS_MassDelete
		/// </summary>
		public void spEMAILS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_MassDelete
		/// <summary>
		/// spEMAILS_MassDelete
		/// </summary>
		public IDbCommand cmdEMAILS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_MassUpdate
		/// <summary>
		/// spEMAILS_MassUpdate
		/// </summary>
		public void spEMAILS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_MassUpdate
		/// <summary>
		/// spEMAILS_MassUpdate
		/// </summary>
		public void spEMAILS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_MassUpdate
		/// <summary>
		/// spEMAILS_MassUpdate
		/// </summary>
		public IDbCommand cmdEMAILS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spEMAILS_OPPORTUNITIES_Delete
		/// <summary>
		/// spEMAILS_OPPORTUNITIES_Delete
		/// </summary>
		public void spEMAILS_OPPORTUNITIES_Delete(Guid gEMAIL_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_OPPORTUNITIES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_OPPORTUNITIES_Delete
		/// <summary>
		/// spEMAILS_OPPORTUNITIES_Delete
		/// </summary>
		public void spEMAILS_OPPORTUNITIES_Delete(Guid gEMAIL_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_OPPORTUNITIES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_OPPORTUNITIES_Delete
		/// <summary>
		/// spEMAILS_OPPORTUNITIES_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_OPPORTUNITIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_OPPORTUNITIES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_OPPORTUNITIES_Update
		/// <summary>
		/// spEMAILS_OPPORTUNITIES_Update
		/// </summary>
		public void spEMAILS_OPPORTUNITIES_Update(Guid gEMAIL_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_OPPORTUNITIES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_OPPORTUNITIES_Update
		/// <summary>
		/// spEMAILS_OPPORTUNITIES_Update
		/// </summary>
		public void spEMAILS_OPPORTUNITIES_Update(Guid gEMAIL_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_OPPORTUNITIES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_OPPORTUNITIES_Update
		/// <summary>
		/// spEMAILS_OPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdEMAILS_OPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_OPPORTUNITIES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_ORDERS_Update
		/// <summary>
		/// spEMAILS_ORDERS_Update
		/// </summary>
		public void spEMAILS_ORDERS_Update(Guid gEMAIL_ID, Guid gORDER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_ORDERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_ORDERS_Update
		/// <summary>
		/// spEMAILS_ORDERS_Update
		/// </summary>
		public void spEMAILS_ORDERS_Update(Guid gEMAIL_ID, Guid gORDER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_ORDERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_ORDERS_Update
		/// <summary>
		/// spEMAILS_ORDERS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_ORDERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_ORDERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parORDER_ID         = Sql.CreateParameter(cmd, "@ORDER_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_PROJECT_TASKS_Delete
		/// <summary>
		/// spEMAILS_PROJECT_TASKS_Delete
		/// </summary>
		public void spEMAILS_PROJECT_TASKS_Delete(Guid gEMAIL_ID, Guid gPROJECT_TASK_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_PROJECT_TASKS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parPROJECT_TASK_ID  = Sql.AddParameter(cmd, "@PROJECT_TASK_ID" , gPROJECT_TASK_ID   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_PROJECT_TASKS_Delete
		/// <summary>
		/// spEMAILS_PROJECT_TASKS_Delete
		/// </summary>
		public void spEMAILS_PROJECT_TASKS_Delete(Guid gEMAIL_ID, Guid gPROJECT_TASK_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_PROJECT_TASKS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parPROJECT_TASK_ID  = Sql.AddParameter(cmd, "@PROJECT_TASK_ID" , gPROJECT_TASK_ID   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_PROJECT_TASKS_Delete
		/// <summary>
		/// spEMAILS_PROJECT_TASKS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_PROJECT_TASKS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_PROJECT_TASKS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parPROJECT_TASK_ID  = Sql.CreateParameter(cmd, "@PROJECT_TASK_ID" , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_PROJECT_TASKS_Update
		/// <summary>
		/// spEMAILS_PROJECT_TASKS_Update
		/// </summary>
		public void spEMAILS_PROJECT_TASKS_Update(Guid gEMAIL_ID, Guid gPROJECT_TASK_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_PROJECT_TASKS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parPROJECT_TASK_ID  = Sql.AddParameter(cmd, "@PROJECT_TASK_ID" , gPROJECT_TASK_ID   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_PROJECT_TASKS_Update
		/// <summary>
		/// spEMAILS_PROJECT_TASKS_Update
		/// </summary>
		public void spEMAILS_PROJECT_TASKS_Update(Guid gEMAIL_ID, Guid gPROJECT_TASK_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_PROJECT_TASKS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parPROJECT_TASK_ID  = Sql.AddParameter(cmd, "@PROJECT_TASK_ID" , gPROJECT_TASK_ID   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_PROJECT_TASKS_Update
		/// <summary>
		/// spEMAILS_PROJECT_TASKS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_PROJECT_TASKS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_PROJECT_TASKS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parPROJECT_TASK_ID  = Sql.CreateParameter(cmd, "@PROJECT_TASK_ID" , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_PROJECTS_Delete
		/// <summary>
		/// spEMAILS_PROJECTS_Delete
		/// </summary>
		public void spEMAILS_PROJECTS_Delete(Guid gEMAIL_ID, Guid gPROJECT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_PROJECTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_PROJECTS_Delete
		/// <summary>
		/// spEMAILS_PROJECTS_Delete
		/// </summary>
		public void spEMAILS_PROJECTS_Delete(Guid gEMAIL_ID, Guid gPROJECT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_PROJECTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_PROJECTS_Delete
		/// <summary>
		/// spEMAILS_PROJECTS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_PROJECTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_PROJECTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_PROJECTS_Update
		/// <summary>
		/// spEMAILS_PROJECTS_Update
		/// </summary>
		public void spEMAILS_PROJECTS_Update(Guid gEMAIL_ID, Guid gPROJECT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_PROJECTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_PROJECTS_Update
		/// <summary>
		/// spEMAILS_PROJECTS_Update
		/// </summary>
		public void spEMAILS_PROJECTS_Update(Guid gEMAIL_ID, Guid gPROJECT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_PROJECTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_PROJECTS_Update
		/// <summary>
		/// spEMAILS_PROJECTS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_PROJECTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_PROJECTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_PROSPECTS_Delete
		/// <summary>
		/// spEMAILS_PROSPECTS_Delete
		/// </summary>
		public void spEMAILS_PROSPECTS_Delete(Guid gEMAIL_ID, Guid gPROSPECT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_PROSPECTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_PROSPECTS_Delete
		/// <summary>
		/// spEMAILS_PROSPECTS_Delete
		/// </summary>
		public void spEMAILS_PROSPECTS_Delete(Guid gEMAIL_ID, Guid gPROSPECT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_PROSPECTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_PROSPECTS_Delete
		/// <summary>
		/// spEMAILS_PROSPECTS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_PROSPECTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_PROSPECTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parPROSPECT_ID      = Sql.CreateParameter(cmd, "@PROSPECT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_PROSPECTS_Update
		/// <summary>
		/// spEMAILS_PROSPECTS_Update
		/// </summary>
		public void spEMAILS_PROSPECTS_Update(Guid gEMAIL_ID, Guid gPROSPECT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_PROSPECTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_PROSPECTS_Update
		/// <summary>
		/// spEMAILS_PROSPECTS_Update
		/// </summary>
		public void spEMAILS_PROSPECTS_Update(Guid gEMAIL_ID, Guid gPROSPECT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_PROSPECTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_PROSPECTS_Update
		/// <summary>
		/// spEMAILS_PROSPECTS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_PROSPECTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_PROSPECTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parPROSPECT_ID      = Sql.CreateParameter(cmd, "@PROSPECT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_QueueEmailTemplate
		/// <summary>
		/// spEMAILS_QueueEmailTemplate
		/// </summary>
		public void spEMAILS_QueueEmailTemplate(ref Guid gID, string sFROM_ADDR, string sFROM_NAME, string sPARENT_TYPE, Guid gPARENT_ID, Guid gEMAIL_TEMPLATE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_QueueEmailTemplate";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
							IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parEMAIL_TEMPLATE_ID = Sql.AddParameter(cmd, "@EMAIL_TEMPLATE_ID", gEMAIL_TEMPLATE_ID  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_QueueEmailTemplate
		/// <summary>
		/// spEMAILS_QueueEmailTemplate
		/// </summary>
		public void spEMAILS_QueueEmailTemplate(ref Guid gID, string sFROM_ADDR, string sFROM_NAME, string sPARENT_TYPE, Guid gPARENT_ID, Guid gEMAIL_TEMPLATE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_QueueEmailTemplate";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
				IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parEMAIL_TEMPLATE_ID = Sql.AddParameter(cmd, "@EMAIL_TEMPLATE_ID", gEMAIL_TEMPLATE_ID  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAILS_QueueEmailTemplate
		/// <summary>
		/// spEMAILS_QueueEmailTemplate
		/// </summary>
		public IDbCommand cmdEMAILS_QueueEmailTemplate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_QueueEmailTemplate";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parFROM_ADDR         = Sql.CreateParameter(cmd, "@FROM_ADDR"        , "string", 100);
			IDbDataParameter parFROM_NAME         = Sql.CreateParameter(cmd, "@FROM_NAME"        , "string", 100);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parEMAIL_TEMPLATE_ID = Sql.CreateParameter(cmd, "@EMAIL_TEMPLATE_ID", "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILS_QUOTES_Update
		/// <summary>
		/// spEMAILS_QUOTES_Update
		/// </summary>
		public void spEMAILS_QUOTES_Update(Guid gEMAIL_ID, Guid gQUOTE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_QUOTES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_QUOTES_Update
		/// <summary>
		/// spEMAILS_QUOTES_Update
		/// </summary>
		public void spEMAILS_QUOTES_Update(Guid gEMAIL_ID, Guid gQUOTE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_QUOTES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_QUOTES_Update
		/// <summary>
		/// spEMAILS_QUOTES_Update
		/// </summary>
		public IDbCommand cmdEMAILS_QUOTES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_QUOTES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_RELATED_Update
		/// <summary>
		/// spEMAILS_RELATED_Update
		/// </summary>
		public void spEMAILS_RELATED_Update(Guid gEMAIL_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_RELATED_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_RELATED_Update
		/// <summary>
		/// spEMAILS_RELATED_Update
		/// </summary>
		public void spEMAILS_RELATED_Update(Guid gEMAIL_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_RELATED_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_RELATED_Update
		/// <summary>
		/// spEMAILS_RELATED_Update
		/// </summary>
		public IDbCommand cmdEMAILS_RELATED_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_RELATED_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_TASKS_Delete
		/// <summary>
		/// spEMAILS_TASKS_Delete
		/// </summary>
		public void spEMAILS_TASKS_Delete(Guid gEMAIL_ID, Guid gTASK_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_TASKS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parTASK_ID          = Sql.AddParameter(cmd, "@TASK_ID"         , gTASK_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_TASKS_Delete
		/// <summary>
		/// spEMAILS_TASKS_Delete
		/// </summary>
		public void spEMAILS_TASKS_Delete(Guid gEMAIL_ID, Guid gTASK_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_TASKS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parTASK_ID          = Sql.AddParameter(cmd, "@TASK_ID"         , gTASK_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_TASKS_Delete
		/// <summary>
		/// spEMAILS_TASKS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_TASKS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_TASKS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parTASK_ID          = Sql.CreateParameter(cmd, "@TASK_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_TASKS_Update
		/// <summary>
		/// spEMAILS_TASKS_Update
		/// </summary>
		public void spEMAILS_TASKS_Update(Guid gEMAIL_ID, Guid gTASK_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_TASKS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parTASK_ID          = Sql.AddParameter(cmd, "@TASK_ID"         , gTASK_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_TASKS_Update
		/// <summary>
		/// spEMAILS_TASKS_Update
		/// </summary>
		public void spEMAILS_TASKS_Update(Guid gEMAIL_ID, Guid gTASK_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_TASKS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parTASK_ID          = Sql.AddParameter(cmd, "@TASK_ID"         , gTASK_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_TASKS_Update
		/// <summary>
		/// spEMAILS_TASKS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_TASKS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_TASKS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parTASK_ID          = Sql.CreateParameter(cmd, "@TASK_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_Undelete
		/// <summary>
		/// spEMAILS_Undelete
		/// </summary>
		public void spEMAILS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_Undelete
		/// <summary>
		/// spEMAILS_Undelete
		/// </summary>
		public void spEMAILS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_Undelete
		/// <summary>
		/// spEMAILS_Undelete
		/// </summary>
		public IDbCommand cmdEMAILS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spEMAILS_UndeliverableEmail
		/// <summary>
		/// spEMAILS_UndeliverableEmail
		/// </summary>
		public void spEMAILS_UndeliverableEmail(Guid gID, ref Guid gTARGET_ID, ref string sTARGET_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_UndeliverableEmail";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTARGET_ID        = Sql.AddParameter(cmd, "@TARGET_ID"       , gTARGET_ID         );
							IDbDataParameter parTARGET_TYPE      = Sql.AddParameter(cmd, "@TARGET_TYPE"     , sTARGET_TYPE       ,  25);
							parTARGET_ID.Direction = ParameterDirection.InputOutput;
							parTARGET_TYPE.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gTARGET_ID = Sql.ToGuid(parTARGET_ID.Value);
							sTARGET_TYPE = Sql.ToString(parTARGET_TYPE.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_UndeliverableEmail
		/// <summary>
		/// spEMAILS_UndeliverableEmail
		/// </summary>
		public void spEMAILS_UndeliverableEmail(Guid gID, ref Guid gTARGET_ID, ref string sTARGET_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_UndeliverableEmail";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTARGET_ID        = Sql.AddParameter(cmd, "@TARGET_ID"       , gTARGET_ID         );
				IDbDataParameter parTARGET_TYPE      = Sql.AddParameter(cmd, "@TARGET_TYPE"     , sTARGET_TYPE       ,  25);
				parTARGET_ID.Direction = ParameterDirection.InputOutput;
				parTARGET_TYPE.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gTARGET_ID = Sql.ToGuid(parTARGET_ID.Value);
				sTARGET_TYPE = Sql.ToString(parTARGET_TYPE.Value);
			}
		}
		#endregion

		#region cmdEMAILS_UndeliverableEmail
		/// <summary>
		/// spEMAILS_UndeliverableEmail
		/// </summary>
		public IDbCommand cmdEMAILS_UndeliverableEmail(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_UndeliverableEmail";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTARGET_ID        = Sql.CreateParameter(cmd, "@TARGET_ID"       , "Guid",  16);
			IDbDataParameter parTARGET_TYPE      = Sql.CreateParameter(cmd, "@TARGET_TYPE"     , "string",  25);
			parTARGET_ID.Direction = ParameterDirection.InputOutput;
			parTARGET_TYPE.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILS_Update
		/// <summary>
		/// spEMAILS_Update
		/// </summary>
		public void spEMAILS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sDESCRIPTION, string sDESCRIPTION_HTML, string sFROM_ADDR, string sFROM_NAME, string sTO_ADDRS, string sCC_ADDRS, string sBCC_ADDRS, string sTO_ADDRS_IDS, string sTO_ADDRS_NAMES, string sTO_ADDRS_EMAILS, string sCC_ADDRS_IDS, string sCC_ADDRS_NAMES, string sCC_ADDRS_EMAILS, string sBCC_ADDRS_IDS, string sBCC_ADDRS_NAMES, string sBCC_ADDRS_EMAILS, string sTYPE, string sMESSAGE_ID, string sREPLY_TO_NAME, string sREPLY_TO_ADDR, string sINTENT, Guid gMAILBOX_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parDESCRIPTION_HTML  = Sql.AddParameter(cmd, "@DESCRIPTION_HTML" , sDESCRIPTION_HTML   );
							IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
							IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
							IDbDataParameter parTO_ADDRS          = Sql.AddParameter(cmd, "@TO_ADDRS"         , sTO_ADDRS           );
							IDbDataParameter parCC_ADDRS          = Sql.AddParameter(cmd, "@CC_ADDRS"         , sCC_ADDRS           );
							IDbDataParameter parBCC_ADDRS         = Sql.AddParameter(cmd, "@BCC_ADDRS"        , sBCC_ADDRS          );
							IDbDataParameter parTO_ADDRS_IDS      = Sql.AddAnsiParam(cmd, "@TO_ADDRS_IDS"     , sTO_ADDRS_IDS       , 8000);
							IDbDataParameter parTO_ADDRS_NAMES    = Sql.AddParameter(cmd, "@TO_ADDRS_NAMES"   , sTO_ADDRS_NAMES     );
							IDbDataParameter parTO_ADDRS_EMAILS   = Sql.AddParameter(cmd, "@TO_ADDRS_EMAILS"  , sTO_ADDRS_EMAILS    );
							IDbDataParameter parCC_ADDRS_IDS      = Sql.AddAnsiParam(cmd, "@CC_ADDRS_IDS"     , sCC_ADDRS_IDS       , 8000);
							IDbDataParameter parCC_ADDRS_NAMES    = Sql.AddParameter(cmd, "@CC_ADDRS_NAMES"   , sCC_ADDRS_NAMES     );
							IDbDataParameter parCC_ADDRS_EMAILS   = Sql.AddParameter(cmd, "@CC_ADDRS_EMAILS"  , sCC_ADDRS_EMAILS    );
							IDbDataParameter parBCC_ADDRS_IDS     = Sql.AddAnsiParam(cmd, "@BCC_ADDRS_IDS"    , sBCC_ADDRS_IDS      , 8000);
							IDbDataParameter parBCC_ADDRS_NAMES   = Sql.AddParameter(cmd, "@BCC_ADDRS_NAMES"  , sBCC_ADDRS_NAMES    );
							IDbDataParameter parBCC_ADDRS_EMAILS  = Sql.AddParameter(cmd, "@BCC_ADDRS_EMAILS" , sBCC_ADDRS_EMAILS   );
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  25);
							IDbDataParameter parMESSAGE_ID        = Sql.AddAnsiParam(cmd, "@MESSAGE_ID"       , sMESSAGE_ID         , 851);
							IDbDataParameter parREPLY_TO_NAME     = Sql.AddParameter(cmd, "@REPLY_TO_NAME"    , sREPLY_TO_NAME      , 100);
							IDbDataParameter parREPLY_TO_ADDR     = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"    , sREPLY_TO_ADDR      , 100);
							IDbDataParameter parINTENT            = Sql.AddParameter(cmd, "@INTENT"           , sINTENT             ,  25);
							IDbDataParameter parMAILBOX_ID        = Sql.AddParameter(cmd, "@MAILBOX_ID"       , gMAILBOX_ID         );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parIS_PRIVATE        = Sql.AddParameter(cmd, "@IS_PRIVATE"       , bIS_PRIVATE         );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_Update
		/// <summary>
		/// spEMAILS_Update
		/// </summary>
		public void spEMAILS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sDESCRIPTION, string sDESCRIPTION_HTML, string sFROM_ADDR, string sFROM_NAME, string sTO_ADDRS, string sCC_ADDRS, string sBCC_ADDRS, string sTO_ADDRS_IDS, string sTO_ADDRS_NAMES, string sTO_ADDRS_EMAILS, string sCC_ADDRS_IDS, string sCC_ADDRS_NAMES, string sCC_ADDRS_EMAILS, string sBCC_ADDRS_IDS, string sBCC_ADDRS_NAMES, string sBCC_ADDRS_EMAILS, string sTYPE, string sMESSAGE_ID, string sREPLY_TO_NAME, string sREPLY_TO_ADDR, string sINTENT, Guid gMAILBOX_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parDESCRIPTION_HTML  = Sql.AddParameter(cmd, "@DESCRIPTION_HTML" , sDESCRIPTION_HTML   );
				IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
				IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
				IDbDataParameter parTO_ADDRS          = Sql.AddParameter(cmd, "@TO_ADDRS"         , sTO_ADDRS           );
				IDbDataParameter parCC_ADDRS          = Sql.AddParameter(cmd, "@CC_ADDRS"         , sCC_ADDRS           );
				IDbDataParameter parBCC_ADDRS         = Sql.AddParameter(cmd, "@BCC_ADDRS"        , sBCC_ADDRS          );
				IDbDataParameter parTO_ADDRS_IDS      = Sql.AddAnsiParam(cmd, "@TO_ADDRS_IDS"     , sTO_ADDRS_IDS       , 8000);
				IDbDataParameter parTO_ADDRS_NAMES    = Sql.AddParameter(cmd, "@TO_ADDRS_NAMES"   , sTO_ADDRS_NAMES     );
				IDbDataParameter parTO_ADDRS_EMAILS   = Sql.AddParameter(cmd, "@TO_ADDRS_EMAILS"  , sTO_ADDRS_EMAILS    );
				IDbDataParameter parCC_ADDRS_IDS      = Sql.AddAnsiParam(cmd, "@CC_ADDRS_IDS"     , sCC_ADDRS_IDS       , 8000);
				IDbDataParameter parCC_ADDRS_NAMES    = Sql.AddParameter(cmd, "@CC_ADDRS_NAMES"   , sCC_ADDRS_NAMES     );
				IDbDataParameter parCC_ADDRS_EMAILS   = Sql.AddParameter(cmd, "@CC_ADDRS_EMAILS"  , sCC_ADDRS_EMAILS    );
				IDbDataParameter parBCC_ADDRS_IDS     = Sql.AddAnsiParam(cmd, "@BCC_ADDRS_IDS"    , sBCC_ADDRS_IDS      , 8000);
				IDbDataParameter parBCC_ADDRS_NAMES   = Sql.AddParameter(cmd, "@BCC_ADDRS_NAMES"  , sBCC_ADDRS_NAMES    );
				IDbDataParameter parBCC_ADDRS_EMAILS  = Sql.AddParameter(cmd, "@BCC_ADDRS_EMAILS" , sBCC_ADDRS_EMAILS   );
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  25);
				IDbDataParameter parMESSAGE_ID        = Sql.AddAnsiParam(cmd, "@MESSAGE_ID"       , sMESSAGE_ID         , 851);
				IDbDataParameter parREPLY_TO_NAME     = Sql.AddParameter(cmd, "@REPLY_TO_NAME"    , sREPLY_TO_NAME      , 100);
				IDbDataParameter parREPLY_TO_ADDR     = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"    , sREPLY_TO_ADDR      , 100);
				IDbDataParameter parINTENT            = Sql.AddParameter(cmd, "@INTENT"           , sINTENT             ,  25);
				IDbDataParameter parMAILBOX_ID        = Sql.AddParameter(cmd, "@MAILBOX_ID"       , gMAILBOX_ID         );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parIS_PRIVATE        = Sql.AddParameter(cmd, "@IS_PRIVATE"       , bIS_PRIVATE         );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMAILS_Update
		/// <summary>
		/// spEMAILS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parDESCRIPTION_HTML  = Sql.CreateParameter(cmd, "@DESCRIPTION_HTML" , "string", 104857600);
			IDbDataParameter parFROM_ADDR         = Sql.CreateParameter(cmd, "@FROM_ADDR"        , "string", 100);
			IDbDataParameter parFROM_NAME         = Sql.CreateParameter(cmd, "@FROM_NAME"        , "string", 100);
			IDbDataParameter parTO_ADDRS          = Sql.CreateParameter(cmd, "@TO_ADDRS"         , "string", 104857600);
			IDbDataParameter parCC_ADDRS          = Sql.CreateParameter(cmd, "@CC_ADDRS"         , "string", 104857600);
			IDbDataParameter parBCC_ADDRS         = Sql.CreateParameter(cmd, "@BCC_ADDRS"        , "string", 104857600);
			IDbDataParameter parTO_ADDRS_IDS      = Sql.CreateParameter(cmd, "@TO_ADDRS_IDS"     , "ansistring", 8000);
			IDbDataParameter parTO_ADDRS_NAMES    = Sql.CreateParameter(cmd, "@TO_ADDRS_NAMES"   , "string", 104857600);
			IDbDataParameter parTO_ADDRS_EMAILS   = Sql.CreateParameter(cmd, "@TO_ADDRS_EMAILS"  , "string", 104857600);
			IDbDataParameter parCC_ADDRS_IDS      = Sql.CreateParameter(cmd, "@CC_ADDRS_IDS"     , "ansistring", 8000);
			IDbDataParameter parCC_ADDRS_NAMES    = Sql.CreateParameter(cmd, "@CC_ADDRS_NAMES"   , "string", 104857600);
			IDbDataParameter parCC_ADDRS_EMAILS   = Sql.CreateParameter(cmd, "@CC_ADDRS_EMAILS"  , "string", 104857600);
			IDbDataParameter parBCC_ADDRS_IDS     = Sql.CreateParameter(cmd, "@BCC_ADDRS_IDS"    , "ansistring", 8000);
			IDbDataParameter parBCC_ADDRS_NAMES   = Sql.CreateParameter(cmd, "@BCC_ADDRS_NAMES"  , "string", 104857600);
			IDbDataParameter parBCC_ADDRS_EMAILS  = Sql.CreateParameter(cmd, "@BCC_ADDRS_EMAILS" , "string", 104857600);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string",  25);
			IDbDataParameter parMESSAGE_ID        = Sql.CreateParameter(cmd, "@MESSAGE_ID"       , "ansistring", 851);
			IDbDataParameter parREPLY_TO_NAME     = Sql.CreateParameter(cmd, "@REPLY_TO_NAME"    , "string", 100);
			IDbDataParameter parREPLY_TO_ADDR     = Sql.CreateParameter(cmd, "@REPLY_TO_ADDR"    , "string", 100);
			IDbDataParameter parINTENT            = Sql.CreateParameter(cmd, "@INTENT"           , "string",  25);
			IDbDataParameter parMAILBOX_ID        = Sql.CreateParameter(cmd, "@MAILBOX_ID"       , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parIS_PRIVATE        = Sql.CreateParameter(cmd, "@IS_PRIVATE"       , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEMAILS_UpdateContent
		/// <summary>
		/// spEMAILS_UpdateContent
		/// </summary>
		public void spEMAILS_UpdateContent(Guid gID, string sNAME, string sDESCRIPTION, string sDESCRIPTION_HTML)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_UpdateContent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							IDbDataParameter parDESCRIPTION_HTML = Sql.AddParameter(cmd, "@DESCRIPTION_HTML", sDESCRIPTION_HTML  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_UpdateContent
		/// <summary>
		/// spEMAILS_UpdateContent
		/// </summary>
		public void spEMAILS_UpdateContent(Guid gID, string sNAME, string sDESCRIPTION, string sDESCRIPTION_HTML, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_UpdateContent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				IDbDataParameter parDESCRIPTION_HTML = Sql.AddParameter(cmd, "@DESCRIPTION_HTML", sDESCRIPTION_HTML  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_UpdateContent
		/// <summary>
		/// spEMAILS_UpdateContent
		/// </summary>
		public IDbCommand cmdEMAILS_UpdateContent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_UpdateContent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			IDbDataParameter parDESCRIPTION_HTML = Sql.CreateParameter(cmd, "@DESCRIPTION_HTML", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spEMAILS_UpdateStatus
		/// <summary>
		/// spEMAILS_UpdateStatus
		/// </summary>
		public void spEMAILS_UpdateStatus(Guid gID, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_UpdateStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_UpdateStatus
		/// <summary>
		/// spEMAILS_UpdateStatus
		/// </summary>
		public void spEMAILS_UpdateStatus(Guid gID, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_UpdateStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_UpdateStatus
		/// <summary>
		/// spEMAILS_UpdateStatus
		/// </summary>
		public IDbCommand cmdEMAILS_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_UpdateStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spEMAILS_USERS_Delete
		/// <summary>
		/// spEMAILS_USERS_Delete
		/// </summary>
		public void spEMAILS_USERS_Delete(Guid gEMAIL_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_USERS_Delete
		/// <summary>
		/// spEMAILS_USERS_Delete
		/// </summary>
		public void spEMAILS_USERS_Delete(Guid gEMAIL_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_USERS_Delete
		/// <summary>
		/// spEMAILS_USERS_Delete
		/// </summary>
		public IDbCommand cmdEMAILS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMAILS_USERS_Update
		/// <summary>
		/// spEMAILS_USERS_Update
		/// </summary>
		public void spEMAILS_USERS_Update(Guid gEMAIL_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMAILS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMAILS_USERS_Update
		/// <summary>
		/// spEMAILS_USERS_Update
		/// </summary>
		public void spEMAILS_USERS_Update(Guid gEMAIL_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMAILS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEMAIL_ID         = Sql.AddParameter(cmd, "@EMAIL_ID"        , gEMAIL_ID          );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEMAILS_USERS_Update
		/// <summary>
		/// spEMAILS_USERS_Update
		/// </summary>
		public IDbCommand cmdEMAILS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMAILS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEMAIL_ID         = Sql.CreateParameter(cmd, "@EMAIL_ID"        , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEMPLOYEES_Update
		/// <summary>
		/// spEMPLOYEES_Update
		/// </summary>
		public void spEMPLOYEES_Update(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEMPLOYEES_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parFIRST_NAME         = Sql.AddParameter(cmd, "@FIRST_NAME"        , sFIRST_NAME          ,  30);
							IDbDataParameter parLAST_NAME          = Sql.AddParameter(cmd, "@LAST_NAME"         , sLAST_NAME           ,  30);
							IDbDataParameter parREPORTS_TO_ID      = Sql.AddParameter(cmd, "@REPORTS_TO_ID"     , gREPORTS_TO_ID       );
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               ,  50);
							IDbDataParameter parDEPARTMENT         = Sql.AddParameter(cmd, "@DEPARTMENT"        , sDEPARTMENT          ,  50);
							IDbDataParameter parPHONE_HOME         = Sql.AddParameter(cmd, "@PHONE_HOME"        , sPHONE_HOME          ,  50);
							IDbDataParameter parPHONE_MOBILE       = Sql.AddParameter(cmd, "@PHONE_MOBILE"      , sPHONE_MOBILE        ,  50);
							IDbDataParameter parPHONE_WORK         = Sql.AddParameter(cmd, "@PHONE_WORK"        , sPHONE_WORK          ,  50);
							IDbDataParameter parPHONE_OTHER        = Sql.AddParameter(cmd, "@PHONE_OTHER"       , sPHONE_OTHER         ,  50);
							IDbDataParameter parPHONE_FAX          = Sql.AddParameter(cmd, "@PHONE_FAX"         , sPHONE_FAX           ,  50);
							IDbDataParameter parEMAIL1             = Sql.AddParameter(cmd, "@EMAIL1"            , sEMAIL1              , 100);
							IDbDataParameter parEMAIL2             = Sql.AddParameter(cmd, "@EMAIL2"            , sEMAIL2              , 100);
							IDbDataParameter parADDRESS_STREET     = Sql.AddParameter(cmd, "@ADDRESS_STREET"    , sADDRESS_STREET      , 150);
							IDbDataParameter parADDRESS_CITY       = Sql.AddParameter(cmd, "@ADDRESS_CITY"      , sADDRESS_CITY        , 100);
							IDbDataParameter parADDRESS_STATE      = Sql.AddParameter(cmd, "@ADDRESS_STATE"     , sADDRESS_STATE       , 100);
							IDbDataParameter parADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE", sADDRESS_POSTALCODE  ,   9);
							IDbDataParameter parADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"   , sADDRESS_COUNTRY     ,  25);
							IDbDataParameter parEMPLOYEE_STATUS    = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"   , sEMPLOYEE_STATUS     ,  25);
							IDbDataParameter parMESSENGER_ID       = Sql.AddParameter(cmd, "@MESSENGER_ID"      , sMESSENGER_ID        ,  25);
							IDbDataParameter parMESSENGER_TYPE     = Sql.AddParameter(cmd, "@MESSENGER_TYPE"    , sMESSENGER_TYPE      ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEMPLOYEES_Update
		/// <summary>
		/// spEMPLOYEES_Update
		/// </summary>
		public void spEMPLOYEES_Update(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEMPLOYEES_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parFIRST_NAME         = Sql.AddParameter(cmd, "@FIRST_NAME"        , sFIRST_NAME          ,  30);
				IDbDataParameter parLAST_NAME          = Sql.AddParameter(cmd, "@LAST_NAME"         , sLAST_NAME           ,  30);
				IDbDataParameter parREPORTS_TO_ID      = Sql.AddParameter(cmd, "@REPORTS_TO_ID"     , gREPORTS_TO_ID       );
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               ,  50);
				IDbDataParameter parDEPARTMENT         = Sql.AddParameter(cmd, "@DEPARTMENT"        , sDEPARTMENT          ,  50);
				IDbDataParameter parPHONE_HOME         = Sql.AddParameter(cmd, "@PHONE_HOME"        , sPHONE_HOME          ,  50);
				IDbDataParameter parPHONE_MOBILE       = Sql.AddParameter(cmd, "@PHONE_MOBILE"      , sPHONE_MOBILE        ,  50);
				IDbDataParameter parPHONE_WORK         = Sql.AddParameter(cmd, "@PHONE_WORK"        , sPHONE_WORK          ,  50);
				IDbDataParameter parPHONE_OTHER        = Sql.AddParameter(cmd, "@PHONE_OTHER"       , sPHONE_OTHER         ,  50);
				IDbDataParameter parPHONE_FAX          = Sql.AddParameter(cmd, "@PHONE_FAX"         , sPHONE_FAX           ,  50);
				IDbDataParameter parEMAIL1             = Sql.AddParameter(cmd, "@EMAIL1"            , sEMAIL1              , 100);
				IDbDataParameter parEMAIL2             = Sql.AddParameter(cmd, "@EMAIL2"            , sEMAIL2              , 100);
				IDbDataParameter parADDRESS_STREET     = Sql.AddParameter(cmd, "@ADDRESS_STREET"    , sADDRESS_STREET      , 150);
				IDbDataParameter parADDRESS_CITY       = Sql.AddParameter(cmd, "@ADDRESS_CITY"      , sADDRESS_CITY        , 100);
				IDbDataParameter parADDRESS_STATE      = Sql.AddParameter(cmd, "@ADDRESS_STATE"     , sADDRESS_STATE       , 100);
				IDbDataParameter parADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE", sADDRESS_POSTALCODE  ,   9);
				IDbDataParameter parADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"   , sADDRESS_COUNTRY     ,  25);
				IDbDataParameter parEMPLOYEE_STATUS    = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"   , sEMPLOYEE_STATUS     ,  25);
				IDbDataParameter parMESSENGER_ID       = Sql.AddParameter(cmd, "@MESSENGER_ID"      , sMESSENGER_ID        ,  25);
				IDbDataParameter parMESSENGER_TYPE     = Sql.AddParameter(cmd, "@MESSENGER_TYPE"    , sMESSENGER_TYPE      ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEMPLOYEES_Update
		/// <summary>
		/// spEMPLOYEES_Update
		/// </summary>
		public IDbCommand cmdEMPLOYEES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEMPLOYEES_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parFIRST_NAME         = Sql.CreateParameter(cmd, "@FIRST_NAME"        , "string",  30);
			IDbDataParameter parLAST_NAME          = Sql.CreateParameter(cmd, "@LAST_NAME"         , "string",  30);
			IDbDataParameter parREPORTS_TO_ID      = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"     , "Guid",  16);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parTITLE              = Sql.CreateParameter(cmd, "@TITLE"             , "string",  50);
			IDbDataParameter parDEPARTMENT         = Sql.CreateParameter(cmd, "@DEPARTMENT"        , "string",  50);
			IDbDataParameter parPHONE_HOME         = Sql.CreateParameter(cmd, "@PHONE_HOME"        , "string",  50);
			IDbDataParameter parPHONE_MOBILE       = Sql.CreateParameter(cmd, "@PHONE_MOBILE"      , "string",  50);
			IDbDataParameter parPHONE_WORK         = Sql.CreateParameter(cmd, "@PHONE_WORK"        , "string",  50);
			IDbDataParameter parPHONE_OTHER        = Sql.CreateParameter(cmd, "@PHONE_OTHER"       , "string",  50);
			IDbDataParameter parPHONE_FAX          = Sql.CreateParameter(cmd, "@PHONE_FAX"         , "string",  50);
			IDbDataParameter parEMAIL1             = Sql.CreateParameter(cmd, "@EMAIL1"            , "string", 100);
			IDbDataParameter parEMAIL2             = Sql.CreateParameter(cmd, "@EMAIL2"            , "string", 100);
			IDbDataParameter parADDRESS_STREET     = Sql.CreateParameter(cmd, "@ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parADDRESS_CITY       = Sql.CreateParameter(cmd, "@ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parADDRESS_STATE      = Sql.CreateParameter(cmd, "@ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@ADDRESS_POSTALCODE", "string",   9);
			IDbDataParameter parADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@ADDRESS_COUNTRY"   , "string",  25);
			IDbDataParameter parEMPLOYEE_STATUS    = Sql.CreateParameter(cmd, "@EMPLOYEE_STATUS"   , "string",  25);
			IDbDataParameter parMESSENGER_ID       = Sql.CreateParameter(cmd, "@MESSENGER_ID"      , "string",  25);
			IDbDataParameter parMESSENGER_TYPE     = Sql.CreateParameter(cmd, "@MESSENGER_TYPE"    , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEXCHANGE_USERS_Update
		/// <summary>
		/// spEXCHANGE_USERS_Update
		/// </summary>
		public void spEXCHANGE_USERS_Update(ref Guid gID, string sEXCHANGE_ALIAS, string sEXCHANGE_EMAIL, string sIMPERSONATED_TYPE, Guid gASSIGNED_USER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEXCHANGE_USERS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parEXCHANGE_ALIAS    = Sql.AddParameter(cmd, "@EXCHANGE_ALIAS"   , sEXCHANGE_ALIAS     ,  60);
							IDbDataParameter parEXCHANGE_EMAIL    = Sql.AddParameter(cmd, "@EXCHANGE_EMAIL"   , sEXCHANGE_EMAIL     , 100);
							IDbDataParameter parIMPERSONATED_TYPE = Sql.AddParameter(cmd, "@IMPERSONATED_TYPE", sIMPERSONATED_TYPE  ,  25);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEXCHANGE_USERS_Update
		/// <summary>
		/// spEXCHANGE_USERS_Update
		/// </summary>
		public void spEXCHANGE_USERS_Update(ref Guid gID, string sEXCHANGE_ALIAS, string sEXCHANGE_EMAIL, string sIMPERSONATED_TYPE, Guid gASSIGNED_USER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEXCHANGE_USERS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parEXCHANGE_ALIAS    = Sql.AddParameter(cmd, "@EXCHANGE_ALIAS"   , sEXCHANGE_ALIAS     ,  60);
				IDbDataParameter parEXCHANGE_EMAIL    = Sql.AddParameter(cmd, "@EXCHANGE_EMAIL"   , sEXCHANGE_EMAIL     , 100);
				IDbDataParameter parIMPERSONATED_TYPE = Sql.AddParameter(cmd, "@IMPERSONATED_TYPE", sIMPERSONATED_TYPE  ,  25);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEXCHANGE_USERS_Update
		/// <summary>
		/// spEXCHANGE_USERS_Update
		/// </summary>
		public IDbCommand cmdEXCHANGE_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEXCHANGE_USERS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parEXCHANGE_ALIAS    = Sql.CreateParameter(cmd, "@EXCHANGE_ALIAS"   , "string",  60);
			IDbDataParameter parEXCHANGE_EMAIL    = Sql.CreateParameter(cmd, "@EXCHANGE_EMAIL"   , "string", 100);
			IDbDataParameter parIMPERSONATED_TYPE = Sql.CreateParameter(cmd, "@IMPERSONATED_TYPE", "string",  25);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spFEEDS_Delete
		/// <summary>
		/// spFEEDS_Delete
		/// </summary>
		public void spFEEDS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFEEDS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFEEDS_Delete
		/// <summary>
		/// spFEEDS_Delete
		/// </summary>
		public void spFEEDS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFEEDS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFEEDS_Delete
		/// <summary>
		/// spFEEDS_Delete
		/// </summary>
		public IDbCommand cmdFEEDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFEEDS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spFEEDS_New
		/// <summary>
		/// spFEEDS_New
		/// </summary>
		public void spFEEDS_New(ref Guid gID, string sURL, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFEEDS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parURL               = Sql.AddParameter(cmd, "@URL"              , sURL                , 255);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFEEDS_New
		/// <summary>
		/// spFEEDS_New
		/// </summary>
		public void spFEEDS_New(ref Guid gID, string sURL, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFEEDS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parURL               = Sql.AddParameter(cmd, "@URL"              , sURL                , 255);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdFEEDS_New
		/// <summary>
		/// spFEEDS_New
		/// </summary>
		public IDbCommand cmdFEEDS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFEEDS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parURL               = Sql.CreateParameter(cmd, "@URL"              , "string", 255);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spFEEDS_Update
		/// <summary>
		/// spFEEDS_Update
		/// </summary>
		public void spFEEDS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sTITLE, string sDESCRIPTION, string sURL, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFEEDS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTITLE             = Sql.AddParameter(cmd, "@TITLE"            , sTITLE              , 100);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parURL               = Sql.AddParameter(cmd, "@URL"              , sURL                , 255);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFEEDS_Update
		/// <summary>
		/// spFEEDS_Update
		/// </summary>
		public void spFEEDS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sTITLE, string sDESCRIPTION, string sURL, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFEEDS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTITLE             = Sql.AddParameter(cmd, "@TITLE"            , sTITLE              , 100);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parURL               = Sql.AddParameter(cmd, "@URL"              , sURL                , 255);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdFEEDS_Update
		/// <summary>
		/// spFEEDS_Update
		/// </summary>
		public IDbCommand cmdFEEDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFEEDS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTITLE             = Sql.CreateParameter(cmd, "@TITLE"            , "string", 100);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parURL               = Sql.CreateParameter(cmd, "@URL"              , "string", 255);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spFIELD_VALIDATORS_Delete
		/// <summary>
		/// spFIELD_VALIDATORS_Delete
		/// </summary>
		public void spFIELD_VALIDATORS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELD_VALIDATORS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELD_VALIDATORS_Delete
		/// <summary>
		/// spFIELD_VALIDATORS_Delete
		/// </summary>
		public void spFIELD_VALIDATORS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELD_VALIDATORS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELD_VALIDATORS_Delete
		/// <summary>
		/// spFIELD_VALIDATORS_Delete
		/// </summary>
		public IDbCommand cmdFIELD_VALIDATORS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELD_VALIDATORS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spFIELD_VALIDATORS_InsertRegEx
		/// <summary>
		/// spFIELD_VALIDATORS_InsertRegEx
		/// </summary>
		public void spFIELD_VALIDATORS_InsertRegEx(string sNAME, string sREGULAR_EXPRESSION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELD_VALIDATORS_InsertRegEx";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELD_VALIDATORS_InsertRegEx
		/// <summary>
		/// spFIELD_VALIDATORS_InsertRegEx
		/// </summary>
		public void spFIELD_VALIDATORS_InsertRegEx(string sNAME, string sREGULAR_EXPRESSION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELD_VALIDATORS_InsertRegEx";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELD_VALIDATORS_InsertRegEx
		/// <summary>
		/// spFIELD_VALIDATORS_InsertRegEx
		/// </summary>
		public IDbCommand cmdFIELD_VALIDATORS_InsertRegEx(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELD_VALIDATORS_InsertRegEx";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parREGULAR_EXPRESSION = Sql.CreateParameter(cmd, "@REGULAR_EXPRESSION", "string", 2000);
			return cmd;
		}
		#endregion

		#region spFIELD_VALIDATORS_Update
		/// <summary>
		/// spFIELD_VALIDATORS_Update
		/// </summary>
		public void spFIELD_VALIDATORS_Update(ref Guid gID, string sNAME, string sVALIDATION_TYPE, string sREGULAR_EXPRESSION, string sDATA_TYPE, string sMININUM_VALUE, string sMAXIMUM_VALUE, string sCOMPARE_OPERATOR)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELD_VALIDATORS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parVALIDATION_TYPE    = Sql.AddParameter(cmd, "@VALIDATION_TYPE"   , sVALIDATION_TYPE     ,  50);
							IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
							IDbDataParameter parDATA_TYPE          = Sql.AddParameter(cmd, "@DATA_TYPE"         , sDATA_TYPE           ,  25);
							IDbDataParameter parMININUM_VALUE      = Sql.AddParameter(cmd, "@MININUM_VALUE"     , sMININUM_VALUE       , 255);
							IDbDataParameter parMAXIMUM_VALUE      = Sql.AddParameter(cmd, "@MAXIMUM_VALUE"     , sMAXIMUM_VALUE       , 255);
							IDbDataParameter parCOMPARE_OPERATOR   = Sql.AddParameter(cmd, "@COMPARE_OPERATOR"  , sCOMPARE_OPERATOR    ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELD_VALIDATORS_Update
		/// <summary>
		/// spFIELD_VALIDATORS_Update
		/// </summary>
		public void spFIELD_VALIDATORS_Update(ref Guid gID, string sNAME, string sVALIDATION_TYPE, string sREGULAR_EXPRESSION, string sDATA_TYPE, string sMININUM_VALUE, string sMAXIMUM_VALUE, string sCOMPARE_OPERATOR, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELD_VALIDATORS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parVALIDATION_TYPE    = Sql.AddParameter(cmd, "@VALIDATION_TYPE"   , sVALIDATION_TYPE     ,  50);
				IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
				IDbDataParameter parDATA_TYPE          = Sql.AddParameter(cmd, "@DATA_TYPE"         , sDATA_TYPE           ,  25);
				IDbDataParameter parMININUM_VALUE      = Sql.AddParameter(cmd, "@MININUM_VALUE"     , sMININUM_VALUE       , 255);
				IDbDataParameter parMAXIMUM_VALUE      = Sql.AddParameter(cmd, "@MAXIMUM_VALUE"     , sMAXIMUM_VALUE       , 255);
				IDbDataParameter parCOMPARE_OPERATOR   = Sql.AddParameter(cmd, "@COMPARE_OPERATOR"  , sCOMPARE_OPERATOR    ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdFIELD_VALIDATORS_Update
		/// <summary>
		/// spFIELD_VALIDATORS_Update
		/// </summary>
		public IDbCommand cmdFIELD_VALIDATORS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELD_VALIDATORS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parVALIDATION_TYPE    = Sql.CreateParameter(cmd, "@VALIDATION_TYPE"   , "string",  50);
			IDbDataParameter parREGULAR_EXPRESSION = Sql.CreateParameter(cmd, "@REGULAR_EXPRESSION", "string", 2000);
			IDbDataParameter parDATA_TYPE          = Sql.CreateParameter(cmd, "@DATA_TYPE"         , "string",  25);
			IDbDataParameter parMININUM_VALUE      = Sql.CreateParameter(cmd, "@MININUM_VALUE"     , "string", 255);
			IDbDataParameter parMAXIMUM_VALUE      = Sql.CreateParameter(cmd, "@MAXIMUM_VALUE"     , "string", 255);
			IDbDataParameter parCOMPARE_OPERATOR   = Sql.CreateParameter(cmd, "@COMPARE_OPERATOR"  , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_Delete
		/// <summary>
		/// spFIELDS_META_DATA_Delete
		/// </summary>
		public void spFIELDS_META_DATA_Delete(Guid gID, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELDS_META_DATA_Delete";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_Delete
		/// <summary>
		/// spFIELDS_META_DATA_Delete
		/// </summary>
		public void spFIELDS_META_DATA_Delete(Guid gID, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELDS_META_DATA_Delete";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_Delete
		/// <summary>
		/// spFIELDS_META_DATA_Delete
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELDS_META_DATA_Delete";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_DeleteByName
		/// <summary>
		/// spFIELDS_META_DATA_DeleteByName
		/// </summary>
		public void spFIELDS_META_DATA_DeleteByName(string sCUSTOM_MODULE, string sNAME, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spFIELDS_META_DATA_DeleteByNam";
							else
								cmd.CommandText = "spFIELDS_META_DATA_DeleteByName";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_DeleteByName
		/// <summary>
		/// spFIELDS_META_DATA_DeleteByName
		/// </summary>
		public void spFIELDS_META_DATA_DeleteByName(string sCUSTOM_MODULE, string sNAME, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spFIELDS_META_DATA_DeleteByNam";
				else
					cmd.CommandText = "spFIELDS_META_DATA_DeleteByName";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_DeleteByName
		/// <summary>
		/// spFIELDS_META_DATA_DeleteByName
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_DeleteByName(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spFIELDS_META_DATA_DeleteByNam";
			else
				cmd.CommandText = "spFIELDS_META_DATA_DeleteByName";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parCUSTOM_MODULE     = Sql.CreateParameter(cmd, "@CUSTOM_MODULE"    , "string", 255);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_Insert
		/// <summary>
		/// spFIELDS_META_DATA_Insert
		/// </summary>
		public void spFIELDS_META_DATA_Insert(ref Guid gID, string sNAME, string sLABEL, string sLABEL_TERM, string sCUSTOM_MODULE, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELDS_META_DATA_Insert";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parLABEL             = Sql.AddParameter(cmd, "@LABEL"            , sLABEL              , 255);
							IDbDataParameter parLABEL_TERM        = Sql.AddParameter(cmd, "@LABEL_TERM"       , sLABEL_TERM         , 255);
							IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
							IDbDataParameter parDATA_TYPE         = Sql.AddParameter(cmd, "@DATA_TYPE"        , sDATA_TYPE          , 255);
							IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
							IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
							IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
							IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
							IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
							IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_Insert
		/// <summary>
		/// spFIELDS_META_DATA_Insert
		/// </summary>
		public void spFIELDS_META_DATA_Insert(ref Guid gID, string sNAME, string sLABEL, string sLABEL_TERM, string sCUSTOM_MODULE, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELDS_META_DATA_Insert";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parLABEL             = Sql.AddParameter(cmd, "@LABEL"            , sLABEL              , 255);
				IDbDataParameter parLABEL_TERM        = Sql.AddParameter(cmd, "@LABEL_TERM"       , sLABEL_TERM         , 255);
				IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
				IDbDataParameter parDATA_TYPE         = Sql.AddParameter(cmd, "@DATA_TYPE"        , sDATA_TYPE          , 255);
				IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
				IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
				IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
				IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
				IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
				IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_Insert
		/// <summary>
		/// spFIELDS_META_DATA_Insert
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELDS_META_DATA_Insert";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parLABEL             = Sql.CreateParameter(cmd, "@LABEL"            , "string", 255);
			IDbDataParameter parLABEL_TERM        = Sql.CreateParameter(cmd, "@LABEL_TERM"       , "string", 255);
			IDbDataParameter parCUSTOM_MODULE     = Sql.CreateParameter(cmd, "@CUSTOM_MODULE"    , "string", 255);
			IDbDataParameter parDATA_TYPE         = Sql.CreateParameter(cmd, "@DATA_TYPE"        , "string", 255);
			IDbDataParameter parMAX_SIZE          = Sql.CreateParameter(cmd, "@MAX_SIZE"         , "Int32",   4);
			IDbDataParameter parREQUIRED          = Sql.CreateParameter(cmd, "@REQUIRED"         , "bool",   1);
			IDbDataParameter parAUDITED           = Sql.CreateParameter(cmd, "@AUDITED"          , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE     = Sql.CreateParameter(cmd, "@DEFAULT_VALUE"    , "string", 255);
			IDbDataParameter parDROPDOWN_LIST     = Sql.CreateParameter(cmd, "@DROPDOWN_LIST"    , "string",  50);
			IDbDataParameter parMASS_UPDATE       = Sql.CreateParameter(cmd, "@MASS_UPDATE"      , "bool",   1);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_Update
		/// <summary>
		/// spFIELDS_META_DATA_Update
		/// </summary>
		public void spFIELDS_META_DATA_Update(Guid gID, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELDS_META_DATA_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
							IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
							IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
							IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
							IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
							IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_Update
		/// <summary>
		/// spFIELDS_META_DATA_Update
		/// </summary>
		public void spFIELDS_META_DATA_Update(Guid gID, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELDS_META_DATA_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
				IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
				IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
				IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
				IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
				IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_Update
		/// <summary>
		/// spFIELDS_META_DATA_Update
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELDS_META_DATA_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parMAX_SIZE          = Sql.CreateParameter(cmd, "@MAX_SIZE"         , "Int32",   4);
			IDbDataParameter parREQUIRED          = Sql.CreateParameter(cmd, "@REQUIRED"         , "bool",   1);
			IDbDataParameter parAUDITED           = Sql.CreateParameter(cmd, "@AUDITED"          , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE     = Sql.CreateParameter(cmd, "@DEFAULT_VALUE"    , "string", 255);
			IDbDataParameter parDROPDOWN_LIST     = Sql.CreateParameter(cmd, "@DROPDOWN_LIST"    , "string",  50);
			IDbDataParameter parMASS_UPDATE       = Sql.CreateParameter(cmd, "@MASS_UPDATE"      , "bool",   1);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spFULLTEXT_ConfigCatalog
		/// <summary>
		/// spFULLTEXT_ConfigCatalog
		/// </summary>
		public void spFULLTEXT_ConfigCatalog(string sOPERATION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFULLTEXT_ConfigCatalog";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFULLTEXT_ConfigCatalog
		/// <summary>
		/// spFULLTEXT_ConfigCatalog
		/// </summary>
		public void spFULLTEXT_ConfigCatalog(string sOPERATION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFULLTEXT_ConfigCatalog";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFULLTEXT_ConfigCatalog
		/// <summary>
		/// spFULLTEXT_ConfigCatalog
		/// </summary>
		public IDbCommand cmdFULLTEXT_ConfigCatalog(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFULLTEXT_ConfigCatalog";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPERATION        = Sql.CreateParameter(cmd, "@OPERATION"       , "string",  25);
			return cmd;
		}
		#endregion

		#region spFULLTEXT_UpdateLayouts
		/// <summary>
		/// spFULLTEXT_UpdateLayouts
		/// </summary>
		public void spFULLTEXT_UpdateLayouts(string sOPERATION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFULLTEXT_UpdateLayouts";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFULLTEXT_UpdateLayouts
		/// <summary>
		/// spFULLTEXT_UpdateLayouts
		/// </summary>
		public void spFULLTEXT_UpdateLayouts(string sOPERATION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFULLTEXT_UpdateLayouts";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFULLTEXT_UpdateLayouts
		/// <summary>
		/// spFULLTEXT_UpdateLayouts
		/// </summary>
		public IDbCommand cmdFULLTEXT_UpdateLayouts(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFULLTEXT_UpdateLayouts";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPERATION        = Sql.CreateParameter(cmd, "@OPERATION"       , "string",  25);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Delete
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Delete
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Delete
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Delete
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_Delete
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Delete
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBound
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBound
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBound(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBound";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBound
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBound
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBound(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBound";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsBound
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBound
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBound";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundDate
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundDate
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundDate(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDa";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDate";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parDATA_FORMAT     = Sql.AddParameter(cmd, "@DATA_FORMAT"    , sDATA_FORMAT      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundDate
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundDate
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundDate(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDa";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDate";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parDATA_FORMAT     = Sql.AddParameter(cmd, "@DATA_FORMAT"    , sDATA_FORMAT      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsBoundDate
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundDate
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsBoundDate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDa";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDate";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parDATA_FORMAT     = Sql.CreateParameter(cmd, "@DATA_FORMAT"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundLi";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundList";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parLIST_NAME       = Sql.AddParameter(cmd, "@LIST_NAME"      , sLIST_NAME        ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundLi";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundList";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parLIST_NAME       = Sql.AddParameter(cmd, "@LIST_NAME"      , sLIST_NAME        ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsBoundList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundList
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsBoundList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundLi";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundList";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parLIST_NAME       = Sql.CreateParameter(cmd, "@LIST_NAME"      , "string",  50);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsDependList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsDependList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsDependList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependL";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependList";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parPARENT_FIELD    = Sql.AddParameter(cmd, "@PARENT_FIELD"   , sPARENT_FIELD     ,  30);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsDependList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsDependList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsDependList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependL";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependList";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parPARENT_FIELD    = Sql.AddParameter(cmd, "@PARENT_FIELD"   , sPARENT_FIELD     ,  30);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsDependList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsDependList
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsDependList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependL";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependList";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parPARENT_FIELD    = Sql.CreateParameter(cmd, "@PARENT_FIELD"   , "string",  30);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsField
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsField
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsField(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsField";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsField
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsField
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsField(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsField";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsField
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsField
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsField(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsField";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHidden
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHidden
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHidden(string sGRID_NAME, string sDATA_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHidden";
							IDbDataParameter parGRID_NAME  = Sql.AddParameter(cmd, "@GRID_NAME" , sGRID_NAME   ,  50);
							IDbDataParameter parDATA_FIELD = Sql.AddParameter(cmd, "@DATA_FIELD", sDATA_FIELD  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHidden
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHidden
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHidden(string sGRID_NAME, string sDATA_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHidden";
				IDbDataParameter parGRID_NAME  = Sql.AddParameter(cmd, "@GRID_NAME" , sGRID_NAME   ,  50);
				IDbDataParameter parDATA_FIELD = Sql.AddParameter(cmd, "@DATA_FIELD", sDATA_FIELD  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsHidden
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHidden
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsHidden(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHidden";
			IDbDataParameter parGRID_NAME  = Sql.CreateParameter(cmd, "@GRID_NAME" , "string",  50);
			IDbDataParameter parDATA_FIELD = Sql.CreateParameter(cmd, "@DATA_FIELD", "string",  50);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHover
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHover
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHover(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHover";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHover
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHover
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHover(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHover";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsHover
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHover
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsHover(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHover";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHyperLink
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHyperLink
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHyperLink(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLi";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLink";
							IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
							IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
							IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
							IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
							IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
							IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
							IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
							IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHyperLink
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHyperLink
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHyperLink(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLi";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLink";
				IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
				IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
				IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
				IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
				IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
				IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
				IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
				IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsHyperLink
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHyperLink
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsHyperLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLi";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLink";
			IDbDataParameter parGRID_NAME          = Sql.CreateParameter(cmd, "@GRID_NAME"         , "string",  50);
			IDbDataParameter parCOLUMN_INDEX       = Sql.CreateParameter(cmd, "@COLUMN_INDEX"      , "Int32",   4);
			IDbDataParameter parHEADER_TEXT        = Sql.CreateParameter(cmd, "@HEADER_TEXT"       , "string", 150);
			IDbDataParameter parDATA_FIELD         = Sql.CreateParameter(cmd, "@DATA_FIELD"        , "string",  50);
			IDbDataParameter parSORT_EXPRESSION    = Sql.CreateParameter(cmd, "@SORT_EXPRESSION"   , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH    = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"   , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS", "string",  50);
			IDbDataParameter parURL_FIELD          = Sql.CreateParameter(cmd, "@URL_FIELD"         , "string", 104857600);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 104857600);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  60);
			IDbDataParameter parURL_MODULE         = Sql.CreateParameter(cmd, "@URL_MODULE"        , "string",  25);
			IDbDataParameter parURL_ASSIGNED_FIELD = Sql.CreateParameter(cmd, "@URL_ASSIGNED_FIELD", "string",  30);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsImageButton
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsImageButton
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsImageButton(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageBu";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageButton";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsImageButton
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsImageButton
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsImageButton(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageBu";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageButton";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsImageButton
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsImageButton
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsImageButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageBu";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageButton";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaImage
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaImage
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaImage(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaIma";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaImage";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaImage
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaImage
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaImage(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaIma";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaImage";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsJavaImage
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaImage
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsJavaImage(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaIma";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaImage";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaScript
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaScript
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaScript(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScr";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScript";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaScript
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaScript
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaScript(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScr";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScript";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsJavaScript
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaScript
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsJavaScript(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScr";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScript";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsModule
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsModule
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsModule(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsModule";
							IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
							IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
							IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
							IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
							IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
							IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
							IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
							IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsModule
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsModule
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsModule(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsModule";
				IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
				IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
				IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
				IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
				IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
				IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
				IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
				IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsModule
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsModule
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsModule(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsModule";
			IDbDataParameter parGRID_NAME          = Sql.CreateParameter(cmd, "@GRID_NAME"         , "string",  50);
			IDbDataParameter parCOLUMN_INDEX       = Sql.CreateParameter(cmd, "@COLUMN_INDEX"      , "Int32",   4);
			IDbDataParameter parHEADER_TEXT        = Sql.CreateParameter(cmd, "@HEADER_TEXT"       , "string", 150);
			IDbDataParameter parDATA_FIELD         = Sql.CreateParameter(cmd, "@DATA_FIELD"        , "string",  50);
			IDbDataParameter parSORT_EXPRESSION    = Sql.CreateParameter(cmd, "@SORT_EXPRESSION"   , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH    = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"   , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS", "string",  50);
			IDbDataParameter parURL_FIELD          = Sql.CreateParameter(cmd, "@URL_FIELD"         , "string", 104857600);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 104857600);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  60);
			IDbDataParameter parURL_MODULE         = Sql.CreateParameter(cmd, "@URL_MODULE"        , "string",  25);
			IDbDataParameter parURL_ASSIGNED_FIELD = Sql.CreateParameter(cmd, "@URL_ASSIGNED_FIELD", "string",  30);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsTagSelect
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsTagSelect
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsTagSelect(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sITEMSTYLE_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsTagSele";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsTagSelect";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsTagSelect
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsTagSelect
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsTagSelect(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sITEMSTYLE_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsTagSele";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsTagSelect";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsTagSelect
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsTagSelect
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsTagSelect(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsTagSele";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsTagSelect";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_ReserveIndex
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_ReserveIndex
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_ReserveIndex(string sGRID_NAME, Int32 nRESERVE_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveInd";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveIndex";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
							IDbDataParameter parRESERVE_INDEX    = Sql.AddParameter(cmd, "@RESERVE_INDEX"   , nRESERVE_INDEX     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_ReserveIndex
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_ReserveIndex
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_ReserveIndex(string sGRID_NAME, Int32 nRESERVE_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveInd";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveIndex";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
				IDbDataParameter parRESERVE_INDEX    = Sql.AddParameter(cmd, "@RESERVE_INDEX"   , nRESERVE_INDEX     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_ReserveIndex
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_ReserveIndex
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_ReserveIndex(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveInd";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveIndex";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parGRID_NAME        = Sql.CreateParameter(cmd, "@GRID_NAME"       , "string",  50);
			IDbDataParameter parRESERVE_INDEX    = Sql.CreateParameter(cmd, "@RESERVE_INDEX"   , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Update
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Update
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Update(ref Guid gID, string sGRID_NAME, Int32 nCOLUMN_INDEX, string sCOLUMN_TYPE, string sHEADER_TEXT, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, string sURL_MODULE, string sURL_ASSIGNED_FIELD, string sMODULE_TYPE, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_Update";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
							IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
							IDbDataParameter parCOLUMN_TYPE                = Sql.AddParameter(cmd, "@COLUMN_TYPE"               , sCOLUMN_TYPE                 ,  25);
							IDbDataParameter parHEADER_TEXT                = Sql.AddParameter(cmd, "@HEADER_TEXT"               , sHEADER_TEXT                 , 150);
							IDbDataParameter parSORT_EXPRESSION            = Sql.AddParameter(cmd, "@SORT_EXPRESSION"           , sSORT_EXPRESSION             ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
							IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
							IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
							IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
							IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  ,  50);
							IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 ,  25);
							IDbDataParameter parURL_FIELD                  = Sql.AddParameter(cmd, "@URL_FIELD"                 , sURL_FIELD                   );
							IDbDataParameter parURL_FORMAT                 = Sql.AddParameter(cmd, "@URL_FORMAT"                , sURL_FORMAT                  );
							IDbDataParameter parURL_TARGET                 = Sql.AddParameter(cmd, "@URL_TARGET"                , sURL_TARGET                  ,  60);
							IDbDataParameter parLIST_NAME                  = Sql.AddParameter(cmd, "@LIST_NAME"                 , sLIST_NAME                   ,  50);
							IDbDataParameter parURL_MODULE                 = Sql.AddParameter(cmd, "@URL_MODULE"                , sURL_MODULE                  ,  25);
							IDbDataParameter parURL_ASSIGNED_FIELD         = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD"        , sURL_ASSIGNED_FIELD          ,  30);
							IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
							IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Update
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Update
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Update(ref Guid gID, string sGRID_NAME, Int32 nCOLUMN_INDEX, string sCOLUMN_TYPE, string sHEADER_TEXT, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, string sURL_MODULE, string sURL_ASSIGNED_FIELD, string sMODULE_TYPE, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_Update";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
				IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
				IDbDataParameter parCOLUMN_TYPE                = Sql.AddParameter(cmd, "@COLUMN_TYPE"               , sCOLUMN_TYPE                 ,  25);
				IDbDataParameter parHEADER_TEXT                = Sql.AddParameter(cmd, "@HEADER_TEXT"               , sHEADER_TEXT                 , 150);
				IDbDataParameter parSORT_EXPRESSION            = Sql.AddParameter(cmd, "@SORT_EXPRESSION"           , sSORT_EXPRESSION             ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
				IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
				IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
				IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
				IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  ,  50);
				IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 ,  25);
				IDbDataParameter parURL_FIELD                  = Sql.AddParameter(cmd, "@URL_FIELD"                 , sURL_FIELD                   );
				IDbDataParameter parURL_FORMAT                 = Sql.AddParameter(cmd, "@URL_FORMAT"                , sURL_FORMAT                  );
				IDbDataParameter parURL_TARGET                 = Sql.AddParameter(cmd, "@URL_TARGET"                , sURL_TARGET                  ,  60);
				IDbDataParameter parLIST_NAME                  = Sql.AddParameter(cmd, "@LIST_NAME"                 , sLIST_NAME                   ,  50);
				IDbDataParameter parURL_MODULE                 = Sql.AddParameter(cmd, "@URL_MODULE"                , sURL_MODULE                  ,  25);
				IDbDataParameter parURL_ASSIGNED_FIELD         = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD"        , sURL_ASSIGNED_FIELD          ,  30);
				IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
				IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_Update
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Update
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_Update";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parGRID_NAME                  = Sql.CreateParameter(cmd, "@GRID_NAME"                 , "string",  50);
			IDbDataParameter parCOLUMN_INDEX               = Sql.CreateParameter(cmd, "@COLUMN_INDEX"              , "Int32",   4);
			IDbDataParameter parCOLUMN_TYPE                = Sql.CreateParameter(cmd, "@COLUMN_TYPE"               , "string",  25);
			IDbDataParameter parHEADER_TEXT                = Sql.CreateParameter(cmd, "@HEADER_TEXT"               , "string", 150);
			IDbDataParameter parSORT_EXPRESSION            = Sql.CreateParameter(cmd, "@SORT_EXPRESSION"           , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH            = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"           , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , "string",  50);
			IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.CreateParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", "string",  10);
			IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.CreateParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , "string",  10);
			IDbDataParameter parITEMSTYLE_WRAP             = Sql.CreateParameter(cmd, "@ITEMSTYLE_WRAP"            , "bool",   1);
			IDbDataParameter parDATA_FIELD                 = Sql.CreateParameter(cmd, "@DATA_FIELD"                , "string",  50);
			IDbDataParameter parDATA_FORMAT                = Sql.CreateParameter(cmd, "@DATA_FORMAT"               , "string",  25);
			IDbDataParameter parURL_FIELD                  = Sql.CreateParameter(cmd, "@URL_FIELD"                 , "string", 104857600);
			IDbDataParameter parURL_FORMAT                 = Sql.CreateParameter(cmd, "@URL_FORMAT"                , "string", 104857600);
			IDbDataParameter parURL_TARGET                 = Sql.CreateParameter(cmd, "@URL_TARGET"                , "string",  60);
			IDbDataParameter parLIST_NAME                  = Sql.CreateParameter(cmd, "@LIST_NAME"                 , "string",  50);
			IDbDataParameter parURL_MODULE                 = Sql.CreateParameter(cmd, "@URL_MODULE"                , "string",  25);
			IDbDataParameter parURL_ASSIGNED_FIELD         = Sql.CreateParameter(cmd, "@URL_ASSIGNED_FIELD"        , "string",  30);
			IDbDataParameter parMODULE_TYPE                = Sql.CreateParameter(cmd, "@MODULE_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_FIELD               = Sql.CreateParameter(cmd, "@PARENT_FIELD"              , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateFormat
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateFormat
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateFormat(string sGRID_NAME, string sDATA_FIELD, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateForm";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateFormat";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        ,  50);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateFormat
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateFormat
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateFormat(string sGRID_NAME, string sDATA_FIELD, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateForm";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateFormat";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        ,  50);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_UpdateFormat
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateFormat
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_UpdateFormat(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateForm";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateFormat";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parGRID_NAME        = Sql.CreateParameter(cmd, "@GRID_NAME"       , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string",  50);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateStyle
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateStyle
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateStyle(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyl";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyle";
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
							IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
							IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
							IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
							IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
							IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateStyle
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateStyle
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateStyle(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyl";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyle";
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
				IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
				IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
				IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
				IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
				IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_UpdateStyle
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateStyle
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_UpdateStyle(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyl";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyle";
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parGRID_NAME                  = Sql.CreateParameter(cmd, "@GRID_NAME"                 , "string",  50);
			IDbDataParameter parCOLUMN_INDEX               = Sql.CreateParameter(cmd, "@COLUMN_INDEX"              , "Int32",   4);
			IDbDataParameter parITEMSTYLE_WIDTH            = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"           , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , "string",  50);
			IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.CreateParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", "string",  10);
			IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.CreateParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , "string",  10);
			IDbDataParameter parITEMSTYLE_WRAP             = Sql.CreateParameter(cmd, "@ITEMSTYLE_WRAP"            , "bool",   1);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_Delete
		/// <summary>
		/// spGRIDVIEWS_Delete
		/// </summary>
		public void spGRIDVIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_Delete
		/// <summary>
		/// spGRIDVIEWS_Delete
		/// </summary>
		public void spGRIDVIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_Delete
		/// <summary>
		/// spGRIDVIEWS_Delete
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_InsertOnly
		/// <summary>
		/// spGRIDVIEWS_InsertOnly
		/// </summary>
		public void spGRIDVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_InsertOnly";
							IDbDataParameter parNAME           = Sql.AddParameter(cmd, "@NAME"          , sNAME            ,  50);
							IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  25);
							IDbDataParameter parVIEW_NAME      = Sql.AddParameter(cmd, "@VIEW_NAME"     , sVIEW_NAME       ,  50);
							IDbDataParameter parSORT_FIELD     = Sql.AddParameter(cmd, "@SORT_FIELD"    , sSORT_FIELD      ,  50);
							IDbDataParameter parSORT_DIRECTION = Sql.AddParameter(cmd, "@SORT_DIRECTION", sSORT_DIRECTION  ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_InsertOnly
		/// <summary>
		/// spGRIDVIEWS_InsertOnly
		/// </summary>
		public void spGRIDVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_InsertOnly";
				IDbDataParameter parNAME           = Sql.AddParameter(cmd, "@NAME"          , sNAME            ,  50);
				IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  25);
				IDbDataParameter parVIEW_NAME      = Sql.AddParameter(cmd, "@VIEW_NAME"     , sVIEW_NAME       ,  50);
				IDbDataParameter parSORT_FIELD     = Sql.AddParameter(cmd, "@SORT_FIELD"    , sSORT_FIELD      ,  50);
				IDbDataParameter parSORT_DIRECTION = Sql.AddParameter(cmd, "@SORT_DIRECTION", sSORT_DIRECTION  ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_InsertOnly
		/// <summary>
		/// spGRIDVIEWS_InsertOnly
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_InsertOnly";
			IDbDataParameter parNAME           = Sql.CreateParameter(cmd, "@NAME"          , "string",  50);
			IDbDataParameter parMODULE_NAME    = Sql.CreateParameter(cmd, "@MODULE_NAME"   , "string",  25);
			IDbDataParameter parVIEW_NAME      = Sql.CreateParameter(cmd, "@VIEW_NAME"     , "string",  50);
			IDbDataParameter parSORT_FIELD     = Sql.CreateParameter(cmd, "@SORT_FIELD"    , "string",  50);
			IDbDataParameter parSORT_DIRECTION = Sql.CreateParameter(cmd, "@SORT_DIRECTION", "string",  10);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_Update
		/// <summary>
		/// spGRIDVIEWS_Update
		/// </summary>
		public void spGRIDVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
							IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_Update
		/// <summary>
		/// spGRIDVIEWS_Update
		/// </summary>
		public void spGRIDVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
				IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdGRIDVIEWS_Update
		/// <summary>
		/// spGRIDVIEWS_Update
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			IDbDataParameter parSORT_FIELD         = Sql.CreateParameter(cmd, "@SORT_FIELD"        , "string",  50);
			IDbDataParameter parSORT_DIRECTION     = Sql.CreateParameter(cmd, "@SORT_DIRECTION"    , "string",  10);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_UpdateEvents
		/// <summary>
		/// spGRIDVIEWS_UpdateEvents
		/// </summary>
		public void spGRIDVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_UpdateEvents";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_UpdateEvents
		/// <summary>
		/// spGRIDVIEWS_UpdateEvents
		/// </summary>
		public void spGRIDVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_UpdateEvents";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_UpdateEvents
		/// <summary>
		/// spGRIDVIEWS_UpdateEvents
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_UpdateEvents(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_UpdateEvents";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_UpdateSort
		/// <summary>
		/// spGRIDVIEWS_UpdateSort
		/// </summary>
		public void spGRIDVIEWS_UpdateSort(string sNAME, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_UpdateSort";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parSORT_FIELD       = Sql.AddParameter(cmd, "@SORT_FIELD"      , sSORT_FIELD        ,  50);
							IDbDataParameter parSORT_DIRECTION   = Sql.AddParameter(cmd, "@SORT_DIRECTION"  , sSORT_DIRECTION    ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_UpdateSort
		/// <summary>
		/// spGRIDVIEWS_UpdateSort
		/// </summary>
		public void spGRIDVIEWS_UpdateSort(string sNAME, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_UpdateSort";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parSORT_FIELD       = Sql.AddParameter(cmd, "@SORT_FIELD"      , sSORT_FIELD        ,  50);
				IDbDataParameter parSORT_DIRECTION   = Sql.AddParameter(cmd, "@SORT_DIRECTION"  , sSORT_DIRECTION    ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_UpdateSort
		/// <summary>
		/// spGRIDVIEWS_UpdateSort
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_UpdateSort(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_UpdateSort";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parSORT_FIELD       = Sql.CreateParameter(cmd, "@SORT_FIELD"      , "string",  50);
			IDbDataParameter parSORT_DIRECTION   = Sql.CreateParameter(cmd, "@SORT_DIRECTION"  , "string",  10);
			return cmd;
		}
		#endregion

		#region spIFRAMES_Delete
		/// <summary>
		/// spIFRAMES_Delete
		/// </summary>
		public void spIFRAMES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIFRAMES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIFRAMES_Delete
		/// <summary>
		/// spIFRAMES_Delete
		/// </summary>
		public void spIFRAMES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIFRAMES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIFRAMES_Delete
		/// <summary>
		/// spIFRAMES_Delete
		/// </summary>
		public IDbCommand cmdIFRAMES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIFRAMES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spIFRAMES_MassDelete
		/// <summary>
		/// spIFRAMES_MassDelete
		/// </summary>
		public void spIFRAMES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIFRAMES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIFRAMES_MassDelete
		/// <summary>
		/// spIFRAMES_MassDelete
		/// </summary>
		public void spIFRAMES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIFRAMES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIFRAMES_MassDelete
		/// <summary>
		/// spIFRAMES_MassDelete
		/// </summary>
		public IDbCommand cmdIFRAMES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIFRAMES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spIFRAMES_Update
		/// <summary>
		/// spIFRAMES_Update
		/// </summary>
		public void spIFRAMES_Update(ref Guid gID, string sNAME, string sURL, string sTYPE, string sPLACEMENT, bool bSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIFRAMES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parURL              = Sql.AddParameter(cmd, "@URL"             , sURL               , 255);
							IDbDataParameter parTYPE             = Sql.AddParameter(cmd, "@TYPE"            , sTYPE              , 255);
							IDbDataParameter parPLACEMENT        = Sql.AddParameter(cmd, "@PLACEMENT"       , sPLACEMENT         , 255);
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , bSTATUS            );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIFRAMES_Update
		/// <summary>
		/// spIFRAMES_Update
		/// </summary>
		public void spIFRAMES_Update(ref Guid gID, string sNAME, string sURL, string sTYPE, string sPLACEMENT, bool bSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIFRAMES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parURL              = Sql.AddParameter(cmd, "@URL"             , sURL               , 255);
				IDbDataParameter parTYPE             = Sql.AddParameter(cmd, "@TYPE"            , sTYPE              , 255);
				IDbDataParameter parPLACEMENT        = Sql.AddParameter(cmd, "@PLACEMENT"       , sPLACEMENT         , 255);
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , bSTATUS            );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdIFRAMES_Update
		/// <summary>
		/// spIFRAMES_Update
		/// </summary>
		public IDbCommand cmdIFRAMES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIFRAMES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parURL              = Sql.CreateParameter(cmd, "@URL"             , "string", 255);
			IDbDataParameter parTYPE             = Sql.CreateParameter(cmd, "@TYPE"            , "string", 255);
			IDbDataParameter parPLACEMENT        = Sql.CreateParameter(cmd, "@PLACEMENT"       , "string", 255);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMAGE_InitPointer
		/// <summary>
		/// spIMAGE_InitPointer
		/// </summary>
		public void spIMAGE_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGE_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGE_InitPointer
		/// <summary>
		/// spIMAGE_InitPointer
		/// </summary>
		public void spIMAGE_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGE_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdIMAGE_InitPointer
		/// <summary>
		/// spIMAGE_InitPointer
		/// </summary>
		public IDbCommand cmdIMAGE_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGE_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMAGE_ReadOffset
		/// <summary>
		/// spIMAGE_ReadOffset
		/// </summary>
		public void spIMAGE_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGE_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGE_ReadOffset
		/// <summary>
		/// spIMAGE_ReadOffset
		/// </summary>
		public void spIMAGE_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGE_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdIMAGE_ReadOffset
		/// <summary>
		/// spIMAGE_ReadOffset
		/// </summary>
		public IDbCommand cmdIMAGE_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGE_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMAGE_WriteOffset
		/// <summary>
		/// spIMAGE_WriteOffset
		/// </summary>
		public void spIMAGE_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGE_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGE_WriteOffset
		/// <summary>
		/// spIMAGE_WriteOffset
		/// </summary>
		public void spIMAGE_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGE_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMAGE_WriteOffset
		/// <summary>
		/// spIMAGE_WriteOffset
		/// </summary>
		public IDbCommand cmdIMAGE_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGE_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spIMAGES_CONTENT_Update
		/// <summary>
		/// spIMAGES_CONTENT_Update
		/// </summary>
		public void spIMAGES_CONTENT_Update(Guid gID, byte[] binCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGES_CONTENT_Update";
							IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
							IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGES_CONTENT_Update
		/// <summary>
		/// spIMAGES_CONTENT_Update
		/// </summary>
		public void spIMAGES_CONTENT_Update(Guid gID, byte[] binCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGES_CONTENT_Update";
				IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
				IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMAGES_CONTENT_Update
		/// <summary>
		/// spIMAGES_CONTENT_Update
		/// </summary>
		public IDbCommand cmdIMAGES_CONTENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGES_CONTENT_Update";
			IDbDataParameter parID      = Sql.CreateParameter(cmd, "@ID"     , "Guid",  16);
			IDbDataParameter parCONTENT = Sql.CreateParameter(cmd, "@CONTENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spIMAGES_Delete
		/// <summary>
		/// spIMAGES_Delete
		/// </summary>
		public void spIMAGES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGES_Delete
		/// <summary>
		/// spIMAGES_Delete
		/// </summary>
		public void spIMAGES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMAGES_Delete
		/// <summary>
		/// spIMAGES_Delete
		/// </summary>
		public IDbCommand cmdIMAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spIMAGES_Insert
		/// <summary>
		/// spIMAGES_Insert
		/// </summary>
		public void spIMAGES_Insert(ref Guid gID, Guid gPARENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGES_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
							IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
							IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGES_Insert
		/// <summary>
		/// spIMAGES_Insert
		/// </summary>
		public void spIMAGES_Insert(ref Guid gID, Guid gPARENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGES_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
				IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
				IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdIMAGES_Insert
		/// <summary>
		/// spIMAGES_Insert
		/// </summary>
		public IDbCommand cmdIMAGES_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGES_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parFILENAME         = Sql.CreateParameter(cmd, "@FILENAME"        , "string", 255);
			IDbDataParameter parFILE_EXT         = Sql.CreateParameter(cmd, "@FILE_EXT"        , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE   = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMPORT_MAPS_Delete
		/// <summary>
		/// spIMPORT_MAPS_Delete
		/// </summary>
		public void spIMPORT_MAPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMPORT_MAPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMPORT_MAPS_Delete
		/// <summary>
		/// spIMPORT_MAPS_Delete
		/// </summary>
		public void spIMPORT_MAPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMPORT_MAPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMPORT_MAPS_Delete
		/// <summary>
		/// spIMPORT_MAPS_Delete
		/// </summary>
		public IDbCommand cmdIMPORT_MAPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMPORT_MAPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spIMPORT_MAPS_InsertOnly
		/// <summary>
		/// spIMPORT_MAPS_InsertOnly
		/// </summary>
		public void spIMPORT_MAPS_InsertOnly(ref Guid gID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMPORT_MAPS_InsertOnly";
							IDbDataParameter parID           = Sql.AddParameter(cmd, "@ID"          , gID            );
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
							IDbDataParameter parSOURCE       = Sql.AddParameter(cmd, "@SOURCE"      , sSOURCE        ,  25);
							IDbDataParameter parMODULE       = Sql.AddParameter(cmd, "@MODULE"      , sMODULE        ,  25);
							IDbDataParameter parHAS_HEADER   = Sql.AddParameter(cmd, "@HAS_HEADER"  , bHAS_HEADER    );
							IDbDataParameter parIS_PUBLISHED = Sql.AddParameter(cmd, "@IS_PUBLISHED", bIS_PUBLISHED  );
							IDbDataParameter parCONTENT      = Sql.AddParameter(cmd, "@CONTENT"     , sCONTENT       );
							IDbDataParameter parRULES_XML    = Sql.AddParameter(cmd, "@RULES_XML"   , sRULES_XML     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMPORT_MAPS_InsertOnly
		/// <summary>
		/// spIMPORT_MAPS_InsertOnly
		/// </summary>
		public void spIMPORT_MAPS_InsertOnly(ref Guid gID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMPORT_MAPS_InsertOnly";
				IDbDataParameter parID           = Sql.AddParameter(cmd, "@ID"          , gID            );
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
				IDbDataParameter parSOURCE       = Sql.AddParameter(cmd, "@SOURCE"      , sSOURCE        ,  25);
				IDbDataParameter parMODULE       = Sql.AddParameter(cmd, "@MODULE"      , sMODULE        ,  25);
				IDbDataParameter parHAS_HEADER   = Sql.AddParameter(cmd, "@HAS_HEADER"  , bHAS_HEADER    );
				IDbDataParameter parIS_PUBLISHED = Sql.AddParameter(cmd, "@IS_PUBLISHED", bIS_PUBLISHED  );
				IDbDataParameter parCONTENT      = Sql.AddParameter(cmd, "@CONTENT"     , sCONTENT       );
				IDbDataParameter parRULES_XML    = Sql.AddParameter(cmd, "@RULES_XML"   , sRULES_XML     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdIMPORT_MAPS_InsertOnly
		/// <summary>
		/// spIMPORT_MAPS_InsertOnly
		/// </summary>
		public IDbCommand cmdIMPORT_MAPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMPORT_MAPS_InsertOnly";
			IDbDataParameter parID           = Sql.CreateParameter(cmd, "@ID"          , "Guid",  16);
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string", 150);
			IDbDataParameter parSOURCE       = Sql.CreateParameter(cmd, "@SOURCE"      , "string",  25);
			IDbDataParameter parMODULE       = Sql.CreateParameter(cmd, "@MODULE"      , "string",  25);
			IDbDataParameter parHAS_HEADER   = Sql.CreateParameter(cmd, "@HAS_HEADER"  , "bool",   1);
			IDbDataParameter parIS_PUBLISHED = Sql.CreateParameter(cmd, "@IS_PUBLISHED", "bool",   1);
			IDbDataParameter parCONTENT      = Sql.CreateParameter(cmd, "@CONTENT"     , "string", 104857600);
			IDbDataParameter parRULES_XML    = Sql.CreateParameter(cmd, "@RULES_XML"   , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMPORT_MAPS_Update
		/// <summary>
		/// spIMPORT_MAPS_Update
		/// </summary>
		public void spIMPORT_MAPS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMPORT_MAPS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parSOURCE           = Sql.AddParameter(cmd, "@SOURCE"          , sSOURCE            ,  25);
							IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
							IDbDataParameter parHAS_HEADER       = Sql.AddParameter(cmd, "@HAS_HEADER"      , bHAS_HEADER        );
							IDbDataParameter parIS_PUBLISHED     = Sql.AddParameter(cmd, "@IS_PUBLISHED"    , bIS_PUBLISHED      );
							IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
							IDbDataParameter parRULES_XML        = Sql.AddParameter(cmd, "@RULES_XML"       , sRULES_XML         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMPORT_MAPS_Update
		/// <summary>
		/// spIMPORT_MAPS_Update
		/// </summary>
		public void spIMPORT_MAPS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMPORT_MAPS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parSOURCE           = Sql.AddParameter(cmd, "@SOURCE"          , sSOURCE            ,  25);
				IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
				IDbDataParameter parHAS_HEADER       = Sql.AddParameter(cmd, "@HAS_HEADER"      , bHAS_HEADER        );
				IDbDataParameter parIS_PUBLISHED     = Sql.AddParameter(cmd, "@IS_PUBLISHED"    , bIS_PUBLISHED      );
				IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
				IDbDataParameter parRULES_XML        = Sql.AddParameter(cmd, "@RULES_XML"       , sRULES_XML         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdIMPORT_MAPS_Update
		/// <summary>
		/// spIMPORT_MAPS_Update
		/// </summary>
		public IDbCommand cmdIMPORT_MAPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMPORT_MAPS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parSOURCE           = Sql.CreateParameter(cmd, "@SOURCE"          , "string",  25);
			IDbDataParameter parMODULE           = Sql.CreateParameter(cmd, "@MODULE"          , "string",  25);
			IDbDataParameter parHAS_HEADER       = Sql.CreateParameter(cmd, "@HAS_HEADER"      , "bool",   1);
			IDbDataParameter parIS_PUBLISHED     = Sql.CreateParameter(cmd, "@IS_PUBLISHED"    , "bool",   1);
			IDbDataParameter parCONTENT          = Sql.CreateParameter(cmd, "@CONTENT"         , "string", 104857600);
			IDbDataParameter parRULES_XML        = Sql.CreateParameter(cmd, "@RULES_XML"       , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spINBOUND_EMAIL_AUTOREPLY_Delete
		/// <summary>
		/// spINBOUND_EMAIL_AUTOREPLY_Delete
		/// </summary>
		public void spINBOUND_EMAIL_AUTOREPLY_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Dele";
							else
								cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spINBOUND_EMAIL_AUTOREPLY_Delete
		/// <summary>
		/// spINBOUND_EMAIL_AUTOREPLY_Delete
		/// </summary>
		public void spINBOUND_EMAIL_AUTOREPLY_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Dele";
				else
					cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdINBOUND_EMAIL_AUTOREPLY_Delete
		/// <summary>
		/// spINBOUND_EMAIL_AUTOREPLY_Delete
		/// </summary>
		public IDbCommand cmdINBOUND_EMAIL_AUTOREPLY_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Dele";
			else
				cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spINBOUND_EMAIL_AUTOREPLY_Update
		/// <summary>
		/// spINBOUND_EMAIL_AUTOREPLY_Update
		/// </summary>
		public void spINBOUND_EMAIL_AUTOREPLY_Update(ref Guid gID, string sAUTOREPLIED_TO)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Upda";
							else
								cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUTOREPLIED_TO   = Sql.AddParameter(cmd, "@AUTOREPLIED_TO"  , sAUTOREPLIED_TO    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spINBOUND_EMAIL_AUTOREPLY_Update
		/// <summary>
		/// spINBOUND_EMAIL_AUTOREPLY_Update
		/// </summary>
		public void spINBOUND_EMAIL_AUTOREPLY_Update(ref Guid gID, string sAUTOREPLIED_TO, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Upda";
				else
					cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUTOREPLIED_TO   = Sql.AddParameter(cmd, "@AUTOREPLIED_TO"  , sAUTOREPLIED_TO    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdINBOUND_EMAIL_AUTOREPLY_Update
		/// <summary>
		/// spINBOUND_EMAIL_AUTOREPLY_Update
		/// </summary>
		public IDbCommand cmdINBOUND_EMAIL_AUTOREPLY_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Upda";
			else
				cmd.CommandText = "spINBOUND_EMAIL_AUTOREPLY_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUTOREPLIED_TO   = Sql.CreateParameter(cmd, "@AUTOREPLIED_TO"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spINBOUND_EMAILS_Delete
		/// <summary>
		/// spINBOUND_EMAILS_Delete
		/// </summary>
		public void spINBOUND_EMAILS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spINBOUND_EMAILS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spINBOUND_EMAILS_Delete
		/// <summary>
		/// spINBOUND_EMAILS_Delete
		/// </summary>
		public void spINBOUND_EMAILS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spINBOUND_EMAILS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdINBOUND_EMAILS_Delete
		/// <summary>
		/// spINBOUND_EMAILS_Delete
		/// </summary>
		public IDbCommand cmdINBOUND_EMAILS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spINBOUND_EMAILS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spINBOUND_EMAILS_ExchangeWatermark
		/// <summary>
		/// spINBOUND_EMAILS_ExchangeWatermark
		/// </summary>
		public void spINBOUND_EMAILS_ExchangeWatermark(Guid gID, string sEXCHANGE_WATERMARK)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spINBOUND_EMAILS_ExchangeWater";
							else
								cmd.CommandText = "spINBOUND_EMAILS_ExchangeWatermark";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parEXCHANGE_WATERMARK = Sql.AddAnsiParam(cmd, "@EXCHANGE_WATERMARK", sEXCHANGE_WATERMARK  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spINBOUND_EMAILS_ExchangeWatermark
		/// <summary>
		/// spINBOUND_EMAILS_ExchangeWatermark
		/// </summary>
		public void spINBOUND_EMAILS_ExchangeWatermark(Guid gID, string sEXCHANGE_WATERMARK, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spINBOUND_EMAILS_ExchangeWater";
				else
					cmd.CommandText = "spINBOUND_EMAILS_ExchangeWatermark";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parEXCHANGE_WATERMARK = Sql.AddAnsiParam(cmd, "@EXCHANGE_WATERMARK", sEXCHANGE_WATERMARK  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdINBOUND_EMAILS_ExchangeWatermark
		/// <summary>
		/// spINBOUND_EMAILS_ExchangeWatermark
		/// </summary>
		public IDbCommand cmdINBOUND_EMAILS_ExchangeWatermark(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spINBOUND_EMAILS_ExchangeWater";
			else
				cmd.CommandText = "spINBOUND_EMAILS_ExchangeWatermark";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parEXCHANGE_WATERMARK = Sql.CreateParameter(cmd, "@EXCHANGE_WATERMARK", "ansistring", 100);
			return cmd;
		}
		#endregion

		#region spINBOUND_EMAILS_Update
		/// <summary>
		/// spINBOUND_EMAILS_Update
		/// </summary>
		public void spINBOUND_EMAILS_Update(ref Guid gID, string sNAME, string sSTATUS, string sSERVER_URL, string sEMAIL_USER, string sEMAIL_PASSWORD, Int32 nPORT, bool bMAILBOX_SSL, string sSERVICE, string sMAILBOX, bool bMARK_READ, bool bONLY_SINCE, string sMAILBOX_TYPE, Guid gTEMPLATE_ID, Guid gGROUP_ID, string sFROM_NAME, string sFROM_ADDR, string sFILTER_DOMAIN, bool bIS_PERSONAL, string sREPLY_TO_NAME, string sREPLY_TO_ADDR, Guid gGROUP_TEAM_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spINBOUND_EMAILS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parSERVER_URL       = Sql.AddParameter(cmd, "@SERVER_URL"      , sSERVER_URL        , 100);
							IDbDataParameter parEMAIL_USER       = Sql.AddParameter(cmd, "@EMAIL_USER"      , sEMAIL_USER        , 100);
							IDbDataParameter parEMAIL_PASSWORD   = Sql.AddParameter(cmd, "@EMAIL_PASSWORD"  , sEMAIL_PASSWORD    , 100);
							IDbDataParameter parPORT             = Sql.AddParameter(cmd, "@PORT"            , nPORT              );
							IDbDataParameter parMAILBOX_SSL      = Sql.AddParameter(cmd, "@MAILBOX_SSL"     , bMAILBOX_SSL       );
							IDbDataParameter parSERVICE          = Sql.AddParameter(cmd, "@SERVICE"         , sSERVICE           ,  50);
							IDbDataParameter parMAILBOX          = Sql.AddParameter(cmd, "@MAILBOX"         , sMAILBOX           ,  50);
							IDbDataParameter parMARK_READ        = Sql.AddParameter(cmd, "@MARK_READ"       , bMARK_READ         );
							IDbDataParameter parONLY_SINCE       = Sql.AddParameter(cmd, "@ONLY_SINCE"      , bONLY_SINCE        );
							IDbDataParameter parMAILBOX_TYPE     = Sql.AddParameter(cmd, "@MAILBOX_TYPE"    , sMAILBOX_TYPE      ,  10);
							IDbDataParameter parTEMPLATE_ID      = Sql.AddParameter(cmd, "@TEMPLATE_ID"     , gTEMPLATE_ID       );
							IDbDataParameter parGROUP_ID         = Sql.AddParameter(cmd, "@GROUP_ID"        , gGROUP_ID          );
							IDbDataParameter parFROM_NAME        = Sql.AddParameter(cmd, "@FROM_NAME"       , sFROM_NAME         , 100);
							IDbDataParameter parFROM_ADDR        = Sql.AddParameter(cmd, "@FROM_ADDR"       , sFROM_ADDR         , 100);
							IDbDataParameter parFILTER_DOMAIN    = Sql.AddParameter(cmd, "@FILTER_DOMAIN"   , sFILTER_DOMAIN     , 100);
							IDbDataParameter parIS_PERSONAL      = Sql.AddParameter(cmd, "@IS_PERSONAL"     , bIS_PERSONAL       );
							IDbDataParameter parREPLY_TO_NAME    = Sql.AddParameter(cmd, "@REPLY_TO_NAME"   , sREPLY_TO_NAME     , 100);
							IDbDataParameter parREPLY_TO_ADDR    = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"   , sREPLY_TO_ADDR     , 100);
							IDbDataParameter parGROUP_TEAM_ID    = Sql.AddParameter(cmd, "@GROUP_TEAM_ID"   , gGROUP_TEAM_ID     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spINBOUND_EMAILS_Update
		/// <summary>
		/// spINBOUND_EMAILS_Update
		/// </summary>
		public void spINBOUND_EMAILS_Update(ref Guid gID, string sNAME, string sSTATUS, string sSERVER_URL, string sEMAIL_USER, string sEMAIL_PASSWORD, Int32 nPORT, bool bMAILBOX_SSL, string sSERVICE, string sMAILBOX, bool bMARK_READ, bool bONLY_SINCE, string sMAILBOX_TYPE, Guid gTEMPLATE_ID, Guid gGROUP_ID, string sFROM_NAME, string sFROM_ADDR, string sFILTER_DOMAIN, bool bIS_PERSONAL, string sREPLY_TO_NAME, string sREPLY_TO_ADDR, Guid gGROUP_TEAM_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spINBOUND_EMAILS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parSERVER_URL       = Sql.AddParameter(cmd, "@SERVER_URL"      , sSERVER_URL        , 100);
				IDbDataParameter parEMAIL_USER       = Sql.AddParameter(cmd, "@EMAIL_USER"      , sEMAIL_USER        , 100);
				IDbDataParameter parEMAIL_PASSWORD   = Sql.AddParameter(cmd, "@EMAIL_PASSWORD"  , sEMAIL_PASSWORD    , 100);
				IDbDataParameter parPORT             = Sql.AddParameter(cmd, "@PORT"            , nPORT              );
				IDbDataParameter parMAILBOX_SSL      = Sql.AddParameter(cmd, "@MAILBOX_SSL"     , bMAILBOX_SSL       );
				IDbDataParameter parSERVICE          = Sql.AddParameter(cmd, "@SERVICE"         , sSERVICE           ,  50);
				IDbDataParameter parMAILBOX          = Sql.AddParameter(cmd, "@MAILBOX"         , sMAILBOX           ,  50);
				IDbDataParameter parMARK_READ        = Sql.AddParameter(cmd, "@MARK_READ"       , bMARK_READ         );
				IDbDataParameter parONLY_SINCE       = Sql.AddParameter(cmd, "@ONLY_SINCE"      , bONLY_SINCE        );
				IDbDataParameter parMAILBOX_TYPE     = Sql.AddParameter(cmd, "@MAILBOX_TYPE"    , sMAILBOX_TYPE      ,  10);
				IDbDataParameter parTEMPLATE_ID      = Sql.AddParameter(cmd, "@TEMPLATE_ID"     , gTEMPLATE_ID       );
				IDbDataParameter parGROUP_ID         = Sql.AddParameter(cmd, "@GROUP_ID"        , gGROUP_ID          );
				IDbDataParameter parFROM_NAME        = Sql.AddParameter(cmd, "@FROM_NAME"       , sFROM_NAME         , 100);
				IDbDataParameter parFROM_ADDR        = Sql.AddParameter(cmd, "@FROM_ADDR"       , sFROM_ADDR         , 100);
				IDbDataParameter parFILTER_DOMAIN    = Sql.AddParameter(cmd, "@FILTER_DOMAIN"   , sFILTER_DOMAIN     , 100);
				IDbDataParameter parIS_PERSONAL      = Sql.AddParameter(cmd, "@IS_PERSONAL"     , bIS_PERSONAL       );
				IDbDataParameter parREPLY_TO_NAME    = Sql.AddParameter(cmd, "@REPLY_TO_NAME"   , sREPLY_TO_NAME     , 100);
				IDbDataParameter parREPLY_TO_ADDR    = Sql.AddParameter(cmd, "@REPLY_TO_ADDR"   , sREPLY_TO_ADDR     , 100);
				IDbDataParameter parGROUP_TEAM_ID    = Sql.AddParameter(cmd, "@GROUP_TEAM_ID"   , gGROUP_TEAM_ID     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdINBOUND_EMAILS_Update
		/// <summary>
		/// spINBOUND_EMAILS_Update
		/// </summary>
		public IDbCommand cmdINBOUND_EMAILS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spINBOUND_EMAILS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parSERVER_URL       = Sql.CreateParameter(cmd, "@SERVER_URL"      , "string", 100);
			IDbDataParameter parEMAIL_USER       = Sql.CreateParameter(cmd, "@EMAIL_USER"      , "string", 100);
			IDbDataParameter parEMAIL_PASSWORD   = Sql.CreateParameter(cmd, "@EMAIL_PASSWORD"  , "string", 100);
			IDbDataParameter parPORT             = Sql.CreateParameter(cmd, "@PORT"            , "Int32",   4);
			IDbDataParameter parMAILBOX_SSL      = Sql.CreateParameter(cmd, "@MAILBOX_SSL"     , "bool",   1);
			IDbDataParameter parSERVICE          = Sql.CreateParameter(cmd, "@SERVICE"         , "string",  50);
			IDbDataParameter parMAILBOX          = Sql.CreateParameter(cmd, "@MAILBOX"         , "string",  50);
			IDbDataParameter parMARK_READ        = Sql.CreateParameter(cmd, "@MARK_READ"       , "bool",   1);
			IDbDataParameter parONLY_SINCE       = Sql.CreateParameter(cmd, "@ONLY_SINCE"      , "bool",   1);
			IDbDataParameter parMAILBOX_TYPE     = Sql.CreateParameter(cmd, "@MAILBOX_TYPE"    , "string",  10);
			IDbDataParameter parTEMPLATE_ID      = Sql.CreateParameter(cmd, "@TEMPLATE_ID"     , "Guid",  16);
			IDbDataParameter parGROUP_ID         = Sql.CreateParameter(cmd, "@GROUP_ID"        , "Guid",  16);
			IDbDataParameter parFROM_NAME        = Sql.CreateParameter(cmd, "@FROM_NAME"       , "string", 100);
			IDbDataParameter parFROM_ADDR        = Sql.CreateParameter(cmd, "@FROM_ADDR"       , "string", 100);
			IDbDataParameter parFILTER_DOMAIN    = Sql.CreateParameter(cmd, "@FILTER_DOMAIN"   , "string", 100);
			IDbDataParameter parIS_PERSONAL      = Sql.CreateParameter(cmd, "@IS_PERSONAL"     , "bool",   1);
			IDbDataParameter parREPLY_TO_NAME    = Sql.CreateParameter(cmd, "@REPLY_TO_NAME"   , "string", 100);
			IDbDataParameter parREPLY_TO_ADDR    = Sql.CreateParameter(cmd, "@REPLY_TO_ADDR"   , "string", 100);
			IDbDataParameter parGROUP_TEAM_ID    = Sql.CreateParameter(cmd, "@GROUP_TEAM_ID"   , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spINBOUND_EMAILS_UpdateLastUID
		/// <summary>
		/// spINBOUND_EMAILS_UpdateLastUID
		/// </summary>
		public void spINBOUND_EMAILS_UpdateLastUID(Guid gID, Int64 lLAST_EMAIL_UID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spINBOUND_EMAILS_UpdateLastUID";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLAST_EMAIL_UID   = Sql.AddParameter(cmd, "@LAST_EMAIL_UID"  , lLAST_EMAIL_UID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spINBOUND_EMAILS_UpdateLastUID
		/// <summary>
		/// spINBOUND_EMAILS_UpdateLastUID
		/// </summary>
		public void spINBOUND_EMAILS_UpdateLastUID(Guid gID, Int64 lLAST_EMAIL_UID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spINBOUND_EMAILS_UpdateLastUID";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLAST_EMAIL_UID   = Sql.AddParameter(cmd, "@LAST_EMAIL_UID"  , lLAST_EMAIL_UID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdINBOUND_EMAILS_UpdateLastUID
		/// <summary>
		/// spINBOUND_EMAILS_UpdateLastUID
		/// </summary>
		public IDbCommand cmdINBOUND_EMAILS_UpdateLastUID(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spINBOUND_EMAILS_UpdateLastUID";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLAST_EMAIL_UID   = Sql.CreateParameter(cmd, "@LAST_EMAIL_UID"  , "Int64",   8);
			return cmd;
		}
		#endregion

		#region spKBDOCUMENTS_ATTACHMENTS_CreateNote
		/// <summary>
		/// spKBDOCUMENTS_ATTACHMENTS_CreateNote
		/// </summary>
		public void spKBDOCUMENTS_ATTACHMENTS_CreateNote(ref Guid gID, Guid gCOPY_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Crea";
							else
								cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_CreateNote";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCOPY_ID          = Sql.AddParameter(cmd, "@COPY_ID"         , gCOPY_ID           );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spKBDOCUMENTS_ATTACHMENTS_CreateNote
		/// <summary>
		/// spKBDOCUMENTS_ATTACHMENTS_CreateNote
		/// </summary>
		public void spKBDOCUMENTS_ATTACHMENTS_CreateNote(ref Guid gID, Guid gCOPY_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Crea";
				else
					cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_CreateNote";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCOPY_ID          = Sql.AddParameter(cmd, "@COPY_ID"         , gCOPY_ID           );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdKBDOCUMENTS_ATTACHMENTS_CreateNote
		/// <summary>
		/// spKBDOCUMENTS_ATTACHMENTS_CreateNote
		/// </summary>
		public IDbCommand cmdKBDOCUMENTS_ATTACHMENTS_CreateNote(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Crea";
			else
				cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_CreateNote";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCOPY_ID          = Sql.CreateParameter(cmd, "@COPY_ID"         , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spKBDOCUMENTS_ATTACHMENTS_Insert
		/// <summary>
		/// spKBDOCUMENTS_ATTACHMENTS_Insert
		/// </summary>
		public void spKBDOCUMENTS_ATTACHMENTS_Insert(ref Guid gID, Guid gKBDOCUMENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Inse";
							else
								cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parKBDOCUMENT_ID    = Sql.AddParameter(cmd, "@KBDOCUMENT_ID"   , gKBDOCUMENT_ID     );
							IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
							IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
							IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spKBDOCUMENTS_ATTACHMENTS_Insert
		/// <summary>
		/// spKBDOCUMENTS_ATTACHMENTS_Insert
		/// </summary>
		public void spKBDOCUMENTS_ATTACHMENTS_Insert(ref Guid gID, Guid gKBDOCUMENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Inse";
				else
					cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parKBDOCUMENT_ID    = Sql.AddParameter(cmd, "@KBDOCUMENT_ID"   , gKBDOCUMENT_ID     );
				IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
				IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
				IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdKBDOCUMENTS_ATTACHMENTS_Insert
		/// <summary>
		/// spKBDOCUMENTS_ATTACHMENTS_Insert
		/// </summary>
		public IDbCommand cmdKBDOCUMENTS_ATTACHMENTS_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Inse";
			else
				cmd.CommandText = "spKBDOCUMENTS_ATTACHMENTS_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parKBDOCUMENT_ID    = Sql.CreateParameter(cmd, "@KBDOCUMENT_ID"   , "Guid",  16);
			IDbDataParameter parFILENAME         = Sql.CreateParameter(cmd, "@FILENAME"        , "string", 255);
			IDbDataParameter parFILE_EXT         = Sql.CreateParameter(cmd, "@FILE_EXT"        , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE   = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spKBDOCUMENTS_IMAGES_Insert
		/// <summary>
		/// spKBDOCUMENTS_IMAGES_Insert
		/// </summary>
		public void spKBDOCUMENTS_IMAGES_Insert(ref Guid gID, Guid gKBDOCUMENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spKBDOCUMENTS_IMAGES_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parKBDOCUMENT_ID    = Sql.AddParameter(cmd, "@KBDOCUMENT_ID"   , gKBDOCUMENT_ID     );
							IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
							IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
							IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spKBDOCUMENTS_IMAGES_Insert
		/// <summary>
		/// spKBDOCUMENTS_IMAGES_Insert
		/// </summary>
		public void spKBDOCUMENTS_IMAGES_Insert(ref Guid gID, Guid gKBDOCUMENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spKBDOCUMENTS_IMAGES_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parKBDOCUMENT_ID    = Sql.AddParameter(cmd, "@KBDOCUMENT_ID"   , gKBDOCUMENT_ID     );
				IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
				IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
				IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdKBDOCUMENTS_IMAGES_Insert
		/// <summary>
		/// spKBDOCUMENTS_IMAGES_Insert
		/// </summary>
		public IDbCommand cmdKBDOCUMENTS_IMAGES_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spKBDOCUMENTS_IMAGES_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parKBDOCUMENT_ID    = Sql.CreateParameter(cmd, "@KBDOCUMENT_ID"   , "Guid",  16);
			IDbDataParameter parFILENAME         = Sql.CreateParameter(cmd, "@FILENAME"        , "string", 255);
			IDbDataParameter parFILE_EXT         = Sql.CreateParameter(cmd, "@FILE_EXT"        , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE   = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Delete
		/// <summary>
		/// spLANGUAGES_Delete
		/// </summary>
		public void spLANGUAGES_Delete(string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Delete
		/// <summary>
		/// spLANGUAGES_Delete
		/// </summary>
		public void spLANGUAGES_Delete(string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_Delete
		/// <summary>
		/// spLANGUAGES_Delete
		/// </summary>
		public IDbCommand cmdLANGUAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Disable
		/// <summary>
		/// spLANGUAGES_Disable
		/// </summary>
		public void spLANGUAGES_Disable(string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Disable";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Disable
		/// <summary>
		/// spLANGUAGES_Disable
		/// </summary>
		public void spLANGUAGES_Disable(string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Disable";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_Disable
		/// <summary>
		/// spLANGUAGES_Disable
		/// </summary>
		public IDbCommand cmdLANGUAGES_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Disable";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Enable
		/// <summary>
		/// spLANGUAGES_Enable
		/// </summary>
		public void spLANGUAGES_Enable(string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Enable";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Enable
		/// <summary>
		/// spLANGUAGES_Enable
		/// </summary>
		public void spLANGUAGES_Enable(string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Enable";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_Enable
		/// <summary>
		/// spLANGUAGES_Enable
		/// </summary>
		public IDbCommand cmdLANGUAGES_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Enable";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_InsertOnly
		/// <summary>
		/// spLANGUAGES_InsertOnly
		/// </summary>
		public void spLANGUAGES_InsertOnly(string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  10);
							IDbDataParameter parLCID         = Sql.AddParameter(cmd, "@LCID"        , nLCID          );
							IDbDataParameter parACTIVE       = Sql.AddParameter(cmd, "@ACTIVE"      , bACTIVE        );
							IDbDataParameter parNATIVE_NAME  = Sql.AddParameter(cmd, "@NATIVE_NAME" , sNATIVE_NAME   ,  80);
							IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_InsertOnly
		/// <summary>
		/// spLANGUAGES_InsertOnly
		/// </summary>
		public void spLANGUAGES_InsertOnly(string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  10);
				IDbDataParameter parLCID         = Sql.AddParameter(cmd, "@LCID"        , nLCID          );
				IDbDataParameter parACTIVE       = Sql.AddParameter(cmd, "@ACTIVE"      , bACTIVE        );
				IDbDataParameter parNATIVE_NAME  = Sql.AddParameter(cmd, "@NATIVE_NAME" , sNATIVE_NAME   ,  80);
				IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_InsertOnly
		/// <summary>
		/// spLANGUAGES_InsertOnly
		/// </summary>
		public IDbCommand cmdLANGUAGES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string",  10);
			IDbDataParameter parLCID         = Sql.CreateParameter(cmd, "@LCID"        , "Int32",   4);
			IDbDataParameter parACTIVE       = Sql.CreateParameter(cmd, "@ACTIVE"      , "bool",   1);
			IDbDataParameter parNATIVE_NAME  = Sql.CreateParameter(cmd, "@NATIVE_NAME" , "string",  80);
			IDbDataParameter parDISPLAY_NAME = Sql.CreateParameter(cmd, "@DISPLAY_NAME", "string",  80);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Update
		/// <summary>
		/// spLANGUAGES_Update
		/// </summary>
		public void spLANGUAGES_Update(ref Guid gID, string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							IDbDataParameter parLCID             = Sql.AddParameter(cmd, "@LCID"            , nLCID              );
							IDbDataParameter parACTIVE           = Sql.AddParameter(cmd, "@ACTIVE"          , bACTIVE            );
							IDbDataParameter parNATIVE_NAME      = Sql.AddParameter(cmd, "@NATIVE_NAME"     , sNATIVE_NAME       ,  80);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      ,  80);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Update
		/// <summary>
		/// spLANGUAGES_Update
		/// </summary>
		public void spLANGUAGES_Update(ref Guid gID, string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				IDbDataParameter parLCID             = Sql.AddParameter(cmd, "@LCID"            , nLCID              );
				IDbDataParameter parACTIVE           = Sql.AddParameter(cmd, "@ACTIVE"          , bACTIVE            );
				IDbDataParameter parNATIVE_NAME      = Sql.AddParameter(cmd, "@NATIVE_NAME"     , sNATIVE_NAME       ,  80);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      ,  80);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdLANGUAGES_Update
		/// <summary>
		/// spLANGUAGES_Update
		/// </summary>
		public IDbCommand cmdLANGUAGES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			IDbDataParameter parLCID             = Sql.CreateParameter(cmd, "@LCID"            , "Int32",   4);
			IDbDataParameter parACTIVE           = Sql.CreateParameter(cmd, "@ACTIVE"          , "bool",   1);
			IDbDataParameter parNATIVE_NAME      = Sql.CreateParameter(cmd, "@NATIVE_NAME"     , "string",  80);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string",  80);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spLEADS_CONTACTS_Delete
		/// <summary>
		/// spLEADS_CONTACTS_Delete
		/// </summary>
		public void spLEADS_CONTACTS_Delete(Guid gLEAD_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_CONTACTS_Delete
		/// <summary>
		/// spLEADS_CONTACTS_Delete
		/// </summary>
		public void spLEADS_CONTACTS_Delete(Guid gLEAD_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_CONTACTS_Delete
		/// <summary>
		/// spLEADS_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdLEADS_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_CONTACTS_Update
		/// <summary>
		/// spLEADS_CONTACTS_Update
		/// </summary>
		public void spLEADS_CONTACTS_Update(Guid gLEAD_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_CONTACTS_Update
		/// <summary>
		/// spLEADS_CONTACTS_Update
		/// </summary>
		public void spLEADS_CONTACTS_Update(Guid gLEAD_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_CONTACTS_Update
		/// <summary>
		/// spLEADS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdLEADS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_ConvertProspect
		/// <summary>
		/// spLEADS_ConvertProspect
		/// </summary>
		public void spLEADS_ConvertProspect(ref Guid gID, Guid gPROSPECT_ID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sREFERED_BY, string sLEAD_SOURCE, string sLEAD_SOURCE_DESCRIPTION, string sSTATUS, string sSTATUS_DESCRIPTION, string sDEPARTMENT, Guid gREPORTS_TO_ID, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sACCOUNT_NAME, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCONTACT_ID, Guid gACCOUNT_ID, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_ConvertProspect";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parPROSPECT_ID                = Sql.AddParameter(cmd, "@PROSPECT_ID"               , gPROSPECT_ID                 );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       , 100);
							IDbDataParameter parREFERED_BY                 = Sql.AddParameter(cmd, "@REFERED_BY"                , sREFERED_BY                  , 100);
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.AddParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , sLEAD_SOURCE_DESCRIPTION     );
							IDbDataParameter parSTATUS                     = Sql.AddParameter(cmd, "@STATUS"                    , sSTATUS                      , 100);
							IDbDataParameter parSTATUS_DESCRIPTION         = Sql.AddParameter(cmd, "@STATUS_DESCRIPTION"        , sSTATUS_DESCRIPTION          );
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
							IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
							IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parCONTACT_ID                 = Sql.AddParameter(cmd, "@CONTACT_ID"                , gCONTACT_ID                  );
							IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
							IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
							IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_ConvertProspect
		/// <summary>
		/// spLEADS_ConvertProspect
		/// </summary>
		public void spLEADS_ConvertProspect(ref Guid gID, Guid gPROSPECT_ID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sREFERED_BY, string sLEAD_SOURCE, string sLEAD_SOURCE_DESCRIPTION, string sSTATUS, string sSTATUS_DESCRIPTION, string sDEPARTMENT, Guid gREPORTS_TO_ID, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sACCOUNT_NAME, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCONTACT_ID, Guid gACCOUNT_ID, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_ConvertProspect";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parPROSPECT_ID                = Sql.AddParameter(cmd, "@PROSPECT_ID"               , gPROSPECT_ID                 );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       , 100);
				IDbDataParameter parREFERED_BY                 = Sql.AddParameter(cmd, "@REFERED_BY"                , sREFERED_BY                  , 100);
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.AddParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , sLEAD_SOURCE_DESCRIPTION     );
				IDbDataParameter parSTATUS                     = Sql.AddParameter(cmd, "@STATUS"                    , sSTATUS                      , 100);
				IDbDataParameter parSTATUS_DESCRIPTION         = Sql.AddParameter(cmd, "@STATUS_DESCRIPTION"        , sSTATUS_DESCRIPTION          );
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
				IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
				IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parCONTACT_ID                 = Sql.AddParameter(cmd, "@CONTACT_ID"                , gCONTACT_ID                  );
				IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
				IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
				IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdLEADS_ConvertProspect
		/// <summary>
		/// spLEADS_ConvertProspect
		/// </summary>
		public IDbCommand cmdLEADS_ConvertProspect(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_ConvertProspect";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parPROSPECT_ID                = Sql.CreateParameter(cmd, "@PROSPECT_ID"               , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string", 100);
			IDbDataParameter parREFERED_BY                 = Sql.CreateParameter(cmd, "@REFERED_BY"                , "string", 100);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.CreateParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , "string", 104857600);
			IDbDataParameter parSTATUS                     = Sql.CreateParameter(cmd, "@STATUS"                    , "string", 100);
			IDbDataParameter parSTATUS_DESCRIPTION         = Sql.CreateParameter(cmd, "@STATUS_DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 100);
			IDbDataParameter parREPORTS_TO_ID              = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"             , "Guid",  16);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parACCOUNT_NAME               = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"              , "string", 150);
			IDbDataParameter parCAMPAIGN_ID                = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"               , "Guid",  16);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parCONTACT_ID                 = Sql.CreateParameter(cmd, "@CONTACT_ID"                , "Guid",  16);
			IDbDataParameter parACCOUNT_ID                 = Sql.CreateParameter(cmd, "@ACCOUNT_ID"                , "Guid",  16);
			IDbDataParameter parEXCHANGE_FOLDER            = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"           , "bool",   1);
			IDbDataParameter parTAG_SET_NAME               = Sql.CreateParameter(cmd, "@TAG_SET_NAME"              , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spLEADS_Delete
		/// <summary>
		/// spLEADS_Delete
		/// </summary>
		public void spLEADS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_Delete
		/// <summary>
		/// spLEADS_Delete
		/// </summary>
		public void spLEADS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_Delete
		/// <summary>
		/// spLEADS_Delete
		/// </summary>
		public IDbCommand cmdLEADS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_DOCUMENTS_Delete
		/// <summary>
		/// spLEADS_DOCUMENTS_Delete
		/// </summary>
		public void spLEADS_DOCUMENTS_Delete(Guid gLEAD_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_DOCUMENTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_DOCUMENTS_Delete
		/// <summary>
		/// spLEADS_DOCUMENTS_Delete
		/// </summary>
		public void spLEADS_DOCUMENTS_Delete(Guid gLEAD_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_DOCUMENTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_DOCUMENTS_Delete
		/// <summary>
		/// spLEADS_DOCUMENTS_Delete
		/// </summary>
		public IDbCommand cmdLEADS_DOCUMENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_DOCUMENTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_DOCUMENTS_GetLatest
		/// <summary>
		/// spLEADS_DOCUMENTS_GetLatest
		/// </summary>
		public void spLEADS_DOCUMENTS_GetLatest(Guid gLEAD_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_DOCUMENTS_GetLatest";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_DOCUMENTS_GetLatest
		/// <summary>
		/// spLEADS_DOCUMENTS_GetLatest
		/// </summary>
		public void spLEADS_DOCUMENTS_GetLatest(Guid gLEAD_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_DOCUMENTS_GetLatest";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_DOCUMENTS_GetLatest
		/// <summary>
		/// spLEADS_DOCUMENTS_GetLatest
		/// </summary>
		public IDbCommand cmdLEADS_DOCUMENTS_GetLatest(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_DOCUMENTS_GetLatest";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_DOCUMENTS_Update
		/// <summary>
		/// spLEADS_DOCUMENTS_Update
		/// </summary>
		public void spLEADS_DOCUMENTS_Update(Guid gLEAD_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_DOCUMENTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_DOCUMENTS_Update
		/// <summary>
		/// spLEADS_DOCUMENTS_Update
		/// </summary>
		public void spLEADS_DOCUMENTS_Update(Guid gLEAD_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_DOCUMENTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_DOCUMENTS_Update
		/// <summary>
		/// spLEADS_DOCUMENTS_Update
		/// </summary>
		public IDbCommand cmdLEADS_DOCUMENTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_DOCUMENTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_Import
		/// <summary>
		/// spLEADS_Import
		/// </summary>
		public void spLEADS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sREFERED_BY, string sLEAD_SOURCE, string sLEAD_SOURCE_DESCRIPTION, string sSTATUS, string sSTATUS_DESCRIPTION, string sDEPARTMENT, Guid gREPORTS_TO_ID, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sACCOUNT_NAME, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCONTACT_ID, Guid gACCOUNT_ID, bool bEXCHANGE_FOLDER, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sPRIMARY_ADDRESS_STREET1, string sPRIMARY_ADDRESS_STREET2, string sPRIMARY_ADDRESS_STREET3, string sALT_ADDRESS_STREET1, string sALT_ADDRESS_STREET2, string sALT_ADDRESS_STREET3, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sTAG_SET_NAME, string sPICTURE, string sLEAD_NUMBER, string sASSIGNED_SET_LIST, string sTEAM_NAME, DateTime dtBIRTHDATE, string sASSISTANT, string sASSISTANT_PHONE, string sWEBSITE, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_Import";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       , 100);
							IDbDataParameter parREFERED_BY                 = Sql.AddParameter(cmd, "@REFERED_BY"                , sREFERED_BY                  , 100);
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.AddParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , sLEAD_SOURCE_DESCRIPTION     );
							IDbDataParameter parSTATUS                     = Sql.AddParameter(cmd, "@STATUS"                    , sSTATUS                      , 100);
							IDbDataParameter parSTATUS_DESCRIPTION         = Sql.AddParameter(cmd, "@STATUS_DESCRIPTION"        , sSTATUS_DESCRIPTION          );
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
							IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
							IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parCONTACT_ID                 = Sql.AddParameter(cmd, "@CONTACT_ID"                , gCONTACT_ID                  );
							IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
							IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
							IDbDataParameter parDATE_ENTERED               = Sql.AddParameter(cmd, "@DATE_ENTERED"              , dtDATE_ENTERED               );
							IDbDataParameter parDATE_MODIFIED              = Sql.AddParameter(cmd, "@DATE_MODIFIED"             , dtDATE_MODIFIED              );
							IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , sPRIMARY_ADDRESS_STREET1     , 150);
							IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , sPRIMARY_ADDRESS_STREET2     , 150);
							IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , sPRIMARY_ADDRESS_STREET3     , 150);
							IDbDataParameter parALT_ADDRESS_STREET1        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET1"       , sALT_ADDRESS_STREET1         , 150);
							IDbDataParameter parALT_ADDRESS_STREET2        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET2"       , sALT_ADDRESS_STREET2         , 150);
							IDbDataParameter parALT_ADDRESS_STREET3        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET3"       , sALT_ADDRESS_STREET3         , 150);
							IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
							IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
							IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
							IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
							IDbDataParameter parLEAD_NUMBER                = Sql.AddParameter(cmd, "@LEAD_NUMBER"               , sLEAD_NUMBER                 ,  30);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							IDbDataParameter parTEAM_NAME                  = Sql.AddParameter(cmd, "@TEAM_NAME"                 , sTEAM_NAME                   , 128);
							IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
							IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
							IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
							IDbDataParameter parWEBSITE                    = Sql.AddParameter(cmd, "@WEBSITE"                   , sWEBSITE                     , 255);
							IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
							IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_Import
		/// <summary>
		/// spLEADS_Import
		/// </summary>
		public void spLEADS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sREFERED_BY, string sLEAD_SOURCE, string sLEAD_SOURCE_DESCRIPTION, string sSTATUS, string sSTATUS_DESCRIPTION, string sDEPARTMENT, Guid gREPORTS_TO_ID, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sACCOUNT_NAME, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCONTACT_ID, Guid gACCOUNT_ID, bool bEXCHANGE_FOLDER, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sPRIMARY_ADDRESS_STREET1, string sPRIMARY_ADDRESS_STREET2, string sPRIMARY_ADDRESS_STREET3, string sALT_ADDRESS_STREET1, string sALT_ADDRESS_STREET2, string sALT_ADDRESS_STREET3, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sTAG_SET_NAME, string sPICTURE, string sLEAD_NUMBER, string sASSIGNED_SET_LIST, string sTEAM_NAME, DateTime dtBIRTHDATE, string sASSISTANT, string sASSISTANT_PHONE, string sWEBSITE, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_Import";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       , 100);
				IDbDataParameter parREFERED_BY                 = Sql.AddParameter(cmd, "@REFERED_BY"                , sREFERED_BY                  , 100);
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.AddParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , sLEAD_SOURCE_DESCRIPTION     );
				IDbDataParameter parSTATUS                     = Sql.AddParameter(cmd, "@STATUS"                    , sSTATUS                      , 100);
				IDbDataParameter parSTATUS_DESCRIPTION         = Sql.AddParameter(cmd, "@STATUS_DESCRIPTION"        , sSTATUS_DESCRIPTION          );
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
				IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
				IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parCONTACT_ID                 = Sql.AddParameter(cmd, "@CONTACT_ID"                , gCONTACT_ID                  );
				IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
				IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
				IDbDataParameter parDATE_ENTERED               = Sql.AddParameter(cmd, "@DATE_ENTERED"              , dtDATE_ENTERED               );
				IDbDataParameter parDATE_MODIFIED              = Sql.AddParameter(cmd, "@DATE_MODIFIED"             , dtDATE_MODIFIED              );
				IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , sPRIMARY_ADDRESS_STREET1     , 150);
				IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , sPRIMARY_ADDRESS_STREET2     , 150);
				IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , sPRIMARY_ADDRESS_STREET3     , 150);
				IDbDataParameter parALT_ADDRESS_STREET1        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET1"       , sALT_ADDRESS_STREET1         , 150);
				IDbDataParameter parALT_ADDRESS_STREET2        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET2"       , sALT_ADDRESS_STREET2         , 150);
				IDbDataParameter parALT_ADDRESS_STREET3        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET3"       , sALT_ADDRESS_STREET3         , 150);
				IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
				IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
				IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
				IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
				IDbDataParameter parLEAD_NUMBER                = Sql.AddParameter(cmd, "@LEAD_NUMBER"               , sLEAD_NUMBER                 ,  30);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				IDbDataParameter parTEAM_NAME                  = Sql.AddParameter(cmd, "@TEAM_NAME"                 , sTEAM_NAME                   , 128);
				IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
				IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
				IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
				IDbDataParameter parWEBSITE                    = Sql.AddParameter(cmd, "@WEBSITE"                   , sWEBSITE                     , 255);
				IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
				IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdLEADS_Import
		/// <summary>
		/// spLEADS_Import
		/// </summary>
		public IDbCommand cmdLEADS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_Import";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string", 100);
			IDbDataParameter parREFERED_BY                 = Sql.CreateParameter(cmd, "@REFERED_BY"                , "string", 100);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.CreateParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , "string", 104857600);
			IDbDataParameter parSTATUS                     = Sql.CreateParameter(cmd, "@STATUS"                    , "string", 100);
			IDbDataParameter parSTATUS_DESCRIPTION         = Sql.CreateParameter(cmd, "@STATUS_DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 100);
			IDbDataParameter parREPORTS_TO_ID              = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"             , "Guid",  16);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parACCOUNT_NAME               = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"              , "string", 150);
			IDbDataParameter parCAMPAIGN_ID                = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"               , "Guid",  16);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parCONTACT_ID                 = Sql.CreateParameter(cmd, "@CONTACT_ID"                , "Guid",  16);
			IDbDataParameter parACCOUNT_ID                 = Sql.CreateParameter(cmd, "@ACCOUNT_ID"                , "Guid",  16);
			IDbDataParameter parEXCHANGE_FOLDER            = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"           , "bool",   1);
			IDbDataParameter parDATE_ENTERED               = Sql.CreateParameter(cmd, "@DATE_ENTERED"              , "DateTime",   8);
			IDbDataParameter parDATE_MODIFIED              = Sql.CreateParameter(cmd, "@DATE_MODIFIED"             , "DateTime",   8);
			IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET1        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET1"       , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET2        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET2"       , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET3        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET3"       , "string", 150);
			IDbDataParameter parSMS_OPT_IN                 = Sql.CreateParameter(cmd, "@SMS_OPT_IN"                , "string",  25);
			IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.CreateParameter(cmd, "@TWITTER_SCREEN_NAME"       , "string",  20);
			IDbDataParameter parTAG_SET_NAME               = Sql.CreateParameter(cmd, "@TAG_SET_NAME"              , "string", 4000);
			IDbDataParameter parPICTURE                    = Sql.CreateParameter(cmd, "@PICTURE"                   , "string", 104857600);
			IDbDataParameter parLEAD_NUMBER                = Sql.CreateParameter(cmd, "@LEAD_NUMBER"               , "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			IDbDataParameter parTEAM_NAME                  = Sql.CreateParameter(cmd, "@TEAM_NAME"                 , "string", 128);
			IDbDataParameter parBIRTHDATE                  = Sql.CreateParameter(cmd, "@BIRTHDATE"                 , "DateTime",   8);
			IDbDataParameter parASSISTANT                  = Sql.CreateParameter(cmd, "@ASSISTANT"                 , "string",  75);
			IDbDataParameter parASSISTANT_PHONE            = Sql.CreateParameter(cmd, "@ASSISTANT_PHONE"           , "string",  25);
			IDbDataParameter parWEBSITE                    = Sql.CreateParameter(cmd, "@WEBSITE"                   , "string", 255);
			IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.CreateParameter(cmd, "@DP_BUSINESS_PURPOSE"       , "string", 104857600);
			IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.CreateParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , "DateTime",   8);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spLEADS_InsRelated
		/// <summary>
		/// spLEADS_InsRelated
		/// </summary>
		public void spLEADS_InsRelated(Guid gLEAD_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_InsRelated";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_InsRelated
		/// <summary>
		/// spLEADS_InsRelated
		/// </summary>
		public void spLEADS_InsRelated(Guid gLEAD_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_InsRelated";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_InsRelated
		/// <summary>
		/// spLEADS_InsRelated
		/// </summary>
		public IDbCommand cmdLEADS_InsRelated(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_InsRelated";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_MassDelete
		/// <summary>
		/// spLEADS_MassDelete
		/// </summary>
		public void spLEADS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_MassDelete
		/// <summary>
		/// spLEADS_MassDelete
		/// </summary>
		public void spLEADS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_MassDelete
		/// <summary>
		/// spLEADS_MassDelete
		/// </summary>
		public IDbCommand cmdLEADS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_MassSync
		/// <summary>
		/// spLEADS_MassSync
		/// </summary>
		public void spLEADS_MassSync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_MassSync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_MassSync
		/// <summary>
		/// spLEADS_MassSync
		/// </summary>
		public void spLEADS_MassSync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_MassSync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_MassSync
		/// <summary>
		/// spLEADS_MassSync
		/// </summary>
		public IDbCommand cmdLEADS_MassSync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_MassSync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_MassUnsync
		/// <summary>
		/// spLEADS_MassUnsync
		/// </summary>
		public void spLEADS_MassUnsync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_MassUnsync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_MassUnsync
		/// <summary>
		/// spLEADS_MassUnsync
		/// </summary>
		public void spLEADS_MassUnsync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_MassUnsync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_MassUnsync
		/// <summary>
		/// spLEADS_MassUnsync
		/// </summary>
		public IDbCommand cmdLEADS_MassUnsync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_MassUnsync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_MassUpdate
		/// <summary>
		/// spLEADS_MassUpdate
		/// </summary>
		public void spLEADS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sLEAD_SOURCE, string sSTATUS, Guid gREPORTS_TO_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parLEAD_SOURCE       = Sql.AddParameter(cmd, "@LEAD_SOURCE"      , sLEAD_SOURCE        , 100);
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             , 100);
							IDbDataParameter parREPORTS_TO_ID     = Sql.AddParameter(cmd, "@REPORTS_TO_ID"    , gREPORTS_TO_ID      );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_MassUpdate
		/// <summary>
		/// spLEADS_MassUpdate
		/// </summary>
		public void spLEADS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sLEAD_SOURCE, string sSTATUS, Guid gREPORTS_TO_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parLEAD_SOURCE       = Sql.AddParameter(cmd, "@LEAD_SOURCE"      , sLEAD_SOURCE        , 100);
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             , 100);
				IDbDataParameter parREPORTS_TO_ID     = Sql.AddParameter(cmd, "@REPORTS_TO_ID"    , gREPORTS_TO_ID      );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_MassUpdate
		/// <summary>
		/// spLEADS_MassUpdate
		/// </summary>
		public IDbCommand cmdLEADS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parLEAD_SOURCE       = Sql.CreateParameter(cmd, "@LEAD_SOURCE"      , "string", 100);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string", 100);
			IDbDataParameter parREPORTS_TO_ID     = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"    , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spLEADS_Merge
		/// <summary>
		/// spLEADS_Merge
		/// </summary>
		public void spLEADS_Merge(Guid gID, Guid gMERGE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_Merge";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_Merge
		/// <summary>
		/// spLEADS_Merge
		/// </summary>
		public void spLEADS_Merge(Guid gID, Guid gMERGE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_Merge";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_Merge
		/// <summary>
		/// spLEADS_Merge
		/// </summary>
		public IDbCommand cmdLEADS_Merge(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_Merge";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMERGE_ID         = Sql.CreateParameter(cmd, "@MERGE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_New
		/// <summary>
		/// spLEADS_New
		/// </summary>
		public void spLEADS_New(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, string sPHONE_WORK, string sEMAIL1, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parFIRST_NAME        = Sql.AddParameter(cmd, "@FIRST_NAME"       , sFIRST_NAME         , 100);
							IDbDataParameter parLAST_NAME         = Sql.AddParameter(cmd, "@LAST_NAME"        , sLAST_NAME          , 100);
							IDbDataParameter parPHONE_WORK        = Sql.AddParameter(cmd, "@PHONE_WORK"       , sPHONE_WORK         ,  25);
							IDbDataParameter parEMAIL1            = Sql.AddParameter(cmd, "@EMAIL1"           , sEMAIL1             , 100);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_New
		/// <summary>
		/// spLEADS_New
		/// </summary>
		public void spLEADS_New(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, string sPHONE_WORK, string sEMAIL1, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parFIRST_NAME        = Sql.AddParameter(cmd, "@FIRST_NAME"       , sFIRST_NAME         , 100);
				IDbDataParameter parLAST_NAME         = Sql.AddParameter(cmd, "@LAST_NAME"        , sLAST_NAME          , 100);
				IDbDataParameter parPHONE_WORK        = Sql.AddParameter(cmd, "@PHONE_WORK"       , sPHONE_WORK         ,  25);
				IDbDataParameter parEMAIL1            = Sql.AddParameter(cmd, "@EMAIL1"           , sEMAIL1             , 100);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdLEADS_New
		/// <summary>
		/// spLEADS_New
		/// </summary>
		public IDbCommand cmdLEADS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parFIRST_NAME        = Sql.CreateParameter(cmd, "@FIRST_NAME"       , "string", 100);
			IDbDataParameter parLAST_NAME         = Sql.CreateParameter(cmd, "@LAST_NAME"        , "string", 100);
			IDbDataParameter parPHONE_WORK        = Sql.CreateParameter(cmd, "@PHONE_WORK"       , "string",  25);
			IDbDataParameter parEMAIL1            = Sql.CreateParameter(cmd, "@EMAIL1"           , "string", 100);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spLEADS_OPPORTUNITIES_Delete
		/// <summary>
		/// spLEADS_OPPORTUNITIES_Delete
		/// </summary>
		public void spLEADS_OPPORTUNITIES_Delete(Guid gLEAD_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_OPPORTUNITIES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_OPPORTUNITIES_Delete
		/// <summary>
		/// spLEADS_OPPORTUNITIES_Delete
		/// </summary>
		public void spLEADS_OPPORTUNITIES_Delete(Guid gLEAD_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_OPPORTUNITIES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_OPPORTUNITIES_Delete
		/// <summary>
		/// spLEADS_OPPORTUNITIES_Delete
		/// </summary>
		public IDbCommand cmdLEADS_OPPORTUNITIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_OPPORTUNITIES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_OPPORTUNITIES_Update
		/// <summary>
		/// spLEADS_OPPORTUNITIES_Update
		/// </summary>
		public void spLEADS_OPPORTUNITIES_Update(Guid gLEAD_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_OPPORTUNITIES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_OPPORTUNITIES_Update
		/// <summary>
		/// spLEADS_OPPORTUNITIES_Update
		/// </summary>
		public void spLEADS_OPPORTUNITIES_Update(Guid gLEAD_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_OPPORTUNITIES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_OPPORTUNITIES_Update
		/// <summary>
		/// spLEADS_OPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdLEADS_OPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_OPPORTUNITIES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_STREAM_InsertPost
		/// <summary>
		/// spLEADS_STREAM_InsertPost
		/// </summary>
		public void spLEADS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_STREAM_InsertPost
		/// <summary>
		/// spLEADS_STREAM_InsertPost
		/// </summary>
		public void spLEADS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_STREAM_InsertPost
		/// <summary>
		/// spLEADS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdLEADS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_Undelete
		/// <summary>
		/// spLEADS_Undelete
		/// </summary>
		public void spLEADS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_Undelete
		/// <summary>
		/// spLEADS_Undelete
		/// </summary>
		public void spLEADS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_Undelete
		/// <summary>
		/// spLEADS_Undelete
		/// </summary>
		public IDbCommand cmdLEADS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spLEADS_Update
		/// <summary>
		/// spLEADS_Update
		/// </summary>
		public void spLEADS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sREFERED_BY, string sLEAD_SOURCE, string sLEAD_SOURCE_DESCRIPTION, string sSTATUS, string sSTATUS_DESCRIPTION, string sDEPARTMENT, Guid gREPORTS_TO_ID, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sACCOUNT_NAME, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCONTACT_ID, Guid gACCOUNT_ID, bool bEXCHANGE_FOLDER, DateTime dtBIRTHDATE, string sASSISTANT, string sASSISTANT_PHONE, string sWEBSITE, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sPICTURE, string sTAG_SET_NAME, string sLEAD_NUMBER, string sASSIGNED_SET_LIST, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_Update";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       , 100);
							IDbDataParameter parREFERED_BY                 = Sql.AddParameter(cmd, "@REFERED_BY"                , sREFERED_BY                  , 100);
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.AddParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , sLEAD_SOURCE_DESCRIPTION     );
							IDbDataParameter parSTATUS                     = Sql.AddParameter(cmd, "@STATUS"                    , sSTATUS                      , 100);
							IDbDataParameter parSTATUS_DESCRIPTION         = Sql.AddParameter(cmd, "@STATUS_DESCRIPTION"        , sSTATUS_DESCRIPTION          );
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
							IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
							IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parCONTACT_ID                 = Sql.AddParameter(cmd, "@CONTACT_ID"                , gCONTACT_ID                  );
							IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
							IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
							IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
							IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
							IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
							IDbDataParameter parWEBSITE                    = Sql.AddParameter(cmd, "@WEBSITE"                   , sWEBSITE                     , 255);
							IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
							IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
							IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
							IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
							IDbDataParameter parLEAD_NUMBER                = Sql.AddParameter(cmd, "@LEAD_NUMBER"               , sLEAD_NUMBER                 ,  30);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
							IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_Update
		/// <summary>
		/// spLEADS_Update
		/// </summary>
		public void spLEADS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sREFERED_BY, string sLEAD_SOURCE, string sLEAD_SOURCE_DESCRIPTION, string sSTATUS, string sSTATUS_DESCRIPTION, string sDEPARTMENT, Guid gREPORTS_TO_ID, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sACCOUNT_NAME, Guid gCAMPAIGN_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCONTACT_ID, Guid gACCOUNT_ID, bool bEXCHANGE_FOLDER, DateTime dtBIRTHDATE, string sASSISTANT, string sASSISTANT_PHONE, string sWEBSITE, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sPICTURE, string sTAG_SET_NAME, string sLEAD_NUMBER, string sASSIGNED_SET_LIST, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_Update";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       , 100);
				IDbDataParameter parREFERED_BY                 = Sql.AddParameter(cmd, "@REFERED_BY"                , sREFERED_BY                  , 100);
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.AddParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , sLEAD_SOURCE_DESCRIPTION     );
				IDbDataParameter parSTATUS                     = Sql.AddParameter(cmd, "@STATUS"                    , sSTATUS                      , 100);
				IDbDataParameter parSTATUS_DESCRIPTION         = Sql.AddParameter(cmd, "@STATUS_DESCRIPTION"        , sSTATUS_DESCRIPTION          );
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 100);
				IDbDataParameter parREPORTS_TO_ID              = Sql.AddParameter(cmd, "@REPORTS_TO_ID"             , gREPORTS_TO_ID               );
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
				IDbDataParameter parCAMPAIGN_ID                = Sql.AddParameter(cmd, "@CAMPAIGN_ID"               , gCAMPAIGN_ID                 );
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parCONTACT_ID                 = Sql.AddParameter(cmd, "@CONTACT_ID"                , gCONTACT_ID                  );
				IDbDataParameter parACCOUNT_ID                 = Sql.AddParameter(cmd, "@ACCOUNT_ID"                , gACCOUNT_ID                  );
				IDbDataParameter parEXCHANGE_FOLDER            = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"           , bEXCHANGE_FOLDER             );
				IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
				IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
				IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
				IDbDataParameter parWEBSITE                    = Sql.AddParameter(cmd, "@WEBSITE"                   , sWEBSITE                     , 255);
				IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
				IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
				IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
				IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
				IDbDataParameter parLEAD_NUMBER                = Sql.AddParameter(cmd, "@LEAD_NUMBER"               , sLEAD_NUMBER                 ,  30);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
				IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdLEADS_Update
		/// <summary>
		/// spLEADS_Update
		/// </summary>
		public IDbCommand cmdLEADS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_Update";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string", 100);
			IDbDataParameter parREFERED_BY                 = Sql.CreateParameter(cmd, "@REFERED_BY"                , "string", 100);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parLEAD_SOURCE_DESCRIPTION    = Sql.CreateParameter(cmd, "@LEAD_SOURCE_DESCRIPTION"   , "string", 104857600);
			IDbDataParameter parSTATUS                     = Sql.CreateParameter(cmd, "@STATUS"                    , "string", 100);
			IDbDataParameter parSTATUS_DESCRIPTION         = Sql.CreateParameter(cmd, "@STATUS_DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 100);
			IDbDataParameter parREPORTS_TO_ID              = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"             , "Guid",  16);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parACCOUNT_NAME               = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"              , "string", 150);
			IDbDataParameter parCAMPAIGN_ID                = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"               , "Guid",  16);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parCONTACT_ID                 = Sql.CreateParameter(cmd, "@CONTACT_ID"                , "Guid",  16);
			IDbDataParameter parACCOUNT_ID                 = Sql.CreateParameter(cmd, "@ACCOUNT_ID"                , "Guid",  16);
			IDbDataParameter parEXCHANGE_FOLDER            = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"           , "bool",   1);
			IDbDataParameter parBIRTHDATE                  = Sql.CreateParameter(cmd, "@BIRTHDATE"                 , "DateTime",   8);
			IDbDataParameter parASSISTANT                  = Sql.CreateParameter(cmd, "@ASSISTANT"                 , "string",  75);
			IDbDataParameter parASSISTANT_PHONE            = Sql.CreateParameter(cmd, "@ASSISTANT_PHONE"           , "string",  25);
			IDbDataParameter parWEBSITE                    = Sql.CreateParameter(cmd, "@WEBSITE"                   , "string", 255);
			IDbDataParameter parSMS_OPT_IN                 = Sql.CreateParameter(cmd, "@SMS_OPT_IN"                , "string",  25);
			IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.CreateParameter(cmd, "@TWITTER_SCREEN_NAME"       , "string",  20);
			IDbDataParameter parPICTURE                    = Sql.CreateParameter(cmd, "@PICTURE"                   , "string", 104857600);
			IDbDataParameter parTAG_SET_NAME               = Sql.CreateParameter(cmd, "@TAG_SET_NAME"              , "string", 4000);
			IDbDataParameter parLEAD_NUMBER                = Sql.CreateParameter(cmd, "@LEAD_NUMBER"               , "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.CreateParameter(cmd, "@DP_BUSINESS_PURPOSE"       , "string", 104857600);
			IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.CreateParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , "DateTime",   8);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spLEADS_USERS_Delete
		/// <summary>
		/// spLEADS_USERS_Delete
		/// </summary>
		public void spLEADS_USERS_Delete(Guid gLEAD_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_USERS_Delete
		/// <summary>
		/// spLEADS_USERS_Delete
		/// </summary>
		public void spLEADS_USERS_Delete(Guid gLEAD_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_USERS_Delete
		/// <summary>
		/// spLEADS_USERS_Delete
		/// </summary>
		public IDbCommand cmdLEADS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spLEADS_USERS_Update
		/// <summary>
		/// spLEADS_USERS_Update
		/// </summary>
		public void spLEADS_USERS_Update(Guid gLEAD_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLEADS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLEADS_USERS_Update
		/// <summary>
		/// spLEADS_USERS_Update
		/// </summary>
		public void spLEADS_USERS_Update(Guid gLEAD_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLEADS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLEADS_USERS_Update
		/// <summary>
		/// spLEADS_USERS_Update
		/// </summary>
		public IDbCommand cmdLEADS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLEADS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_CONTACTS_Delete
		/// <summary>
		/// spMEETINGS_CONTACTS_Delete
		/// </summary>
		public void spMEETINGS_CONTACTS_Delete(Guid gMEETING_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_CONTACTS_Delete
		/// <summary>
		/// spMEETINGS_CONTACTS_Delete
		/// </summary>
		public void spMEETINGS_CONTACTS_Delete(Guid gMEETING_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_CONTACTS_Delete
		/// <summary>
		/// spMEETINGS_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdMEETINGS_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMEETING_ID       = Sql.CreateParameter(cmd, "@MEETING_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_CONTACTS_Update
		/// <summary>
		/// spMEETINGS_CONTACTS_Update
		/// </summary>
		public void spMEETINGS_CONTACTS_Update(Guid gMEETING_ID, Guid gCONTACT_ID, bool bREQUIRED, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_CONTACTS_Update
		/// <summary>
		/// spMEETINGS_CONTACTS_Update
		/// </summary>
		public void spMEETINGS_CONTACTS_Update(Guid gMEETING_ID, Guid gCONTACT_ID, bool bREQUIRED, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_CONTACTS_Update
		/// <summary>
		/// spMEETINGS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdMEETINGS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMEETING_ID       = Sql.CreateParameter(cmd, "@MEETING_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spMEETINGS_Delete
		/// <summary>
		/// spMEETINGS_Delete
		/// </summary>
		public void spMEETINGS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_Delete
		/// <summary>
		/// spMEETINGS_Delete
		/// </summary>
		public void spMEETINGS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_Delete
		/// <summary>
		/// spMEETINGS_Delete
		/// </summary>
		public IDbCommand cmdMEETINGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_DeleteRecurrences
		/// <summary>
		/// spMEETINGS_DeleteRecurrences
		/// </summary>
		public void spMEETINGS_DeleteRecurrences(Guid gID, bool bDELETE_ALL)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_DeleteRecurrences";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDELETE_ALL       = Sql.AddParameter(cmd, "@DELETE_ALL"      , bDELETE_ALL        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_DeleteRecurrences
		/// <summary>
		/// spMEETINGS_DeleteRecurrences
		/// </summary>
		public void spMEETINGS_DeleteRecurrences(Guid gID, bool bDELETE_ALL, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_DeleteRecurrences";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDELETE_ALL       = Sql.AddParameter(cmd, "@DELETE_ALL"      , bDELETE_ALL        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_DeleteRecurrences
		/// <summary>
		/// spMEETINGS_DeleteRecurrences
		/// </summary>
		public IDbCommand cmdMEETINGS_DeleteRecurrences(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_DeleteRecurrences";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDELETE_ALL       = Sql.CreateParameter(cmd, "@DELETE_ALL"      , "bool",   1);
			return cmd;
		}
		#endregion

		#region spMEETINGS_EmailReminderSent
		/// <summary>
		/// spMEETINGS_EmailReminderSent
		/// </summary>
		public void spMEETINGS_EmailReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_EmailReminderSent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_EmailReminderSent
		/// <summary>
		/// spMEETINGS_EmailReminderSent
		/// </summary>
		public void spMEETINGS_EmailReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_EmailReminderSent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_EmailReminderSent
		/// <summary>
		/// spMEETINGS_EmailReminderSent
		/// </summary>
		public IDbCommand cmdMEETINGS_EmailReminderSent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_EmailReminderSent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_Import
		/// <summary>
		/// spMEETINGS_Import
		/// </summary>
		public void spMEETINGS_Import(ref Guid gID, DateTime dtDATE_MODIFIED, Guid gASSIGNED_USER_ID, string sNAME, string sLOCATION, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sSTATUS, string sPARENT_TYPE, Guid gPARENT_ID, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, string sTEAM_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_Import";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parDATE_MODIFIED     = Sql.AddParameter(cmd, "@DATE_MODIFIED"    , dtDATE_MODIFIED     );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parLOCATION          = Sql.AddParameter(cmd, "@LOCATION"         , sLOCATION           ,  50);
							IDbDataParameter parDURATION_HOURS    = Sql.AddParameter(cmd, "@DURATION_HOURS"   , nDURATION_HOURS     );
							IDbDataParameter parDURATION_MINUTES  = Sql.AddParameter(cmd, "@DURATION_MINUTES" , nDURATION_MINUTES   );
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parREMINDER_TIME     = Sql.AddParameter(cmd, "@REMINDER_TIME"    , nREMINDER_TIME      );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parINVITEE_LIST      = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"     , sINVITEE_LIST       , 8000);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parTEAM_NAME         = Sql.AddParameter(cmd, "@TEAM_NAME"        , sTEAM_NAME          , 128);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_Import
		/// <summary>
		/// spMEETINGS_Import
		/// </summary>
		public void spMEETINGS_Import(ref Guid gID, DateTime dtDATE_MODIFIED, Guid gASSIGNED_USER_ID, string sNAME, string sLOCATION, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sSTATUS, string sPARENT_TYPE, Guid gPARENT_ID, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, string sTEAM_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_Import";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parDATE_MODIFIED     = Sql.AddParameter(cmd, "@DATE_MODIFIED"    , dtDATE_MODIFIED     );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parLOCATION          = Sql.AddParameter(cmd, "@LOCATION"         , sLOCATION           ,  50);
				IDbDataParameter parDURATION_HOURS    = Sql.AddParameter(cmd, "@DURATION_HOURS"   , nDURATION_HOURS     );
				IDbDataParameter parDURATION_MINUTES  = Sql.AddParameter(cmd, "@DURATION_MINUTES" , nDURATION_MINUTES   );
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parREMINDER_TIME     = Sql.AddParameter(cmd, "@REMINDER_TIME"    , nREMINDER_TIME      );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parINVITEE_LIST      = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"     , sINVITEE_LIST       , 8000);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parTEAM_NAME         = Sql.AddParameter(cmd, "@TEAM_NAME"        , sTEAM_NAME          , 128);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdMEETINGS_Import
		/// <summary>
		/// spMEETINGS_Import
		/// </summary>
		public IDbCommand cmdMEETINGS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_Import";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parDATE_MODIFIED     = Sql.CreateParameter(cmd, "@DATE_MODIFIED"    , "DateTime",   8);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parLOCATION          = Sql.CreateParameter(cmd, "@LOCATION"         , "string",  50);
			IDbDataParameter parDURATION_HOURS    = Sql.CreateParameter(cmd, "@DURATION_HOURS"   , "Int32",   4);
			IDbDataParameter parDURATION_MINUTES  = Sql.CreateParameter(cmd, "@DURATION_MINUTES" , "Int32",   4);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parREMINDER_TIME     = Sql.CreateParameter(cmd, "@REMINDER_TIME"    , "Int32",   4);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parINVITEE_LIST      = Sql.CreateParameter(cmd, "@INVITEE_LIST"     , "ansistring", 8000);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parTEAM_NAME         = Sql.CreateParameter(cmd, "@TEAM_NAME"        , "string", 128);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spMEETINGS_InviteeMassUpdate
		/// <summary>
		/// spMEETINGS_InviteeMassUpdate
		/// </summary>
		public void spMEETINGS_InviteeMassUpdate(Guid gMEETING_ID, string sID_LIST, bool bREQUIRED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_InviteeMassUpdate";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_InviteeMassUpdate
		/// <summary>
		/// spMEETINGS_InviteeMassUpdate
		/// </summary>
		public void spMEETINGS_InviteeMassUpdate(Guid gMEETING_ID, string sID_LIST, bool bREQUIRED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_InviteeMassUpdate";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_InviteeMassUpdate
		/// <summary>
		/// spMEETINGS_InviteeMassUpdate
		/// </summary>
		public IDbCommand cmdMEETINGS_InviteeMassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_InviteeMassUpdate";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMEETING_ID       = Sql.CreateParameter(cmd, "@MEETING_ID"      , "Guid",  16);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			return cmd;
		}
		#endregion

		#region spMEETINGS_LEADS_Delete
		/// <summary>
		/// spMEETINGS_LEADS_Delete
		/// </summary>
		public void spMEETINGS_LEADS_Delete(Guid gMEETING_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_LEADS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_LEADS_Delete
		/// <summary>
		/// spMEETINGS_LEADS_Delete
		/// </summary>
		public void spMEETINGS_LEADS_Delete(Guid gMEETING_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_LEADS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_LEADS_Delete
		/// <summary>
		/// spMEETINGS_LEADS_Delete
		/// </summary>
		public IDbCommand cmdMEETINGS_LEADS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_LEADS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMEETING_ID       = Sql.CreateParameter(cmd, "@MEETING_ID"      , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_LEADS_Update
		/// <summary>
		/// spMEETINGS_LEADS_Update
		/// </summary>
		public void spMEETINGS_LEADS_Update(Guid gMEETING_ID, Guid gLEAD_ID, bool bREQUIRED, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_LEADS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_LEADS_Update
		/// <summary>
		/// spMEETINGS_LEADS_Update
		/// </summary>
		public void spMEETINGS_LEADS_Update(Guid gMEETING_ID, Guid gLEAD_ID, bool bREQUIRED, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_LEADS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_LEADS_Update
		/// <summary>
		/// spMEETINGS_LEADS_Update
		/// </summary>
		public IDbCommand cmdMEETINGS_LEADS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_LEADS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMEETING_ID       = Sql.CreateParameter(cmd, "@MEETING_ID"      , "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spMEETINGS_MassDelete
		/// <summary>
		/// spMEETINGS_MassDelete
		/// </summary>
		public void spMEETINGS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_MassDelete
		/// <summary>
		/// spMEETINGS_MassDelete
		/// </summary>
		public void spMEETINGS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_MassDelete
		/// <summary>
		/// spMEETINGS_MassDelete
		/// </summary>
		public IDbCommand cmdMEETINGS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_MassUpdate
		/// <summary>
		/// spMEETINGS_MassUpdate
		/// </summary>
		public void spMEETINGS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, DateTime dtDATE_TIME, string sSTATUS, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_MassUpdate
		/// <summary>
		/// spMEETINGS_MassUpdate
		/// </summary>
		public void spMEETINGS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, DateTime dtDATE_TIME, string sSTATUS, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_MassUpdate
		/// <summary>
		/// spMEETINGS_MassUpdate
		/// </summary>
		public IDbCommand cmdMEETINGS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spMEETINGS_New
		/// <summary>
		/// spMEETINGS_New
		/// </summary>
		public void spMEETINGS_New(ref Guid gID, string sNAME, DateTime dtDATE_TIME, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_New
		/// <summary>
		/// spMEETINGS_New
		/// </summary>
		public void spMEETINGS_New(ref Guid gID, string sNAME, DateTime dtDATE_TIME, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdMEETINGS_New
		/// <summary>
		/// spMEETINGS_New
		/// </summary>
		public IDbCommand cmdMEETINGS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spMEETINGS_SmsReminderSent
		/// <summary>
		/// spMEETINGS_SmsReminderSent
		/// </summary>
		public void spMEETINGS_SmsReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_SmsReminderSent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_SmsReminderSent
		/// <summary>
		/// spMEETINGS_SmsReminderSent
		/// </summary>
		public void spMEETINGS_SmsReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_SmsReminderSent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_SmsReminderSent
		/// <summary>
		/// spMEETINGS_SmsReminderSent
		/// </summary>
		public IDbCommand cmdMEETINGS_SmsReminderSent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_SmsReminderSent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_Undelete
		/// <summary>
		/// spMEETINGS_Undelete
		/// </summary>
		public void spMEETINGS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_Undelete
		/// <summary>
		/// spMEETINGS_Undelete
		/// </summary>
		public void spMEETINGS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_Undelete
		/// <summary>
		/// spMEETINGS_Undelete
		/// </summary>
		public IDbCommand cmdMEETINGS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spMEETINGS_Update
		/// <summary>
		/// spMEETINGS_Update
		/// </summary>
		public void spMEETINGS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sLOCATION, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sSTATUS, string sPARENT_TYPE, Guid gPARENT_ID, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, Int32 nEMAIL_REMINDER_TIME, bool bALL_DAY_EVENT, string sREPEAT_TYPE, Int32 nREPEAT_INTERVAL, string sREPEAT_DOW, DateTime dtREPEAT_UNTIL, Int32 nREPEAT_COUNT, Int32 nSMS_REMINDER_TIME, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 , 150);
							IDbDataParameter parLOCATION            = Sql.AddParameter(cmd, "@LOCATION"           , sLOCATION             ,  50);
							IDbDataParameter parDURATION_HOURS      = Sql.AddParameter(cmd, "@DURATION_HOURS"     , nDURATION_HOURS       );
							IDbDataParameter parDURATION_MINUTES    = Sql.AddParameter(cmd, "@DURATION_MINUTES"   , nDURATION_MINUTES     );
							IDbDataParameter parDATE_TIME           = Sql.AddParameter(cmd, "@DATE_TIME"          , dtDATE_TIME           );
							IDbDataParameter parSTATUS              = Sql.AddParameter(cmd, "@STATUS"             , sSTATUS               ,  25);
							IDbDataParameter parPARENT_TYPE         = Sql.AddParameter(cmd, "@PARENT_TYPE"        , sPARENT_TYPE          ,  25);
							IDbDataParameter parPARENT_ID           = Sql.AddParameter(cmd, "@PARENT_ID"          , gPARENT_ID            );
							IDbDataParameter parREMINDER_TIME       = Sql.AddParameter(cmd, "@REMINDER_TIME"      , nREMINDER_TIME        );
							IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
							IDbDataParameter parINVITEE_LIST        = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"       , sINVITEE_LIST         , 8000);
							IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
							IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
							IDbDataParameter parEMAIL_REMINDER_TIME = Sql.AddParameter(cmd, "@EMAIL_REMINDER_TIME", nEMAIL_REMINDER_TIME  );
							IDbDataParameter parALL_DAY_EVENT       = Sql.AddParameter(cmd, "@ALL_DAY_EVENT"      , bALL_DAY_EVENT        );
							IDbDataParameter parREPEAT_TYPE         = Sql.AddParameter(cmd, "@REPEAT_TYPE"        , sREPEAT_TYPE          ,  25);
							IDbDataParameter parREPEAT_INTERVAL     = Sql.AddParameter(cmd, "@REPEAT_INTERVAL"    , nREPEAT_INTERVAL      );
							IDbDataParameter parREPEAT_DOW          = Sql.AddParameter(cmd, "@REPEAT_DOW"         , sREPEAT_DOW           ,   7);
							IDbDataParameter parREPEAT_UNTIL        = Sql.AddParameter(cmd, "@REPEAT_UNTIL"       , dtREPEAT_UNTIL        );
							IDbDataParameter parREPEAT_COUNT        = Sql.AddParameter(cmd, "@REPEAT_COUNT"       , nREPEAT_COUNT         );
							IDbDataParameter parSMS_REMINDER_TIME   = Sql.AddParameter(cmd, "@SMS_REMINDER_TIME"  , nSMS_REMINDER_TIME    );
							IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
							IDbDataParameter parIS_PRIVATE          = Sql.AddParameter(cmd, "@IS_PRIVATE"         , bIS_PRIVATE           );
							IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_Update
		/// <summary>
		/// spMEETINGS_Update
		/// </summary>
		public void spMEETINGS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sLOCATION, Int32 nDURATION_HOURS, Int32 nDURATION_MINUTES, DateTime dtDATE_TIME, string sSTATUS, string sPARENT_TYPE, Guid gPARENT_ID, Int32 nREMINDER_TIME, string sDESCRIPTION, string sINVITEE_LIST, Guid gTEAM_ID, string sTEAM_SET_LIST, Int32 nEMAIL_REMINDER_TIME, bool bALL_DAY_EVENT, string sREPEAT_TYPE, Int32 nREPEAT_INTERVAL, string sREPEAT_DOW, DateTime dtREPEAT_UNTIL, Int32 nREPEAT_COUNT, Int32 nSMS_REMINDER_TIME, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 , 150);
				IDbDataParameter parLOCATION            = Sql.AddParameter(cmd, "@LOCATION"           , sLOCATION             ,  50);
				IDbDataParameter parDURATION_HOURS      = Sql.AddParameter(cmd, "@DURATION_HOURS"     , nDURATION_HOURS       );
				IDbDataParameter parDURATION_MINUTES    = Sql.AddParameter(cmd, "@DURATION_MINUTES"   , nDURATION_MINUTES     );
				IDbDataParameter parDATE_TIME           = Sql.AddParameter(cmd, "@DATE_TIME"          , dtDATE_TIME           );
				IDbDataParameter parSTATUS              = Sql.AddParameter(cmd, "@STATUS"             , sSTATUS               ,  25);
				IDbDataParameter parPARENT_TYPE         = Sql.AddParameter(cmd, "@PARENT_TYPE"        , sPARENT_TYPE          ,  25);
				IDbDataParameter parPARENT_ID           = Sql.AddParameter(cmd, "@PARENT_ID"          , gPARENT_ID            );
				IDbDataParameter parREMINDER_TIME       = Sql.AddParameter(cmd, "@REMINDER_TIME"      , nREMINDER_TIME        );
				IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
				IDbDataParameter parINVITEE_LIST        = Sql.AddAnsiParam(cmd, "@INVITEE_LIST"       , sINVITEE_LIST         , 8000);
				IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
				IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
				IDbDataParameter parEMAIL_REMINDER_TIME = Sql.AddParameter(cmd, "@EMAIL_REMINDER_TIME", nEMAIL_REMINDER_TIME  );
				IDbDataParameter parALL_DAY_EVENT       = Sql.AddParameter(cmd, "@ALL_DAY_EVENT"      , bALL_DAY_EVENT        );
				IDbDataParameter parREPEAT_TYPE         = Sql.AddParameter(cmd, "@REPEAT_TYPE"        , sREPEAT_TYPE          ,  25);
				IDbDataParameter parREPEAT_INTERVAL     = Sql.AddParameter(cmd, "@REPEAT_INTERVAL"    , nREPEAT_INTERVAL      );
				IDbDataParameter parREPEAT_DOW          = Sql.AddParameter(cmd, "@REPEAT_DOW"         , sREPEAT_DOW           ,   7);
				IDbDataParameter parREPEAT_UNTIL        = Sql.AddParameter(cmd, "@REPEAT_UNTIL"       , dtREPEAT_UNTIL        );
				IDbDataParameter parREPEAT_COUNT        = Sql.AddParameter(cmd, "@REPEAT_COUNT"       , nREPEAT_COUNT         );
				IDbDataParameter parSMS_REMINDER_TIME   = Sql.AddParameter(cmd, "@SMS_REMINDER_TIME"  , nSMS_REMINDER_TIME    );
				IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
				IDbDataParameter parIS_PRIVATE          = Sql.AddParameter(cmd, "@IS_PRIVATE"         , bIS_PRIVATE           );
				IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdMEETINGS_Update
		/// <summary>
		/// spMEETINGS_Update
		/// </summary>
		public IDbCommand cmdMEETINGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID    = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"   , "Guid",  16);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string", 150);
			IDbDataParameter parLOCATION            = Sql.CreateParameter(cmd, "@LOCATION"           , "string",  50);
			IDbDataParameter parDURATION_HOURS      = Sql.CreateParameter(cmd, "@DURATION_HOURS"     , "Int32",   4);
			IDbDataParameter parDURATION_MINUTES    = Sql.CreateParameter(cmd, "@DURATION_MINUTES"   , "Int32",   4);
			IDbDataParameter parDATE_TIME           = Sql.CreateParameter(cmd, "@DATE_TIME"          , "DateTime",   8);
			IDbDataParameter parSTATUS              = Sql.CreateParameter(cmd, "@STATUS"             , "string",  25);
			IDbDataParameter parPARENT_TYPE         = Sql.CreateParameter(cmd, "@PARENT_TYPE"        , "string",  25);
			IDbDataParameter parPARENT_ID           = Sql.CreateParameter(cmd, "@PARENT_ID"          , "Guid",  16);
			IDbDataParameter parREMINDER_TIME       = Sql.CreateParameter(cmd, "@REMINDER_TIME"      , "Int32",   4);
			IDbDataParameter parDESCRIPTION         = Sql.CreateParameter(cmd, "@DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parINVITEE_LIST        = Sql.CreateParameter(cmd, "@INVITEE_LIST"       , "ansistring", 8000);
			IDbDataParameter parTEAM_ID             = Sql.CreateParameter(cmd, "@TEAM_ID"            , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST       = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"      , "ansistring", 8000);
			IDbDataParameter parEMAIL_REMINDER_TIME = Sql.CreateParameter(cmd, "@EMAIL_REMINDER_TIME", "Int32",   4);
			IDbDataParameter parALL_DAY_EVENT       = Sql.CreateParameter(cmd, "@ALL_DAY_EVENT"      , "bool",   1);
			IDbDataParameter parREPEAT_TYPE         = Sql.CreateParameter(cmd, "@REPEAT_TYPE"        , "string",  25);
			IDbDataParameter parREPEAT_INTERVAL     = Sql.CreateParameter(cmd, "@REPEAT_INTERVAL"    , "Int32",   4);
			IDbDataParameter parREPEAT_DOW          = Sql.CreateParameter(cmd, "@REPEAT_DOW"         , "string",   7);
			IDbDataParameter parREPEAT_UNTIL        = Sql.CreateParameter(cmd, "@REPEAT_UNTIL"       , "DateTime",   8);
			IDbDataParameter parREPEAT_COUNT        = Sql.CreateParameter(cmd, "@REPEAT_COUNT"       , "Int32",   4);
			IDbDataParameter parSMS_REMINDER_TIME   = Sql.CreateParameter(cmd, "@SMS_REMINDER_TIME"  , "Int32",   4);
			IDbDataParameter parTAG_SET_NAME        = Sql.CreateParameter(cmd, "@TAG_SET_NAME"       , "string", 4000);
			IDbDataParameter parIS_PRIVATE          = Sql.CreateParameter(cmd, "@IS_PRIVATE"         , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST   = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"  , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spMEETINGS_UpdateAcceptStatus
		/// <summary>
		/// spMEETINGS_UpdateAcceptStatus
		/// </summary>
		public void spMEETINGS_UpdateAcceptStatus(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_UpdateAcceptStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_UpdateAcceptStatus
		/// <summary>
		/// spMEETINGS_UpdateAcceptStatus
		/// </summary>
		public void spMEETINGS_UpdateAcceptStatus(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_UpdateAcceptStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_UpdateAcceptStatus
		/// <summary>
		/// spMEETINGS_UpdateAcceptStatus
		/// </summary>
		public IDbCommand cmdMEETINGS_UpdateAcceptStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_UpdateAcceptStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spMEETINGS_USERS_Delete
		/// <summary>
		/// spMEETINGS_USERS_Delete
		/// </summary>
		public void spMEETINGS_USERS_Delete(Guid gMEETING_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_USERS_Delete
		/// <summary>
		/// spMEETINGS_USERS_Delete
		/// </summary>
		public void spMEETINGS_USERS_Delete(Guid gMEETING_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_USERS_Delete
		/// <summary>
		/// spMEETINGS_USERS_Delete
		/// </summary>
		public IDbCommand cmdMEETINGS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMEETING_ID       = Sql.CreateParameter(cmd, "@MEETING_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMEETINGS_USERS_Update
		/// <summary>
		/// spMEETINGS_USERS_Update
		/// </summary>
		public void spMEETINGS_USERS_Update(Guid gMEETING_ID, Guid gUSER_ID, bool bREQUIRED, string sACCEPT_STATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMEETINGS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
							IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMEETINGS_USERS_Update
		/// <summary>
		/// spMEETINGS_USERS_Update
		/// </summary>
		public void spMEETINGS_USERS_Update(Guid gMEETING_ID, Guid gUSER_ID, bool bREQUIRED, string sACCEPT_STATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMEETINGS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMEETING_ID       = Sql.AddParameter(cmd, "@MEETING_ID"      , gMEETING_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parREQUIRED         = Sql.AddParameter(cmd, "@REQUIRED"        , bREQUIRED          );
				IDbDataParameter parACCEPT_STATUS    = Sql.AddParameter(cmd, "@ACCEPT_STATUS"   , sACCEPT_STATUS     ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMEETINGS_USERS_Update
		/// <summary>
		/// spMEETINGS_USERS_Update
		/// </summary>
		public IDbCommand cmdMEETINGS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMEETINGS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMEETING_ID       = Sql.CreateParameter(cmd, "@MEETING_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parREQUIRED         = Sql.CreateParameter(cmd, "@REQUIRED"        , "bool",   1);
			IDbDataParameter parACCEPT_STATUS    = Sql.CreateParameter(cmd, "@ACCEPT_STATUS"   , "string",  25);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_LOG_InsertList
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertList
		/// </summary>
		public void spMODULES_ARCHIVE_LOG_InsertList(string sTABLE_NAME, string sARCHIVE_ACTION, string sID_LIST, Guid gARCHIVE_RULE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertLi";
							else
								cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertList";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  50);
							IDbDataParameter parARCHIVE_ACTION   = Sql.AddParameter(cmd, "@ARCHIVE_ACTION"  , sARCHIVE_ACTION    ,  25);
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
							IDbDataParameter parARCHIVE_RULE_ID  = Sql.AddParameter(cmd, "@ARCHIVE_RULE_ID" , gARCHIVE_RULE_ID   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_LOG_InsertList
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertList
		/// </summary>
		public void spMODULES_ARCHIVE_LOG_InsertList(string sTABLE_NAME, string sARCHIVE_ACTION, string sID_LIST, Guid gARCHIVE_RULE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertLi";
				else
					cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertList";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  50);
				IDbDataParameter parARCHIVE_ACTION   = Sql.AddParameter(cmd, "@ARCHIVE_ACTION"  , sARCHIVE_ACTION    ,  25);
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
				IDbDataParameter parARCHIVE_RULE_ID  = Sql.AddParameter(cmd, "@ARCHIVE_RULE_ID" , gARCHIVE_RULE_ID   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_LOG_InsertList
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertList
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_LOG_InsertList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertLi";
			else
				cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertList";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  50);
			IDbDataParameter parARCHIVE_ACTION   = Sql.CreateParameter(cmd, "@ARCHIVE_ACTION"  , "string",  25);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 104857600);
			IDbDataParameter parARCHIVE_RULE_ID  = Sql.CreateParameter(cmd, "@ARCHIVE_RULE_ID" , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_LOG_InsertOnly
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertOnly
		/// </summary>
		public void spMODULES_ARCHIVE_LOG_InsertOnly(string sTABLE_NAME, string sARCHIVE_ACTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertOn";
							else
								cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  50);
							IDbDataParameter parARCHIVE_ACTION   = Sql.AddParameter(cmd, "@ARCHIVE_ACTION"  , sARCHIVE_ACTION    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_LOG_InsertOnly
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertOnly
		/// </summary>
		public void spMODULES_ARCHIVE_LOG_InsertOnly(string sTABLE_NAME, string sARCHIVE_ACTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertOn";
				else
					cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  50);
				IDbDataParameter parARCHIVE_ACTION   = Sql.AddParameter(cmd, "@ARCHIVE_ACTION"  , sARCHIVE_ACTION    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_LOG_InsertOnly
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertOn";
			else
				cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  50);
			IDbDataParameter parARCHIVE_ACTION   = Sql.CreateParameter(cmd, "@ARCHIVE_ACTION"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_LOG_InsertRule
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertRule
		/// </summary>
		public void spMODULES_ARCHIVE_LOG_InsertRule(Guid gARCHIVE_RULE_ID, string sMODULE_NAME, string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertRu";
							else
								cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertRule";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parARCHIVE_RULE_ID  = Sql.AddParameter(cmd, "@ARCHIVE_RULE_ID" , gARCHIVE_RULE_ID   );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_LOG_InsertRule
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertRule
		/// </summary>
		public void spMODULES_ARCHIVE_LOG_InsertRule(Guid gARCHIVE_RULE_ID, string sMODULE_NAME, string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertRu";
				else
					cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertRule";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parARCHIVE_RULE_ID  = Sql.AddParameter(cmd, "@ARCHIVE_RULE_ID" , gARCHIVE_RULE_ID   );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_LOG_InsertRule
		/// <summary>
		/// spMODULES_ARCHIVE_LOG_InsertRule
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_LOG_InsertRule(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertRu";
			else
				cmd.CommandText = "spMODULES_ARCHIVE_LOG_InsertRule";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parARCHIVE_RULE_ID  = Sql.CreateParameter(cmd, "@ARCHIVE_RULE_ID" , "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  50);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_RELATED_Delete
		/// <summary>
		/// spMODULES_ARCHIVE_RELATED_Delete
		/// </summary>
		public void spMODULES_ARCHIVE_RELATED_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Dele";
							else
								cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_RELATED_Delete
		/// <summary>
		/// spMODULES_ARCHIVE_RELATED_Delete
		/// </summary>
		public void spMODULES_ARCHIVE_RELATED_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Dele";
				else
					cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_RELATED_Delete
		/// <summary>
		/// spMODULES_ARCHIVE_RELATED_Delete
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_RELATED_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Dele";
			else
				cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_RELATED_InsertOnly
		/// <summary>
		/// spMODULES_ARCHIVE_RELATED_InsertOnly
		/// </summary>
		public void spMODULES_ARCHIVE_RELATED_InsertOnly(string sMODULE_NAME, string sRELATED_NAME, Int32 nRELATED_ORDER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Inse";
							else
								cmd.CommandText = "spMODULES_ARCHIVE_RELATED_InsertOnly";
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							IDbDataParameter parRELATED_NAME  = Sql.AddParameter(cmd, "@RELATED_NAME" , sRELATED_NAME   ,  25);
							IDbDataParameter parRELATED_ORDER = Sql.AddParameter(cmd, "@RELATED_ORDER", nRELATED_ORDER  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_RELATED_InsertOnly
		/// <summary>
		/// spMODULES_ARCHIVE_RELATED_InsertOnly
		/// </summary>
		public void spMODULES_ARCHIVE_RELATED_InsertOnly(string sMODULE_NAME, string sRELATED_NAME, Int32 nRELATED_ORDER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Inse";
				else
					cmd.CommandText = "spMODULES_ARCHIVE_RELATED_InsertOnly";
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				IDbDataParameter parRELATED_NAME  = Sql.AddParameter(cmd, "@RELATED_NAME" , sRELATED_NAME   ,  25);
				IDbDataParameter parRELATED_ORDER = Sql.AddParameter(cmd, "@RELATED_ORDER", nRELATED_ORDER  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_RELATED_InsertOnly
		/// <summary>
		/// spMODULES_ARCHIVE_RELATED_InsertOnly
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_RELATED_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ARCHIVE_RELATED_Inse";
			else
				cmd.CommandText = "spMODULES_ARCHIVE_RELATED_InsertOnly";
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			IDbDataParameter parRELATED_NAME  = Sql.CreateParameter(cmd, "@RELATED_NAME" , "string",  25);
			IDbDataParameter parRELATED_ORDER = Sql.CreateParameter(cmd, "@RELATED_ORDER", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_Delete
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Delete
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ARCHIVE_RULES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_Delete
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Delete
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ARCHIVE_RULES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_RULES_Delete
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Delete
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_RULES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ARCHIVE_RULES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_Run
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Run
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_Run(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ARCHIVE_RULES_Run";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_Run
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Run
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_Run(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ARCHIVE_RULES_Run";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_RULES_Run
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Run
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_RULES_Run(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ARCHIVE_RULES_Run";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_RunAll
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_RunAll
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_RunAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ARCHIVE_RULES_RunAll";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_RunAll
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_RunAll
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_RunAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ARCHIVE_RULES_RunAll";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_RULES_RunAll
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_RunAll
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_RULES_RunAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ARCHIVE_RULES_RunAll";
			return cmd;
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_Update
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Update
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_Update(ref Guid gID, string sNAME, string sMODULE_NAME, bool bSTATUS, string sDESCRIPTION, string sFILTER_SQL, string sFILTER_XML)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ARCHIVE_RULES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , bSTATUS            );
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							IDbDataParameter parFILTER_SQL       = Sql.AddParameter(cmd, "@FILTER_SQL"      , sFILTER_SQL        );
							IDbDataParameter parFILTER_XML       = Sql.AddParameter(cmd, "@FILTER_XML"      , sFILTER_XML        );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ARCHIVE_RULES_Update
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Update
		/// </summary>
		public void spMODULES_ARCHIVE_RULES_Update(ref Guid gID, string sNAME, string sMODULE_NAME, bool bSTATUS, string sDESCRIPTION, string sFILTER_SQL, string sFILTER_XML, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ARCHIVE_RULES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , bSTATUS            );
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				IDbDataParameter parFILTER_SQL       = Sql.AddParameter(cmd, "@FILTER_SQL"      , sFILTER_SQL        );
				IDbDataParameter parFILTER_XML       = Sql.AddParameter(cmd, "@FILTER_XML"      , sFILTER_XML        );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdMODULES_ARCHIVE_RULES_Update
		/// <summary>
		/// spMODULES_ARCHIVE_RULES_Update
		/// </summary>
		public IDbCommand cmdMODULES_ARCHIVE_RULES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ARCHIVE_RULES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "bool",   1);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			IDbDataParameter parFILTER_SQL       = Sql.CreateParameter(cmd, "@FILTER_SQL"      , "string", 104857600);
			IDbDataParameter parFILTER_XML       = Sql.CreateParameter(cmd, "@FILTER_XML"      , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveBuild
		/// <summary>
		/// spMODULES_ArchiveBuild
		/// </summary>
		public void spMODULES_ArchiveBuild(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ArchiveBuild";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveBuild
		/// <summary>
		/// spMODULES_ArchiveBuild
		/// </summary>
		public void spMODULES_ArchiveBuild(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ArchiveBuild";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveBuild
		/// <summary>
		/// spMODULES_ArchiveBuild
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveBuild(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ArchiveBuild";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveBuildActivities
		/// <summary>
		/// spMODULES_ArchiveBuildActivities
		/// </summary>
		public void spMODULES_ArchiveBuildActivities()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ArchiveBuildActiviti";
							else
								cmd.CommandText = "spMODULES_ArchiveBuildActivities";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveBuildActivities
		/// <summary>
		/// spMODULES_ArchiveBuildActivities
		/// </summary>
		public void spMODULES_ArchiveBuildActivities(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ArchiveBuildActiviti";
				else
					cmd.CommandText = "spMODULES_ArchiveBuildActivities";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveBuildActivities
		/// <summary>
		/// spMODULES_ArchiveBuildActivities
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveBuildActivities(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ArchiveBuildActiviti";
			else
				cmd.CommandText = "spMODULES_ArchiveBuildActivities";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveBuildAll
		/// <summary>
		/// spMODULES_ArchiveBuildAll
		/// </summary>
		public void spMODULES_ArchiveBuildAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ArchiveBuildAll";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveBuildAll
		/// <summary>
		/// spMODULES_ArchiveBuildAll
		/// </summary>
		public void spMODULES_ArchiveBuildAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ArchiveBuildAll";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveBuildAll
		/// <summary>
		/// spMODULES_ArchiveBuildAll
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveBuildAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ArchiveBuildAll";
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveBuildAllViews
		/// <summary>
		/// spMODULES_ArchiveBuildAllViews
		/// </summary>
		public void spMODULES_ArchiveBuildAllViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ArchiveBuildAllViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveBuildAllViews
		/// <summary>
		/// spMODULES_ArchiveBuildAllViews
		/// </summary>
		public void spMODULES_ArchiveBuildAllViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ArchiveBuildAllViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveBuildAllViews
		/// <summary>
		/// spMODULES_ArchiveBuildAllViews
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveBuildAllViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ArchiveBuildAllViews";
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveBuildByName
		/// <summary>
		/// spMODULES_ArchiveBuildByName
		/// </summary>
		public void spMODULES_ArchiveBuildByName(string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ArchiveBuildByName";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveBuildByName
		/// <summary>
		/// spMODULES_ArchiveBuildByName
		/// </summary>
		public void spMODULES_ArchiveBuildByName(string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ArchiveBuildByName";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveBuildByName
		/// <summary>
		/// spMODULES_ArchiveBuildByName
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveBuildByName(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ArchiveBuildByName";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveBuildView
		/// <summary>
		/// spMODULES_ArchiveBuildView
		/// </summary>
		public void spMODULES_ArchiveBuildView(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ArchiveBuildView";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveBuildView
		/// <summary>
		/// spMODULES_ArchiveBuildView
		/// </summary>
		public void spMODULES_ArchiveBuildView(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ArchiveBuildView";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveBuildView
		/// <summary>
		/// spMODULES_ArchiveBuildView
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveBuildView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ArchiveBuildView";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveMoveActivities
		/// <summary>
		/// spMODULES_ArchiveMoveActivities
		/// </summary>
		public void spMODULES_ArchiveMoveActivities(string sMODULE_NAME, string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ArchiveMoveActivitie";
							else
								cmd.CommandText = "spMODULES_ArchiveMoveActivities";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveMoveActivities
		/// <summary>
		/// spMODULES_ArchiveMoveActivities
		/// </summary>
		public void spMODULES_ArchiveMoveActivities(string sMODULE_NAME, string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ArchiveMoveActivitie";
				else
					cmd.CommandText = "spMODULES_ArchiveMoveActivities";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveMoveActivities
		/// <summary>
		/// spMODULES_ArchiveMoveActivities
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveMoveActivities(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ArchiveMoveActivitie";
			else
				cmd.CommandText = "spMODULES_ArchiveMoveActivities";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 104857600);
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveMoveData
		/// <summary>
		/// spMODULES_ArchiveMoveData
		/// </summary>
		public void spMODULES_ArchiveMoveData(string sMODULE_NAME, string sID_LIST, Guid gARCHIVE_RULE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ArchiveMoveData";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
							IDbDataParameter parARCHIVE_RULE_ID  = Sql.AddParameter(cmd, "@ARCHIVE_RULE_ID" , gARCHIVE_RULE_ID   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveMoveData
		/// <summary>
		/// spMODULES_ArchiveMoveData
		/// </summary>
		public void spMODULES_ArchiveMoveData(string sMODULE_NAME, string sID_LIST, Guid gARCHIVE_RULE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ArchiveMoveData";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
				IDbDataParameter parARCHIVE_RULE_ID  = Sql.AddParameter(cmd, "@ARCHIVE_RULE_ID" , gARCHIVE_RULE_ID   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveMoveData
		/// <summary>
		/// spMODULES_ArchiveMoveData
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveMoveData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ArchiveMoveData";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 104857600);
			IDbDataParameter parARCHIVE_RULE_ID  = Sql.CreateParameter(cmd, "@ARCHIVE_RULE_ID" , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveRecoverActivities
		/// <summary>
		/// spMODULES_ArchiveRecoverActivities
		/// </summary>
		public void spMODULES_ArchiveRecoverActivities(string sMODULE_NAME, string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spMODULES_ArchiveRecoverActivi";
							else
								cmd.CommandText = "spMODULES_ArchiveRecoverActivities";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveRecoverActivities
		/// <summary>
		/// spMODULES_ArchiveRecoverActivities
		/// </summary>
		public void spMODULES_ArchiveRecoverActivities(string sMODULE_NAME, string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spMODULES_ArchiveRecoverActivi";
				else
					cmd.CommandText = "spMODULES_ArchiveRecoverActivities";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveRecoverActivities
		/// <summary>
		/// spMODULES_ArchiveRecoverActivities
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveRecoverActivities(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spMODULES_ArchiveRecoverActivi";
			else
				cmd.CommandText = "spMODULES_ArchiveRecoverActivities";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 104857600);
			return cmd;
		}
		#endregion

		#region spMODULES_ArchiveRecoverData
		/// <summary>
		/// spMODULES_ArchiveRecoverData
		/// </summary>
		public void spMODULES_ArchiveRecoverData(string sMODULE_NAME, string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_ArchiveRecoverData";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_ArchiveRecoverData
		/// <summary>
		/// spMODULES_ArchiveRecoverData
		/// </summary>
		public void spMODULES_ArchiveRecoverData(string sMODULE_NAME, string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_ArchiveRecoverData";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_ArchiveRecoverData
		/// <summary>
		/// spMODULES_ArchiveRecoverData
		/// </summary>
		public IDbCommand cmdMODULES_ArchiveRecoverData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_ArchiveRecoverData";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 104857600);
			return cmd;
		}
		#endregion

		#region spMODULES_Delete
		/// <summary>
		/// spMODULES_Delete
		/// </summary>
		public void spMODULES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Delete
		/// <summary>
		/// spMODULES_Delete
		/// </summary>
		public void spMODULES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Delete
		/// <summary>
		/// spMODULES_Delete
		/// </summary>
		public IDbCommand cmdMODULES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_Disable
		/// <summary>
		/// spMODULES_Disable
		/// </summary>
		public void spMODULES_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Disable
		/// <summary>
		/// spMODULES_Disable
		/// </summary>
		public void spMODULES_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Disable
		/// <summary>
		/// spMODULES_Disable
		/// </summary>
		public IDbCommand cmdMODULES_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_Enable
		/// <summary>
		/// spMODULES_Enable
		/// </summary>
		public void spMODULES_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Enable
		/// <summary>
		/// spMODULES_Enable
		/// </summary>
		public void spMODULES_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Enable
		/// <summary>
		/// spMODULES_Enable
		/// </summary>
		public IDbCommand cmdMODULES_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_GlobalCustomPaging
		/// <summary>
		/// spMODULES_GlobalCustomPaging
		/// </summary>
		public void spMODULES_GlobalCustomPaging()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_GlobalCustomPaging";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_GlobalCustomPaging
		/// <summary>
		/// spMODULES_GlobalCustomPaging
		/// </summary>
		public void spMODULES_GlobalCustomPaging(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_GlobalCustomPaging";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_GlobalCustomPaging
		/// <summary>
		/// spMODULES_GlobalCustomPaging
		/// </summary>
		public IDbCommand cmdMODULES_GlobalCustomPaging(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_GlobalCustomPaging";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_GROUPS_Delete
		/// <summary>
		/// spMODULES_GROUPS_Delete
		/// </summary>
		public void spMODULES_GROUPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_GROUPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_GROUPS_Delete
		/// <summary>
		/// spMODULES_GROUPS_Delete
		/// </summary>
		public void spMODULES_GROUPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_GROUPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_GROUPS_Delete
		/// <summary>
		/// spMODULES_GROUPS_Delete
		/// </summary>
		public IDbCommand cmdMODULES_GROUPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_GROUPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_GROUPS_InsertOnly
		/// <summary>
		/// spMODULES_GROUPS_InsertOnly
		/// </summary>
		public void spMODULES_GROUPS_InsertOnly(string sGROUP_NAME, string sMODULE_NAME, Int32 nMODULE_ORDER, bool bMODULE_MENU)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_GROUPS_InsertOnly";
							IDbDataParameter parGROUP_NAME   = Sql.AddParameter(cmd, "@GROUP_NAME"  , sGROUP_NAME    ,  25);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  50);
							IDbDataParameter parMODULE_ORDER = Sql.AddParameter(cmd, "@MODULE_ORDER", nMODULE_ORDER  );
							IDbDataParameter parMODULE_MENU  = Sql.AddParameter(cmd, "@MODULE_MENU" , bMODULE_MENU   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_GROUPS_InsertOnly
		/// <summary>
		/// spMODULES_GROUPS_InsertOnly
		/// </summary>
		public void spMODULES_GROUPS_InsertOnly(string sGROUP_NAME, string sMODULE_NAME, Int32 nMODULE_ORDER, bool bMODULE_MENU, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_GROUPS_InsertOnly";
				IDbDataParameter parGROUP_NAME   = Sql.AddParameter(cmd, "@GROUP_NAME"  , sGROUP_NAME    ,  25);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  50);
				IDbDataParameter parMODULE_ORDER = Sql.AddParameter(cmd, "@MODULE_ORDER", nMODULE_ORDER  );
				IDbDataParameter parMODULE_MENU  = Sql.AddParameter(cmd, "@MODULE_MENU" , bMODULE_MENU   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_GROUPS_InsertOnly
		/// <summary>
		/// spMODULES_GROUPS_InsertOnly
		/// </summary>
		public IDbCommand cmdMODULES_GROUPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_GROUPS_InsertOnly";
			IDbDataParameter parGROUP_NAME   = Sql.CreateParameter(cmd, "@GROUP_NAME"  , "string",  25);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  50);
			IDbDataParameter parMODULE_ORDER = Sql.CreateParameter(cmd, "@MODULE_ORDER", "Int32",   4);
			IDbDataParameter parMODULE_MENU  = Sql.CreateParameter(cmd, "@MODULE_MENU" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spMODULES_GROUPS_Update
		/// <summary>
		/// spMODULES_GROUPS_Update
		/// </summary>
		public void spMODULES_GROUPS_Update(string sGROUP_NAME, string sMODULE_NAME, Int32 nMODULE_ORDER, bool bMODULE_MENU)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_GROUPS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parGROUP_NAME       = Sql.AddParameter(cmd, "@GROUP_NAME"      , sGROUP_NAME        ,  25);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parMODULE_ORDER     = Sql.AddParameter(cmd, "@MODULE_ORDER"    , nMODULE_ORDER      );
							IDbDataParameter parMODULE_MENU      = Sql.AddParameter(cmd, "@MODULE_MENU"     , bMODULE_MENU       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_GROUPS_Update
		/// <summary>
		/// spMODULES_GROUPS_Update
		/// </summary>
		public void spMODULES_GROUPS_Update(string sGROUP_NAME, string sMODULE_NAME, Int32 nMODULE_ORDER, bool bMODULE_MENU, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_GROUPS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parGROUP_NAME       = Sql.AddParameter(cmd, "@GROUP_NAME"      , sGROUP_NAME        ,  25);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parMODULE_ORDER     = Sql.AddParameter(cmd, "@MODULE_ORDER"    , nMODULE_ORDER      );
				IDbDataParameter parMODULE_MENU      = Sql.AddParameter(cmd, "@MODULE_MENU"     , bMODULE_MENU       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_GROUPS_Update
		/// <summary>
		/// spMODULES_GROUPS_Update
		/// </summary>
		public IDbCommand cmdMODULES_GROUPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_GROUPS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parGROUP_NAME       = Sql.CreateParameter(cmd, "@GROUP_NAME"      , "string",  25);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parMODULE_ORDER     = Sql.CreateParameter(cmd, "@MODULE_ORDER"    , "Int32",   4);
			IDbDataParameter parMODULE_MENU      = Sql.CreateParameter(cmd, "@MODULE_MENU"     , "bool",   1);
			return cmd;
		}
		#endregion

		#region spMODULES_InsertOnly
		/// <summary>
		/// spMODULES_InsertOnly
		/// </summary>
		public void spMODULES_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bIS_ADMIN, string sTABLE_NAME, bool bMOBILE_ENABLED, bool bMASS_UPDATE_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
							IDbDataParameter parMODULE_NAME            = Sql.AddParameter(cmd, "@MODULE_NAME"           , sMODULE_NAME             ,  25);
							IDbDataParameter parDISPLAY_NAME           = Sql.AddParameter(cmd, "@DISPLAY_NAME"          , sDISPLAY_NAME            ,  50);
							IDbDataParameter parRELATIVE_PATH          = Sql.AddParameter(cmd, "@RELATIVE_PATH"         , sRELATIVE_PATH           ,  50);
							IDbDataParameter parMODULE_ENABLED         = Sql.AddParameter(cmd, "@MODULE_ENABLED"        , bMODULE_ENABLED          );
							IDbDataParameter parTAB_ENABLED            = Sql.AddParameter(cmd, "@TAB_ENABLED"           , bTAB_ENABLED             );
							IDbDataParameter parTAB_ORDER              = Sql.AddParameter(cmd, "@TAB_ORDER"             , nTAB_ORDER               );
							IDbDataParameter parPORTAL_ENABLED         = Sql.AddParameter(cmd, "@PORTAL_ENABLED"        , bPORTAL_ENABLED          );
							IDbDataParameter parCUSTOM_ENABLED         = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"        , bCUSTOM_ENABLED          );
							IDbDataParameter parREPORT_ENABLED         = Sql.AddParameter(cmd, "@REPORT_ENABLED"        , bREPORT_ENABLED          );
							IDbDataParameter parIMPORT_ENABLED         = Sql.AddParameter(cmd, "@IMPORT_ENABLED"        , bIMPORT_ENABLED          );
							IDbDataParameter parIS_ADMIN               = Sql.AddParameter(cmd, "@IS_ADMIN"              , bIS_ADMIN                );
							IDbDataParameter parTABLE_NAME             = Sql.AddParameter(cmd, "@TABLE_NAME"            , sTABLE_NAME              ,  30);
							IDbDataParameter parMOBILE_ENABLED         = Sql.AddParameter(cmd, "@MOBILE_ENABLED"        , bMOBILE_ENABLED          );
							IDbDataParameter parMASS_UPDATE_ENABLED    = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"   , bMASS_UPDATE_ENABLED     );
							IDbDataParameter parEXCHANGE_SYNC          = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"         , bEXCHANGE_SYNC           );
							IDbDataParameter parEXCHANGE_FOLDERS       = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"      , bEXCHANGE_FOLDERS        );
							IDbDataParameter parEXCHANGE_CREATE_PARENT = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT", bEXCHANGE_CREATE_PARENT  );
							IDbDataParameter parREST_ENABLED           = Sql.AddParameter(cmd, "@REST_ENABLED"          , bREST_ENABLED            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_InsertOnly
		/// <summary>
		/// spMODULES_InsertOnly
		/// </summary>
		public void spMODULES_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bIS_ADMIN, string sTABLE_NAME, bool bMOBILE_ENABLED, bool bMASS_UPDATE_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
				IDbDataParameter parMODULE_NAME            = Sql.AddParameter(cmd, "@MODULE_NAME"           , sMODULE_NAME             ,  25);
				IDbDataParameter parDISPLAY_NAME           = Sql.AddParameter(cmd, "@DISPLAY_NAME"          , sDISPLAY_NAME            ,  50);
				IDbDataParameter parRELATIVE_PATH          = Sql.AddParameter(cmd, "@RELATIVE_PATH"         , sRELATIVE_PATH           ,  50);
				IDbDataParameter parMODULE_ENABLED         = Sql.AddParameter(cmd, "@MODULE_ENABLED"        , bMODULE_ENABLED          );
				IDbDataParameter parTAB_ENABLED            = Sql.AddParameter(cmd, "@TAB_ENABLED"           , bTAB_ENABLED             );
				IDbDataParameter parTAB_ORDER              = Sql.AddParameter(cmd, "@TAB_ORDER"             , nTAB_ORDER               );
				IDbDataParameter parPORTAL_ENABLED         = Sql.AddParameter(cmd, "@PORTAL_ENABLED"        , bPORTAL_ENABLED          );
				IDbDataParameter parCUSTOM_ENABLED         = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"        , bCUSTOM_ENABLED          );
				IDbDataParameter parREPORT_ENABLED         = Sql.AddParameter(cmd, "@REPORT_ENABLED"        , bREPORT_ENABLED          );
				IDbDataParameter parIMPORT_ENABLED         = Sql.AddParameter(cmd, "@IMPORT_ENABLED"        , bIMPORT_ENABLED          );
				IDbDataParameter parIS_ADMIN               = Sql.AddParameter(cmd, "@IS_ADMIN"              , bIS_ADMIN                );
				IDbDataParameter parTABLE_NAME             = Sql.AddParameter(cmd, "@TABLE_NAME"            , sTABLE_NAME              ,  30);
				IDbDataParameter parMOBILE_ENABLED         = Sql.AddParameter(cmd, "@MOBILE_ENABLED"        , bMOBILE_ENABLED          );
				IDbDataParameter parMASS_UPDATE_ENABLED    = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"   , bMASS_UPDATE_ENABLED     );
				IDbDataParameter parEXCHANGE_SYNC          = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"         , bEXCHANGE_SYNC           );
				IDbDataParameter parEXCHANGE_FOLDERS       = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"      , bEXCHANGE_FOLDERS        );
				IDbDataParameter parEXCHANGE_CREATE_PARENT = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT", bEXCHANGE_CREATE_PARENT  );
				IDbDataParameter parREST_ENABLED           = Sql.AddParameter(cmd, "@REST_ENABLED"          , bREST_ENABLED            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_InsertOnly
		/// <summary>
		/// spMODULES_InsertOnly
		/// </summary>
		public IDbCommand cmdMODULES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID       = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"      , "Guid",  16);
			IDbDataParameter parMODULE_NAME            = Sql.CreateParameter(cmd, "@MODULE_NAME"           , "string",  25);
			IDbDataParameter parDISPLAY_NAME           = Sql.CreateParameter(cmd, "@DISPLAY_NAME"          , "string",  50);
			IDbDataParameter parRELATIVE_PATH          = Sql.CreateParameter(cmd, "@RELATIVE_PATH"         , "string",  50);
			IDbDataParameter parMODULE_ENABLED         = Sql.CreateParameter(cmd, "@MODULE_ENABLED"        , "bool",   1);
			IDbDataParameter parTAB_ENABLED            = Sql.CreateParameter(cmd, "@TAB_ENABLED"           , "bool",   1);
			IDbDataParameter parTAB_ORDER              = Sql.CreateParameter(cmd, "@TAB_ORDER"             , "Int32",   4);
			IDbDataParameter parPORTAL_ENABLED         = Sql.CreateParameter(cmd, "@PORTAL_ENABLED"        , "bool",   1);
			IDbDataParameter parCUSTOM_ENABLED         = Sql.CreateParameter(cmd, "@CUSTOM_ENABLED"        , "bool",   1);
			IDbDataParameter parREPORT_ENABLED         = Sql.CreateParameter(cmd, "@REPORT_ENABLED"        , "bool",   1);
			IDbDataParameter parIMPORT_ENABLED         = Sql.CreateParameter(cmd, "@IMPORT_ENABLED"        , "bool",   1);
			IDbDataParameter parIS_ADMIN               = Sql.CreateParameter(cmd, "@IS_ADMIN"              , "bool",   1);
			IDbDataParameter parTABLE_NAME             = Sql.CreateParameter(cmd, "@TABLE_NAME"            , "string",  30);
			IDbDataParameter parMOBILE_ENABLED         = Sql.CreateParameter(cmd, "@MOBILE_ENABLED"        , "bool",   1);
			IDbDataParameter parMASS_UPDATE_ENABLED    = Sql.CreateParameter(cmd, "@MASS_UPDATE_ENABLED"   , "bool",   1);
			IDbDataParameter parEXCHANGE_SYNC          = Sql.CreateParameter(cmd, "@EXCHANGE_SYNC"         , "bool",   1);
			IDbDataParameter parEXCHANGE_FOLDERS       = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDERS"      , "bool",   1);
			IDbDataParameter parEXCHANGE_CREATE_PARENT = Sql.CreateParameter(cmd, "@EXCHANGE_CREATE_PARENT", "bool",   1);
			IDbDataParameter parREST_ENABLED           = Sql.CreateParameter(cmd, "@REST_ENABLED"          , "bool",   1);
			return cmd;
		}
		#endregion

		#region spMODULES_Reorder
		/// <summary>
		/// spMODULES_Reorder
		/// </summary>
		public void spMODULES_Reorder()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Reorder
		/// <summary>
		/// spMODULES_Reorder
		/// </summary>
		public void spMODULES_Reorder(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Reorder
		/// <summary>
		/// spMODULES_Reorder
		/// </summary>
		public IDbCommand cmdMODULES_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_Hide
		/// <summary>
		/// spMODULES_TAB_Hide
		/// </summary>
		public void spMODULES_TAB_Hide(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_Hide";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_Hide
		/// <summary>
		/// spMODULES_TAB_Hide
		/// </summary>
		public void spMODULES_TAB_Hide(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_Hide";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_Hide
		/// <summary>
		/// spMODULES_TAB_Hide
		/// </summary>
		public IDbCommand cmdMODULES_TAB_Hide(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_Hide";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_HideMobile
		/// <summary>
		/// spMODULES_TAB_HideMobile
		/// </summary>
		public void spMODULES_TAB_HideMobile(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_HideMobile";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_HideMobile
		/// <summary>
		/// spMODULES_TAB_HideMobile
		/// </summary>
		public void spMODULES_TAB_HideMobile(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_HideMobile";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_HideMobile
		/// <summary>
		/// spMODULES_TAB_HideMobile
		/// </summary>
		public IDbCommand cmdMODULES_TAB_HideMobile(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_HideMobile";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveDown
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveDown
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveDown
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveDown
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_MoveDown
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveDown
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveItem
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveItem
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveItem(Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveItem
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveItem
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveItem(Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_MoveItem
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveItem
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveUp
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveUp
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveUp
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveUp
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_MoveUp
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveUp
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_Reorder
		/// <summary>
		/// spMODULES_TAB_ORDER_Reorder
		/// </summary>
		public void spMODULES_TAB_ORDER_Reorder()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_Reorder
		/// <summary>
		/// spMODULES_TAB_ORDER_Reorder
		/// </summary>
		public void spMODULES_TAB_ORDER_Reorder(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_Reorder
		/// <summary>
		/// spMODULES_TAB_ORDER_Reorder
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_Rename
		/// <summary>
		/// spMODULES_TAB_Rename
		/// </summary>
		public void spMODULES_TAB_Rename(Guid gID, string sNAME, string sLANG, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_Rename";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 2000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_Rename
		/// <summary>
		/// spMODULES_TAB_Rename
		/// </summary>
		public void spMODULES_TAB_Rename(Guid gID, string sNAME, string sLANG, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_Rename";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 2000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_Rename
		/// <summary>
		/// spMODULES_TAB_Rename
		/// </summary>
		public IDbCommand cmdMODULES_TAB_Rename(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_Rename";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 2000);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_Show
		/// <summary>
		/// spMODULES_TAB_Show
		/// </summary>
		public void spMODULES_TAB_Show(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_Show";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_Show
		/// <summary>
		/// spMODULES_TAB_Show
		/// </summary>
		public void spMODULES_TAB_Show(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_Show";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_Show
		/// <summary>
		/// spMODULES_TAB_Show
		/// </summary>
		public IDbCommand cmdMODULES_TAB_Show(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_Show";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ShowMobile
		/// <summary>
		/// spMODULES_TAB_ShowMobile
		/// </summary>
		public void spMODULES_TAB_ShowMobile(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ShowMobile";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ShowMobile
		/// <summary>
		/// spMODULES_TAB_ShowMobile
		/// </summary>
		public void spMODULES_TAB_ShowMobile(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ShowMobile";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ShowMobile
		/// <summary>
		/// spMODULES_TAB_ShowMobile
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ShowMobile(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ShowMobile";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_Update
		/// <summary>
		/// spMODULES_Update
		/// </summary>
		public void spMODULES_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, bool bMOBILE_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bSYNC_ENABLED, bool bIS_ADMIN, bool bCUSTOM_PAGING, string sTABLE_NAME, bool bMASS_UPDATE_ENABLED, bool bDEFAULT_SEARCH_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED, bool bDUPLICATE_CHECHING_ENABLED, bool bRECORD_LEVEL_SECURITY_ENABLED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Update";
							IDbDataParameter parID                            = Sql.AddParameter(cmd, "@ID"                           , gID                             );
							IDbDataParameter parMODIFIED_USER_ID              = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"             ,  Security.USER_ID               );
							IDbDataParameter parMODULE_NAME                   = Sql.AddParameter(cmd, "@MODULE_NAME"                  , sMODULE_NAME                    ,  25);
							IDbDataParameter parDISPLAY_NAME                  = Sql.AddParameter(cmd, "@DISPLAY_NAME"                 , sDISPLAY_NAME                   ,  50);
							IDbDataParameter parRELATIVE_PATH                 = Sql.AddParameter(cmd, "@RELATIVE_PATH"                , sRELATIVE_PATH                  ,  50);
							IDbDataParameter parMODULE_ENABLED                = Sql.AddParameter(cmd, "@MODULE_ENABLED"               , bMODULE_ENABLED                 );
							IDbDataParameter parTAB_ENABLED                   = Sql.AddParameter(cmd, "@TAB_ENABLED"                  , bTAB_ENABLED                    );
							IDbDataParameter parMOBILE_ENABLED                = Sql.AddParameter(cmd, "@MOBILE_ENABLED"               , bMOBILE_ENABLED                 );
							IDbDataParameter parTAB_ORDER                     = Sql.AddParameter(cmd, "@TAB_ORDER"                    , nTAB_ORDER                      );
							IDbDataParameter parPORTAL_ENABLED                = Sql.AddParameter(cmd, "@PORTAL_ENABLED"               , bPORTAL_ENABLED                 );
							IDbDataParameter parCUSTOM_ENABLED                = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"               , bCUSTOM_ENABLED                 );
							IDbDataParameter parREPORT_ENABLED                = Sql.AddParameter(cmd, "@REPORT_ENABLED"               , bREPORT_ENABLED                 );
							IDbDataParameter parIMPORT_ENABLED                = Sql.AddParameter(cmd, "@IMPORT_ENABLED"               , bIMPORT_ENABLED                 );
							IDbDataParameter parSYNC_ENABLED                  = Sql.AddParameter(cmd, "@SYNC_ENABLED"                 , bSYNC_ENABLED                   );
							IDbDataParameter parIS_ADMIN                      = Sql.AddParameter(cmd, "@IS_ADMIN"                     , bIS_ADMIN                       );
							IDbDataParameter parCUSTOM_PAGING                 = Sql.AddParameter(cmd, "@CUSTOM_PAGING"                , bCUSTOM_PAGING                  );
							IDbDataParameter parTABLE_NAME                    = Sql.AddParameter(cmd, "@TABLE_NAME"                   , sTABLE_NAME                     ,  30);
							IDbDataParameter parMASS_UPDATE_ENABLED           = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"          , bMASS_UPDATE_ENABLED            );
							IDbDataParameter parDEFAULT_SEARCH_ENABLED        = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ENABLED"       , bDEFAULT_SEARCH_ENABLED         );
							IDbDataParameter parEXCHANGE_SYNC                 = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"                , bEXCHANGE_SYNC                  );
							IDbDataParameter parEXCHANGE_FOLDERS              = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"             , bEXCHANGE_FOLDERS               );
							IDbDataParameter parEXCHANGE_CREATE_PARENT        = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT"       , bEXCHANGE_CREATE_PARENT         );
							IDbDataParameter parREST_ENABLED                  = Sql.AddParameter(cmd, "@REST_ENABLED"                 , bREST_ENABLED                   );
							IDbDataParameter parDUPLICATE_CHECHING_ENABLED    = Sql.AddParameter(cmd, "@DUPLICATE_CHECHING_ENABLED"   , bDUPLICATE_CHECHING_ENABLED     );
							IDbDataParameter parRECORD_LEVEL_SECURITY_ENABLED = Sql.AddParameter(cmd, "@RECORD_LEVEL_SECURITY_ENABLED", bRECORD_LEVEL_SECURITY_ENABLED  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Update
		/// <summary>
		/// spMODULES_Update
		/// </summary>
		public void spMODULES_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, bool bMOBILE_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bSYNC_ENABLED, bool bIS_ADMIN, bool bCUSTOM_PAGING, string sTABLE_NAME, bool bMASS_UPDATE_ENABLED, bool bDEFAULT_SEARCH_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED, bool bDUPLICATE_CHECHING_ENABLED, bool bRECORD_LEVEL_SECURITY_ENABLED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Update";
				IDbDataParameter parID                            = Sql.AddParameter(cmd, "@ID"                           , gID                             );
				IDbDataParameter parMODIFIED_USER_ID              = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"             ,  Security.USER_ID               );
				IDbDataParameter parMODULE_NAME                   = Sql.AddParameter(cmd, "@MODULE_NAME"                  , sMODULE_NAME                    ,  25);
				IDbDataParameter parDISPLAY_NAME                  = Sql.AddParameter(cmd, "@DISPLAY_NAME"                 , sDISPLAY_NAME                   ,  50);
				IDbDataParameter parRELATIVE_PATH                 = Sql.AddParameter(cmd, "@RELATIVE_PATH"                , sRELATIVE_PATH                  ,  50);
				IDbDataParameter parMODULE_ENABLED                = Sql.AddParameter(cmd, "@MODULE_ENABLED"               , bMODULE_ENABLED                 );
				IDbDataParameter parTAB_ENABLED                   = Sql.AddParameter(cmd, "@TAB_ENABLED"                  , bTAB_ENABLED                    );
				IDbDataParameter parMOBILE_ENABLED                = Sql.AddParameter(cmd, "@MOBILE_ENABLED"               , bMOBILE_ENABLED                 );
				IDbDataParameter parTAB_ORDER                     = Sql.AddParameter(cmd, "@TAB_ORDER"                    , nTAB_ORDER                      );
				IDbDataParameter parPORTAL_ENABLED                = Sql.AddParameter(cmd, "@PORTAL_ENABLED"               , bPORTAL_ENABLED                 );
				IDbDataParameter parCUSTOM_ENABLED                = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"               , bCUSTOM_ENABLED                 );
				IDbDataParameter parREPORT_ENABLED                = Sql.AddParameter(cmd, "@REPORT_ENABLED"               , bREPORT_ENABLED                 );
				IDbDataParameter parIMPORT_ENABLED                = Sql.AddParameter(cmd, "@IMPORT_ENABLED"               , bIMPORT_ENABLED                 );
				IDbDataParameter parSYNC_ENABLED                  = Sql.AddParameter(cmd, "@SYNC_ENABLED"                 , bSYNC_ENABLED                   );
				IDbDataParameter parIS_ADMIN                      = Sql.AddParameter(cmd, "@IS_ADMIN"                     , bIS_ADMIN                       );
				IDbDataParameter parCUSTOM_PAGING                 = Sql.AddParameter(cmd, "@CUSTOM_PAGING"                , bCUSTOM_PAGING                  );
				IDbDataParameter parTABLE_NAME                    = Sql.AddParameter(cmd, "@TABLE_NAME"                   , sTABLE_NAME                     ,  30);
				IDbDataParameter parMASS_UPDATE_ENABLED           = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"          , bMASS_UPDATE_ENABLED            );
				IDbDataParameter parDEFAULT_SEARCH_ENABLED        = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ENABLED"       , bDEFAULT_SEARCH_ENABLED         );
				IDbDataParameter parEXCHANGE_SYNC                 = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"                , bEXCHANGE_SYNC                  );
				IDbDataParameter parEXCHANGE_FOLDERS              = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"             , bEXCHANGE_FOLDERS               );
				IDbDataParameter parEXCHANGE_CREATE_PARENT        = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT"       , bEXCHANGE_CREATE_PARENT         );
				IDbDataParameter parREST_ENABLED                  = Sql.AddParameter(cmd, "@REST_ENABLED"                 , bREST_ENABLED                   );
				IDbDataParameter parDUPLICATE_CHECHING_ENABLED    = Sql.AddParameter(cmd, "@DUPLICATE_CHECHING_ENABLED"   , bDUPLICATE_CHECHING_ENABLED     );
				IDbDataParameter parRECORD_LEVEL_SECURITY_ENABLED = Sql.AddParameter(cmd, "@RECORD_LEVEL_SECURITY_ENABLED", bRECORD_LEVEL_SECURITY_ENABLED  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdMODULES_Update
		/// <summary>
		/// spMODULES_Update
		/// </summary>
		public IDbCommand cmdMODULES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Update";
			IDbDataParameter parID                            = Sql.CreateParameter(cmd, "@ID"                           , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID              = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"             , "Guid",  16);
			IDbDataParameter parMODULE_NAME                   = Sql.CreateParameter(cmd, "@MODULE_NAME"                  , "string",  25);
			IDbDataParameter parDISPLAY_NAME                  = Sql.CreateParameter(cmd, "@DISPLAY_NAME"                 , "string",  50);
			IDbDataParameter parRELATIVE_PATH                 = Sql.CreateParameter(cmd, "@RELATIVE_PATH"                , "string",  50);
			IDbDataParameter parMODULE_ENABLED                = Sql.CreateParameter(cmd, "@MODULE_ENABLED"               , "bool",   1);
			IDbDataParameter parTAB_ENABLED                   = Sql.CreateParameter(cmd, "@TAB_ENABLED"                  , "bool",   1);
			IDbDataParameter parMOBILE_ENABLED                = Sql.CreateParameter(cmd, "@MOBILE_ENABLED"               , "bool",   1);
			IDbDataParameter parTAB_ORDER                     = Sql.CreateParameter(cmd, "@TAB_ORDER"                    , "Int32",   4);
			IDbDataParameter parPORTAL_ENABLED                = Sql.CreateParameter(cmd, "@PORTAL_ENABLED"               , "bool",   1);
			IDbDataParameter parCUSTOM_ENABLED                = Sql.CreateParameter(cmd, "@CUSTOM_ENABLED"               , "bool",   1);
			IDbDataParameter parREPORT_ENABLED                = Sql.CreateParameter(cmd, "@REPORT_ENABLED"               , "bool",   1);
			IDbDataParameter parIMPORT_ENABLED                = Sql.CreateParameter(cmd, "@IMPORT_ENABLED"               , "bool",   1);
			IDbDataParameter parSYNC_ENABLED                  = Sql.CreateParameter(cmd, "@SYNC_ENABLED"                 , "bool",   1);
			IDbDataParameter parIS_ADMIN                      = Sql.CreateParameter(cmd, "@IS_ADMIN"                     , "bool",   1);
			IDbDataParameter parCUSTOM_PAGING                 = Sql.CreateParameter(cmd, "@CUSTOM_PAGING"                , "bool",   1);
			IDbDataParameter parTABLE_NAME                    = Sql.CreateParameter(cmd, "@TABLE_NAME"                   , "string",  30);
			IDbDataParameter parMASS_UPDATE_ENABLED           = Sql.CreateParameter(cmd, "@MASS_UPDATE_ENABLED"          , "bool",   1);
			IDbDataParameter parDEFAULT_SEARCH_ENABLED        = Sql.CreateParameter(cmd, "@DEFAULT_SEARCH_ENABLED"       , "bool",   1);
			IDbDataParameter parEXCHANGE_SYNC                 = Sql.CreateParameter(cmd, "@EXCHANGE_SYNC"                , "bool",   1);
			IDbDataParameter parEXCHANGE_FOLDERS              = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDERS"             , "bool",   1);
			IDbDataParameter parEXCHANGE_CREATE_PARENT        = Sql.CreateParameter(cmd, "@EXCHANGE_CREATE_PARENT"       , "bool",   1);
			IDbDataParameter parREST_ENABLED                  = Sql.CreateParameter(cmd, "@REST_ENABLED"                 , "bool",   1);
			IDbDataParameter parDUPLICATE_CHECHING_ENABLED    = Sql.CreateParameter(cmd, "@DUPLICATE_CHECHING_ENABLED"   , "bool",   1);
			IDbDataParameter parRECORD_LEVEL_SECURITY_ENABLED = Sql.CreateParameter(cmd, "@RECORD_LEVEL_SECURITY_ENABLED", "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spMODULES_UpdateRelativePath
		/// <summary>
		/// spMODULES_UpdateRelativePath
		/// </summary>
		public void spMODULES_UpdateRelativePath(string sMODULE_NAME, string sRELATIVE_PATH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_UpdateRelativePath";
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_UpdateRelativePath
		/// <summary>
		/// spMODULES_UpdateRelativePath
		/// </summary>
		public void spMODULES_UpdateRelativePath(string sMODULE_NAME, string sRELATIVE_PATH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_UpdateRelativePath";
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_UpdateRelativePath
		/// <summary>
		/// spMODULES_UpdateRelativePath
		/// </summary>
		public IDbCommand cmdMODULES_UpdateRelativePath(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_UpdateRelativePath";
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string",  50);
			return cmd;
		}
		#endregion

		#region spNAICS_CODE_SETS_NormalizeSet
		/// <summary>
		/// spNAICS_CODE_SETS_NormalizeSet
		/// </summary>
		public void spNAICS_CODE_SETS_NormalizeSet(Guid gPARENT_ID, string sPARENT_MODULE, string sNAICS_SET_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNAICS_CODE_SETS_NormalizeSet";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parPARENT_MODULE    = Sql.AddParameter(cmd, "@PARENT_MODULE"   , sPARENT_MODULE     ,  50);
							IDbDataParameter parNAICS_SET_NAME   = Sql.AddParameter(cmd, "@NAICS_SET_NAME"  , sNAICS_SET_NAME    , 4000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNAICS_CODE_SETS_NormalizeSet
		/// <summary>
		/// spNAICS_CODE_SETS_NormalizeSet
		/// </summary>
		public void spNAICS_CODE_SETS_NormalizeSet(Guid gPARENT_ID, string sPARENT_MODULE, string sNAICS_SET_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNAICS_CODE_SETS_NormalizeSet";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parPARENT_MODULE    = Sql.AddParameter(cmd, "@PARENT_MODULE"   , sPARENT_MODULE     ,  50);
				IDbDataParameter parNAICS_SET_NAME   = Sql.AddParameter(cmd, "@NAICS_SET_NAME"  , sNAICS_SET_NAME    , 4000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNAICS_CODE_SETS_NormalizeSet
		/// <summary>
		/// spNAICS_CODE_SETS_NormalizeSet
		/// </summary>
		public IDbCommand cmdNAICS_CODE_SETS_NormalizeSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNAICS_CODE_SETS_NormalizeSet";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parPARENT_MODULE    = Sql.CreateParameter(cmd, "@PARENT_MODULE"   , "string",  50);
			IDbDataParameter parNAICS_SET_NAME   = Sql.CreateParameter(cmd, "@NAICS_SET_NAME"  , "string", 4000);
			return cmd;
		}
		#endregion

		#region spNAICS_CODES_Delete
		/// <summary>
		/// spNAICS_CODES_Delete
		/// </summary>
		public void spNAICS_CODES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNAICS_CODES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNAICS_CODES_Delete
		/// <summary>
		/// spNAICS_CODES_Delete
		/// </summary>
		public void spNAICS_CODES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNAICS_CODES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNAICS_CODES_Delete
		/// <summary>
		/// spNAICS_CODES_Delete
		/// </summary>
		public IDbCommand cmdNAICS_CODES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNAICS_CODES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spNAICS_CODES_InsertOnly
		/// <summary>
		/// spNAICS_CODES_InsertOnly
		/// </summary>
		public void spNAICS_CODES_InsertOnly(string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNAICS_CODES_InsertOnly";
							IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         ,  10);
							IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  , 400);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNAICS_CODES_InsertOnly
		/// <summary>
		/// spNAICS_CODES_InsertOnly
		/// </summary>
		public void spNAICS_CODES_InsertOnly(string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNAICS_CODES_InsertOnly";
				IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         ,  10);
				IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  , 400);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNAICS_CODES_InsertOnly
		/// <summary>
		/// spNAICS_CODES_InsertOnly
		/// </summary>
		public IDbCommand cmdNAICS_CODES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNAICS_CODES_InsertOnly";
			IDbDataParameter parNAME        = Sql.CreateParameter(cmd, "@NAME"       , "string",  10);
			IDbDataParameter parDESCRIPTION = Sql.CreateParameter(cmd, "@DESCRIPTION", "string", 400);
			return cmd;
		}
		#endregion

		#region spNAICS_CODES_Update
		/// <summary>
		/// spNAICS_CODES_Update
		/// </summary>
		public void spNAICS_CODES_Update(ref Guid gID, string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNAICS_CODES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       , 400);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNAICS_CODES_Update
		/// <summary>
		/// spNAICS_CODES_Update
		/// </summary>
		public void spNAICS_CODES_Update(ref Guid gID, string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNAICS_CODES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       , 400);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNAICS_CODES_Update
		/// <summary>
		/// spNAICS_CODES_Update
		/// </summary>
		public IDbCommand cmdNAICS_CODES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNAICS_CODES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 400);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTE_ATTACHMENTS_Delete
		/// <summary>
		/// spNOTE_ATTACHMENTS_Delete
		/// </summary>
		public void spNOTE_ATTACHMENTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTE_ATTACHMENTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTE_ATTACHMENTS_Delete
		/// <summary>
		/// spNOTE_ATTACHMENTS_Delete
		/// </summary>
		public void spNOTE_ATTACHMENTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTE_ATTACHMENTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTE_ATTACHMENTS_Delete
		/// <summary>
		/// spNOTE_ATTACHMENTS_Delete
		/// </summary>
		public IDbCommand cmdNOTE_ATTACHMENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTE_ATTACHMENTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spNOTE_ATTACHMENTS_Insert
		/// <summary>
		/// spNOTE_ATTACHMENTS_Insert
		/// </summary>
		public void spNOTE_ATTACHMENTS_Insert(ref Guid gID, Guid gNOTE_ID, string sDESCRIPTION, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTE_ATTACHMENTS_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNOTE_ID          = Sql.AddParameter(cmd, "@NOTE_ID"         , gNOTE_ID           );
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       , 255);
							IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
							IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
							IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTE_ATTACHMENTS_Insert
		/// <summary>
		/// spNOTE_ATTACHMENTS_Insert
		/// </summary>
		public void spNOTE_ATTACHMENTS_Insert(ref Guid gID, Guid gNOTE_ID, string sDESCRIPTION, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTE_ATTACHMENTS_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNOTE_ID          = Sql.AddParameter(cmd, "@NOTE_ID"         , gNOTE_ID           );
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       , 255);
				IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
				IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
				IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNOTE_ATTACHMENTS_Insert
		/// <summary>
		/// spNOTE_ATTACHMENTS_Insert
		/// </summary>
		public IDbCommand cmdNOTE_ATTACHMENTS_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTE_ATTACHMENTS_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNOTE_ID          = Sql.CreateParameter(cmd, "@NOTE_ID"         , "Guid",  16);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 255);
			IDbDataParameter parFILENAME         = Sql.CreateParameter(cmd, "@FILENAME"        , "string", 255);
			IDbDataParameter parFILE_EXT         = Sql.CreateParameter(cmd, "@FILE_EXT"        , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE   = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTES_ATTACHMENT_InitPointer
		/// <summary>
		/// spNOTES_ATTACHMENT_InitPointer
		/// </summary>
		public void spNOTES_ATTACHMENT_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_ATTACHMENT_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_ATTACHMENT_InitPointer
		/// <summary>
		/// spNOTES_ATTACHMENT_InitPointer
		/// </summary>
		public void spNOTES_ATTACHMENT_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_ATTACHMENT_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdNOTES_ATTACHMENT_InitPointer
		/// <summary>
		/// spNOTES_ATTACHMENT_InitPointer
		/// </summary>
		public IDbCommand cmdNOTES_ATTACHMENT_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_ATTACHMENT_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTES_ATTACHMENT_ReadOffset
		/// <summary>
		/// spNOTES_ATTACHMENT_ReadOffset
		/// </summary>
		public void spNOTES_ATTACHMENT_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_ATTACHMENT_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_ATTACHMENT_ReadOffset
		/// <summary>
		/// spNOTES_ATTACHMENT_ReadOffset
		/// </summary>
		public void spNOTES_ATTACHMENT_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_ATTACHMENT_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdNOTES_ATTACHMENT_ReadOffset
		/// <summary>
		/// spNOTES_ATTACHMENT_ReadOffset
		/// </summary>
		public IDbCommand cmdNOTES_ATTACHMENT_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_ATTACHMENT_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTES_ATTACHMENT_Update
		/// <summary>
		/// spNOTES_ATTACHMENT_Update
		/// </summary>
		public void spNOTES_ATTACHMENT_Update(Guid gID, byte[] binATTACHMENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_ATTACHMENT_Update";
							IDbDataParameter parID         = Sql.AddParameter(cmd, "@ID"        , gID          );
							IDbDataParameter parATTACHMENT = Sql.AddParameter(cmd, "@ATTACHMENT", binATTACHMENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_ATTACHMENT_Update
		/// <summary>
		/// spNOTES_ATTACHMENT_Update
		/// </summary>
		public void spNOTES_ATTACHMENT_Update(Guid gID, byte[] binATTACHMENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_ATTACHMENT_Update";
				IDbDataParameter parID         = Sql.AddParameter(cmd, "@ID"        , gID          );
				IDbDataParameter parATTACHMENT = Sql.AddParameter(cmd, "@ATTACHMENT", binATTACHMENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTES_ATTACHMENT_Update
		/// <summary>
		/// spNOTES_ATTACHMENT_Update
		/// </summary>
		public IDbCommand cmdNOTES_ATTACHMENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_ATTACHMENT_Update";
			IDbDataParameter parID         = Sql.CreateParameter(cmd, "@ID"        , "Guid",  16);
			IDbDataParameter parATTACHMENT = Sql.CreateParameter(cmd, "@ATTACHMENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spNOTES_ATTACHMENT_WriteOffset
		/// <summary>
		/// spNOTES_ATTACHMENT_WriteOffset
		/// </summary>
		public void spNOTES_ATTACHMENT_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_ATTACHMENT_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_ATTACHMENT_WriteOffset
		/// <summary>
		/// spNOTES_ATTACHMENT_WriteOffset
		/// </summary>
		public void spNOTES_ATTACHMENT_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_ATTACHMENT_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTES_ATTACHMENT_WriteOffset
		/// <summary>
		/// spNOTES_ATTACHMENT_WriteOffset
		/// </summary>
		public IDbCommand cmdNOTES_ATTACHMENT_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_ATTACHMENT_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spNOTES_Copy
		/// <summary>
		/// spNOTES_Copy
		/// </summary>
		public void spNOTES_Copy(ref Guid gID, Guid gCOPY_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_Copy";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCOPY_ID          = Sql.AddParameter(cmd, "@COPY_ID"         , gCOPY_ID           );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_Copy
		/// <summary>
		/// spNOTES_Copy
		/// </summary>
		public void spNOTES_Copy(ref Guid gID, Guid gCOPY_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_Copy";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCOPY_ID          = Sql.AddParameter(cmd, "@COPY_ID"         , gCOPY_ID           );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNOTES_Copy
		/// <summary>
		/// spNOTES_Copy
		/// </summary>
		public IDbCommand cmdNOTES_Copy(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_Copy";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCOPY_ID          = Sql.CreateParameter(cmd, "@COPY_ID"         , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTES_Delete
		/// <summary>
		/// spNOTES_Delete
		/// </summary>
		public void spNOTES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_Delete
		/// <summary>
		/// spNOTES_Delete
		/// </summary>
		public void spNOTES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTES_Delete
		/// <summary>
		/// spNOTES_Delete
		/// </summary>
		public IDbCommand cmdNOTES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spNOTES_Import
		/// <summary>
		/// spNOTES_Import
		/// </summary>
		public void spNOTES_Import(ref Guid gID, DateTime dtDATE_MODIFIED, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sASSIGNED_SET_LIST, string sTEAM_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_Import";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parDATE_MODIFIED     = Sql.AddParameter(cmd, "@DATE_MODIFIED"    , dtDATE_MODIFIED     );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parCONTACT_ID        = Sql.AddParameter(cmd, "@CONTACT_ID"       , gCONTACT_ID         );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parTEAM_NAME         = Sql.AddParameter(cmd, "@TEAM_NAME"        , sTEAM_NAME          , 128);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_Import
		/// <summary>
		/// spNOTES_Import
		/// </summary>
		public void spNOTES_Import(ref Guid gID, DateTime dtDATE_MODIFIED, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sASSIGNED_SET_LIST, string sTEAM_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_Import";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parDATE_MODIFIED     = Sql.AddParameter(cmd, "@DATE_MODIFIED"    , dtDATE_MODIFIED     );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parCONTACT_ID        = Sql.AddParameter(cmd, "@CONTACT_ID"       , gCONTACT_ID         );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parTEAM_NAME         = Sql.AddParameter(cmd, "@TEAM_NAME"        , sTEAM_NAME          , 128);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNOTES_Import
		/// <summary>
		/// spNOTES_Import
		/// </summary>
		public IDbCommand cmdNOTES_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_Import";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parDATE_MODIFIED     = Sql.CreateParameter(cmd, "@DATE_MODIFIED"    , "DateTime",   8);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parCONTACT_ID        = Sql.CreateParameter(cmd, "@CONTACT_ID"       , "Guid",  16);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parTEAM_NAME         = Sql.CreateParameter(cmd, "@TEAM_NAME"        , "string", 128);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTES_LinkAttachment
		/// <summary>
		/// spNOTES_LinkAttachment
		/// </summary>
		public void spNOTES_LinkAttachment(ref Guid gID, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, string sDESCRIPTION, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gTEAM_SET_ID, Guid gNOTE_ATTACHMENT_ID, Guid gASSIGNED_SET_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_LinkAttachment";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
							IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
							IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							IDbDataParameter parTEAM_SET_ID        = Sql.AddParameter(cmd, "@TEAM_SET_ID"       , gTEAM_SET_ID         );
							IDbDataParameter parNOTE_ATTACHMENT_ID = Sql.AddParameter(cmd, "@NOTE_ATTACHMENT_ID", gNOTE_ATTACHMENT_ID  );
							IDbDataParameter parASSIGNED_SET_ID    = Sql.AddParameter(cmd, "@ASSIGNED_SET_ID"   , gASSIGNED_SET_ID     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_LinkAttachment
		/// <summary>
		/// spNOTES_LinkAttachment
		/// </summary>
		public void spNOTES_LinkAttachment(ref Guid gID, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, string sDESCRIPTION, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gTEAM_SET_ID, Guid gNOTE_ATTACHMENT_ID, Guid gASSIGNED_SET_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_LinkAttachment";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 255);
				IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
				IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				IDbDataParameter parTEAM_SET_ID        = Sql.AddParameter(cmd, "@TEAM_SET_ID"       , gTEAM_SET_ID         );
				IDbDataParameter parNOTE_ATTACHMENT_ID = Sql.AddParameter(cmd, "@NOTE_ATTACHMENT_ID", gNOTE_ATTACHMENT_ID  );
				IDbDataParameter parASSIGNED_SET_ID    = Sql.AddParameter(cmd, "@ASSIGNED_SET_ID"   , gASSIGNED_SET_ID     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNOTES_LinkAttachment
		/// <summary>
		/// spNOTES_LinkAttachment
		/// </summary>
		public IDbCommand cmdNOTES_LinkAttachment(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_LinkAttachment";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string", 255);
			IDbDataParameter parPARENT_TYPE        = Sql.CreateParameter(cmd, "@PARENT_TYPE"       , "string",  25);
			IDbDataParameter parPARENT_ID          = Sql.CreateParameter(cmd, "@PARENT_ID"         , "Guid",  16);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parASSIGNED_USER_ID   = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"  , "Guid",  16);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			IDbDataParameter parTEAM_SET_ID        = Sql.CreateParameter(cmd, "@TEAM_SET_ID"       , "Guid",  16);
			IDbDataParameter parNOTE_ATTACHMENT_ID = Sql.CreateParameter(cmd, "@NOTE_ATTACHMENT_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_SET_ID    = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ID"   , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTES_MassAssign
		/// <summary>
		/// spNOTES_MassAssign
		/// </summary>
		public void spNOTES_MassAssign(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_MassAssign";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_MassAssign
		/// <summary>
		/// spNOTES_MassAssign
		/// </summary>
		public void spNOTES_MassAssign(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_MassAssign";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTES_MassAssign
		/// <summary>
		/// spNOTES_MassAssign
		/// </summary>
		public IDbCommand cmdNOTES_MassAssign(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_MassAssign";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spNOTES_MassDelete
		/// <summary>
		/// spNOTES_MassDelete
		/// </summary>
		public void spNOTES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_MassDelete
		/// <summary>
		/// spNOTES_MassDelete
		/// </summary>
		public void spNOTES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTES_MassDelete
		/// <summary>
		/// spNOTES_MassDelete
		/// </summary>
		public IDbCommand cmdNOTES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spNOTES_MassUpdate
		/// <summary>
		/// spNOTES_MassUpdate
		/// </summary>
		public void spNOTES_MassUpdate(string sID_LIST, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
							IDbDataParameter parTEAM_SET_ADD     = Sql.AddParameter(cmd, "@TEAM_SET_ADD"    , bTEAM_SET_ADD      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_MassUpdate
		/// <summary>
		/// spNOTES_MassUpdate
		/// </summary>
		public void spNOTES_MassUpdate(string sID_LIST, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
				IDbDataParameter parTEAM_SET_ADD     = Sql.AddParameter(cmd, "@TEAM_SET_ADD"    , bTEAM_SET_ADD      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTES_MassUpdate
		/// <summary>
		/// spNOTES_MassUpdate
		/// </summary>
		public IDbCommand cmdNOTES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST    = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"   , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD     = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"    , "bool",   1);
			return cmd;
		}
		#endregion

		#region spNOTES_New
		/// <summary>
		/// spNOTES_New
		/// </summary>
		public void spNOTES_New(ref Guid gID, string sNAME, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_New
		/// <summary>
		/// spNOTES_New
		/// </summary>
		public void spNOTES_New(ref Guid gID, string sNAME, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNOTES_New
		/// <summary>
		/// spNOTES_New
		/// </summary>
		public IDbCommand cmdNOTES_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNOTES_Undelete
		/// <summary>
		/// spNOTES_Undelete
		/// </summary>
		public void spNOTES_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_Undelete
		/// <summary>
		/// spNOTES_Undelete
		/// </summary>
		public void spNOTES_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNOTES_Undelete
		/// <summary>
		/// spNOTES_Undelete
		/// </summary>
		public IDbCommand cmdNOTES_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spNOTES_Update
		/// <summary>
		/// spNOTES_Update
		/// </summary>
		public void spNOTES_Update(ref Guid gID, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNOTES_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parCONTACT_ID        = Sql.AddParameter(cmd, "@CONTACT_ID"       , gCONTACT_ID         );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parIS_PRIVATE        = Sql.AddParameter(cmd, "@IS_PRIVATE"       , bIS_PRIVATE         );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNOTES_Update
		/// <summary>
		/// spNOTES_Update
		/// </summary>
		public void spNOTES_Update(ref Guid gID, string sNAME, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gASSIGNED_USER_ID, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNOTES_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parCONTACT_ID        = Sql.AddParameter(cmd, "@CONTACT_ID"       , gCONTACT_ID         );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parIS_PRIVATE        = Sql.AddParameter(cmd, "@IS_PRIVATE"       , bIS_PRIVATE         );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNOTES_Update
		/// <summary>
		/// spNOTES_Update
		/// </summary>
		public IDbCommand cmdNOTES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNOTES_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parCONTACT_ID        = Sql.CreateParameter(cmd, "@CONTACT_ID"       , "Guid",  16);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parIS_PRIVATE        = Sql.CreateParameter(cmd, "@IS_PRIVATE"       , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNUMBER_SEQUENCES_Delete
		/// <summary>
		/// spNUMBER_SEQUENCES_Delete
		/// </summary>
		public void spNUMBER_SEQUENCES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNUMBER_SEQUENCES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNUMBER_SEQUENCES_Delete
		/// <summary>
		/// spNUMBER_SEQUENCES_Delete
		/// </summary>
		public void spNUMBER_SEQUENCES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNUMBER_SEQUENCES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNUMBER_SEQUENCES_Delete
		/// <summary>
		/// spNUMBER_SEQUENCES_Delete
		/// </summary>
		public IDbCommand cmdNUMBER_SEQUENCES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNUMBER_SEQUENCES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spNUMBER_SEQUENCES_Formatted
		/// <summary>
		/// spNUMBER_SEQUENCES_Formatted
		/// </summary>
		public void spNUMBER_SEQUENCES_Formatted(string sNAME, bool bSAVE_RESULT, ref string sCURRENT_NUMBER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNUMBER_SEQUENCES_Formatted";
							IDbDataParameter parNAME           = Sql.AddParameter(cmd, "@NAME"          , sNAME            ,  60);
							IDbDataParameter parSAVE_RESULT    = Sql.AddParameter(cmd, "@SAVE_RESULT"   , bSAVE_RESULT     );
							IDbDataParameter parCURRENT_NUMBER = Sql.AddParameter(cmd, "@CURRENT_NUMBER", sCURRENT_NUMBER  ,  30);
							parCURRENT_NUMBER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sCURRENT_NUMBER = Sql.ToString(parCURRENT_NUMBER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNUMBER_SEQUENCES_Formatted
		/// <summary>
		/// spNUMBER_SEQUENCES_Formatted
		/// </summary>
		public void spNUMBER_SEQUENCES_Formatted(string sNAME, bool bSAVE_RESULT, ref string sCURRENT_NUMBER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNUMBER_SEQUENCES_Formatted";
				IDbDataParameter parNAME           = Sql.AddParameter(cmd, "@NAME"          , sNAME            ,  60);
				IDbDataParameter parSAVE_RESULT    = Sql.AddParameter(cmd, "@SAVE_RESULT"   , bSAVE_RESULT     );
				IDbDataParameter parCURRENT_NUMBER = Sql.AddParameter(cmd, "@CURRENT_NUMBER", sCURRENT_NUMBER  ,  30);
				parCURRENT_NUMBER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sCURRENT_NUMBER = Sql.ToString(parCURRENT_NUMBER.Value);
			}
		}
		#endregion

		#region cmdNUMBER_SEQUENCES_Formatted
		/// <summary>
		/// spNUMBER_SEQUENCES_Formatted
		/// </summary>
		public IDbCommand cmdNUMBER_SEQUENCES_Formatted(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNUMBER_SEQUENCES_Formatted";
			IDbDataParameter parNAME           = Sql.CreateParameter(cmd, "@NAME"          , "string",  60);
			IDbDataParameter parSAVE_RESULT    = Sql.CreateParameter(cmd, "@SAVE_RESULT"   , "bool",   1);
			IDbDataParameter parCURRENT_NUMBER = Sql.CreateParameter(cmd, "@CURRENT_NUMBER", "string",  30);
			parCURRENT_NUMBER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spNUMBER_SEQUENCES_InsertOnly
		/// <summary>
		/// spNUMBER_SEQUENCES_InsertOnly
		/// </summary>
		public void spNUMBER_SEQUENCES_InsertOnly(string sNAME, string sALPHA_PREFIX, string sALPHA_SUFFIX, Int32 nSEQUENCE_STEP, Int32 nNUMERIC_PADDING, Int32 nCURRENT_VALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNUMBER_SEQUENCES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
							IDbDataParameter parALPHA_PREFIX     = Sql.AddParameter(cmd, "@ALPHA_PREFIX"    , sALPHA_PREFIX      ,  10);
							IDbDataParameter parALPHA_SUFFIX     = Sql.AddParameter(cmd, "@ALPHA_SUFFIX"    , sALPHA_SUFFIX      ,  10);
							IDbDataParameter parSEQUENCE_STEP    = Sql.AddParameter(cmd, "@SEQUENCE_STEP"   , nSEQUENCE_STEP     );
							IDbDataParameter parNUMERIC_PADDING  = Sql.AddParameter(cmd, "@NUMERIC_PADDING" , nNUMERIC_PADDING   );
							IDbDataParameter parCURRENT_VALUE    = Sql.AddParameter(cmd, "@CURRENT_VALUE"   , nCURRENT_VALUE     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNUMBER_SEQUENCES_InsertOnly
		/// <summary>
		/// spNUMBER_SEQUENCES_InsertOnly
		/// </summary>
		public void spNUMBER_SEQUENCES_InsertOnly(string sNAME, string sALPHA_PREFIX, string sALPHA_SUFFIX, Int32 nSEQUENCE_STEP, Int32 nNUMERIC_PADDING, Int32 nCURRENT_VALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNUMBER_SEQUENCES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
				IDbDataParameter parALPHA_PREFIX     = Sql.AddParameter(cmd, "@ALPHA_PREFIX"    , sALPHA_PREFIX      ,  10);
				IDbDataParameter parALPHA_SUFFIX     = Sql.AddParameter(cmd, "@ALPHA_SUFFIX"    , sALPHA_SUFFIX      ,  10);
				IDbDataParameter parSEQUENCE_STEP    = Sql.AddParameter(cmd, "@SEQUENCE_STEP"   , nSEQUENCE_STEP     );
				IDbDataParameter parNUMERIC_PADDING  = Sql.AddParameter(cmd, "@NUMERIC_PADDING" , nNUMERIC_PADDING   );
				IDbDataParameter parCURRENT_VALUE    = Sql.AddParameter(cmd, "@CURRENT_VALUE"   , nCURRENT_VALUE     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdNUMBER_SEQUENCES_InsertOnly
		/// <summary>
		/// spNUMBER_SEQUENCES_InsertOnly
		/// </summary>
		public IDbCommand cmdNUMBER_SEQUENCES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNUMBER_SEQUENCES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  60);
			IDbDataParameter parALPHA_PREFIX     = Sql.CreateParameter(cmd, "@ALPHA_PREFIX"    , "string",  10);
			IDbDataParameter parALPHA_SUFFIX     = Sql.CreateParameter(cmd, "@ALPHA_SUFFIX"    , "string",  10);
			IDbDataParameter parSEQUENCE_STEP    = Sql.CreateParameter(cmd, "@SEQUENCE_STEP"   , "Int32",   4);
			IDbDataParameter parNUMERIC_PADDING  = Sql.CreateParameter(cmd, "@NUMERIC_PADDING" , "Int32",   4);
			IDbDataParameter parCURRENT_VALUE    = Sql.CreateParameter(cmd, "@CURRENT_VALUE"   , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spNUMBER_SEQUENCES_Update
		/// <summary>
		/// spNUMBER_SEQUENCES_Update
		/// </summary>
		public void spNUMBER_SEQUENCES_Update(ref Guid gID, string sNAME, string sALPHA_PREFIX, string sALPHA_SUFFIX, Int32 nSEQUENCE_STEP, Int32 nNUMERIC_PADDING, Int32 nCURRENT_VALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spNUMBER_SEQUENCES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
							IDbDataParameter parALPHA_PREFIX     = Sql.AddParameter(cmd, "@ALPHA_PREFIX"    , sALPHA_PREFIX      ,  10);
							IDbDataParameter parALPHA_SUFFIX     = Sql.AddParameter(cmd, "@ALPHA_SUFFIX"    , sALPHA_SUFFIX      ,  10);
							IDbDataParameter parSEQUENCE_STEP    = Sql.AddParameter(cmd, "@SEQUENCE_STEP"   , nSEQUENCE_STEP     );
							IDbDataParameter parNUMERIC_PADDING  = Sql.AddParameter(cmd, "@NUMERIC_PADDING" , nNUMERIC_PADDING   );
							IDbDataParameter parCURRENT_VALUE    = Sql.AddParameter(cmd, "@CURRENT_VALUE"   , nCURRENT_VALUE     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spNUMBER_SEQUENCES_Update
		/// <summary>
		/// spNUMBER_SEQUENCES_Update
		/// </summary>
		public void spNUMBER_SEQUENCES_Update(ref Guid gID, string sNAME, string sALPHA_PREFIX, string sALPHA_SUFFIX, Int32 nSEQUENCE_STEP, Int32 nNUMERIC_PADDING, Int32 nCURRENT_VALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spNUMBER_SEQUENCES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
				IDbDataParameter parALPHA_PREFIX     = Sql.AddParameter(cmd, "@ALPHA_PREFIX"    , sALPHA_PREFIX      ,  10);
				IDbDataParameter parALPHA_SUFFIX     = Sql.AddParameter(cmd, "@ALPHA_SUFFIX"    , sALPHA_SUFFIX      ,  10);
				IDbDataParameter parSEQUENCE_STEP    = Sql.AddParameter(cmd, "@SEQUENCE_STEP"   , nSEQUENCE_STEP     );
				IDbDataParameter parNUMERIC_PADDING  = Sql.AddParameter(cmd, "@NUMERIC_PADDING" , nNUMERIC_PADDING   );
				IDbDataParameter parCURRENT_VALUE    = Sql.AddParameter(cmd, "@CURRENT_VALUE"   , nCURRENT_VALUE     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdNUMBER_SEQUENCES_Update
		/// <summary>
		/// spNUMBER_SEQUENCES_Update
		/// </summary>
		public IDbCommand cmdNUMBER_SEQUENCES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spNUMBER_SEQUENCES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  60);
			IDbDataParameter parALPHA_PREFIX     = Sql.CreateParameter(cmd, "@ALPHA_PREFIX"    , "string",  10);
			IDbDataParameter parALPHA_SUFFIX     = Sql.CreateParameter(cmd, "@ALPHA_SUFFIX"    , "string",  10);
			IDbDataParameter parSEQUENCE_STEP    = Sql.CreateParameter(cmd, "@SEQUENCE_STEP"   , "Int32",   4);
			IDbDataParameter parNUMERIC_PADDING  = Sql.CreateParameter(cmd, "@NUMERIC_PADDING" , "Int32",   4);
			IDbDataParameter parCURRENT_VALUE    = Sql.CreateParameter(cmd, "@CURRENT_VALUE"   , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spOAUTH_TOKENS_Delete
		/// <summary>
		/// spOAUTH_TOKENS_Delete
		/// </summary>
		public void spOAUTH_TOKENS_Delete(Guid gASSIGNED_USER_ID, string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTH_TOKENS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTH_TOKENS_Delete
		/// <summary>
		/// spOAUTH_TOKENS_Delete
		/// </summary>
		public void spOAUTH_TOKENS_Delete(Guid gASSIGNED_USER_ID, string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTH_TOKENS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTH_TOKENS_Delete
		/// <summary>
		/// spOAUTH_TOKENS_Delete
		/// </summary>
		public IDbCommand cmdOAUTH_TOKENS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTH_TOKENS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  25);
			return cmd;
		}
		#endregion

		#region spOAUTH_TOKENS_Update
		/// <summary>
		/// spOAUTH_TOKENS_Update
		/// </summary>
		public void spOAUTH_TOKENS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, DateTime dtTOKEN_EXPIRES_AT, string sREFRESH_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTH_TOKENS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 4000);
							IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
							IDbDataParameter parTOKEN_EXPIRES_AT = Sql.AddParameter(cmd, "@TOKEN_EXPIRES_AT", dtTOKEN_EXPIRES_AT );
							IDbDataParameter parREFRESH_TOKEN    = Sql.AddParameter(cmd, "@REFRESH_TOKEN"   , sREFRESH_TOKEN     , 4000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTH_TOKENS_Update
		/// <summary>
		/// spOAUTH_TOKENS_Update
		/// </summary>
		public void spOAUTH_TOKENS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, DateTime dtTOKEN_EXPIRES_AT, string sREFRESH_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTH_TOKENS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 4000);
				IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
				IDbDataParameter parTOKEN_EXPIRES_AT = Sql.AddParameter(cmd, "@TOKEN_EXPIRES_AT", dtTOKEN_EXPIRES_AT );
				IDbDataParameter parREFRESH_TOKEN    = Sql.AddParameter(cmd, "@REFRESH_TOKEN"   , sREFRESH_TOKEN     , 4000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTH_TOKENS_Update
		/// <summary>
		/// spOAUTH_TOKENS_Update
		/// </summary>
		public IDbCommand cmdOAUTH_TOKENS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTH_TOKENS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parTOKEN            = Sql.CreateParameter(cmd, "@TOKEN"           , "string", 4000);
			IDbDataParameter parSECRET           = Sql.CreateParameter(cmd, "@SECRET"          , "string",  50);
			IDbDataParameter parTOKEN_EXPIRES_AT = Sql.CreateParameter(cmd, "@TOKEN_EXPIRES_AT", "DateTime",   8);
			IDbDataParameter parREFRESH_TOKEN    = Sql.CreateParameter(cmd, "@REFRESH_TOKEN"   , "string", 4000);
			return cmd;
		}
		#endregion

		#region spOAUTHKEYS_Delete
		/// <summary>
		/// spOAUTHKEYS_Delete
		/// </summary>
		public void spOAUTHKEYS_Delete(Guid gASSIGNED_USER_ID, string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTHKEYS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTHKEYS_Delete
		/// <summary>
		/// spOAUTHKEYS_Delete
		/// </summary>
		public void spOAUTHKEYS_Delete(Guid gASSIGNED_USER_ID, string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTHKEYS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTHKEYS_Delete
		/// <summary>
		/// spOAUTHKEYS_Delete
		/// </summary>
		public IDbCommand cmdOAUTHKEYS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTHKEYS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  25);
			return cmd;
		}
		#endregion

		#region spOAUTHKEYS_Update
		/// <summary>
		/// spOAUTHKEYS_Update
		/// </summary>
		public void spOAUTHKEYS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, string sVERIFIER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTHKEYS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
							IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 200);
							IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
							IDbDataParameter parVERIFIER         = Sql.AddParameter(cmd, "@VERIFIER"        , sVERIFIER          ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTHKEYS_Update
		/// <summary>
		/// spOAUTHKEYS_Update
		/// </summary>
		public void spOAUTHKEYS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, string sVERIFIER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTHKEYS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
				IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 200);
				IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
				IDbDataParameter parVERIFIER         = Sql.AddParameter(cmd, "@VERIFIER"        , sVERIFIER          ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTHKEYS_Update
		/// <summary>
		/// spOAUTHKEYS_Update
		/// </summary>
		public IDbCommand cmdOAUTHKEYS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTHKEYS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  25);
			IDbDataParameter parTOKEN            = Sql.CreateParameter(cmd, "@TOKEN"           , "string", 200);
			IDbDataParameter parSECRET           = Sql.CreateParameter(cmd, "@SECRET"          , "string",  50);
			IDbDataParameter parVERIFIER         = Sql.CreateParameter(cmd, "@VERIFIER"        , "string",  50);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_CONTACTS_Delete
		/// <summary>
		/// spOPPORTUNITIES_CONTACTS_Delete
		/// </summary>
		public void spOPPORTUNITIES_CONTACTS_Delete(Guid gOPPORTUNITY_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Delet";
							else
								cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_CONTACTS_Delete
		/// <summary>
		/// spOPPORTUNITIES_CONTACTS_Delete
		/// </summary>
		public void spOPPORTUNITIES_CONTACTS_Delete(Guid gOPPORTUNITY_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Delet";
				else
					cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_CONTACTS_Delete
		/// <summary>
		/// spOPPORTUNITIES_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Delet";
			else
				cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_CONTACTS_Update
		/// <summary>
		/// spOPPORTUNITIES_CONTACTS_Update
		/// </summary>
		public void spOPPORTUNITIES_CONTACTS_Update(Guid gOPPORTUNITY_ID, Guid gCONTACT_ID, string sCONTACT_ROLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Updat";
							else
								cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_CONTACTS_Update
		/// <summary>
		/// spOPPORTUNITIES_CONTACTS_Update
		/// </summary>
		public void spOPPORTUNITIES_CONTACTS_Update(Guid gOPPORTUNITY_ID, Guid gCONTACT_ID, string sCONTACT_ROLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Updat";
				else
					cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_CONTACTS_Update
		/// <summary>
		/// spOPPORTUNITIES_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Updat";
			else
				cmd.CommandText = "spOPPORTUNITIES_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ROLE     = Sql.CreateParameter(cmd, "@CONTACT_ROLE"    , "string",  50);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_Delete
		/// <summary>
		/// spOPPORTUNITIES_Delete
		/// </summary>
		public void spOPPORTUNITIES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_Delete
		/// <summary>
		/// spOPPORTUNITIES_Delete
		/// </summary>
		public void spOPPORTUNITIES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_Delete
		/// <summary>
		/// spOPPORTUNITIES_Delete
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_DOCUMENTS_Delete
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_Delete
		/// </summary>
		public void spOPPORTUNITIES_DOCUMENTS_Delete(Guid gOPPORTUNITY_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Dele";
							else
								cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_DOCUMENTS_Delete
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_Delete
		/// </summary>
		public void spOPPORTUNITIES_DOCUMENTS_Delete(Guid gOPPORTUNITY_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Dele";
				else
					cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_DOCUMENTS_Delete
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_Delete
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_DOCUMENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Dele";
			else
				cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_DOCUMENTS_GetLatest
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_GetLatest
		/// </summary>
		public void spOPPORTUNITIES_DOCUMENTS_GetLatest(Guid gOPPORTUNITY_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_GetL";
							else
								cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_GetLatest";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_DOCUMENTS_GetLatest
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_GetLatest
		/// </summary>
		public void spOPPORTUNITIES_DOCUMENTS_GetLatest(Guid gOPPORTUNITY_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_GetL";
				else
					cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_GetLatest";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_DOCUMENTS_GetLatest
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_GetLatest
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_DOCUMENTS_GetLatest(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_GetL";
			else
				cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_GetLatest";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_DOCUMENTS_Update
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_Update
		/// </summary>
		public void spOPPORTUNITIES_DOCUMENTS_Update(Guid gOPPORTUNITY_ID, Guid gDOCUMENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Upda";
							else
								cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_DOCUMENTS_Update
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_Update
		/// </summary>
		public void spOPPORTUNITIES_DOCUMENTS_Update(Guid gOPPORTUNITY_ID, Guid gDOCUMENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Upda";
				else
					cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parDOCUMENT_ID      = Sql.AddParameter(cmd, "@DOCUMENT_ID"     , gDOCUMENT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_DOCUMENTS_Update
		/// <summary>
		/// spOPPORTUNITIES_DOCUMENTS_Update
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_DOCUMENTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Upda";
			else
				cmd.CommandText = "spOPPORTUNITIES_DOCUMENTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parDOCUMENT_ID      = Sql.CreateParameter(cmd, "@DOCUMENT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_InsRelated
		/// <summary>
		/// spOPPORTUNITIES_InsRelated
		/// </summary>
		public void spOPPORTUNITIES_InsRelated(Guid gOPPORTUNITY_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_InsRelated";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_InsRelated
		/// <summary>
		/// spOPPORTUNITIES_InsRelated
		/// </summary>
		public void spOPPORTUNITIES_InsRelated(Guid gOPPORTUNITY_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_InsRelated";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_InsRelated
		/// <summary>
		/// spOPPORTUNITIES_InsRelated
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_InsRelated(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_InsRelated";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_MassDelete
		/// <summary>
		/// spOPPORTUNITIES_MassDelete
		/// </summary>
		public void spOPPORTUNITIES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_MassDelete
		/// <summary>
		/// spOPPORTUNITIES_MassDelete
		/// </summary>
		public void spOPPORTUNITIES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_MassDelete
		/// <summary>
		/// spOPPORTUNITIES_MassDelete
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_MassSync
		/// <summary>
		/// spOPPORTUNITIES_MassSync
		/// </summary>
		public void spOPPORTUNITIES_MassSync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_MassSync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_MassSync
		/// <summary>
		/// spOPPORTUNITIES_MassSync
		/// </summary>
		public void spOPPORTUNITIES_MassSync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_MassSync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_MassSync
		/// <summary>
		/// spOPPORTUNITIES_MassSync
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_MassSync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_MassSync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_MassUnsync
		/// <summary>
		/// spOPPORTUNITIES_MassUnsync
		/// </summary>
		public void spOPPORTUNITIES_MassUnsync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_MassUnsync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_MassUnsync
		/// <summary>
		/// spOPPORTUNITIES_MassUnsync
		/// </summary>
		public void spOPPORTUNITIES_MassUnsync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_MassUnsync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_MassUnsync
		/// <summary>
		/// spOPPORTUNITIES_MassUnsync
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_MassUnsync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_MassUnsync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_MassUpdate
		/// <summary>
		/// spOPPORTUNITIES_MassUpdate
		/// </summary>
		public void spOPPORTUNITIES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sOPPORTUNITY_TYPE, string sLEAD_SOURCE, DateTime dtDATE_CLOSED, string sSALES_STAGE, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
							IDbDataParameter parOPPORTUNITY_TYPE  = Sql.AddParameter(cmd, "@OPPORTUNITY_TYPE" , sOPPORTUNITY_TYPE   ,  25);
							IDbDataParameter parLEAD_SOURCE       = Sql.AddParameter(cmd, "@LEAD_SOURCE"      , sLEAD_SOURCE        ,  25);
							IDbDataParameter parDATE_CLOSED       = Sql.AddParameter(cmd, "@DATE_CLOSED"      , dtDATE_CLOSED       );
							IDbDataParameter parSALES_STAGE       = Sql.AddParameter(cmd, "@SALES_STAGE"      , sSALES_STAGE        ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_MassUpdate
		/// <summary>
		/// spOPPORTUNITIES_MassUpdate
		/// </summary>
		public void spOPPORTUNITIES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sOPPORTUNITY_TYPE, string sLEAD_SOURCE, DateTime dtDATE_CLOSED, string sSALES_STAGE, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
				IDbDataParameter parOPPORTUNITY_TYPE  = Sql.AddParameter(cmd, "@OPPORTUNITY_TYPE" , sOPPORTUNITY_TYPE   ,  25);
				IDbDataParameter parLEAD_SOURCE       = Sql.AddParameter(cmd, "@LEAD_SOURCE"      , sLEAD_SOURCE        ,  25);
				IDbDataParameter parDATE_CLOSED       = Sql.AddParameter(cmd, "@DATE_CLOSED"      , dtDATE_CLOSED       );
				IDbDataParameter parSALES_STAGE       = Sql.AddParameter(cmd, "@SALES_STAGE"      , sSALES_STAGE        ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_MassUpdate
		/// <summary>
		/// spOPPORTUNITIES_MassUpdate
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parACCOUNT_ID        = Sql.CreateParameter(cmd, "@ACCOUNT_ID"       , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_TYPE  = Sql.CreateParameter(cmd, "@OPPORTUNITY_TYPE" , "string",  25);
			IDbDataParameter parLEAD_SOURCE       = Sql.CreateParameter(cmd, "@LEAD_SOURCE"      , "string",  25);
			IDbDataParameter parDATE_CLOSED       = Sql.CreateParameter(cmd, "@DATE_CLOSED"      , "DateTime",   8);
			IDbDataParameter parSALES_STAGE       = Sql.CreateParameter(cmd, "@SALES_STAGE"      , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_Merge
		/// <summary>
		/// spOPPORTUNITIES_Merge
		/// </summary>
		public void spOPPORTUNITIES_Merge(Guid gID, Guid gMERGE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_Merge";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_Merge
		/// <summary>
		/// spOPPORTUNITIES_Merge
		/// </summary>
		public void spOPPORTUNITIES_Merge(Guid gID, Guid gMERGE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_Merge";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_Merge
		/// <summary>
		/// spOPPORTUNITIES_Merge
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_Merge(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_Merge";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMERGE_ID         = Sql.CreateParameter(cmd, "@MERGE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_New
		/// <summary>
		/// spOPPORTUNITIES_New
		/// </summary>
		public void spOPPORTUNITIES_New(ref Guid gID, Guid gACCOUNT_ID, string sNAME, decimal dAMOUNT, Guid gCURRENCY_ID, DateTime dtDATE_CLOSED, string sSALES_STAGE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gB2C_CONTACT_ID, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parAMOUNT            = Sql.AddParameter(cmd, "@AMOUNT"           , dAMOUNT             );
							IDbDataParameter parCURRENCY_ID       = Sql.AddParameter(cmd, "@CURRENCY_ID"      , gCURRENCY_ID        );
							IDbDataParameter parDATE_CLOSED       = Sql.AddParameter(cmd, "@DATE_CLOSED"      , dtDATE_CLOSED       );
							IDbDataParameter parSALES_STAGE       = Sql.AddParameter(cmd, "@SALES_STAGE"      , sSALES_STAGE        ,  25);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parB2C_CONTACT_ID    = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"   , gB2C_CONTACT_ID     );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_New
		/// <summary>
		/// spOPPORTUNITIES_New
		/// </summary>
		public void spOPPORTUNITIES_New(ref Guid gID, Guid gACCOUNT_ID, string sNAME, decimal dAMOUNT, Guid gCURRENCY_ID, DateTime dtDATE_CLOSED, string sSALES_STAGE, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gB2C_CONTACT_ID, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parACCOUNT_ID        = Sql.AddParameter(cmd, "@ACCOUNT_ID"       , gACCOUNT_ID         );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parAMOUNT            = Sql.AddParameter(cmd, "@AMOUNT"           , dAMOUNT             );
				IDbDataParameter parCURRENCY_ID       = Sql.AddParameter(cmd, "@CURRENCY_ID"      , gCURRENCY_ID        );
				IDbDataParameter parDATE_CLOSED       = Sql.AddParameter(cmd, "@DATE_CLOSED"      , dtDATE_CLOSED       );
				IDbDataParameter parSALES_STAGE       = Sql.AddParameter(cmd, "@SALES_STAGE"      , sSALES_STAGE        ,  25);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parB2C_CONTACT_ID    = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"   , gB2C_CONTACT_ID     );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_New
		/// <summary>
		/// spOPPORTUNITIES_New
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parACCOUNT_ID        = Sql.CreateParameter(cmd, "@ACCOUNT_ID"       , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parAMOUNT            = Sql.CreateParameter(cmd, "@AMOUNT"           , "decimal",   8);
			IDbDataParameter parCURRENCY_ID       = Sql.CreateParameter(cmd, "@CURRENCY_ID"      , "Guid",  16);
			IDbDataParameter parDATE_CLOSED       = Sql.CreateParameter(cmd, "@DATE_CLOSED"      , "DateTime",   8);
			IDbDataParameter parSALES_STAGE       = Sql.CreateParameter(cmd, "@SALES_STAGE"      , "string",  25);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parB2C_CONTACT_ID    = Sql.CreateParameter(cmd, "@B2C_CONTACT_ID"   , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_STREAM_InsertPost
		/// <summary>
		/// spOPPORTUNITIES_STREAM_InsertPost
		/// </summary>
		public void spOPPORTUNITIES_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spOPPORTUNITIES_STREAM_InsertP";
							else
								cmd.CommandText = "spOPPORTUNITIES_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_STREAM_InsertPost
		/// <summary>
		/// spOPPORTUNITIES_STREAM_InsertPost
		/// </summary>
		public void spOPPORTUNITIES_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spOPPORTUNITIES_STREAM_InsertP";
				else
					cmd.CommandText = "spOPPORTUNITIES_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_STREAM_InsertPost
		/// <summary>
		/// spOPPORTUNITIES_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spOPPORTUNITIES_STREAM_InsertP";
			else
				cmd.CommandText = "spOPPORTUNITIES_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_Undelete
		/// <summary>
		/// spOPPORTUNITIES_Undelete
		/// </summary>
		public void spOPPORTUNITIES_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_Undelete
		/// <summary>
		/// spOPPORTUNITIES_Undelete
		/// </summary>
		public void spOPPORTUNITIES_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_Undelete
		/// <summary>
		/// spOPPORTUNITIES_Undelete
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_Update
		/// <summary>
		/// spOPPORTUNITIES_Update
		/// </summary>
		public void spOPPORTUNITIES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sNAME, string sOPPORTUNITY_TYPE, string sLEAD_SOURCE, decimal dAMOUNT, Guid gCURRENCY_ID, DateTime dtDATE_CLOSED, string sNEXT_STEP, string sSALES_STAGE, float flPROBABILITY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, string sACCOUNT_NAME, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCAMPAIGN_ID, bool bEXCHANGE_FOLDER, Guid gB2C_CONTACT_ID, Guid gLEAD_ID, string sTAG_SET_NAME, string sOPPORTUNITY_NUMBER, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
							IDbDataParameter parACCOUNT_ID         = Sql.AddParameter(cmd, "@ACCOUNT_ID"        , gACCOUNT_ID          );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 150);
							IDbDataParameter parOPPORTUNITY_TYPE   = Sql.AddParameter(cmd, "@OPPORTUNITY_TYPE"  , sOPPORTUNITY_TYPE    , 255);
							IDbDataParameter parLEAD_SOURCE        = Sql.AddParameter(cmd, "@LEAD_SOURCE"       , sLEAD_SOURCE         ,  50);
							IDbDataParameter parAMOUNT             = Sql.AddParameter(cmd, "@AMOUNT"            , dAMOUNT              );
							IDbDataParameter parCURRENCY_ID        = Sql.AddParameter(cmd, "@CURRENCY_ID"       , gCURRENCY_ID         );
							IDbDataParameter parDATE_CLOSED        = Sql.AddParameter(cmd, "@DATE_CLOSED"       , dtDATE_CLOSED        );
							IDbDataParameter parNEXT_STEP          = Sql.AddParameter(cmd, "@NEXT_STEP"         , sNEXT_STEP           , 100);
							IDbDataParameter parSALES_STAGE        = Sql.AddParameter(cmd, "@SALES_STAGE"       , sSALES_STAGE         ,  25);
							IDbDataParameter parPROBABILITY        = Sql.AddParameter(cmd, "@PROBABILITY"       , flPROBABILITY        );
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
							IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
							IDbDataParameter parACCOUNT_NAME       = Sql.AddParameter(cmd, "@ACCOUNT_NAME"      , sACCOUNT_NAME        , 100);
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							IDbDataParameter parTEAM_SET_LIST      = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"     , sTEAM_SET_LIST       , 8000);
							IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
							IDbDataParameter parEXCHANGE_FOLDER    = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"   , bEXCHANGE_FOLDER     );
							IDbDataParameter parB2C_CONTACT_ID     = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"    , gB2C_CONTACT_ID      );
							IDbDataParameter parLEAD_ID            = Sql.AddParameter(cmd, "@LEAD_ID"           , gLEAD_ID             );
							IDbDataParameter parTAG_SET_NAME       = Sql.AddParameter(cmd, "@TAG_SET_NAME"      , sTAG_SET_NAME        , 4000);
							IDbDataParameter parOPPORTUNITY_NUMBER = Sql.AddParameter(cmd, "@OPPORTUNITY_NUMBER", sOPPORTUNITY_NUMBER  ,  30);
							IDbDataParameter parASSIGNED_SET_LIST  = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST" , sASSIGNED_SET_LIST   , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_Update
		/// <summary>
		/// spOPPORTUNITIES_Update
		/// </summary>
		public void spOPPORTUNITIES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gACCOUNT_ID, string sNAME, string sOPPORTUNITY_TYPE, string sLEAD_SOURCE, decimal dAMOUNT, Guid gCURRENCY_ID, DateTime dtDATE_CLOSED, string sNEXT_STEP, string sSALES_STAGE, float flPROBABILITY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, string sACCOUNT_NAME, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gCAMPAIGN_ID, bool bEXCHANGE_FOLDER, Guid gB2C_CONTACT_ID, Guid gLEAD_ID, string sTAG_SET_NAME, string sOPPORTUNITY_NUMBER, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
				IDbDataParameter parACCOUNT_ID         = Sql.AddParameter(cmd, "@ACCOUNT_ID"        , gACCOUNT_ID          );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                , 150);
				IDbDataParameter parOPPORTUNITY_TYPE   = Sql.AddParameter(cmd, "@OPPORTUNITY_TYPE"  , sOPPORTUNITY_TYPE    , 255);
				IDbDataParameter parLEAD_SOURCE        = Sql.AddParameter(cmd, "@LEAD_SOURCE"       , sLEAD_SOURCE         ,  50);
				IDbDataParameter parAMOUNT             = Sql.AddParameter(cmd, "@AMOUNT"            , dAMOUNT              );
				IDbDataParameter parCURRENCY_ID        = Sql.AddParameter(cmd, "@CURRENCY_ID"       , gCURRENCY_ID         );
				IDbDataParameter parDATE_CLOSED        = Sql.AddParameter(cmd, "@DATE_CLOSED"       , dtDATE_CLOSED        );
				IDbDataParameter parNEXT_STEP          = Sql.AddParameter(cmd, "@NEXT_STEP"         , sNEXT_STEP           , 100);
				IDbDataParameter parSALES_STAGE        = Sql.AddParameter(cmd, "@SALES_STAGE"       , sSALES_STAGE         ,  25);
				IDbDataParameter parPROBABILITY        = Sql.AddParameter(cmd, "@PROBABILITY"       , flPROBABILITY        );
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
				IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
				IDbDataParameter parACCOUNT_NAME       = Sql.AddParameter(cmd, "@ACCOUNT_NAME"      , sACCOUNT_NAME        , 100);
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				IDbDataParameter parTEAM_SET_LIST      = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"     , sTEAM_SET_LIST       , 8000);
				IDbDataParameter parCAMPAIGN_ID        = Sql.AddParameter(cmd, "@CAMPAIGN_ID"       , gCAMPAIGN_ID         );
				IDbDataParameter parEXCHANGE_FOLDER    = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"   , bEXCHANGE_FOLDER     );
				IDbDataParameter parB2C_CONTACT_ID     = Sql.AddParameter(cmd, "@B2C_CONTACT_ID"    , gB2C_CONTACT_ID      );
				IDbDataParameter parLEAD_ID            = Sql.AddParameter(cmd, "@LEAD_ID"           , gLEAD_ID             );
				IDbDataParameter parTAG_SET_NAME       = Sql.AddParameter(cmd, "@TAG_SET_NAME"      , sTAG_SET_NAME        , 4000);
				IDbDataParameter parOPPORTUNITY_NUMBER = Sql.AddParameter(cmd, "@OPPORTUNITY_NUMBER", sOPPORTUNITY_NUMBER  ,  30);
				IDbDataParameter parASSIGNED_SET_LIST  = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST" , sASSIGNED_SET_LIST   , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_Update
		/// <summary>
		/// spOPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID   = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"  , "Guid",  16);
			IDbDataParameter parACCOUNT_ID         = Sql.CreateParameter(cmd, "@ACCOUNT_ID"        , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string", 150);
			IDbDataParameter parOPPORTUNITY_TYPE   = Sql.CreateParameter(cmd, "@OPPORTUNITY_TYPE"  , "string", 255);
			IDbDataParameter parLEAD_SOURCE        = Sql.CreateParameter(cmd, "@LEAD_SOURCE"       , "string",  50);
			IDbDataParameter parAMOUNT             = Sql.CreateParameter(cmd, "@AMOUNT"            , "decimal",   8);
			IDbDataParameter parCURRENCY_ID        = Sql.CreateParameter(cmd, "@CURRENCY_ID"       , "Guid",  16);
			IDbDataParameter parDATE_CLOSED        = Sql.CreateParameter(cmd, "@DATE_CLOSED"       , "DateTime",   8);
			IDbDataParameter parNEXT_STEP          = Sql.CreateParameter(cmd, "@NEXT_STEP"         , "string", 100);
			IDbDataParameter parSALES_STAGE        = Sql.CreateParameter(cmd, "@SALES_STAGE"       , "string",  25);
			IDbDataParameter parPROBABILITY        = Sql.CreateParameter(cmd, "@PROBABILITY"       , "float",   8);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parPARENT_TYPE        = Sql.CreateParameter(cmd, "@PARENT_TYPE"       , "string",  25);
			IDbDataParameter parPARENT_ID          = Sql.CreateParameter(cmd, "@PARENT_ID"         , "Guid",  16);
			IDbDataParameter parACCOUNT_NAME       = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"      , "string", 100);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST      = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"     , "ansistring", 8000);
			IDbDataParameter parCAMPAIGN_ID        = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"       , "Guid",  16);
			IDbDataParameter parEXCHANGE_FOLDER    = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"   , "bool",   1);
			IDbDataParameter parB2C_CONTACT_ID     = Sql.CreateParameter(cmd, "@B2C_CONTACT_ID"    , "Guid",  16);
			IDbDataParameter parLEAD_ID            = Sql.CreateParameter(cmd, "@LEAD_ID"           , "Guid",  16);
			IDbDataParameter parTAG_SET_NAME       = Sql.CreateParameter(cmd, "@TAG_SET_NAME"      , "string", 4000);
			IDbDataParameter parOPPORTUNITY_NUMBER = Sql.CreateParameter(cmd, "@OPPORTUNITY_NUMBER", "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST" , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_USERS_Delete
		/// <summary>
		/// spOPPORTUNITIES_USERS_Delete
		/// </summary>
		public void spOPPORTUNITIES_USERS_Delete(Guid gOPPORTUNITY_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_USERS_Delete
		/// <summary>
		/// spOPPORTUNITIES_USERS_Delete
		/// </summary>
		public void spOPPORTUNITIES_USERS_Delete(Guid gOPPORTUNITY_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_USERS_Delete
		/// <summary>
		/// spOPPORTUNITIES_USERS_Delete
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOPPORTUNITIES_USERS_Update
		/// <summary>
		/// spOPPORTUNITIES_USERS_Update
		/// </summary>
		public void spOPPORTUNITIES_USERS_Update(Guid gOPPORTUNITY_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOPPORTUNITIES_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOPPORTUNITIES_USERS_Update
		/// <summary>
		/// spOPPORTUNITIES_USERS_Update
		/// </summary>
		public void spOPPORTUNITIES_USERS_Update(Guid gOPPORTUNITY_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOPPORTUNITIES_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOPPORTUNITIES_USERS_Update
		/// <summary>
		/// spOPPORTUNITIES_USERS_Update
		/// </summary>
		public IDbCommand cmdOPPORTUNITIES_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOPPORTUNITIES_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spORDERS_ACCOUNTS_Update
		/// <summary>
		/// spORDERS_ACCOUNTS_Update
		/// </summary>
		public void spORDERS_ACCOUNTS_Update(Guid gORDER_ID, Guid gACCOUNT_ID, string sACCOUNT_ROLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spORDERS_ACCOUNTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parACCOUNT_ROLE     = Sql.AddParameter(cmd, "@ACCOUNT_ROLE"    , sACCOUNT_ROLE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spORDERS_ACCOUNTS_Update
		/// <summary>
		/// spORDERS_ACCOUNTS_Update
		/// </summary>
		public void spORDERS_ACCOUNTS_Update(Guid gORDER_ID, Guid gACCOUNT_ID, string sACCOUNT_ROLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spORDERS_ACCOUNTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parACCOUNT_ROLE     = Sql.AddParameter(cmd, "@ACCOUNT_ROLE"    , sACCOUNT_ROLE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdORDERS_ACCOUNTS_Update
		/// <summary>
		/// spORDERS_ACCOUNTS_Update
		/// </summary>
		public IDbCommand cmdORDERS_ACCOUNTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spORDERS_ACCOUNTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parORDER_ID         = Sql.CreateParameter(cmd, "@ORDER_ID"        , "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parACCOUNT_ROLE     = Sql.CreateParameter(cmd, "@ACCOUNT_ROLE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spORDERS_CONTACTS_Update
		/// <summary>
		/// spORDERS_CONTACTS_Update
		/// </summary>
		public void spORDERS_CONTACTS_Update(Guid gORDER_ID, Guid gCONTACT_ID, string sCONTACT_ROLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spORDERS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spORDERS_CONTACTS_Update
		/// <summary>
		/// spORDERS_CONTACTS_Update
		/// </summary>
		public void spORDERS_CONTACTS_Update(Guid gORDER_ID, Guid gCONTACT_ID, string sCONTACT_ROLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spORDERS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdORDERS_CONTACTS_Update
		/// <summary>
		/// spORDERS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdORDERS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spORDERS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parORDER_ID         = Sql.CreateParameter(cmd, "@ORDER_ID"        , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ROLE     = Sql.CreateParameter(cmd, "@CONTACT_ROLE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spORDERS_OPPORTUNITIES_Update
		/// <summary>
		/// spORDERS_OPPORTUNITIES_Update
		/// </summary>
		public void spORDERS_OPPORTUNITIES_Update(Guid gORDER_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spORDERS_OPPORTUNITIES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spORDERS_OPPORTUNITIES_Update
		/// <summary>
		/// spORDERS_OPPORTUNITIES_Update
		/// </summary>
		public void spORDERS_OPPORTUNITIES_Update(Guid gORDER_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spORDERS_OPPORTUNITIES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parORDER_ID         = Sql.AddParameter(cmd, "@ORDER_ID"        , gORDER_ID          );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdORDERS_OPPORTUNITIES_Update
		/// <summary>
		/// spORDERS_OPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdORDERS_OPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spORDERS_OPPORTUNITIES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parORDER_ID         = Sql.CreateParameter(cmd, "@ORDER_ID"        , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOUTBOUND_EMAILS_Delete
		/// <summary>
		/// spOUTBOUND_EMAILS_Delete
		/// </summary>
		public void spOUTBOUND_EMAILS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_EMAILS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_EMAILS_Delete
		/// <summary>
		/// spOUTBOUND_EMAILS_Delete
		/// </summary>
		public void spOUTBOUND_EMAILS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_EMAILS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOUTBOUND_EMAILS_Delete
		/// <summary>
		/// spOUTBOUND_EMAILS_Delete
		/// </summary>
		public IDbCommand cmdOUTBOUND_EMAILS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_EMAILS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOUTBOUND_EMAILS_Update
		/// <summary>
		/// spOUTBOUND_EMAILS_Update
		/// </summary>
		public void spOUTBOUND_EMAILS_Update(ref Guid gID, string sNAME, string sTYPE, Guid gUSER_ID, string sMAIL_SENDTYPE, string sMAIL_SMTPTYPE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sFROM_NAME, string sFROM_ADDR, Guid gTEAM_ID, string sTEAM_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_EMAILS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  15);
							IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
							IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
							IDbDataParameter parMAIL_SMTPTYPE     = Sql.AddParameter(cmd, "@MAIL_SMTPTYPE"    , sMAIL_SMTPTYPE      ,  20);
							IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
							IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
							IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
							IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
							IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
							IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
							IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
							IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_EMAILS_Update
		/// <summary>
		/// spOUTBOUND_EMAILS_Update
		/// </summary>
		public void spOUTBOUND_EMAILS_Update(ref Guid gID, string sNAME, string sTYPE, Guid gUSER_ID, string sMAIL_SENDTYPE, string sMAIL_SMTPTYPE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sFROM_NAME, string sFROM_ADDR, Guid gTEAM_ID, string sTEAM_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_EMAILS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  15);
				IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
				IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
				IDbDataParameter parMAIL_SMTPTYPE     = Sql.AddParameter(cmd, "@MAIL_SMTPTYPE"    , sMAIL_SMTPTYPE      ,  20);
				IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
				IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
				IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
				IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
				IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
				IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
				IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
				IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdOUTBOUND_EMAILS_Update
		/// <summary>
		/// spOUTBOUND_EMAILS_Update
		/// </summary>
		public IDbCommand cmdOUTBOUND_EMAILS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_EMAILS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string",  15);
			IDbDataParameter parUSER_ID           = Sql.CreateParameter(cmd, "@USER_ID"          , "Guid",  16);
			IDbDataParameter parMAIL_SENDTYPE     = Sql.CreateParameter(cmd, "@MAIL_SENDTYPE"    , "string",  25);
			IDbDataParameter parMAIL_SMTPTYPE     = Sql.CreateParameter(cmd, "@MAIL_SMTPTYPE"    , "string",  20);
			IDbDataParameter parMAIL_SMTPSERVER   = Sql.CreateParameter(cmd, "@MAIL_SMTPSERVER"  , "string", 100);
			IDbDataParameter parMAIL_SMTPPORT     = Sql.CreateParameter(cmd, "@MAIL_SMTPPORT"    , "Int32",   4);
			IDbDataParameter parMAIL_SMTPUSER     = Sql.CreateParameter(cmd, "@MAIL_SMTPUSER"    , "string", 100);
			IDbDataParameter parMAIL_SMTPPASS     = Sql.CreateParameter(cmd, "@MAIL_SMTPPASS"    , "string", 100);
			IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.CreateParameter(cmd, "@MAIL_SMTPAUTH_REQ", "bool",   1);
			IDbDataParameter parMAIL_SMTPSSL      = Sql.CreateParameter(cmd, "@MAIL_SMTPSSL"     , "Int32",   4);
			IDbDataParameter parFROM_NAME         = Sql.CreateParameter(cmd, "@FROM_NAME"        , "string", 100);
			IDbDataParameter parFROM_ADDR         = Sql.CreateParameter(cmd, "@FROM_ADDR"        , "string", 100);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spOUTBOUND_EMAILS_UpdateUser
		/// <summary>
		/// spOUTBOUND_EMAILS_UpdateUser
		/// </summary>
		public void spOUTBOUND_EMAILS_UpdateUser(Guid gUSER_ID, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_EMAILS_UpdateUser";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
							IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
							IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
							IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
							IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
							IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
							IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
							IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_EMAILS_UpdateUser
		/// <summary>
		/// spOUTBOUND_EMAILS_UpdateUser
		/// </summary>
		public void spOUTBOUND_EMAILS_UpdateUser(Guid gUSER_ID, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_EMAILS_UpdateUser";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
				IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
				IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
				IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
				IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
				IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
				IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
				IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOUTBOUND_EMAILS_UpdateUser
		/// <summary>
		/// spOUTBOUND_EMAILS_UpdateUser
		/// </summary>
		public IDbCommand cmdOUTBOUND_EMAILS_UpdateUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_EMAILS_UpdateUser";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parUSER_ID           = Sql.CreateParameter(cmd, "@USER_ID"          , "Guid",  16);
			IDbDataParameter parMAIL_SMTPUSER     = Sql.CreateParameter(cmd, "@MAIL_SMTPUSER"    , "string", 100);
			IDbDataParameter parMAIL_SMTPPASS     = Sql.CreateParameter(cmd, "@MAIL_SMTPPASS"    , "string", 100);
			IDbDataParameter parMAIL_SMTPSERVER   = Sql.CreateParameter(cmd, "@MAIL_SMTPSERVER"  , "string", 100);
			IDbDataParameter parMAIL_SMTPPORT     = Sql.CreateParameter(cmd, "@MAIL_SMTPPORT"    , "Int32",   4);
			IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.CreateParameter(cmd, "@MAIL_SMTPAUTH_REQ", "bool",   1);
			IDbDataParameter parMAIL_SMTPSSL      = Sql.CreateParameter(cmd, "@MAIL_SMTPSSL"     , "Int32",   4);
			IDbDataParameter parMAIL_SENDTYPE     = Sql.CreateParameter(cmd, "@MAIL_SENDTYPE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spOUTBOUND_SMS_Delete
		/// <summary>
		/// spOUTBOUND_SMS_Delete
		/// </summary>
		public void spOUTBOUND_SMS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_SMS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_SMS_Delete
		/// <summary>
		/// spOUTBOUND_SMS_Delete
		/// </summary>
		public void spOUTBOUND_SMS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_SMS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOUTBOUND_SMS_Delete
		/// <summary>
		/// spOUTBOUND_SMS_Delete
		/// </summary>
		public IDbCommand cmdOUTBOUND_SMS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_SMS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOUTBOUND_SMS_Update
		/// <summary>
		/// spOUTBOUND_SMS_Update
		/// </summary>
		public void spOUTBOUND_SMS_Update(ref Guid gID, string sNAME, Guid gUSER_ID, string sFROM_NUMBER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_SMS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parFROM_NUMBER      = Sql.AddParameter(cmd, "@FROM_NUMBER"     , sFROM_NUMBER       , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_SMS_Update
		/// <summary>
		/// spOUTBOUND_SMS_Update
		/// </summary>
		public void spOUTBOUND_SMS_Update(ref Guid gID, string sNAME, Guid gUSER_ID, string sFROM_NUMBER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_SMS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parFROM_NUMBER      = Sql.AddParameter(cmd, "@FROM_NUMBER"     , sFROM_NUMBER       , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdOUTBOUND_SMS_Update
		/// <summary>
		/// spOUTBOUND_SMS_Update
		/// </summary>
		public IDbCommand cmdOUTBOUND_SMS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_SMS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  60);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parFROM_NUMBER      = Sql.CreateParameter(cmd, "@FROM_NUMBER"     , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spOUTBOUND_SMS_UpdateUser
		/// <summary>
		/// spOUTBOUND_SMS_UpdateUser
		/// </summary>
		public void spOUTBOUND_SMS_UpdateUser(Guid gUSER_ID, string sUSER_NAME, string sFROM_NUMBER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_SMS_UpdateUser";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							IDbDataParameter parFROM_NUMBER      = Sql.AddParameter(cmd, "@FROM_NUMBER"     , sFROM_NUMBER       , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_SMS_UpdateUser
		/// <summary>
		/// spOUTBOUND_SMS_UpdateUser
		/// </summary>
		public void spOUTBOUND_SMS_UpdateUser(Guid gUSER_ID, string sUSER_NAME, string sFROM_NUMBER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_SMS_UpdateUser";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				IDbDataParameter parFROM_NUMBER      = Sql.AddParameter(cmd, "@FROM_NUMBER"     , sFROM_NUMBER       , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOUTBOUND_SMS_UpdateUser
		/// <summary>
		/// spOUTBOUND_SMS_UpdateUser
		/// </summary>
		public IDbCommand cmdOUTBOUND_SMS_UpdateUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_SMS_UpdateUser";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			IDbDataParameter parFROM_NUMBER      = Sql.CreateParameter(cmd, "@FROM_NUMBER"     , "string", 100);
			return cmd;
		}
		#endregion

		#region spPARENT_Delete
		/// <summary>
		/// spPARENT_Delete
		/// </summary>
		public void spPARENT_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_Delete
		/// <summary>
		/// spPARENT_Delete
		/// </summary>
		public void spPARENT_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPARENT_Delete
		/// <summary>
		/// spPARENT_Delete
		/// </summary>
		public IDbCommand cmdPARENT_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPARENT_Get
		/// <summary>
		/// spPARENT_Get
		/// </summary>
		public void spPARENT_Get(ref Guid gID, ref string sMODULE, ref string sPARENT_TYPE, ref string sPARENT_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_Get";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parMODULE      = Sql.AddParameter(cmd, "@MODULE"     , sMODULE       ,  25);
							IDbDataParameter parPARENT_TYPE = Sql.AddParameter(cmd, "@PARENT_TYPE", sPARENT_TYPE  ,  25);
							IDbDataParameter parPARENT_NAME = Sql.AddParameter(cmd, "@PARENT_NAME", sPARENT_NAME  , 150);
							parID.Direction = ParameterDirection.InputOutput;
							parMODULE.Direction = ParameterDirection.InputOutput;
							parPARENT_TYPE.Direction = ParameterDirection.InputOutput;
							parPARENT_NAME.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
							sMODULE = Sql.ToString(parMODULE.Value);
							sPARENT_TYPE = Sql.ToString(parPARENT_TYPE.Value);
							sPARENT_NAME = Sql.ToString(parPARENT_NAME.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_Get
		/// <summary>
		/// spPARENT_Get
		/// </summary>
		public void spPARENT_Get(ref Guid gID, ref string sMODULE, ref string sPARENT_TYPE, ref string sPARENT_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_Get";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parMODULE      = Sql.AddParameter(cmd, "@MODULE"     , sMODULE       ,  25);
				IDbDataParameter parPARENT_TYPE = Sql.AddParameter(cmd, "@PARENT_TYPE", sPARENT_TYPE  ,  25);
				IDbDataParameter parPARENT_NAME = Sql.AddParameter(cmd, "@PARENT_NAME", sPARENT_NAME  , 150);
				parID.Direction = ParameterDirection.InputOutput;
				parMODULE.Direction = ParameterDirection.InputOutput;
				parPARENT_TYPE.Direction = ParameterDirection.InputOutput;
				parPARENT_NAME.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
				sMODULE = Sql.ToString(parMODULE.Value);
				sPARENT_TYPE = Sql.ToString(parPARENT_TYPE.Value);
				sPARENT_NAME = Sql.ToString(parPARENT_NAME.Value);
			}
		}
		#endregion

		#region cmdPARENT_Get
		/// <summary>
		/// spPARENT_Get
		/// </summary>
		public IDbCommand cmdPARENT_Get(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_Get";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parMODULE      = Sql.CreateParameter(cmd, "@MODULE"     , "string",  25);
			IDbDataParameter parPARENT_TYPE = Sql.CreateParameter(cmd, "@PARENT_TYPE", "string",  25);
			IDbDataParameter parPARENT_NAME = Sql.CreateParameter(cmd, "@PARENT_NAME", "string", 150);
			parID.Direction = ParameterDirection.InputOutput;
			parMODULE.Direction = ParameterDirection.InputOutput;
			parPARENT_TYPE.Direction = ParameterDirection.InputOutput;
			parPARENT_NAME.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPARENT_GetWithTeam
		/// <summary>
		/// spPARENT_GetWithTeam
		/// </summary>
		public void spPARENT_GetWithTeam(ref Guid gID, ref string sMODULE, ref string sPARENT_TYPE, ref string sPARENT_NAME, ref Guid gASSIGNED_USER_ID, ref string sASSIGNED_TO, ref string sASSIGNED_TO_NAME, ref Guid gTEAM_ID, ref string sTEAM_NAME, ref Guid gTEAM_SET_ID, ref Guid gASSIGNED_SET_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_GetWithTeam";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_NAME      = Sql.AddParameter(cmd, "@PARENT_NAME"     , sPARENT_NAME       , 150);
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parASSIGNED_TO      = Sql.AddParameter(cmd, "@ASSIGNED_TO"     , sASSIGNED_TO       ,  60);
							IDbDataParameter parASSIGNED_TO_NAME = Sql.AddParameter(cmd, "@ASSIGNED_TO_NAME", sASSIGNED_TO_NAME  , 100);
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parTEAM_NAME        = Sql.AddParameter(cmd, "@TEAM_NAME"       , sTEAM_NAME         , 128);
							IDbDataParameter parTEAM_SET_ID      = Sql.AddParameter(cmd, "@TEAM_SET_ID"     , gTEAM_SET_ID       );
							IDbDataParameter parASSIGNED_SET_ID  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ID" , gASSIGNED_SET_ID   );
							parID.Direction = ParameterDirection.InputOutput;
							parMODULE.Direction = ParameterDirection.InputOutput;
							parPARENT_TYPE.Direction = ParameterDirection.InputOutput;
							parPARENT_NAME.Direction = ParameterDirection.InputOutput;
							parASSIGNED_USER_ID.Direction = ParameterDirection.InputOutput;
							parASSIGNED_TO.Direction = ParameterDirection.InputOutput;
							parASSIGNED_TO_NAME.Direction = ParameterDirection.InputOutput;
							parTEAM_ID.Direction = ParameterDirection.InputOutput;
							parTEAM_NAME.Direction = ParameterDirection.InputOutput;
							parTEAM_SET_ID.Direction = ParameterDirection.InputOutput;
							parASSIGNED_SET_ID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
							sMODULE = Sql.ToString(parMODULE.Value);
							sPARENT_TYPE = Sql.ToString(parPARENT_TYPE.Value);
							sPARENT_NAME = Sql.ToString(parPARENT_NAME.Value);
							gASSIGNED_USER_ID = Sql.ToGuid(parASSIGNED_USER_ID.Value);
							sASSIGNED_TO = Sql.ToString(parASSIGNED_TO.Value);
							sASSIGNED_TO_NAME = Sql.ToString(parASSIGNED_TO_NAME.Value);
							gTEAM_ID = Sql.ToGuid(parTEAM_ID.Value);
							sTEAM_NAME = Sql.ToString(parTEAM_NAME.Value);
							gTEAM_SET_ID = Sql.ToGuid(parTEAM_SET_ID.Value);
							gASSIGNED_SET_ID = Sql.ToGuid(parASSIGNED_SET_ID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_GetWithTeam
		/// <summary>
		/// spPARENT_GetWithTeam
		/// </summary>
		public void spPARENT_GetWithTeam(ref Guid gID, ref string sMODULE, ref string sPARENT_TYPE, ref string sPARENT_NAME, ref Guid gASSIGNED_USER_ID, ref string sASSIGNED_TO, ref string sASSIGNED_TO_NAME, ref Guid gTEAM_ID, ref string sTEAM_NAME, ref Guid gTEAM_SET_ID, ref Guid gASSIGNED_SET_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_GetWithTeam";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_NAME      = Sql.AddParameter(cmd, "@PARENT_NAME"     , sPARENT_NAME       , 150);
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parASSIGNED_TO      = Sql.AddParameter(cmd, "@ASSIGNED_TO"     , sASSIGNED_TO       ,  60);
				IDbDataParameter parASSIGNED_TO_NAME = Sql.AddParameter(cmd, "@ASSIGNED_TO_NAME", sASSIGNED_TO_NAME  , 100);
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parTEAM_NAME        = Sql.AddParameter(cmd, "@TEAM_NAME"       , sTEAM_NAME         , 128);
				IDbDataParameter parTEAM_SET_ID      = Sql.AddParameter(cmd, "@TEAM_SET_ID"     , gTEAM_SET_ID       );
				IDbDataParameter parASSIGNED_SET_ID  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ID" , gASSIGNED_SET_ID   );
				parID.Direction = ParameterDirection.InputOutput;
				parMODULE.Direction = ParameterDirection.InputOutput;
				parPARENT_TYPE.Direction = ParameterDirection.InputOutput;
				parPARENT_NAME.Direction = ParameterDirection.InputOutput;
				parASSIGNED_USER_ID.Direction = ParameterDirection.InputOutput;
				parASSIGNED_TO.Direction = ParameterDirection.InputOutput;
				parASSIGNED_TO_NAME.Direction = ParameterDirection.InputOutput;
				parTEAM_ID.Direction = ParameterDirection.InputOutput;
				parTEAM_NAME.Direction = ParameterDirection.InputOutput;
				parTEAM_SET_ID.Direction = ParameterDirection.InputOutput;
				parASSIGNED_SET_ID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
				sMODULE = Sql.ToString(parMODULE.Value);
				sPARENT_TYPE = Sql.ToString(parPARENT_TYPE.Value);
				sPARENT_NAME = Sql.ToString(parPARENT_NAME.Value);
				gASSIGNED_USER_ID = Sql.ToGuid(parASSIGNED_USER_ID.Value);
				sASSIGNED_TO = Sql.ToString(parASSIGNED_TO.Value);
				sASSIGNED_TO_NAME = Sql.ToString(parASSIGNED_TO_NAME.Value);
				gTEAM_ID = Sql.ToGuid(parTEAM_ID.Value);
				sTEAM_NAME = Sql.ToString(parTEAM_NAME.Value);
				gTEAM_SET_ID = Sql.ToGuid(parTEAM_SET_ID.Value);
				gASSIGNED_SET_ID = Sql.ToGuid(parASSIGNED_SET_ID.Value);
			}
		}
		#endregion

		#region cmdPARENT_GetWithTeam
		/// <summary>
		/// spPARENT_GetWithTeam
		/// </summary>
		public IDbCommand cmdPARENT_GetWithTeam(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_GetWithTeam";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODULE           = Sql.CreateParameter(cmd, "@MODULE"          , "string",  25);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_NAME      = Sql.CreateParameter(cmd, "@PARENT_NAME"     , "string", 150);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_TO      = Sql.CreateParameter(cmd, "@ASSIGNED_TO"     , "string",  60);
			IDbDataParameter parASSIGNED_TO_NAME = Sql.CreateParameter(cmd, "@ASSIGNED_TO_NAME", "string", 100);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_NAME        = Sql.CreateParameter(cmd, "@TEAM_NAME"       , "string", 128);
			IDbDataParameter parTEAM_SET_ID      = Sql.CreateParameter(cmd, "@TEAM_SET_ID"     , "Guid",  16);
			IDbDataParameter parASSIGNED_SET_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ID" , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			parMODULE.Direction = ParameterDirection.InputOutput;
			parPARENT_TYPE.Direction = ParameterDirection.InputOutput;
			parPARENT_NAME.Direction = ParameterDirection.InputOutput;
			parASSIGNED_USER_ID.Direction = ParameterDirection.InputOutput;
			parASSIGNED_TO.Direction = ParameterDirection.InputOutput;
			parASSIGNED_TO_NAME.Direction = ParameterDirection.InputOutput;
			parTEAM_ID.Direction = ParameterDirection.InputOutput;
			parTEAM_NAME.Direction = ParameterDirection.InputOutput;
			parTEAM_SET_ID.Direction = ParameterDirection.InputOutput;
			parASSIGNED_SET_ID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPARENT_Merge
		/// <summary>
		/// spPARENT_Merge
		/// </summary>
		public void spPARENT_Merge(Guid gID, Guid gMERGE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_Merge";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_Merge
		/// <summary>
		/// spPARENT_Merge
		/// </summary>
		public void spPARENT_Merge(Guid gID, Guid gMERGE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_Merge";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMERGE_ID         = Sql.AddParameter(cmd, "@MERGE_ID"        , gMERGE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPARENT_Merge
		/// <summary>
		/// spPARENT_Merge
		/// </summary>
		public IDbCommand cmdPARENT_Merge(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_Merge";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMERGE_ID         = Sql.CreateParameter(cmd, "@MERGE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPARENT_Undelete
		/// <summary>
		/// spPARENT_Undelete
		/// </summary>
		public void spPARENT_Undelete(Guid gID, string sAUDIT_TOKEN, string sPARENT_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_Undelete
		/// <summary>
		/// spPARENT_Undelete
		/// </summary>
		public void spPARENT_Undelete(Guid gID, string sAUDIT_TOKEN, string sPARENT_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPARENT_Undelete
		/// <summary>
		/// spPARENT_Undelete
		/// </summary>
		public IDbCommand cmdPARENT_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spPARENT_UpdateLastActivity
		/// <summary>
		/// spPARENT_UpdateLastActivity
		/// </summary>
		public void spPARENT_UpdateLastActivity(Guid gPARENT_ID, string sPARENT_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_UpdateLastActivity";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_UpdateLastActivity
		/// <summary>
		/// spPARENT_UpdateLastActivity
		/// </summary>
		public void spPARENT_UpdateLastActivity(Guid gPARENT_ID, string sPARENT_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_UpdateLastActivity";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPARENT_UpdateLastActivity
		/// <summary>
		/// spPARENT_UpdateLastActivity
		/// </summary>
		public IDbCommand cmdPARENT_UpdateLastActivity(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_UpdateLastActivity";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spPHONE_NUMBERS_Update
		/// <summary>
		/// spPHONE_NUMBERS_Update
		/// </summary>
		public void spPHONE_NUMBERS_Update(Guid gPARENT_ID, string sPARENT_TYPE, string sPHONE_TYPE, string sPHONE_NUMBER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPHONE_NUMBERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPHONE_TYPE       = Sql.AddParameter(cmd, "@PHONE_TYPE"      , sPHONE_TYPE        ,  25);
							IDbDataParameter parPHONE_NUMBER     = Sql.AddParameter(cmd, "@PHONE_NUMBER"    , sPHONE_NUMBER      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPHONE_NUMBERS_Update
		/// <summary>
		/// spPHONE_NUMBERS_Update
		/// </summary>
		public void spPHONE_NUMBERS_Update(Guid gPARENT_ID, string sPARENT_TYPE, string sPHONE_TYPE, string sPHONE_NUMBER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPHONE_NUMBERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPHONE_TYPE       = Sql.AddParameter(cmd, "@PHONE_TYPE"      , sPHONE_TYPE        ,  25);
				IDbDataParameter parPHONE_NUMBER     = Sql.AddParameter(cmd, "@PHONE_NUMBER"    , sPHONE_NUMBER      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPHONE_NUMBERS_Update
		/// <summary>
		/// spPHONE_NUMBERS_Update
		/// </summary>
		public IDbCommand cmdPHONE_NUMBERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPHONE_NUMBERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPHONE_TYPE       = Sql.CreateParameter(cmd, "@PHONE_TYPE"      , "string",  25);
			IDbDataParameter parPHONE_NUMBER     = Sql.CreateParameter(cmd, "@PHONE_NUMBER"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spPROJECT_MassSync
		/// <summary>
		/// spPROJECT_MassSync
		/// </summary>
		public void spPROJECT_MassSync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_MassSync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_MassSync
		/// <summary>
		/// spPROJECT_MassSync
		/// </summary>
		public void spPROJECT_MassSync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_MassSync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_MassSync
		/// <summary>
		/// spPROJECT_MassSync
		/// </summary>
		public IDbCommand cmdPROJECT_MassSync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_MassSync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECT_MassUnsync
		/// <summary>
		/// spPROJECT_MassUnsync
		/// </summary>
		public void spPROJECT_MassUnsync(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_MassUnsync";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_MassUnsync
		/// <summary>
		/// spPROJECT_MassUnsync
		/// </summary>
		public void spPROJECT_MassUnsync(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_MassUnsync";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_MassUnsync
		/// <summary>
		/// spPROJECT_MassUnsync
		/// </summary>
		public IDbCommand cmdPROJECT_MassUnsync(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_MassUnsync";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECT_RELATION_Delete
		/// <summary>
		/// spPROJECT_RELATION_Delete
		/// </summary>
		public void spPROJECT_RELATION_Delete(Guid gPROJECT_ID, Guid gRELATION_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_RELATION_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parRELATION_ID      = Sql.AddParameter(cmd, "@RELATION_ID"     , gRELATION_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_RELATION_Delete
		/// <summary>
		/// spPROJECT_RELATION_Delete
		/// </summary>
		public void spPROJECT_RELATION_Delete(Guid gPROJECT_ID, Guid gRELATION_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_RELATION_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parRELATION_ID      = Sql.AddParameter(cmd, "@RELATION_ID"     , gRELATION_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_RELATION_Delete
		/// <summary>
		/// spPROJECT_RELATION_Delete
		/// </summary>
		public IDbCommand cmdPROJECT_RELATION_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_RELATION_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parRELATION_ID      = Sql.CreateParameter(cmd, "@RELATION_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECT_RELATION_Update
		/// <summary>
		/// spPROJECT_RELATION_Update
		/// </summary>
		public void spPROJECT_RELATION_Update(Guid gPROJECT_ID, string sRELATION_TYPE, Guid gRELATION_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_RELATION_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parRELATION_TYPE    = Sql.AddParameter(cmd, "@RELATION_TYPE"   , sRELATION_TYPE     ,  25);
							IDbDataParameter parRELATION_ID      = Sql.AddParameter(cmd, "@RELATION_ID"     , gRELATION_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_RELATION_Update
		/// <summary>
		/// spPROJECT_RELATION_Update
		/// </summary>
		public void spPROJECT_RELATION_Update(Guid gPROJECT_ID, string sRELATION_TYPE, Guid gRELATION_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_RELATION_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parRELATION_TYPE    = Sql.AddParameter(cmd, "@RELATION_TYPE"   , sRELATION_TYPE     ,  25);
				IDbDataParameter parRELATION_ID      = Sql.AddParameter(cmd, "@RELATION_ID"     , gRELATION_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_RELATION_Update
		/// <summary>
		/// spPROJECT_RELATION_Update
		/// </summary>
		public IDbCommand cmdPROJECT_RELATION_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_RELATION_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parRELATION_TYPE    = Sql.CreateParameter(cmd, "@RELATION_TYPE"   , "string",  25);
			IDbDataParameter parRELATION_ID      = Sql.CreateParameter(cmd, "@RELATION_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECT_TASK_Update
		/// <summary>
		/// spPROJECT_TASK_Update
		/// </summary>
		public void spPROJECT_TASK_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, Guid gPARENT_ID, string sPRIORITY, string sDESCRIPTION, Int32 nORDER_NUMBER, Int32 nTASK_NUMBER, Guid gDEPENDS_ON_ID, bool bMILESTONE_FLAG, float flESTIMATED_EFFORT, float flACTUAL_EFFORT, Int32 nUTILIZATION, Int32 nPERCENT_COMPLETE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_TASK_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
							IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parORDER_NUMBER      = Sql.AddParameter(cmd, "@ORDER_NUMBER"     , nORDER_NUMBER       );
							IDbDataParameter parTASK_NUMBER       = Sql.AddParameter(cmd, "@TASK_NUMBER"      , nTASK_NUMBER        );
							IDbDataParameter parDEPENDS_ON_ID     = Sql.AddParameter(cmd, "@DEPENDS_ON_ID"    , gDEPENDS_ON_ID      );
							IDbDataParameter parMILESTONE_FLAG    = Sql.AddParameter(cmd, "@MILESTONE_FLAG"   , bMILESTONE_FLAG     );
							IDbDataParameter parESTIMATED_EFFORT  = Sql.AddParameter(cmd, "@ESTIMATED_EFFORT" , flESTIMATED_EFFORT  );
							IDbDataParameter parACTUAL_EFFORT     = Sql.AddParameter(cmd, "@ACTUAL_EFFORT"    , flACTUAL_EFFORT     );
							IDbDataParameter parUTILIZATION       = Sql.AddParameter(cmd, "@UTILIZATION"      , nUTILIZATION        );
							IDbDataParameter parPERCENT_COMPLETE  = Sql.AddParameter(cmd, "@PERCENT_COMPLETE" , nPERCENT_COMPLETE   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_TASK_Update
		/// <summary>
		/// spPROJECT_TASK_Update
		/// </summary>
		public void spPROJECT_TASK_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, Guid gPARENT_ID, string sPRIORITY, string sDESCRIPTION, Int32 nORDER_NUMBER, Int32 nTASK_NUMBER, Guid gDEPENDS_ON_ID, bool bMILESTONE_FLAG, float flESTIMATED_EFFORT, float flACTUAL_EFFORT, Int32 nUTILIZATION, Int32 nPERCENT_COMPLETE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_TASK_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
				IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parORDER_NUMBER      = Sql.AddParameter(cmd, "@ORDER_NUMBER"     , nORDER_NUMBER       );
				IDbDataParameter parTASK_NUMBER       = Sql.AddParameter(cmd, "@TASK_NUMBER"      , nTASK_NUMBER        );
				IDbDataParameter parDEPENDS_ON_ID     = Sql.AddParameter(cmd, "@DEPENDS_ON_ID"    , gDEPENDS_ON_ID      );
				IDbDataParameter parMILESTONE_FLAG    = Sql.AddParameter(cmd, "@MILESTONE_FLAG"   , bMILESTONE_FLAG     );
				IDbDataParameter parESTIMATED_EFFORT  = Sql.AddParameter(cmd, "@ESTIMATED_EFFORT" , flESTIMATED_EFFORT  );
				IDbDataParameter parACTUAL_EFFORT     = Sql.AddParameter(cmd, "@ACTUAL_EFFORT"    , flACTUAL_EFFORT     );
				IDbDataParameter parUTILIZATION       = Sql.AddParameter(cmd, "@UTILIZATION"      , nUTILIZATION        );
				IDbDataParameter parPERCENT_COMPLETE  = Sql.AddParameter(cmd, "@PERCENT_COMPLETE" , nPERCENT_COMPLETE   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROJECT_TASK_Update
		/// <summary>
		/// spPROJECT_TASK_Update
		/// </summary>
		public IDbCommand cmdPROJECT_TASK_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_TASK_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parDATE_TIME_DUE     = Sql.CreateParameter(cmd, "@DATE_TIME_DUE"    , "DateTime",   8);
			IDbDataParameter parDATE_TIME_START   = Sql.CreateParameter(cmd, "@DATE_TIME_START"  , "DateTime",   8);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parORDER_NUMBER      = Sql.CreateParameter(cmd, "@ORDER_NUMBER"     , "Int32",   4);
			IDbDataParameter parTASK_NUMBER       = Sql.CreateParameter(cmd, "@TASK_NUMBER"      , "Int32",   4);
			IDbDataParameter parDEPENDS_ON_ID     = Sql.CreateParameter(cmd, "@DEPENDS_ON_ID"    , "Guid",  16);
			IDbDataParameter parMILESTONE_FLAG    = Sql.CreateParameter(cmd, "@MILESTONE_FLAG"   , "bool",   1);
			IDbDataParameter parESTIMATED_EFFORT  = Sql.CreateParameter(cmd, "@ESTIMATED_EFFORT" , "float",   8);
			IDbDataParameter parACTUAL_EFFORT     = Sql.CreateParameter(cmd, "@ACTUAL_EFFORT"    , "float",   8);
			IDbDataParameter parUTILIZATION       = Sql.CreateParameter(cmd, "@UTILIZATION"      , "Int32",   4);
			IDbDataParameter parPERCENT_COMPLETE  = Sql.CreateParameter(cmd, "@PERCENT_COMPLETE" , "Int32",   4);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROJECT_TASKS_Delete
		/// <summary>
		/// spPROJECT_TASKS_Delete
		/// </summary>
		public void spPROJECT_TASKS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_TASKS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_TASKS_Delete
		/// <summary>
		/// spPROJECT_TASKS_Delete
		/// </summary>
		public void spPROJECT_TASKS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_TASKS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_TASKS_Delete
		/// <summary>
		/// spPROJECT_TASKS_Delete
		/// </summary>
		public IDbCommand cmdPROJECT_TASKS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_TASKS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECT_TASKS_MassDelete
		/// <summary>
		/// spPROJECT_TASKS_MassDelete
		/// </summary>
		public void spPROJECT_TASKS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_TASKS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_TASKS_MassDelete
		/// <summary>
		/// spPROJECT_TASKS_MassDelete
		/// </summary>
		public void spPROJECT_TASKS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_TASKS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_TASKS_MassDelete
		/// <summary>
		/// spPROJECT_TASKS_MassDelete
		/// </summary>
		public IDbCommand cmdPROJECT_TASKS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_TASKS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECT_TASKS_MassUpdate
		/// <summary>
		/// spPROJECT_TASKS_MassUpdate
		/// </summary>
		public void spPROJECT_TASKS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_TASKS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
							IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_TASKS_MassUpdate
		/// <summary>
		/// spPROJECT_TASKS_MassUpdate
		/// </summary>
		public void spPROJECT_TASKS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_TASKS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
				IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_TASKS_MassUpdate
		/// <summary>
		/// spPROJECT_TASKS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROJECT_TASKS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_TASKS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parDATE_TIME_DUE     = Sql.CreateParameter(cmd, "@DATE_TIME_DUE"    , "DateTime",   8);
			IDbDataParameter parDATE_TIME_START   = Sql.CreateParameter(cmd, "@DATE_TIME_START"  , "DateTime",   8);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spPROJECT_TASKS_New
		/// <summary>
		/// spPROJECT_TASKS_New
		/// </summary>
		public void spPROJECT_TASKS_New(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, Guid gPARENT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_TASKS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_TASKS_New
		/// <summary>
		/// spPROJECT_TASKS_New
		/// </summary>
		public void spPROJECT_TASKS_New(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, Guid gPARENT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_TASKS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROJECT_TASKS_New
		/// <summary>
		/// spPROJECT_TASKS_New
		/// </summary>
		public IDbCommand cmdPROJECT_TASKS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_TASKS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROJECT_TASKS_Undelete
		/// <summary>
		/// spPROJECT_TASKS_Undelete
		/// </summary>
		public void spPROJECT_TASKS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_TASKS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_TASKS_Undelete
		/// <summary>
		/// spPROJECT_TASKS_Undelete
		/// </summary>
		public void spPROJECT_TASKS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_TASKS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_TASKS_Undelete
		/// <summary>
		/// spPROJECT_TASKS_Undelete
		/// </summary>
		public IDbCommand cmdPROJECT_TASKS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_TASKS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spPROJECT_TASKS_Update
		/// <summary>
		/// spPROJECT_TASKS_Update
		/// </summary>
		public void spPROJECT_TASKS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, Guid gPARENT_ID, string sPRIORITY, string sDESCRIPTION, Int32 nORDER_NUMBER, Int32 nTASK_NUMBER, Guid gDEPENDS_ON_ID, bool bMILESTONE_FLAG, float flESTIMATED_EFFORT, float flACTUAL_EFFORT, Int32 nUTILIZATION, Int32 nPERCENT_COMPLETE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_TASKS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
							IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parORDER_NUMBER      = Sql.AddParameter(cmd, "@ORDER_NUMBER"     , nORDER_NUMBER       );
							IDbDataParameter parTASK_NUMBER       = Sql.AddParameter(cmd, "@TASK_NUMBER"      , nTASK_NUMBER        );
							IDbDataParameter parDEPENDS_ON_ID     = Sql.AddParameter(cmd, "@DEPENDS_ON_ID"    , gDEPENDS_ON_ID      );
							IDbDataParameter parMILESTONE_FLAG    = Sql.AddParameter(cmd, "@MILESTONE_FLAG"   , bMILESTONE_FLAG     );
							IDbDataParameter parESTIMATED_EFFORT  = Sql.AddParameter(cmd, "@ESTIMATED_EFFORT" , flESTIMATED_EFFORT  );
							IDbDataParameter parACTUAL_EFFORT     = Sql.AddParameter(cmd, "@ACTUAL_EFFORT"    , flACTUAL_EFFORT     );
							IDbDataParameter parUTILIZATION       = Sql.AddParameter(cmd, "@UTILIZATION"      , nUTILIZATION        );
							IDbDataParameter parPERCENT_COMPLETE  = Sql.AddParameter(cmd, "@PERCENT_COMPLETE" , nPERCENT_COMPLETE   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_TASKS_Update
		/// <summary>
		/// spPROJECT_TASKS_Update
		/// </summary>
		public void spPROJECT_TASKS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, Guid gPARENT_ID, string sPRIORITY, string sDESCRIPTION, Int32 nORDER_NUMBER, Int32 nTASK_NUMBER, Guid gDEPENDS_ON_ID, bool bMILESTONE_FLAG, float flESTIMATED_EFFORT, float flACTUAL_EFFORT, Int32 nUTILIZATION, Int32 nPERCENT_COMPLETE, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_TASKS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
				IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parORDER_NUMBER      = Sql.AddParameter(cmd, "@ORDER_NUMBER"     , nORDER_NUMBER       );
				IDbDataParameter parTASK_NUMBER       = Sql.AddParameter(cmd, "@TASK_NUMBER"      , nTASK_NUMBER        );
				IDbDataParameter parDEPENDS_ON_ID     = Sql.AddParameter(cmd, "@DEPENDS_ON_ID"    , gDEPENDS_ON_ID      );
				IDbDataParameter parMILESTONE_FLAG    = Sql.AddParameter(cmd, "@MILESTONE_FLAG"   , bMILESTONE_FLAG     );
				IDbDataParameter parESTIMATED_EFFORT  = Sql.AddParameter(cmd, "@ESTIMATED_EFFORT" , flESTIMATED_EFFORT  );
				IDbDataParameter parACTUAL_EFFORT     = Sql.AddParameter(cmd, "@ACTUAL_EFFORT"    , flACTUAL_EFFORT     );
				IDbDataParameter parUTILIZATION       = Sql.AddParameter(cmd, "@UTILIZATION"      , nUTILIZATION        );
				IDbDataParameter parPERCENT_COMPLETE  = Sql.AddParameter(cmd, "@PERCENT_COMPLETE" , nPERCENT_COMPLETE   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROJECT_TASKS_Update
		/// <summary>
		/// spPROJECT_TASKS_Update
		/// </summary>
		public IDbCommand cmdPROJECT_TASKS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_TASKS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parDATE_TIME_DUE     = Sql.CreateParameter(cmd, "@DATE_TIME_DUE"    , "DateTime",   8);
			IDbDataParameter parDATE_TIME_START   = Sql.CreateParameter(cmd, "@DATE_TIME_START"  , "DateTime",   8);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parORDER_NUMBER      = Sql.CreateParameter(cmd, "@ORDER_NUMBER"     , "Int32",   4);
			IDbDataParameter parTASK_NUMBER       = Sql.CreateParameter(cmd, "@TASK_NUMBER"      , "Int32",   4);
			IDbDataParameter parDEPENDS_ON_ID     = Sql.CreateParameter(cmd, "@DEPENDS_ON_ID"    , "Guid",  16);
			IDbDataParameter parMILESTONE_FLAG    = Sql.CreateParameter(cmd, "@MILESTONE_FLAG"   , "bool",   1);
			IDbDataParameter parESTIMATED_EFFORT  = Sql.CreateParameter(cmd, "@ESTIMATED_EFFORT" , "float",   8);
			IDbDataParameter parACTUAL_EFFORT     = Sql.CreateParameter(cmd, "@ACTUAL_EFFORT"    , "float",   8);
			IDbDataParameter parUTILIZATION       = Sql.CreateParameter(cmd, "@UTILIZATION"      , "Int32",   4);
			IDbDataParameter parPERCENT_COMPLETE  = Sql.CreateParameter(cmd, "@PERCENT_COMPLETE" , "Int32",   4);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROJECT_Update
		/// <summary>
		/// spPROJECT_Update
		/// </summary>
		public void spPROJECT_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sSTATUS, string sPRIORITY, bool bIS_TEMPLATE, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_Update";
							IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
							IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
							IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
							IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  ,  50);
							IDbDataParameter parDESCRIPTION          = Sql.AddParameter(cmd, "@DESCRIPTION"         , sDESCRIPTION           );
							IDbDataParameter parPARENT_TYPE          = Sql.AddParameter(cmd, "@PARENT_TYPE"         , sPARENT_TYPE           ,  25);
							IDbDataParameter parPARENT_ID            = Sql.AddParameter(cmd, "@PARENT_ID"           , gPARENT_ID             );
							IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
							IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
							IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
							IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
							IDbDataParameter parSTATUS               = Sql.AddParameter(cmd, "@STATUS"              , sSTATUS                ,  25);
							IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
							IDbDataParameter parIS_TEMPLATE          = Sql.AddParameter(cmd, "@IS_TEMPLATE"         , bIS_TEMPLATE           );
							IDbDataParameter parEXCHANGE_FOLDER      = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"     , bEXCHANGE_FOLDER       );
							IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
							IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_Update
		/// <summary>
		/// spPROJECT_Update
		/// </summary>
		public void spPROJECT_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sSTATUS, string sPRIORITY, bool bIS_TEMPLATE, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_Update";
				IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
				IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
				IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
				IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  ,  50);
				IDbDataParameter parDESCRIPTION          = Sql.AddParameter(cmd, "@DESCRIPTION"         , sDESCRIPTION           );
				IDbDataParameter parPARENT_TYPE          = Sql.AddParameter(cmd, "@PARENT_TYPE"         , sPARENT_TYPE           ,  25);
				IDbDataParameter parPARENT_ID            = Sql.AddParameter(cmd, "@PARENT_ID"           , gPARENT_ID             );
				IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
				IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
				IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
				IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
				IDbDataParameter parSTATUS               = Sql.AddParameter(cmd, "@STATUS"              , sSTATUS                ,  25);
				IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
				IDbDataParameter parIS_TEMPLATE          = Sql.AddParameter(cmd, "@IS_TEMPLATE"         , bIS_TEMPLATE           );
				IDbDataParameter parEXCHANGE_FOLDER      = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"     , bEXCHANGE_FOLDER       );
				IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
				IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROJECT_Update
		/// <summary>
		/// spPROJECT_Update
		/// </summary>
		public IDbCommand cmdPROJECT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_Update";
			IDbDataParameter parID                   = Sql.CreateParameter(cmd, "@ID"                  , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID     = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"    , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID     = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"    , "Guid",  16);
			IDbDataParameter parNAME                 = Sql.CreateParameter(cmd, "@NAME"                , "string",  50);
			IDbDataParameter parDESCRIPTION          = Sql.CreateParameter(cmd, "@DESCRIPTION"         , "string", 104857600);
			IDbDataParameter parPARENT_TYPE          = Sql.CreateParameter(cmd, "@PARENT_TYPE"         , "string",  25);
			IDbDataParameter parPARENT_ID            = Sql.CreateParameter(cmd, "@PARENT_ID"           , "Guid",  16);
			IDbDataParameter parTEAM_ID              = Sql.CreateParameter(cmd, "@TEAM_ID"             , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST        = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"       , "ansistring", 8000);
			IDbDataParameter parESTIMATED_START_DATE = Sql.CreateParameter(cmd, "@ESTIMATED_START_DATE", "DateTime",   8);
			IDbDataParameter parESTIMATED_END_DATE   = Sql.CreateParameter(cmd, "@ESTIMATED_END_DATE"  , "DateTime",   8);
			IDbDataParameter parSTATUS               = Sql.CreateParameter(cmd, "@STATUS"              , "string",  25);
			IDbDataParameter parPRIORITY             = Sql.CreateParameter(cmd, "@PRIORITY"            , "string",  25);
			IDbDataParameter parIS_TEMPLATE          = Sql.CreateParameter(cmd, "@IS_TEMPLATE"         , "bool",   1);
			IDbDataParameter parEXCHANGE_FOLDER      = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME         = Sql.CreateParameter(cmd, "@TAG_SET_NAME"        , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST    = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"   , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROJECT_USERS_Delete
		/// <summary>
		/// spPROJECT_USERS_Delete
		/// </summary>
		public void spPROJECT_USERS_Delete(Guid gPROJECT_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_USERS_Delete
		/// <summary>
		/// spPROJECT_USERS_Delete
		/// </summary>
		public void spPROJECT_USERS_Delete(Guid gPROJECT_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_USERS_Delete
		/// <summary>
		/// spPROJECT_USERS_Delete
		/// </summary>
		public IDbCommand cmdPROJECT_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECT_USERS_Update
		/// <summary>
		/// spPROJECT_USERS_Update
		/// </summary>
		public void spPROJECT_USERS_Update(Guid gPROJECT_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECT_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECT_USERS_Update
		/// <summary>
		/// spPROJECT_USERS_Update
		/// </summary>
		public void spPROJECT_USERS_Update(Guid gPROJECT_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECT_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECT_USERS_Update
		/// <summary>
		/// spPROJECT_USERS_Update
		/// </summary>
		public IDbCommand cmdPROJECT_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECT_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_ACCOUNTS_Delete
		/// <summary>
		/// spPROJECTS_ACCOUNTS_Delete
		/// </summary>
		public void spPROJECTS_ACCOUNTS_Delete(Guid gPROJECT_ID, Guid gACCOUNT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_ACCOUNTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_ACCOUNTS_Delete
		/// <summary>
		/// spPROJECTS_ACCOUNTS_Delete
		/// </summary>
		public void spPROJECTS_ACCOUNTS_Delete(Guid gPROJECT_ID, Guid gACCOUNT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_ACCOUNTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_ACCOUNTS_Delete
		/// <summary>
		/// spPROJECTS_ACCOUNTS_Delete
		/// </summary>
		public IDbCommand cmdPROJECTS_ACCOUNTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_ACCOUNTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_ACCOUNTS_Update
		/// <summary>
		/// spPROJECTS_ACCOUNTS_Update
		/// </summary>
		public void spPROJECTS_ACCOUNTS_Update(Guid gPROJECT_ID, Guid gACCOUNT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_ACCOUNTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_ACCOUNTS_Update
		/// <summary>
		/// spPROJECTS_ACCOUNTS_Update
		/// </summary>
		public void spPROJECTS_ACCOUNTS_Update(Guid gPROJECT_ID, Guid gACCOUNT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_ACCOUNTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_ACCOUNTS_Update
		/// <summary>
		/// spPROJECTS_ACCOUNTS_Update
		/// </summary>
		public IDbCommand cmdPROJECTS_ACCOUNTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_ACCOUNTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_BUGS_Delete
		/// <summary>
		/// spPROJECTS_BUGS_Delete
		/// </summary>
		public void spPROJECTS_BUGS_Delete(Guid gPROJECT_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_BUGS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_BUGS_Delete
		/// <summary>
		/// spPROJECTS_BUGS_Delete
		/// </summary>
		public void spPROJECTS_BUGS_Delete(Guid gPROJECT_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_BUGS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_BUGS_Delete
		/// <summary>
		/// spPROJECTS_BUGS_Delete
		/// </summary>
		public IDbCommand cmdPROJECTS_BUGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_BUGS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_BUGS_Update
		/// <summary>
		/// spPROJECTS_BUGS_Update
		/// </summary>
		public void spPROJECTS_BUGS_Update(Guid gPROJECT_ID, Guid gBUG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_BUGS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_BUGS_Update
		/// <summary>
		/// spPROJECTS_BUGS_Update
		/// </summary>
		public void spPROJECTS_BUGS_Update(Guid gPROJECT_ID, Guid gBUG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_BUGS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parBUG_ID           = Sql.AddParameter(cmd, "@BUG_ID"          , gBUG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_BUGS_Update
		/// <summary>
		/// spPROJECTS_BUGS_Update
		/// </summary>
		public IDbCommand cmdPROJECTS_BUGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_BUGS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parBUG_ID           = Sql.CreateParameter(cmd, "@BUG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_CASES_Delete
		/// <summary>
		/// spPROJECTS_CASES_Delete
		/// </summary>
		public void spPROJECTS_CASES_Delete(Guid gPROJECT_ID, Guid gCASE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_CASES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_CASES_Delete
		/// <summary>
		/// spPROJECTS_CASES_Delete
		/// </summary>
		public void spPROJECTS_CASES_Delete(Guid gPROJECT_ID, Guid gCASE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_CASES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_CASES_Delete
		/// <summary>
		/// spPROJECTS_CASES_Delete
		/// </summary>
		public IDbCommand cmdPROJECTS_CASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_CASES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_CASES_Update
		/// <summary>
		/// spPROJECTS_CASES_Update
		/// </summary>
		public void spPROJECTS_CASES_Update(Guid gPROJECT_ID, Guid gCASE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_CASES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_CASES_Update
		/// <summary>
		/// spPROJECTS_CASES_Update
		/// </summary>
		public void spPROJECTS_CASES_Update(Guid gPROJECT_ID, Guid gCASE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_CASES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parCASE_ID          = Sql.AddParameter(cmd, "@CASE_ID"         , gCASE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_CASES_Update
		/// <summary>
		/// spPROJECTS_CASES_Update
		/// </summary>
		public IDbCommand cmdPROJECTS_CASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_CASES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parCASE_ID          = Sql.CreateParameter(cmd, "@CASE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_CONTACTS_Delete
		/// <summary>
		/// spPROJECTS_CONTACTS_Delete
		/// </summary>
		public void spPROJECTS_CONTACTS_Delete(Guid gPROJECT_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_CONTACTS_Delete
		/// <summary>
		/// spPROJECTS_CONTACTS_Delete
		/// </summary>
		public void spPROJECTS_CONTACTS_Delete(Guid gPROJECT_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_CONTACTS_Delete
		/// <summary>
		/// spPROJECTS_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdPROJECTS_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_CONTACTS_Update
		/// <summary>
		/// spPROJECTS_CONTACTS_Update
		/// </summary>
		public void spPROJECTS_CONTACTS_Update(Guid gPROJECT_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_CONTACTS_Update
		/// <summary>
		/// spPROJECTS_CONTACTS_Update
		/// </summary>
		public void spPROJECTS_CONTACTS_Update(Guid gPROJECT_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_CONTACTS_Update
		/// <summary>
		/// spPROJECTS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdPROJECTS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_Delete
		/// <summary>
		/// spPROJECTS_Delete
		/// </summary>
		public void spPROJECTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_Delete
		/// <summary>
		/// spPROJECTS_Delete
		/// </summary>
		public void spPROJECTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_Delete
		/// <summary>
		/// spPROJECTS_Delete
		/// </summary>
		public IDbCommand cmdPROJECTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_MassDelete
		/// <summary>
		/// spPROJECTS_MassDelete
		/// </summary>
		public void spPROJECTS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_MassDelete
		/// <summary>
		/// spPROJECTS_MassDelete
		/// </summary>
		public void spPROJECTS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_MassDelete
		/// <summary>
		/// spPROJECTS_MassDelete
		/// </summary>
		public IDbCommand cmdPROJECTS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_MassUpdate
		/// <summary>
		/// spPROJECTS_MassUpdate
		/// </summary>
		public void spPROJECTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sSTATUS, string sPRIORITY, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_MassUpdate";
							IDbDataParameter parID_LIST              = Sql.AddAnsiParam(cmd, "@ID_LIST"             , sID_LIST               , 8000);
							IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
							IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
							IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
							IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
							IDbDataParameter parTEAM_SET_ADD         = Sql.AddParameter(cmd, "@TEAM_SET_ADD"        , bTEAM_SET_ADD          );
							IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
							IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
							IDbDataParameter parSTATUS               = Sql.AddParameter(cmd, "@STATUS"              , sSTATUS                ,  25);
							IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
							IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
							IDbDataParameter parTAG_SET_ADD          = Sql.AddParameter(cmd, "@TAG_SET_ADD"         , bTAG_SET_ADD           );
							IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
							IDbDataParameter parASSIGNED_SET_ADD     = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD"    , bASSIGNED_SET_ADD      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_MassUpdate
		/// <summary>
		/// spPROJECTS_MassUpdate
		/// </summary>
		public void spPROJECTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sSTATUS, string sPRIORITY, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_MassUpdate";
				IDbDataParameter parID_LIST              = Sql.AddAnsiParam(cmd, "@ID_LIST"             , sID_LIST               , 8000);
				IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
				IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
				IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
				IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
				IDbDataParameter parTEAM_SET_ADD         = Sql.AddParameter(cmd, "@TEAM_SET_ADD"        , bTEAM_SET_ADD          );
				IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
				IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
				IDbDataParameter parSTATUS               = Sql.AddParameter(cmd, "@STATUS"              , sSTATUS                ,  25);
				IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
				IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
				IDbDataParameter parTAG_SET_ADD          = Sql.AddParameter(cmd, "@TAG_SET_ADD"         , bTAG_SET_ADD           );
				IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
				IDbDataParameter parASSIGNED_SET_ADD     = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD"    , bASSIGNED_SET_ADD      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_MassUpdate
		/// <summary>
		/// spPROJECTS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROJECTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_MassUpdate";
			IDbDataParameter parID_LIST              = Sql.CreateParameter(cmd, "@ID_LIST"             , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID     = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"    , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID     = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"    , "Guid",  16);
			IDbDataParameter parTEAM_ID              = Sql.CreateParameter(cmd, "@TEAM_ID"             , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST        = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"       , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD         = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"        , "bool",   1);
			IDbDataParameter parESTIMATED_START_DATE = Sql.CreateParameter(cmd, "@ESTIMATED_START_DATE", "DateTime",   8);
			IDbDataParameter parESTIMATED_END_DATE   = Sql.CreateParameter(cmd, "@ESTIMATED_END_DATE"  , "DateTime",   8);
			IDbDataParameter parSTATUS               = Sql.CreateParameter(cmd, "@STATUS"              , "string",  25);
			IDbDataParameter parPRIORITY             = Sql.CreateParameter(cmd, "@PRIORITY"            , "string",  25);
			IDbDataParameter parTAG_SET_NAME         = Sql.CreateParameter(cmd, "@TAG_SET_NAME"        , "string", 4000);
			IDbDataParameter parTAG_SET_ADD          = Sql.CreateParameter(cmd, "@TAG_SET_ADD"         , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST    = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"   , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD     = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD"    , "bool",   1);
			return cmd;
		}
		#endregion

		#region spPROJECTS_New
		/// <summary>
		/// spPROJECTS_New
		/// </summary>
		public void spPROJECTS_New(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_New";
							IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
							IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
							IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
							IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  ,  50);
							IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
							IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
							IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
							IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
							IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
							IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_New
		/// <summary>
		/// spPROJECTS_New
		/// </summary>
		public void spPROJECTS_New(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_New";
				IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
				IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
				IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
				IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  ,  50);
				IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
				IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
				IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
				IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
				IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
				IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROJECTS_New
		/// <summary>
		/// spPROJECTS_New
		/// </summary>
		public IDbCommand cmdPROJECTS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_New";
			IDbDataParameter parID                   = Sql.CreateParameter(cmd, "@ID"                  , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID     = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"    , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID     = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"    , "Guid",  16);
			IDbDataParameter parNAME                 = Sql.CreateParameter(cmd, "@NAME"                , "string",  50);
			IDbDataParameter parESTIMATED_START_DATE = Sql.CreateParameter(cmd, "@ESTIMATED_START_DATE", "DateTime",   8);
			IDbDataParameter parESTIMATED_END_DATE   = Sql.CreateParameter(cmd, "@ESTIMATED_END_DATE"  , "DateTime",   8);
			IDbDataParameter parPRIORITY             = Sql.CreateParameter(cmd, "@PRIORITY"            , "string",  25);
			IDbDataParameter parTEAM_ID              = Sql.CreateParameter(cmd, "@TEAM_ID"             , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST        = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"       , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST    = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"   , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROJECTS_OPPORTUNITIES_Delete
		/// <summary>
		/// spPROJECTS_OPPORTUNITIES_Delete
		/// </summary>
		public void spPROJECTS_OPPORTUNITIES_Delete(Guid gPROJECT_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Delet";
							else
								cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_OPPORTUNITIES_Delete
		/// <summary>
		/// spPROJECTS_OPPORTUNITIES_Delete
		/// </summary>
		public void spPROJECTS_OPPORTUNITIES_Delete(Guid gPROJECT_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Delet";
				else
					cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_OPPORTUNITIES_Delete
		/// <summary>
		/// spPROJECTS_OPPORTUNITIES_Delete
		/// </summary>
		public IDbCommand cmdPROJECTS_OPPORTUNITIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Delet";
			else
				cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_OPPORTUNITIES_Update
		/// <summary>
		/// spPROJECTS_OPPORTUNITIES_Update
		/// </summary>
		public void spPROJECTS_OPPORTUNITIES_Update(Guid gPROJECT_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Updat";
							else
								cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_OPPORTUNITIES_Update
		/// <summary>
		/// spPROJECTS_OPPORTUNITIES_Update
		/// </summary>
		public void spPROJECTS_OPPORTUNITIES_Update(Guid gPROJECT_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Updat";
				else
					cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_OPPORTUNITIES_Update
		/// <summary>
		/// spPROJECTS_OPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdPROJECTS_OPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Updat";
			else
				cmd.CommandText = "spPROJECTS_OPPORTUNITIES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_QUOTES_Update
		/// <summary>
		/// spPROJECTS_QUOTES_Update
		/// </summary>
		public void spPROJECTS_QUOTES_Update(Guid gPROJECT_ID, Guid gQUOTE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_QUOTES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_QUOTES_Update
		/// <summary>
		/// spPROJECTS_QUOTES_Update
		/// </summary>
		public void spPROJECTS_QUOTES_Update(Guid gPROJECT_ID, Guid gQUOTE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_QUOTES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROJECT_ID       = Sql.AddParameter(cmd, "@PROJECT_ID"      , gPROJECT_ID        );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_QUOTES_Update
		/// <summary>
		/// spPROJECTS_QUOTES_Update
		/// </summary>
		public IDbCommand cmdPROJECTS_QUOTES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_QUOTES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROJECT_ID       = Sql.CreateParameter(cmd, "@PROJECT_ID"      , "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROJECTS_Undelete
		/// <summary>
		/// spPROJECTS_Undelete
		/// </summary>
		public void spPROJECTS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_Undelete
		/// <summary>
		/// spPROJECTS_Undelete
		/// </summary>
		public void spPROJECTS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROJECTS_Undelete
		/// <summary>
		/// spPROJECTS_Undelete
		/// </summary>
		public IDbCommand cmdPROJECTS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spPROJECTS_Update
		/// <summary>
		/// spPROJECTS_Update
		/// </summary>
		public void spPROJECTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sSTATUS, string sPRIORITY, bool bIS_TEMPLATE, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROJECTS_Update";
							IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
							IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
							IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
							IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  ,  50);
							IDbDataParameter parDESCRIPTION          = Sql.AddParameter(cmd, "@DESCRIPTION"         , sDESCRIPTION           );
							IDbDataParameter parPARENT_TYPE          = Sql.AddParameter(cmd, "@PARENT_TYPE"         , sPARENT_TYPE           ,  25);
							IDbDataParameter parPARENT_ID            = Sql.AddParameter(cmd, "@PARENT_ID"           , gPARENT_ID             );
							IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
							IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
							IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
							IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
							IDbDataParameter parSTATUS               = Sql.AddParameter(cmd, "@STATUS"              , sSTATUS                ,  25);
							IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
							IDbDataParameter parIS_TEMPLATE          = Sql.AddParameter(cmd, "@IS_TEMPLATE"         , bIS_TEMPLATE           );
							IDbDataParameter parEXCHANGE_FOLDER      = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"     , bEXCHANGE_FOLDER       );
							IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
							IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROJECTS_Update
		/// <summary>
		/// spPROJECTS_Update
		/// </summary>
		public void spPROJECTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, DateTime dtESTIMATED_START_DATE, DateTime dtESTIMATED_END_DATE, string sSTATUS, string sPRIORITY, bool bIS_TEMPLATE, bool bEXCHANGE_FOLDER, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROJECTS_Update";
				IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
				IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
				IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
				IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  ,  50);
				IDbDataParameter parDESCRIPTION          = Sql.AddParameter(cmd, "@DESCRIPTION"         , sDESCRIPTION           );
				IDbDataParameter parPARENT_TYPE          = Sql.AddParameter(cmd, "@PARENT_TYPE"         , sPARENT_TYPE           ,  25);
				IDbDataParameter parPARENT_ID            = Sql.AddParameter(cmd, "@PARENT_ID"           , gPARENT_ID             );
				IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
				IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
				IDbDataParameter parESTIMATED_START_DATE = Sql.AddParameter(cmd, "@ESTIMATED_START_DATE", dtESTIMATED_START_DATE );
				IDbDataParameter parESTIMATED_END_DATE   = Sql.AddParameter(cmd, "@ESTIMATED_END_DATE"  , dtESTIMATED_END_DATE   );
				IDbDataParameter parSTATUS               = Sql.AddParameter(cmd, "@STATUS"              , sSTATUS                ,  25);
				IDbDataParameter parPRIORITY             = Sql.AddParameter(cmd, "@PRIORITY"            , sPRIORITY              ,  25);
				IDbDataParameter parIS_TEMPLATE          = Sql.AddParameter(cmd, "@IS_TEMPLATE"         , bIS_TEMPLATE           );
				IDbDataParameter parEXCHANGE_FOLDER      = Sql.AddParameter(cmd, "@EXCHANGE_FOLDER"     , bEXCHANGE_FOLDER       );
				IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
				IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROJECTS_Update
		/// <summary>
		/// spPROJECTS_Update
		/// </summary>
		public IDbCommand cmdPROJECTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROJECTS_Update";
			IDbDataParameter parID                   = Sql.CreateParameter(cmd, "@ID"                  , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID     = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"    , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID     = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"    , "Guid",  16);
			IDbDataParameter parNAME                 = Sql.CreateParameter(cmd, "@NAME"                , "string",  50);
			IDbDataParameter parDESCRIPTION          = Sql.CreateParameter(cmd, "@DESCRIPTION"         , "string", 104857600);
			IDbDataParameter parPARENT_TYPE          = Sql.CreateParameter(cmd, "@PARENT_TYPE"         , "string",  25);
			IDbDataParameter parPARENT_ID            = Sql.CreateParameter(cmd, "@PARENT_ID"           , "Guid",  16);
			IDbDataParameter parTEAM_ID              = Sql.CreateParameter(cmd, "@TEAM_ID"             , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST        = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"       , "ansistring", 8000);
			IDbDataParameter parESTIMATED_START_DATE = Sql.CreateParameter(cmd, "@ESTIMATED_START_DATE", "DateTime",   8);
			IDbDataParameter parESTIMATED_END_DATE   = Sql.CreateParameter(cmd, "@ESTIMATED_END_DATE"  , "DateTime",   8);
			IDbDataParameter parSTATUS               = Sql.CreateParameter(cmd, "@STATUS"              , "string",  25);
			IDbDataParameter parPRIORITY             = Sql.CreateParameter(cmd, "@PRIORITY"            , "string",  25);
			IDbDataParameter parIS_TEMPLATE          = Sql.CreateParameter(cmd, "@IS_TEMPLATE"         , "bool",   1);
			IDbDataParameter parEXCHANGE_FOLDER      = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDER"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME         = Sql.CreateParameter(cmd, "@TAG_SET_NAME"        , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST    = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"   , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROSPECT_LIST_CAMPAIGNS_Delete
		/// <summary>
		/// spPROSPECT_LIST_CAMPAIGNS_Delete
		/// </summary>
		public void spPROSPECT_LIST_CAMPAIGNS_Delete(Guid gPROSPECT_LIST_ID, Guid gCAMPAIGN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Dele";
							else
								cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LIST_CAMPAIGNS_Delete
		/// <summary>
		/// spPROSPECT_LIST_CAMPAIGNS_Delete
		/// </summary>
		public void spPROSPECT_LIST_CAMPAIGNS_Delete(Guid gPROSPECT_LIST_ID, Guid gCAMPAIGN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Dele";
				else
					cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LIST_CAMPAIGNS_Delete
		/// <summary>
		/// spPROSPECT_LIST_CAMPAIGNS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LIST_CAMPAIGNS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Dele";
			else
				cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LIST_CAMPAIGNS_Update
		/// <summary>
		/// spPROSPECT_LIST_CAMPAIGNS_Update
		/// </summary>
		public void spPROSPECT_LIST_CAMPAIGNS_Update(Guid gPROSPECT_LIST_ID, Guid gCAMPAIGN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Upda";
							else
								cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LIST_CAMPAIGNS_Update
		/// <summary>
		/// spPROSPECT_LIST_CAMPAIGNS_Update
		/// </summary>
		public void spPROSPECT_LIST_CAMPAIGNS_Update(Guid gPROSPECT_LIST_ID, Guid gCAMPAIGN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Upda";
				else
					cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LIST_CAMPAIGNS_Update
		/// <summary>
		/// spPROSPECT_LIST_CAMPAIGNS_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LIST_CAMPAIGNS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Upda";
			else
				cmd.CommandText = "spPROSPECT_LIST_CAMPAIGNS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_ACCOUNTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_ACCOUNTS_Delete(Guid gPROSPECT_LIST_ID, Guid gACCOUNT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Dele";
							else
								cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_ACCOUNTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_ACCOUNTS_Delete(Guid gPROSPECT_LIST_ID, Guid gACCOUNT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Dele";
				else
					cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_ACCOUNTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_ACCOUNTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Dele";
			else
				cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_ACCOUNTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_ACCOUNTS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Mass";
							else
								cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_ACCOUNTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_ACCOUNTS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Mass";
				else
					cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_ACCOUNTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_ACCOUNTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Mass";
			else
				cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_ACCOUNTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_ACCOUNTS_Update(Guid gPROSPECT_LIST_ID, Guid gACCOUNT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Upda";
							else
								cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_ACCOUNTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_ACCOUNTS_Update(Guid gPROSPECT_LIST_ID, Guid gACCOUNT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Upda";
				else
					cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_ACCOUNTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_ACCOUNTS_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_ACCOUNTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Upda";
			else
				cmd.CommandText = "spPROSPECT_LISTS_ACCOUNTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_CONTACTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_CONTACTS_Delete(Guid gPROSPECT_LIST_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Dele";
							else
								cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_CONTACTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_CONTACTS_Delete(Guid gPROSPECT_LIST_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Dele";
				else
					cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_CONTACTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_CONTACTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Dele";
			else
				cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_CONTACTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_CONTACTS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Mass";
							else
								cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_CONTACTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_CONTACTS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Mass";
				else
					cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_CONTACTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_CONTACTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Mass";
			else
				cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_CONTACTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_CONTACTS_Update(Guid gPROSPECT_LIST_ID, Guid gCONTACT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Upda";
							else
								cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_CONTACTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_CONTACTS_Update(Guid gPROSPECT_LIST_ID, Guid gCONTACT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Upda";
				else
					cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_CONTACTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Upda";
			else
				cmd.CommandText = "spPROSPECT_LISTS_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_Import
		/// <summary>
		/// spPROSPECT_LISTS_Import
		/// </summary>
		public void spPROSPECT_LISTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, string sLIST_TYPE, string sDOMAIN_NAME, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_Import";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parLIST_TYPE         = Sql.AddParameter(cmd, "@LIST_TYPE"        , sLIST_TYPE          , 255);
							IDbDataParameter parDOMAIN_NAME       = Sql.AddParameter(cmd, "@DOMAIN_NAME"      , sDOMAIN_NAME        , 255);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_Import
		/// <summary>
		/// spPROSPECT_LISTS_Import
		/// </summary>
		public void spPROSPECT_LISTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, string sLIST_TYPE, string sDOMAIN_NAME, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_Import";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parLIST_TYPE         = Sql.AddParameter(cmd, "@LIST_TYPE"        , sLIST_TYPE          , 255);
				IDbDataParameter parDOMAIN_NAME       = Sql.AddParameter(cmd, "@DOMAIN_NAME"      , sDOMAIN_NAME        , 255);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_Import
		/// <summary>
		/// spPROSPECT_LISTS_Import
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_Import";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parLIST_TYPE         = Sql.CreateParameter(cmd, "@LIST_TYPE"        , "string", 255);
			IDbDataParameter parDOMAIN_NAME       = Sql.CreateParameter(cmd, "@DOMAIN_NAME"      , "string", 255);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_InsertCampaign
		/// <summary>
		/// spPROSPECT_LISTS_InsertCampaign
		/// </summary>
		public void spPROSPECT_LISTS_InsertCampaign(ref Guid gID, Guid gCAMPAIGN_ID, string sNAME, string sDYNAMIC_SQL)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_InsertCampaig";
							else
								cmd.CommandText = "spPROSPECT_LISTS_InsertCampaign";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parDYNAMIC_SQL      = Sql.AddParameter(cmd, "@DYNAMIC_SQL"     , sDYNAMIC_SQL       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_InsertCampaign
		/// <summary>
		/// spPROSPECT_LISTS_InsertCampaign
		/// </summary>
		public void spPROSPECT_LISTS_InsertCampaign(ref Guid gID, Guid gCAMPAIGN_ID, string sNAME, string sDYNAMIC_SQL, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_InsertCampaig";
				else
					cmd.CommandText = "spPROSPECT_LISTS_InsertCampaign";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCAMPAIGN_ID      = Sql.AddParameter(cmd, "@CAMPAIGN_ID"     , gCAMPAIGN_ID       );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parDYNAMIC_SQL      = Sql.AddParameter(cmd, "@DYNAMIC_SQL"     , sDYNAMIC_SQL       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_InsertCampaign
		/// <summary>
		/// spPROSPECT_LISTS_InsertCampaign
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_InsertCampaign(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_InsertCampaig";
			else
				cmd.CommandText = "spPROSPECT_LISTS_InsertCampaign";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCAMPAIGN_ID      = Sql.CreateParameter(cmd, "@CAMPAIGN_ID"     , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parDYNAMIC_SQL      = Sql.CreateParameter(cmd, "@DYNAMIC_SQL"     , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_LEADS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_LEADS_Delete(Guid gPROSPECT_LIST_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_LEADS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_LEADS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_LEADS_Delete(Guid gPROSPECT_LIST_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_LEADS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_LEADS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_LEADS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_LEADS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_LEADS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_LEADS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_LEADS_MassUpd";
							else
								cmd.CommandText = "spPROSPECT_LISTS_LEADS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_LEADS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_LEADS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_LEADS_MassUpd";
				else
					cmd.CommandText = "spPROSPECT_LISTS_LEADS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_LEADS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_LEADS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_LEADS_MassUpd";
			else
				cmd.CommandText = "spPROSPECT_LISTS_LEADS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_LEADS_Update
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_Update
		/// </summary>
		public void spPROSPECT_LISTS_LEADS_Update(Guid gPROSPECT_LIST_ID, Guid gLEAD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_LEADS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_LEADS_Update
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_Update
		/// </summary>
		public void spPROSPECT_LISTS_LEADS_Update(Guid gPROSPECT_LIST_ID, Guid gLEAD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_LEADS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parLEAD_ID          = Sql.AddParameter(cmd, "@LEAD_ID"         , gLEAD_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_LEADS_Update
		/// <summary>
		/// spPROSPECT_LISTS_LEADS_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_LEADS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_LEADS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parLEAD_ID          = Sql.CreateParameter(cmd, "@LEAD_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_MassDelete
		/// <summary>
		/// spPROSPECT_LISTS_MassDelete
		/// </summary>
		public void spPROSPECT_LISTS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_MassDelete
		/// <summary>
		/// spPROSPECT_LISTS_MassDelete
		/// </summary>
		public void spPROSPECT_LISTS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_MassDelete
		/// <summary>
		/// spPROSPECT_LISTS_MassDelete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_New
		/// <summary>
		/// spPROSPECT_LISTS_New
		/// </summary>
		public void spPROSPECT_LISTS_New(ref Guid gID, string sNAME, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_New
		/// <summary>
		/// spPROSPECT_LISTS_New
		/// </summary>
		public void spPROSPECT_LISTS_New(ref Guid gID, string sNAME, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_New
		/// <summary>
		/// spPROSPECT_LISTS_New
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_PROSPECTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_PROSPECTS_Delete(Guid gPROSPECT_LIST_ID, Guid gPROSPECT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Del";
							else
								cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_PROSPECTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_PROSPECTS_Delete(Guid gPROSPECT_LIST_ID, Guid gPROSPECT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Del";
				else
					cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_PROSPECTS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_PROSPECTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Del";
			else
				cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_ID      = Sql.CreateParameter(cmd, "@PROSPECT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_PROSPECTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_PROSPECTS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Mas";
							else
								cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_PROSPECTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_PROSPECTS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Mas";
				else
					cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_PROSPECTS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_PROSPECTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Mas";
			else
				cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_PROSPECTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_PROSPECTS_Update(Guid gPROSPECT_LIST_ID, Guid gPROSPECT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Upd";
							else
								cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_PROSPECTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_PROSPECTS_Update(Guid gPROSPECT_LIST_ID, Guid gPROSPECT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Upd";
				else
					cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parPROSPECT_ID      = Sql.AddParameter(cmd, "@PROSPECT_ID"     , gPROSPECT_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_PROSPECTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_PROSPECTS_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_PROSPECTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Upd";
			else
				cmd.CommandText = "spPROSPECT_LISTS_PROSPECTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_ID      = Sql.CreateParameter(cmd, "@PROSPECT_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_SQL_Delete
		/// <summary>
		/// spPROSPECT_LISTS_SQL_Delete
		/// </summary>
		public void spPROSPECT_LISTS_SQL_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_SQL_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_SQL_Delete
		/// <summary>
		/// spPROSPECT_LISTS_SQL_Delete
		/// </summary>
		public void spPROSPECT_LISTS_SQL_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_SQL_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_SQL_Delete
		/// <summary>
		/// spPROSPECT_LISTS_SQL_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_SQL_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_SQL_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_SQL_Update
		/// <summary>
		/// spPROSPECT_LISTS_SQL_Update
		/// </summary>
		public void spPROSPECT_LISTS_SQL_Update(Guid gID, string sDYNAMIC_SQL, string sDYNAMIC_RDL)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_SQL_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDYNAMIC_SQL      = Sql.AddParameter(cmd, "@DYNAMIC_SQL"     , sDYNAMIC_SQL       );
							IDbDataParameter parDYNAMIC_RDL      = Sql.AddParameter(cmd, "@DYNAMIC_RDL"     , sDYNAMIC_RDL       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_SQL_Update
		/// <summary>
		/// spPROSPECT_LISTS_SQL_Update
		/// </summary>
		public void spPROSPECT_LISTS_SQL_Update(Guid gID, string sDYNAMIC_SQL, string sDYNAMIC_RDL, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_SQL_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDYNAMIC_SQL      = Sql.AddParameter(cmd, "@DYNAMIC_SQL"     , sDYNAMIC_SQL       );
				IDbDataParameter parDYNAMIC_RDL      = Sql.AddParameter(cmd, "@DYNAMIC_RDL"     , sDYNAMIC_RDL       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_SQL_Update
		/// <summary>
		/// spPROSPECT_LISTS_SQL_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_SQL_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_SQL_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDYNAMIC_SQL      = Sql.CreateParameter(cmd, "@DYNAMIC_SQL"     , "string", 104857600);
			IDbDataParameter parDYNAMIC_RDL      = Sql.CreateParameter(cmd, "@DYNAMIC_RDL"     , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_STREAM_InsertPost
		/// <summary>
		/// spPROSPECT_LISTS_STREAM_InsertPost
		/// </summary>
		public void spPROSPECT_LISTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_STREAM_Insert";
							else
								cmd.CommandText = "spPROSPECT_LISTS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_STREAM_InsertPost
		/// <summary>
		/// spPROSPECT_LISTS_STREAM_InsertPost
		/// </summary>
		public void spPROSPECT_LISTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_STREAM_Insert";
				else
					cmd.CommandText = "spPROSPECT_LISTS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_STREAM_InsertPost
		/// <summary>
		/// spPROSPECT_LISTS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_STREAM_Insert";
			else
				cmd.CommandText = "spPROSPECT_LISTS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_Undelete
		/// <summary>
		/// spPROSPECT_LISTS_Undelete
		/// </summary>
		public void spPROSPECT_LISTS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_Undelete
		/// <summary>
		/// spPROSPECT_LISTS_Undelete
		/// </summary>
		public void spPROSPECT_LISTS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_Undelete
		/// <summary>
		/// spPROSPECT_LISTS_Undelete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, string sLIST_TYPE, string sDOMAIN_NAME, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bDYNAMIC_LIST, string sTAG_SET_NAME, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parLIST_TYPE         = Sql.AddParameter(cmd, "@LIST_TYPE"        , sLIST_TYPE          , 255);
							IDbDataParameter parDOMAIN_NAME       = Sql.AddParameter(cmd, "@DOMAIN_NAME"      , sDOMAIN_NAME        , 255);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parDYNAMIC_LIST      = Sql.AddParameter(cmd, "@DYNAMIC_LIST"     , bDYNAMIC_LIST       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_Update
		/// </summary>
		public void spPROSPECT_LISTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, string sLIST_TYPE, string sDOMAIN_NAME, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bDYNAMIC_LIST, string sTAG_SET_NAME, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parLIST_TYPE         = Sql.AddParameter(cmd, "@LIST_TYPE"        , sLIST_TYPE          , 255);
				IDbDataParameter parDOMAIN_NAME       = Sql.AddParameter(cmd, "@DOMAIN_NAME"      , sDOMAIN_NAME        , 255);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parDYNAMIC_LIST      = Sql.AddParameter(cmd, "@DYNAMIC_LIST"     , bDYNAMIC_LIST       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_Update
		/// <summary>
		/// spPROSPECT_LISTS_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parLIST_TYPE         = Sql.CreateParameter(cmd, "@LIST_TYPE"        , "string", 255);
			IDbDataParameter parDOMAIN_NAME       = Sql.CreateParameter(cmd, "@DOMAIN_NAME"      , "string", 255);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parDYNAMIC_LIST      = Sql.CreateParameter(cmd, "@DYNAMIC_LIST"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_UpdateDynamic
		/// <summary>
		/// spPROSPECT_LISTS_UpdateDynamic
		/// </summary>
		public void spPROSPECT_LISTS_UpdateDynamic(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_UpdateDynamic";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_UpdateDynamic
		/// <summary>
		/// spPROSPECT_LISTS_UpdateDynamic
		/// </summary>
		public void spPROSPECT_LISTS_UpdateDynamic(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_UpdateDynamic";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_UpdateDynamic
		/// <summary>
		/// spPROSPECT_LISTS_UpdateDynamic
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_UpdateDynamic(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_UpdateDynamic";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_USERS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_USERS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_USERS_Delete(Guid gPROSPECT_LIST_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_USERS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_USERS_Delete
		/// </summary>
		public void spPROSPECT_LISTS_USERS_Delete(Guid gPROSPECT_LIST_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_USERS_Delete
		/// <summary>
		/// spPROSPECT_LISTS_USERS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_USERS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_USERS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_USERS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spPROSPECT_LISTS_USERS_MassUpd";
							else
								cmd.CommandText = "spPROSPECT_LISTS_USERS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_USERS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_USERS_MassUpdate
		/// </summary>
		public void spPROSPECT_LISTS_USERS_MassUpdate(string sID_LIST, Guid gPROSPECT_LIST_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spPROSPECT_LISTS_USERS_MassUpd";
				else
					cmd.CommandText = "spPROSPECT_LISTS_USERS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_USERS_MassUpdate
		/// <summary>
		/// spPROSPECT_LISTS_USERS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_USERS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spPROSPECT_LISTS_USERS_MassUpd";
			else
				cmd.CommandText = "spPROSPECT_LISTS_USERS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECT_LISTS_USERS_Update
		/// <summary>
		/// spPROSPECT_LISTS_USERS_Update
		/// </summary>
		public void spPROSPECT_LISTS_USERS_Update(Guid gPROSPECT_LIST_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECT_LISTS_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECT_LISTS_USERS_Update
		/// <summary>
		/// spPROSPECT_LISTS_USERS_Update
		/// </summary>
		public void spPROSPECT_LISTS_USERS_Update(Guid gPROSPECT_LIST_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECT_LISTS_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROSPECT_LIST_ID = Sql.AddParameter(cmd, "@PROSPECT_LIST_ID", gPROSPECT_LIST_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECT_LISTS_USERS_Update
		/// <summary>
		/// spPROSPECT_LISTS_USERS_Update
		/// </summary>
		public IDbCommand cmdPROSPECT_LISTS_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECT_LISTS_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROSPECT_LIST_ID = Sql.CreateParameter(cmd, "@PROSPECT_LIST_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECTS_Delete
		/// <summary>
		/// spPROSPECTS_Delete
		/// </summary>
		public void spPROSPECTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_Delete
		/// <summary>
		/// spPROSPECTS_Delete
		/// </summary>
		public void spPROSPECTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECTS_Delete
		/// <summary>
		/// spPROSPECTS_Delete
		/// </summary>
		public IDbCommand cmdPROSPECTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECTS_Import
		/// <summary>
		/// spPROSPECTS_Import
		/// </summary>
		public void spPROSPECTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sDEPARTMENT, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gLEAD_ID, string sACCOUNT_NAME, string sTRACKER_KEY, Guid gTEAM_ID, string sTEAM_SET_LIST, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sPRIMARY_ADDRESS_STREET1, string sPRIMARY_ADDRESS_STREET2, string sPRIMARY_ADDRESS_STREET3, string sALT_ADDRESS_STREET1, string sALT_ADDRESS_STREET2, string sALT_ADDRESS_STREET3, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sTAG_SET_NAME, string sPROSPECT_NUMBER, string sASSIGNED_SET_LIST, string sTEAM_NAME, string sLEAD_SOURCE, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_Import";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  25);
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 255);
							IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
							IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
							IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
							IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
							IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
							IDbDataParameter parTRACKER_KEY                = Sql.AddParameter(cmd, "@TRACKER_KEY"               , sTRACKER_KEY                 ,  30);
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parDATE_ENTERED               = Sql.AddParameter(cmd, "@DATE_ENTERED"              , dtDATE_ENTERED               );
							IDbDataParameter parDATE_MODIFIED              = Sql.AddParameter(cmd, "@DATE_MODIFIED"             , dtDATE_MODIFIED              );
							IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , sPRIMARY_ADDRESS_STREET1     , 150);
							IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , sPRIMARY_ADDRESS_STREET2     , 150);
							IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , sPRIMARY_ADDRESS_STREET3     , 150);
							IDbDataParameter parALT_ADDRESS_STREET1        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET1"       , sALT_ADDRESS_STREET1         , 150);
							IDbDataParameter parALT_ADDRESS_STREET2        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET2"       , sALT_ADDRESS_STREET2         , 150);
							IDbDataParameter parALT_ADDRESS_STREET3        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET3"       , sALT_ADDRESS_STREET3         , 150);
							IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
							IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
							IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
							IDbDataParameter parPROSPECT_NUMBER            = Sql.AddParameter(cmd, "@PROSPECT_NUMBER"           , sPROSPECT_NUMBER             ,  30);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							IDbDataParameter parTEAM_NAME                  = Sql.AddParameter(cmd, "@TEAM_NAME"                 , sTEAM_NAME                   , 128);
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
							IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_Import
		/// <summary>
		/// spPROSPECTS_Import
		/// </summary>
		public void spPROSPECTS_Import(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sDEPARTMENT, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gLEAD_ID, string sACCOUNT_NAME, string sTRACKER_KEY, Guid gTEAM_ID, string sTEAM_SET_LIST, DateTime dtDATE_ENTERED, DateTime dtDATE_MODIFIED, string sPRIMARY_ADDRESS_STREET1, string sPRIMARY_ADDRESS_STREET2, string sPRIMARY_ADDRESS_STREET3, string sALT_ADDRESS_STREET1, string sALT_ADDRESS_STREET2, string sALT_ADDRESS_STREET3, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sTAG_SET_NAME, string sPROSPECT_NUMBER, string sASSIGNED_SET_LIST, string sTEAM_NAME, string sLEAD_SOURCE, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_Import";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  25);
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 255);
				IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
				IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
				IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
				IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
				IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
				IDbDataParameter parTRACKER_KEY                = Sql.AddParameter(cmd, "@TRACKER_KEY"               , sTRACKER_KEY                 ,  30);
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parDATE_ENTERED               = Sql.AddParameter(cmd, "@DATE_ENTERED"              , dtDATE_ENTERED               );
				IDbDataParameter parDATE_MODIFIED              = Sql.AddParameter(cmd, "@DATE_MODIFIED"             , dtDATE_MODIFIED              );
				IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , sPRIMARY_ADDRESS_STREET1     , 150);
				IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , sPRIMARY_ADDRESS_STREET2     , 150);
				IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , sPRIMARY_ADDRESS_STREET3     , 150);
				IDbDataParameter parALT_ADDRESS_STREET1        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET1"       , sALT_ADDRESS_STREET1         , 150);
				IDbDataParameter parALT_ADDRESS_STREET2        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET2"       , sALT_ADDRESS_STREET2         , 150);
				IDbDataParameter parALT_ADDRESS_STREET3        = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET3"       , sALT_ADDRESS_STREET3         , 150);
				IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
				IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
				IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
				IDbDataParameter parPROSPECT_NUMBER            = Sql.AddParameter(cmd, "@PROSPECT_NUMBER"           , sPROSPECT_NUMBER             ,  30);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				IDbDataParameter parTEAM_NAME                  = Sql.AddParameter(cmd, "@TEAM_NAME"                 , sTEAM_NAME                   , 128);
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
				IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROSPECTS_Import
		/// <summary>
		/// spPROSPECTS_Import
		/// </summary>
		public IDbCommand cmdPROSPECTS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_Import";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string",  25);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 255);
			IDbDataParameter parBIRTHDATE                  = Sql.CreateParameter(cmd, "@BIRTHDATE"                 , "DateTime",   8);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parASSISTANT                  = Sql.CreateParameter(cmd, "@ASSISTANT"                 , "string",  75);
			IDbDataParameter parASSISTANT_PHONE            = Sql.CreateParameter(cmd, "@ASSISTANT_PHONE"           , "string",  25);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parPARENT_TYPE                = Sql.CreateParameter(cmd, "@PARENT_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_ID                  = Sql.CreateParameter(cmd, "@PARENT_ID"                 , "Guid",  16);
			IDbDataParameter parLEAD_ID                    = Sql.CreateParameter(cmd, "@LEAD_ID"                   , "Guid",  16);
			IDbDataParameter parACCOUNT_NAME               = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"              , "string", 150);
			IDbDataParameter parTRACKER_KEY                = Sql.CreateParameter(cmd, "@TRACKER_KEY"               , "string",  30);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parDATE_ENTERED               = Sql.CreateParameter(cmd, "@DATE_ENTERED"              , "DateTime",   8);
			IDbDataParameter parDATE_MODIFIED              = Sql.CreateParameter(cmd, "@DATE_MODIFIED"             , "DateTime",   8);
			IDbDataParameter parPRIMARY_ADDRESS_STREET1    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET1"   , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_STREET2    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET2"   , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_STREET3    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET3"   , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET1        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET1"       , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET2        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET2"       , "string", 150);
			IDbDataParameter parALT_ADDRESS_STREET3        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET3"       , "string", 150);
			IDbDataParameter parSMS_OPT_IN                 = Sql.CreateParameter(cmd, "@SMS_OPT_IN"                , "string",  25);
			IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.CreateParameter(cmd, "@TWITTER_SCREEN_NAME"       , "string",  20);
			IDbDataParameter parTAG_SET_NAME               = Sql.CreateParameter(cmd, "@TAG_SET_NAME"              , "string", 4000);
			IDbDataParameter parPROSPECT_NUMBER            = Sql.CreateParameter(cmd, "@PROSPECT_NUMBER"           , "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			IDbDataParameter parTEAM_NAME                  = Sql.CreateParameter(cmd, "@TEAM_NAME"                 , "string", 128);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.CreateParameter(cmd, "@DP_BUSINESS_PURPOSE"       , "string", 104857600);
			IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.CreateParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , "DateTime",   8);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROSPECTS_MassDelete
		/// <summary>
		/// spPROSPECTS_MassDelete
		/// </summary>
		public void spPROSPECTS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_MassDelete
		/// <summary>
		/// spPROSPECTS_MassDelete
		/// </summary>
		public void spPROSPECTS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECTS_MassDelete
		/// <summary>
		/// spPROSPECTS_MassDelete
		/// </summary>
		public IDbCommand cmdPROSPECTS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECTS_MassUpdate
		/// <summary>
		/// spPROSPECTS_MassUpdate
		/// </summary>
		public void spPROSPECTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_MassUpdate
		/// <summary>
		/// spPROSPECTS_MassUpdate
		/// </summary>
		public void spPROSPECTS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parTAG_SET_ADD       = Sql.AddParameter(cmd, "@TAG_SET_ADD"      , bTAG_SET_ADD        );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECTS_MassUpdate
		/// <summary>
		/// spPROSPECTS_MassUpdate
		/// </summary>
		public IDbCommand cmdPROSPECTS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parTAG_SET_ADD       = Sql.CreateParameter(cmd, "@TAG_SET_ADD"      , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spPROSPECTS_New
		/// <summary>
		/// spPROSPECTS_New
		/// </summary>
		public void spPROSPECTS_New(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, string sPHONE_WORK, string sEMAIL1, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_New";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parFIRST_NAME        = Sql.AddParameter(cmd, "@FIRST_NAME"       , sFIRST_NAME         , 100);
							IDbDataParameter parLAST_NAME         = Sql.AddParameter(cmd, "@LAST_NAME"        , sLAST_NAME          , 100);
							IDbDataParameter parPHONE_WORK        = Sql.AddParameter(cmd, "@PHONE_WORK"       , sPHONE_WORK         ,  25);
							IDbDataParameter parEMAIL1            = Sql.AddParameter(cmd, "@EMAIL1"           , sEMAIL1             , 100);
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_New
		/// <summary>
		/// spPROSPECTS_New
		/// </summary>
		public void spPROSPECTS_New(ref Guid gID, string sFIRST_NAME, string sLAST_NAME, string sPHONE_WORK, string sEMAIL1, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_New";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parFIRST_NAME        = Sql.AddParameter(cmd, "@FIRST_NAME"       , sFIRST_NAME         , 100);
				IDbDataParameter parLAST_NAME         = Sql.AddParameter(cmd, "@LAST_NAME"        , sLAST_NAME          , 100);
				IDbDataParameter parPHONE_WORK        = Sql.AddParameter(cmd, "@PHONE_WORK"       , sPHONE_WORK         ,  25);
				IDbDataParameter parEMAIL1            = Sql.AddParameter(cmd, "@EMAIL1"           , sEMAIL1             , 100);
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROSPECTS_New
		/// <summary>
		/// spPROSPECTS_New
		/// </summary>
		public IDbCommand cmdPROSPECTS_New(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_New";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parFIRST_NAME        = Sql.CreateParameter(cmd, "@FIRST_NAME"       , "string", 100);
			IDbDataParameter parLAST_NAME         = Sql.CreateParameter(cmd, "@LAST_NAME"        , "string", 100);
			IDbDataParameter parPHONE_WORK        = Sql.CreateParameter(cmd, "@PHONE_WORK"       , "string",  25);
			IDbDataParameter parEMAIL1            = Sql.CreateParameter(cmd, "@EMAIL1"           , "string", 100);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROSPECTS_STREAM_InsertPost
		/// <summary>
		/// spPROSPECTS_STREAM_InsertPost
		/// </summary>
		public void spPROSPECTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_STREAM_InsertPost";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
							IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
							IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
							IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_STREAM_InsertPost
		/// <summary>
		/// spPROSPECTS_STREAM_InsertPost
		/// </summary>
		public void spPROSPECTS_STREAM_InsertPost(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, Guid gRELATED_ID, string sRELATED_MODULE, string sRELATED_NAME, Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_STREAM_InsertPost";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              );
				IDbDataParameter parRELATED_ID       = Sql.AddParameter(cmd, "@RELATED_ID"      , gRELATED_ID        );
				IDbDataParameter parRELATED_MODULE   = Sql.AddParameter(cmd, "@RELATED_MODULE"  , sRELATED_MODULE    ,  25);
				IDbDataParameter parRELATED_NAME     = Sql.AddParameter(cmd, "@RELATED_NAME"    , sRELATED_NAME      , 255);
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECTS_STREAM_InsertPost
		/// <summary>
		/// spPROSPECTS_STREAM_InsertPost
		/// </summary>
		public IDbCommand cmdPROSPECTS_STREAM_InsertPost(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_STREAM_InsertPost";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 104857600);
			IDbDataParameter parRELATED_ID       = Sql.CreateParameter(cmd, "@RELATED_ID"      , "Guid",  16);
			IDbDataParameter parRELATED_MODULE   = Sql.CreateParameter(cmd, "@RELATED_MODULE"  , "string",  25);
			IDbDataParameter parRELATED_NAME     = Sql.CreateParameter(cmd, "@RELATED_NAME"    , "string", 255);
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROSPECTS_Undelete
		/// <summary>
		/// spPROSPECTS_Undelete
		/// </summary>
		public void spPROSPECTS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_Undelete
		/// <summary>
		/// spPROSPECTS_Undelete
		/// </summary>
		public void spPROSPECTS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROSPECTS_Undelete
		/// <summary>
		/// spPROSPECTS_Undelete
		/// </summary>
		public IDbCommand cmdPROSPECTS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spPROSPECTS_Update
		/// <summary>
		/// spPROSPECTS_Update
		/// </summary>
		public void spPROSPECTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sDEPARTMENT, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gLEAD_ID, string sACCOUNT_NAME, string sTRACKER_KEY, Guid gTEAM_ID, string sTEAM_SET_LIST, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sPICTURE, string sTAG_SET_NAME, string sPROSPECT_NUMBER, string sASSIGNED_SET_LIST, string sLEAD_SOURCE, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROSPECTS_Update";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
							IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
							IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
							IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
							IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  25);
							IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 255);
							IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
							IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
							IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
							IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
							IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
							IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
							IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
							IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
							IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
							IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
							IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
							IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
							IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
							IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
							IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
							IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
							IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
							IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
							IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
							IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
							IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
							IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
							IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
							IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
							IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
							IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
							IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
							IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
							IDbDataParameter parTRACKER_KEY                = Sql.AddParameter(cmd, "@TRACKER_KEY"               , sTRACKER_KEY                 ,  30);
							IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
							IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
							IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
							IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
							IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
							IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
							IDbDataParameter parPROSPECT_NUMBER            = Sql.AddParameter(cmd, "@PROSPECT_NUMBER"           , sPROSPECT_NUMBER             ,  30);
							IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
							IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
							IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
							IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROSPECTS_Update
		/// <summary>
		/// spPROSPECTS_Update
		/// </summary>
		public void spPROSPECTS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sSALUTATION, string sFIRST_NAME, string sLAST_NAME, string sTITLE, string sDEPARTMENT, DateTime dtBIRTHDATE, bool bDO_NOT_CALL, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sASSISTANT, string sASSISTANT_PHONE, bool bEMAIL_OPT_OUT, bool bINVALID_EMAIL, string sPRIMARY_ADDRESS_STREET, string sPRIMARY_ADDRESS_CITY, string sPRIMARY_ADDRESS_STATE, string sPRIMARY_ADDRESS_POSTALCODE, string sPRIMARY_ADDRESS_COUNTRY, string sALT_ADDRESS_STREET, string sALT_ADDRESS_CITY, string sALT_ADDRESS_STATE, string sALT_ADDRESS_POSTALCODE, string sALT_ADDRESS_COUNTRY, string sDESCRIPTION, string sPARENT_TYPE, Guid gPARENT_ID, Guid gLEAD_ID, string sACCOUNT_NAME, string sTRACKER_KEY, Guid gTEAM_ID, string sTEAM_SET_LIST, string sSMS_OPT_IN, string sTWITTER_SCREEN_NAME, string sPICTURE, string sTAG_SET_NAME, string sPROSPECT_NUMBER, string sASSIGNED_SET_LIST, string sLEAD_SOURCE, string sDP_BUSINESS_PURPOSE, DateTime dtDP_CONSENT_LAST_UPDATED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROSPECTS_Update";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parASSIGNED_USER_ID           = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"          , gASSIGNED_USER_ID            );
				IDbDataParameter parSALUTATION                 = Sql.AddParameter(cmd, "@SALUTATION"                , sSALUTATION                  ,  25);
				IDbDataParameter parFIRST_NAME                 = Sql.AddParameter(cmd, "@FIRST_NAME"                , sFIRST_NAME                  , 100);
				IDbDataParameter parLAST_NAME                  = Sql.AddParameter(cmd, "@LAST_NAME"                 , sLAST_NAME                   , 100);
				IDbDataParameter parTITLE                      = Sql.AddParameter(cmd, "@TITLE"                     , sTITLE                       ,  25);
				IDbDataParameter parDEPARTMENT                 = Sql.AddParameter(cmd, "@DEPARTMENT"                , sDEPARTMENT                  , 255);
				IDbDataParameter parBIRTHDATE                  = Sql.AddParameter(cmd, "@BIRTHDATE"                 , dtBIRTHDATE                  );
				IDbDataParameter parDO_NOT_CALL                = Sql.AddParameter(cmd, "@DO_NOT_CALL"               , bDO_NOT_CALL                 );
				IDbDataParameter parPHONE_HOME                 = Sql.AddParameter(cmd, "@PHONE_HOME"                , sPHONE_HOME                  ,  25);
				IDbDataParameter parPHONE_MOBILE               = Sql.AddParameter(cmd, "@PHONE_MOBILE"              , sPHONE_MOBILE                ,  25);
				IDbDataParameter parPHONE_WORK                 = Sql.AddParameter(cmd, "@PHONE_WORK"                , sPHONE_WORK                  ,  25);
				IDbDataParameter parPHONE_OTHER                = Sql.AddParameter(cmd, "@PHONE_OTHER"               , sPHONE_OTHER                 ,  25);
				IDbDataParameter parPHONE_FAX                  = Sql.AddParameter(cmd, "@PHONE_FAX"                 , sPHONE_FAX                   ,  25);
				IDbDataParameter parEMAIL1                     = Sql.AddParameter(cmd, "@EMAIL1"                    , sEMAIL1                      , 100);
				IDbDataParameter parEMAIL2                     = Sql.AddParameter(cmd, "@EMAIL2"                    , sEMAIL2                      , 100);
				IDbDataParameter parASSISTANT                  = Sql.AddParameter(cmd, "@ASSISTANT"                 , sASSISTANT                   ,  75);
				IDbDataParameter parASSISTANT_PHONE            = Sql.AddParameter(cmd, "@ASSISTANT_PHONE"           , sASSISTANT_PHONE             ,  25);
				IDbDataParameter parEMAIL_OPT_OUT              = Sql.AddParameter(cmd, "@EMAIL_OPT_OUT"             , bEMAIL_OPT_OUT               );
				IDbDataParameter parINVALID_EMAIL              = Sql.AddParameter(cmd, "@INVALID_EMAIL"             , bINVALID_EMAIL               );
				IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , sPRIMARY_ADDRESS_STREET      , 150);
				IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , sPRIMARY_ADDRESS_CITY        , 100);
				IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , sPRIMARY_ADDRESS_STATE       , 100);
				IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", sPRIMARY_ADDRESS_POSTALCODE  ,  20);
				IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , sPRIMARY_ADDRESS_COUNTRY     , 100);
				IDbDataParameter parALT_ADDRESS_STREET         = Sql.AddParameter(cmd, "@ALT_ADDRESS_STREET"        , sALT_ADDRESS_STREET          , 150);
				IDbDataParameter parALT_ADDRESS_CITY           = Sql.AddParameter(cmd, "@ALT_ADDRESS_CITY"          , sALT_ADDRESS_CITY            , 100);
				IDbDataParameter parALT_ADDRESS_STATE          = Sql.AddParameter(cmd, "@ALT_ADDRESS_STATE"         , sALT_ADDRESS_STATE           , 100);
				IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.AddParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , sALT_ADDRESS_POSTALCODE      ,  20);
				IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.AddParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , sALT_ADDRESS_COUNTRY         , 100);
				IDbDataParameter parDESCRIPTION                = Sql.AddParameter(cmd, "@DESCRIPTION"               , sDESCRIPTION                 );
				IDbDataParameter parPARENT_TYPE                = Sql.AddParameter(cmd, "@PARENT_TYPE"               , sPARENT_TYPE                 ,  25);
				IDbDataParameter parPARENT_ID                  = Sql.AddParameter(cmd, "@PARENT_ID"                 , gPARENT_ID                   );
				IDbDataParameter parLEAD_ID                    = Sql.AddParameter(cmd, "@LEAD_ID"                   , gLEAD_ID                     );
				IDbDataParameter parACCOUNT_NAME               = Sql.AddParameter(cmd, "@ACCOUNT_NAME"              , sACCOUNT_NAME                , 150);
				IDbDataParameter parTRACKER_KEY                = Sql.AddParameter(cmd, "@TRACKER_KEY"               , sTRACKER_KEY                 ,  30);
				IDbDataParameter parTEAM_ID                    = Sql.AddParameter(cmd, "@TEAM_ID"                   , gTEAM_ID                     );
				IDbDataParameter parTEAM_SET_LIST              = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"             , sTEAM_SET_LIST               , 8000);
				IDbDataParameter parSMS_OPT_IN                 = Sql.AddParameter(cmd, "@SMS_OPT_IN"                , sSMS_OPT_IN                  ,  25);
				IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME"       , sTWITTER_SCREEN_NAME         ,  20);
				IDbDataParameter parPICTURE                    = Sql.AddParameter(cmd, "@PICTURE"                   , sPICTURE                     );
				IDbDataParameter parTAG_SET_NAME               = Sql.AddParameter(cmd, "@TAG_SET_NAME"              , sTAG_SET_NAME                , 4000);
				IDbDataParameter parPROSPECT_NUMBER            = Sql.AddParameter(cmd, "@PROSPECT_NUMBER"           , sPROSPECT_NUMBER             ,  30);
				IDbDataParameter parASSIGNED_SET_LIST          = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"         , sASSIGNED_SET_LIST           , 8000);
				IDbDataParameter parLEAD_SOURCE                = Sql.AddParameter(cmd, "@LEAD_SOURCE"               , sLEAD_SOURCE                 , 100);
				IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.AddParameter(cmd, "@DP_BUSINESS_PURPOSE"       , sDP_BUSINESS_PURPOSE         );
				IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.AddParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , dtDP_CONSENT_LAST_UPDATED    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROSPECTS_Update
		/// <summary>
		/// spPROSPECTS_Update
		/// </summary>
		public IDbCommand cmdPROSPECTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROSPECTS_Update";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID           = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"          , "Guid",  16);
			IDbDataParameter parSALUTATION                 = Sql.CreateParameter(cmd, "@SALUTATION"                , "string",  25);
			IDbDataParameter parFIRST_NAME                 = Sql.CreateParameter(cmd, "@FIRST_NAME"                , "string", 100);
			IDbDataParameter parLAST_NAME                  = Sql.CreateParameter(cmd, "@LAST_NAME"                 , "string", 100);
			IDbDataParameter parTITLE                      = Sql.CreateParameter(cmd, "@TITLE"                     , "string",  25);
			IDbDataParameter parDEPARTMENT                 = Sql.CreateParameter(cmd, "@DEPARTMENT"                , "string", 255);
			IDbDataParameter parBIRTHDATE                  = Sql.CreateParameter(cmd, "@BIRTHDATE"                 , "DateTime",   8);
			IDbDataParameter parDO_NOT_CALL                = Sql.CreateParameter(cmd, "@DO_NOT_CALL"               , "bool",   1);
			IDbDataParameter parPHONE_HOME                 = Sql.CreateParameter(cmd, "@PHONE_HOME"                , "string",  25);
			IDbDataParameter parPHONE_MOBILE               = Sql.CreateParameter(cmd, "@PHONE_MOBILE"              , "string",  25);
			IDbDataParameter parPHONE_WORK                 = Sql.CreateParameter(cmd, "@PHONE_WORK"                , "string",  25);
			IDbDataParameter parPHONE_OTHER                = Sql.CreateParameter(cmd, "@PHONE_OTHER"               , "string",  25);
			IDbDataParameter parPHONE_FAX                  = Sql.CreateParameter(cmd, "@PHONE_FAX"                 , "string",  25);
			IDbDataParameter parEMAIL1                     = Sql.CreateParameter(cmd, "@EMAIL1"                    , "string", 100);
			IDbDataParameter parEMAIL2                     = Sql.CreateParameter(cmd, "@EMAIL2"                    , "string", 100);
			IDbDataParameter parASSISTANT                  = Sql.CreateParameter(cmd, "@ASSISTANT"                 , "string",  75);
			IDbDataParameter parASSISTANT_PHONE            = Sql.CreateParameter(cmd, "@ASSISTANT_PHONE"           , "string",  25);
			IDbDataParameter parEMAIL_OPT_OUT              = Sql.CreateParameter(cmd, "@EMAIL_OPT_OUT"             , "bool",   1);
			IDbDataParameter parINVALID_EMAIL              = Sql.CreateParameter(cmd, "@INVALID_EMAIL"             , "bool",   1);
			IDbDataParameter parPRIMARY_ADDRESS_STREET     = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parPRIMARY_ADDRESS_CITY       = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_STATE      = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parPRIMARY_ADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_POSTALCODE", "string",  20);
			IDbDataParameter parPRIMARY_ADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@PRIMARY_ADDRESS_COUNTRY"   , "string", 100);
			IDbDataParameter parALT_ADDRESS_STREET         = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STREET"        , "string", 150);
			IDbDataParameter parALT_ADDRESS_CITY           = Sql.CreateParameter(cmd, "@ALT_ADDRESS_CITY"          , "string", 100);
			IDbDataParameter parALT_ADDRESS_STATE          = Sql.CreateParameter(cmd, "@ALT_ADDRESS_STATE"         , "string", 100);
			IDbDataParameter parALT_ADDRESS_POSTALCODE     = Sql.CreateParameter(cmd, "@ALT_ADDRESS_POSTALCODE"    , "string",  20);
			IDbDataParameter parALT_ADDRESS_COUNTRY        = Sql.CreateParameter(cmd, "@ALT_ADDRESS_COUNTRY"       , "string", 100);
			IDbDataParameter parDESCRIPTION                = Sql.CreateParameter(cmd, "@DESCRIPTION"               , "string", 104857600);
			IDbDataParameter parPARENT_TYPE                = Sql.CreateParameter(cmd, "@PARENT_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_ID                  = Sql.CreateParameter(cmd, "@PARENT_ID"                 , "Guid",  16);
			IDbDataParameter parLEAD_ID                    = Sql.CreateParameter(cmd, "@LEAD_ID"                   , "Guid",  16);
			IDbDataParameter parACCOUNT_NAME               = Sql.CreateParameter(cmd, "@ACCOUNT_NAME"              , "string", 150);
			IDbDataParameter parTRACKER_KEY                = Sql.CreateParameter(cmd, "@TRACKER_KEY"               , "string",  30);
			IDbDataParameter parTEAM_ID                    = Sql.CreateParameter(cmd, "@TEAM_ID"                   , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST              = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"             , "ansistring", 8000);
			IDbDataParameter parSMS_OPT_IN                 = Sql.CreateParameter(cmd, "@SMS_OPT_IN"                , "string",  25);
			IDbDataParameter parTWITTER_SCREEN_NAME        = Sql.CreateParameter(cmd, "@TWITTER_SCREEN_NAME"       , "string",  20);
			IDbDataParameter parPICTURE                    = Sql.CreateParameter(cmd, "@PICTURE"                   , "string", 104857600);
			IDbDataParameter parTAG_SET_NAME               = Sql.CreateParameter(cmd, "@TAG_SET_NAME"              , "string", 4000);
			IDbDataParameter parPROSPECT_NUMBER            = Sql.CreateParameter(cmd, "@PROSPECT_NUMBER"           , "string",  30);
			IDbDataParameter parASSIGNED_SET_LIST          = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"         , "ansistring", 8000);
			IDbDataParameter parLEAD_SOURCE                = Sql.CreateParameter(cmd, "@LEAD_SOURCE"               , "string", 100);
			IDbDataParameter parDP_BUSINESS_PURPOSE        = Sql.CreateParameter(cmd, "@DP_BUSINESS_PURPOSE"       , "string", 104857600);
			IDbDataParameter parDP_CONSENT_LAST_UPDATED    = Sql.CreateParameter(cmd, "@DP_CONSENT_LAST_UPDATED"   , "DateTime",   8);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spQUOTES_ACCOUNTS_Update
		/// <summary>
		/// spQUOTES_ACCOUNTS_Update
		/// </summary>
		public void spQUOTES_ACCOUNTS_Update(Guid gQUOTE_ID, Guid gACCOUNT_ID, string sACCOUNT_ROLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spQUOTES_ACCOUNTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
							IDbDataParameter parACCOUNT_ROLE     = Sql.AddParameter(cmd, "@ACCOUNT_ROLE"    , sACCOUNT_ROLE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spQUOTES_ACCOUNTS_Update
		/// <summary>
		/// spQUOTES_ACCOUNTS_Update
		/// </summary>
		public void spQUOTES_ACCOUNTS_Update(Guid gQUOTE_ID, Guid gACCOUNT_ID, string sACCOUNT_ROLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spQUOTES_ACCOUNTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				IDbDataParameter parACCOUNT_ID       = Sql.AddParameter(cmd, "@ACCOUNT_ID"      , gACCOUNT_ID        );
				IDbDataParameter parACCOUNT_ROLE     = Sql.AddParameter(cmd, "@ACCOUNT_ROLE"    , sACCOUNT_ROLE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdQUOTES_ACCOUNTS_Update
		/// <summary>
		/// spQUOTES_ACCOUNTS_Update
		/// </summary>
		public IDbCommand cmdQUOTES_ACCOUNTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spQUOTES_ACCOUNTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			IDbDataParameter parACCOUNT_ID       = Sql.CreateParameter(cmd, "@ACCOUNT_ID"      , "Guid",  16);
			IDbDataParameter parACCOUNT_ROLE     = Sql.CreateParameter(cmd, "@ACCOUNT_ROLE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spQUOTES_CONTACTS_Update
		/// <summary>
		/// spQUOTES_CONTACTS_Update
		/// </summary>
		public void spQUOTES_CONTACTS_Update(Guid gQUOTE_ID, Guid gCONTACT_ID, string sCONTACT_ROLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spQUOTES_CONTACTS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
							IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spQUOTES_CONTACTS_Update
		/// <summary>
		/// spQUOTES_CONTACTS_Update
		/// </summary>
		public void spQUOTES_CONTACTS_Update(Guid gQUOTE_ID, Guid gCONTACT_ID, string sCONTACT_ROLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spQUOTES_CONTACTS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				IDbDataParameter parCONTACT_ID       = Sql.AddParameter(cmd, "@CONTACT_ID"      , gCONTACT_ID        );
				IDbDataParameter parCONTACT_ROLE     = Sql.AddParameter(cmd, "@CONTACT_ROLE"    , sCONTACT_ROLE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdQUOTES_CONTACTS_Update
		/// <summary>
		/// spQUOTES_CONTACTS_Update
		/// </summary>
		public IDbCommand cmdQUOTES_CONTACTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spQUOTES_CONTACTS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			IDbDataParameter parCONTACT_ID       = Sql.CreateParameter(cmd, "@CONTACT_ID"      , "Guid",  16);
			IDbDataParameter parCONTACT_ROLE     = Sql.CreateParameter(cmd, "@CONTACT_ROLE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spQUOTES_OPPORTUNITIES_Update
		/// <summary>
		/// spQUOTES_OPPORTUNITIES_Update
		/// </summary>
		public void spQUOTES_OPPORTUNITIES_Update(Guid gQUOTE_ID, Guid gOPPORTUNITY_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spQUOTES_OPPORTUNITIES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
							IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spQUOTES_OPPORTUNITIES_Update
		/// <summary>
		/// spQUOTES_OPPORTUNITIES_Update
		/// </summary>
		public void spQUOTES_OPPORTUNITIES_Update(Guid gQUOTE_ID, Guid gOPPORTUNITY_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spQUOTES_OPPORTUNITIES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parQUOTE_ID         = Sql.AddParameter(cmd, "@QUOTE_ID"        , gQUOTE_ID          );
				IDbDataParameter parOPPORTUNITY_ID   = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"  , gOPPORTUNITY_ID    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdQUOTES_OPPORTUNITIES_Update
		/// <summary>
		/// spQUOTES_OPPORTUNITIES_Update
		/// </summary>
		public IDbCommand cmdQUOTES_OPPORTUNITIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spQUOTES_OPPORTUNITIES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parQUOTE_ID         = Sql.CreateParameter(cmd, "@QUOTE_ID"        , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID   = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"  , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Delete
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Delete
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spREACT_CUSTOM_VIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Delete
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Delete
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spREACT_CUSTOM_VIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdREACT_CUSTOM_VIEWS_Delete
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Delete
		/// </summary>
		public IDbCommand cmdREACT_CUSTOM_VIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spREACT_CUSTOM_VIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Update
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Update
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sCATEGORY, string sCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spREACT_CUSTOM_VIEWS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
							IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Update
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Update
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sCATEGORY, string sCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spREACT_CUSTOM_VIEWS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
				IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdREACT_CUSTOM_VIEWS_Update
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Update
		/// </summary>
		public IDbCommand cmdREACT_CUSTOM_VIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spREACT_CUSTOM_VIEWS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 100);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  25);
			IDbDataParameter parCONTENT          = Sql.CreateParameter(cmd, "@CONTENT"         , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spRELATIONSHIPS_Delete
		/// <summary>
		/// spRELATIONSHIPS_Delete
		/// </summary>
		public void spRELATIONSHIPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELATIONSHIPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELATIONSHIPS_Delete
		/// <summary>
		/// spRELATIONSHIPS_Delete
		/// </summary>
		public void spRELATIONSHIPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELATIONSHIPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRELATIONSHIPS_Delete
		/// <summary>
		/// spRELATIONSHIPS_Delete
		/// </summary>
		public IDbCommand cmdRELATIONSHIPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELATIONSHIPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spRELATIONSHIPS_InsertOnly
		/// <summary>
		/// spRELATIONSHIPS_InsertOnly
		/// </summary>
		public void spRELATIONSHIPS_InsertOnly(string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELATIONSHIPS_InsertOnly";
							IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
							IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
							IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
							IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
							IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
							IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
							IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
							IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
							IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
							IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
							IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
							IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELATIONSHIPS_InsertOnly
		/// <summary>
		/// spRELATIONSHIPS_InsertOnly
		/// </summary>
		public void spRELATIONSHIPS_InsertOnly(string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELATIONSHIPS_InsertOnly";
				IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
				IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
				IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
				IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
				IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
				IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
				IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
				IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
				IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
				IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
				IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
				IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRELATIONSHIPS_InsertOnly
		/// <summary>
		/// spRELATIONSHIPS_InsertOnly
		/// </summary>
		public IDbCommand cmdRELATIONSHIPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELATIONSHIPS_InsertOnly";
			IDbDataParameter parRELATIONSHIP_NAME           = Sql.CreateParameter(cmd, "@RELATIONSHIP_NAME"          , "string", 150);
			IDbDataParameter parLHS_MODULE                  = Sql.CreateParameter(cmd, "@LHS_MODULE"                 , "string", 100);
			IDbDataParameter parLHS_TABLE                   = Sql.CreateParameter(cmd, "@LHS_TABLE"                  , "string",  64);
			IDbDataParameter parLHS_KEY                     = Sql.CreateParameter(cmd, "@LHS_KEY"                    , "string",  64);
			IDbDataParameter parRHS_MODULE                  = Sql.CreateParameter(cmd, "@RHS_MODULE"                 , "string", 100);
			IDbDataParameter parRHS_TABLE                   = Sql.CreateParameter(cmd, "@RHS_TABLE"                  , "string",  64);
			IDbDataParameter parRHS_KEY                     = Sql.CreateParameter(cmd, "@RHS_KEY"                    , "string",  64);
			IDbDataParameter parJOIN_TABLE                  = Sql.CreateParameter(cmd, "@JOIN_TABLE"                 , "string",  64);
			IDbDataParameter parJOIN_KEY_LHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_LHS"               , "string",  64);
			IDbDataParameter parJOIN_KEY_RHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_RHS"               , "string",  64);
			IDbDataParameter parRELATIONSHIP_TYPE           = Sql.CreateParameter(cmd, "@RELATIONSHIP_TYPE"          , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", "string",  50);
			IDbDataParameter parREVERSE                     = Sql.CreateParameter(cmd, "@REVERSE"                    , "bool",   1);
			return cmd;
		}
		#endregion

		#region spRELATIONSHIPS_Update
		/// <summary>
		/// spRELATIONSHIPS_Update
		/// </summary>
		public void spRELATIONSHIPS_Update(ref Guid gID, string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELATIONSHIPS_Update";
							IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
							IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
							IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
							IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
							IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
							IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
							IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
							IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
							IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
							IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
							IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
							IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
							IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
							IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELATIONSHIPS_Update
		/// <summary>
		/// spRELATIONSHIPS_Update
		/// </summary>
		public void spRELATIONSHIPS_Update(ref Guid gID, string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELATIONSHIPS_Update";
				IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
				IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
				IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
				IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
				IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
				IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
				IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
				IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
				IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
				IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
				IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
				IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
				IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
				IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdRELATIONSHIPS_Update
		/// <summary>
		/// spRELATIONSHIPS_Update
		/// </summary>
		public IDbCommand cmdRELATIONSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELATIONSHIPS_Update";
			IDbDataParameter parID                          = Sql.CreateParameter(cmd, "@ID"                         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID            = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"           , "Guid",  16);
			IDbDataParameter parRELATIONSHIP_NAME           = Sql.CreateParameter(cmd, "@RELATIONSHIP_NAME"          , "string", 150);
			IDbDataParameter parLHS_MODULE                  = Sql.CreateParameter(cmd, "@LHS_MODULE"                 , "string", 100);
			IDbDataParameter parLHS_TABLE                   = Sql.CreateParameter(cmd, "@LHS_TABLE"                  , "string",  64);
			IDbDataParameter parLHS_KEY                     = Sql.CreateParameter(cmd, "@LHS_KEY"                    , "string",  64);
			IDbDataParameter parRHS_MODULE                  = Sql.CreateParameter(cmd, "@RHS_MODULE"                 , "string", 100);
			IDbDataParameter parRHS_TABLE                   = Sql.CreateParameter(cmd, "@RHS_TABLE"                  , "string",  64);
			IDbDataParameter parRHS_KEY                     = Sql.CreateParameter(cmd, "@RHS_KEY"                    , "string",  64);
			IDbDataParameter parJOIN_TABLE                  = Sql.CreateParameter(cmd, "@JOIN_TABLE"                 , "string",  64);
			IDbDataParameter parJOIN_KEY_LHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_LHS"               , "string",  64);
			IDbDataParameter parJOIN_KEY_RHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_RHS"               , "string",  64);
			IDbDataParameter parRELATIONSHIP_TYPE           = Sql.CreateParameter(cmd, "@RELATIONSHIP_TYPE"          , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", "string",  50);
			IDbDataParameter parREVERSE                     = Sql.CreateParameter(cmd, "@REVERSE"                    , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spRELEASES_Delete
		/// <summary>
		/// spRELEASES_Delete
		/// </summary>
		public void spRELEASES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELEASES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELEASES_Delete
		/// <summary>
		/// spRELEASES_Delete
		/// </summary>
		public void spRELEASES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELEASES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRELEASES_Delete
		/// <summary>
		/// spRELEASES_Delete
		/// </summary>
		public IDbCommand cmdRELEASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELEASES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spRELEASES_MassDelete
		/// <summary>
		/// spRELEASES_MassDelete
		/// </summary>
		public void spRELEASES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELEASES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELEASES_MassDelete
		/// <summary>
		/// spRELEASES_MassDelete
		/// </summary>
		public void spRELEASES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELEASES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRELEASES_MassDelete
		/// <summary>
		/// spRELEASES_MassDelete
		/// </summary>
		public IDbCommand cmdRELEASES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELEASES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spRELEASES_MassUpdate
		/// <summary>
		/// spRELEASES_MassUpdate
		/// </summary>
		public void spRELEASES_MassUpdate(string sID_LIST, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELEASES_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELEASES_MassUpdate
		/// <summary>
		/// spRELEASES_MassUpdate
		/// </summary>
		public void spRELEASES_MassUpdate(string sID_LIST, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELEASES_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRELEASES_MassUpdate
		/// <summary>
		/// spRELEASES_MassUpdate
		/// </summary>
		public IDbCommand cmdRELEASES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELEASES_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spRELEASES_Update
		/// <summary>
		/// spRELEASES_Update
		/// </summary>
		public void spRELEASES_Update(ref Guid gID, string sNAME, Int32 nLIST_ORDER, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELEASES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parLIST_ORDER       = Sql.AddParameter(cmd, "@LIST_ORDER"      , nLIST_ORDER        );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELEASES_Update
		/// <summary>
		/// spRELEASES_Update
		/// </summary>
		public void spRELEASES_Update(ref Guid gID, string sNAME, Int32 nLIST_ORDER, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELEASES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parLIST_ORDER       = Sql.AddParameter(cmd, "@LIST_ORDER"      , nLIST_ORDER        );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdRELEASES_Update
		/// <summary>
		/// spRELEASES_Update
		/// </summary>
		public IDbCommand cmdRELEASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELEASES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parLIST_ORDER       = Sql.CreateParameter(cmd, "@LIST_ORDER"      , "Int32",   4);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spREVENUE_LINE_ITEMS_Delete
		/// <summary>
		/// spREVENUE_LINE_ITEMS_Delete
		/// </summary>
		public void spREVENUE_LINE_ITEMS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spREVENUE_LINE_ITEMS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spREVENUE_LINE_ITEMS_Delete
		/// <summary>
		/// spREVENUE_LINE_ITEMS_Delete
		/// </summary>
		public void spREVENUE_LINE_ITEMS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spREVENUE_LINE_ITEMS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdREVENUE_LINE_ITEMS_Delete
		/// <summary>
		/// spREVENUE_LINE_ITEMS_Delete
		/// </summary>
		public IDbCommand cmdREVENUE_LINE_ITEMS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spREVENUE_LINE_ITEMS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spREVENUE_LINE_ITEMS_Update
		/// <summary>
		/// spREVENUE_LINE_ITEMS_Update
		/// </summary>
		public void spREVENUE_LINE_ITEMS_Update(ref Guid gID, Guid gOPPORTUNITY_ID, Guid gLINE_GROUP_ID, string sLINE_ITEM_TYPE, Int32 nPOSITION, string sNAME, string sMFT_PART_NUM, string sVENDOR_PART_NUM, Guid gPRODUCT_TEMPLATE_ID, string sTAX_CLASS, float flQUANTITY, decimal dCOST_PRICE, decimal dLIST_PRICE, decimal dUNIT_PRICE, string sDESCRIPTION, Guid gPARENT_TEMPLATE_ID, Guid gDISCOUNT_ID, decimal dDISCOUNT_PRICE, string sPRICING_FORMULA, float flPRICING_FACTOR, Guid gTAXRATE_ID, string sOPPORTUNITY_TYPE, string sLEAD_SOURCE, DateTime dtDATE_CLOSED, string sNEXT_STEP, string sSALES_STAGE, float flPROBABILITY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spREVENUE_LINE_ITEMS_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parOPPORTUNITY_ID      = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"     , gOPPORTUNITY_ID       );
							IDbDataParameter parLINE_GROUP_ID       = Sql.AddParameter(cmd, "@LINE_GROUP_ID"      , gLINE_GROUP_ID        );
							IDbDataParameter parLINE_ITEM_TYPE      = Sql.AddParameter(cmd, "@LINE_ITEM_TYPE"     , sLINE_ITEM_TYPE       ,  25);
							IDbDataParameter parPOSITION            = Sql.AddParameter(cmd, "@POSITION"           , nPOSITION             );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 , 150);
							IDbDataParameter parMFT_PART_NUM        = Sql.AddParameter(cmd, "@MFT_PART_NUM"       , sMFT_PART_NUM         ,  50);
							IDbDataParameter parVENDOR_PART_NUM     = Sql.AddParameter(cmd, "@VENDOR_PART_NUM"    , sVENDOR_PART_NUM      ,  50);
							IDbDataParameter parPRODUCT_TEMPLATE_ID = Sql.AddParameter(cmd, "@PRODUCT_TEMPLATE_ID", gPRODUCT_TEMPLATE_ID  );
							IDbDataParameter parTAX_CLASS           = Sql.AddParameter(cmd, "@TAX_CLASS"          , sTAX_CLASS            ,  25);
							IDbDataParameter parQUANTITY            = Sql.AddParameter(cmd, "@QUANTITY"           , flQUANTITY            );
							IDbDataParameter parCOST_PRICE          = Sql.AddParameter(cmd, "@COST_PRICE"         , dCOST_PRICE           );
							IDbDataParameter parLIST_PRICE          = Sql.AddParameter(cmd, "@LIST_PRICE"         , dLIST_PRICE           );
							IDbDataParameter parUNIT_PRICE          = Sql.AddParameter(cmd, "@UNIT_PRICE"         , dUNIT_PRICE           );
							IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
							IDbDataParameter parPARENT_TEMPLATE_ID  = Sql.AddParameter(cmd, "@PARENT_TEMPLATE_ID" , gPARENT_TEMPLATE_ID   );
							IDbDataParameter parDISCOUNT_ID         = Sql.AddParameter(cmd, "@DISCOUNT_ID"        , gDISCOUNT_ID          );
							IDbDataParameter parDISCOUNT_PRICE      = Sql.AddParameter(cmd, "@DISCOUNT_PRICE"     , dDISCOUNT_PRICE       );
							IDbDataParameter parPRICING_FORMULA     = Sql.AddParameter(cmd, "@PRICING_FORMULA"    , sPRICING_FORMULA      ,  25);
							IDbDataParameter parPRICING_FACTOR      = Sql.AddParameter(cmd, "@PRICING_FACTOR"     , flPRICING_FACTOR      );
							IDbDataParameter parTAXRATE_ID          = Sql.AddParameter(cmd, "@TAXRATE_ID"         , gTAXRATE_ID           );
							IDbDataParameter parOPPORTUNITY_TYPE    = Sql.AddParameter(cmd, "@OPPORTUNITY_TYPE"   , sOPPORTUNITY_TYPE     , 255);
							IDbDataParameter parLEAD_SOURCE         = Sql.AddParameter(cmd, "@LEAD_SOURCE"        , sLEAD_SOURCE          ,  50);
							IDbDataParameter parDATE_CLOSED         = Sql.AddParameter(cmd, "@DATE_CLOSED"        , dtDATE_CLOSED         );
							IDbDataParameter parNEXT_STEP           = Sql.AddParameter(cmd, "@NEXT_STEP"          , sNEXT_STEP            , 100);
							IDbDataParameter parSALES_STAGE         = Sql.AddParameter(cmd, "@SALES_STAGE"        , sSALES_STAGE          ,  25);
							IDbDataParameter parPROBABILITY         = Sql.AddParameter(cmd, "@PROBABILITY"        , flPROBABILITY         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spREVENUE_LINE_ITEMS_Update
		/// <summary>
		/// spREVENUE_LINE_ITEMS_Update
		/// </summary>
		public void spREVENUE_LINE_ITEMS_Update(ref Guid gID, Guid gOPPORTUNITY_ID, Guid gLINE_GROUP_ID, string sLINE_ITEM_TYPE, Int32 nPOSITION, string sNAME, string sMFT_PART_NUM, string sVENDOR_PART_NUM, Guid gPRODUCT_TEMPLATE_ID, string sTAX_CLASS, float flQUANTITY, decimal dCOST_PRICE, decimal dLIST_PRICE, decimal dUNIT_PRICE, string sDESCRIPTION, Guid gPARENT_TEMPLATE_ID, Guid gDISCOUNT_ID, decimal dDISCOUNT_PRICE, string sPRICING_FORMULA, float flPRICING_FACTOR, Guid gTAXRATE_ID, string sOPPORTUNITY_TYPE, string sLEAD_SOURCE, DateTime dtDATE_CLOSED, string sNEXT_STEP, string sSALES_STAGE, float flPROBABILITY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spREVENUE_LINE_ITEMS_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parOPPORTUNITY_ID      = Sql.AddParameter(cmd, "@OPPORTUNITY_ID"     , gOPPORTUNITY_ID       );
				IDbDataParameter parLINE_GROUP_ID       = Sql.AddParameter(cmd, "@LINE_GROUP_ID"      , gLINE_GROUP_ID        );
				IDbDataParameter parLINE_ITEM_TYPE      = Sql.AddParameter(cmd, "@LINE_ITEM_TYPE"     , sLINE_ITEM_TYPE       ,  25);
				IDbDataParameter parPOSITION            = Sql.AddParameter(cmd, "@POSITION"           , nPOSITION             );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 , 150);
				IDbDataParameter parMFT_PART_NUM        = Sql.AddParameter(cmd, "@MFT_PART_NUM"       , sMFT_PART_NUM         ,  50);
				IDbDataParameter parVENDOR_PART_NUM     = Sql.AddParameter(cmd, "@VENDOR_PART_NUM"    , sVENDOR_PART_NUM      ,  50);
				IDbDataParameter parPRODUCT_TEMPLATE_ID = Sql.AddParameter(cmd, "@PRODUCT_TEMPLATE_ID", gPRODUCT_TEMPLATE_ID  );
				IDbDataParameter parTAX_CLASS           = Sql.AddParameter(cmd, "@TAX_CLASS"          , sTAX_CLASS            ,  25);
				IDbDataParameter parQUANTITY            = Sql.AddParameter(cmd, "@QUANTITY"           , flQUANTITY            );
				IDbDataParameter parCOST_PRICE          = Sql.AddParameter(cmd, "@COST_PRICE"         , dCOST_PRICE           );
				IDbDataParameter parLIST_PRICE          = Sql.AddParameter(cmd, "@LIST_PRICE"         , dLIST_PRICE           );
				IDbDataParameter parUNIT_PRICE          = Sql.AddParameter(cmd, "@UNIT_PRICE"         , dUNIT_PRICE           );
				IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
				IDbDataParameter parPARENT_TEMPLATE_ID  = Sql.AddParameter(cmd, "@PARENT_TEMPLATE_ID" , gPARENT_TEMPLATE_ID   );
				IDbDataParameter parDISCOUNT_ID         = Sql.AddParameter(cmd, "@DISCOUNT_ID"        , gDISCOUNT_ID          );
				IDbDataParameter parDISCOUNT_PRICE      = Sql.AddParameter(cmd, "@DISCOUNT_PRICE"     , dDISCOUNT_PRICE       );
				IDbDataParameter parPRICING_FORMULA     = Sql.AddParameter(cmd, "@PRICING_FORMULA"    , sPRICING_FORMULA      ,  25);
				IDbDataParameter parPRICING_FACTOR      = Sql.AddParameter(cmd, "@PRICING_FACTOR"     , flPRICING_FACTOR      );
				IDbDataParameter parTAXRATE_ID          = Sql.AddParameter(cmd, "@TAXRATE_ID"         , gTAXRATE_ID           );
				IDbDataParameter parOPPORTUNITY_TYPE    = Sql.AddParameter(cmd, "@OPPORTUNITY_TYPE"   , sOPPORTUNITY_TYPE     , 255);
				IDbDataParameter parLEAD_SOURCE         = Sql.AddParameter(cmd, "@LEAD_SOURCE"        , sLEAD_SOURCE          ,  50);
				IDbDataParameter parDATE_CLOSED         = Sql.AddParameter(cmd, "@DATE_CLOSED"        , dtDATE_CLOSED         );
				IDbDataParameter parNEXT_STEP           = Sql.AddParameter(cmd, "@NEXT_STEP"          , sNEXT_STEP            , 100);
				IDbDataParameter parSALES_STAGE         = Sql.AddParameter(cmd, "@SALES_STAGE"        , sSALES_STAGE          ,  25);
				IDbDataParameter parPROBABILITY         = Sql.AddParameter(cmd, "@PROBABILITY"        , flPROBABILITY         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdREVENUE_LINE_ITEMS_Update
		/// <summary>
		/// spREVENUE_LINE_ITEMS_Update
		/// </summary>
		public IDbCommand cmdREVENUE_LINE_ITEMS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spREVENUE_LINE_ITEMS_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_ID      = Sql.CreateParameter(cmd, "@OPPORTUNITY_ID"     , "Guid",  16);
			IDbDataParameter parLINE_GROUP_ID       = Sql.CreateParameter(cmd, "@LINE_GROUP_ID"      , "Guid",  16);
			IDbDataParameter parLINE_ITEM_TYPE      = Sql.CreateParameter(cmd, "@LINE_ITEM_TYPE"     , "string",  25);
			IDbDataParameter parPOSITION            = Sql.CreateParameter(cmd, "@POSITION"           , "Int32",   4);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string", 150);
			IDbDataParameter parMFT_PART_NUM        = Sql.CreateParameter(cmd, "@MFT_PART_NUM"       , "string",  50);
			IDbDataParameter parVENDOR_PART_NUM     = Sql.CreateParameter(cmd, "@VENDOR_PART_NUM"    , "string",  50);
			IDbDataParameter parPRODUCT_TEMPLATE_ID = Sql.CreateParameter(cmd, "@PRODUCT_TEMPLATE_ID", "Guid",  16);
			IDbDataParameter parTAX_CLASS           = Sql.CreateParameter(cmd, "@TAX_CLASS"          , "string",  25);
			IDbDataParameter parQUANTITY            = Sql.CreateParameter(cmd, "@QUANTITY"           , "float",   8);
			IDbDataParameter parCOST_PRICE          = Sql.CreateParameter(cmd, "@COST_PRICE"         , "decimal",   8);
			IDbDataParameter parLIST_PRICE          = Sql.CreateParameter(cmd, "@LIST_PRICE"         , "decimal",   8);
			IDbDataParameter parUNIT_PRICE          = Sql.CreateParameter(cmd, "@UNIT_PRICE"         , "decimal",   8);
			IDbDataParameter parDESCRIPTION         = Sql.CreateParameter(cmd, "@DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parPARENT_TEMPLATE_ID  = Sql.CreateParameter(cmd, "@PARENT_TEMPLATE_ID" , "Guid",  16);
			IDbDataParameter parDISCOUNT_ID         = Sql.CreateParameter(cmd, "@DISCOUNT_ID"        , "Guid",  16);
			IDbDataParameter parDISCOUNT_PRICE      = Sql.CreateParameter(cmd, "@DISCOUNT_PRICE"     , "decimal",   8);
			IDbDataParameter parPRICING_FORMULA     = Sql.CreateParameter(cmd, "@PRICING_FORMULA"    , "string",  25);
			IDbDataParameter parPRICING_FACTOR      = Sql.CreateParameter(cmd, "@PRICING_FACTOR"     , "float",   8);
			IDbDataParameter parTAXRATE_ID          = Sql.CreateParameter(cmd, "@TAXRATE_ID"         , "Guid",  16);
			IDbDataParameter parOPPORTUNITY_TYPE    = Sql.CreateParameter(cmd, "@OPPORTUNITY_TYPE"   , "string", 255);
			IDbDataParameter parLEAD_SOURCE         = Sql.CreateParameter(cmd, "@LEAD_SOURCE"        , "string",  50);
			IDbDataParameter parDATE_CLOSED         = Sql.CreateParameter(cmd, "@DATE_CLOSED"        , "DateTime",   8);
			IDbDataParameter parNEXT_STEP           = Sql.CreateParameter(cmd, "@NEXT_STEP"          , "string", 100);
			IDbDataParameter parSALES_STAGE         = Sql.CreateParameter(cmd, "@SALES_STAGE"        , "string",  25);
			IDbDataParameter parPROBABILITY         = Sql.CreateParameter(cmd, "@PROBABILITY"        , "float",   8);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spRULES_Delete
		/// <summary>
		/// spRULES_Delete
		/// </summary>
		public void spRULES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRULES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRULES_Delete
		/// <summary>
		/// spRULES_Delete
		/// </summary>
		public void spRULES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRULES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRULES_Delete
		/// <summary>
		/// spRULES_Delete
		/// </summary>
		public IDbCommand cmdRULES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRULES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spRULES_MassUpdate
		/// <summary>
		/// spRULES_MassUpdate
		/// </summary>
		public void spRULES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRULES_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
							IDbDataParameter parTEAM_SET_ADD     = Sql.AddParameter(cmd, "@TEAM_SET_ADD"    , bTEAM_SET_ADD      );
							IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
							IDbDataParameter parTAG_SET_ADD      = Sql.AddParameter(cmd, "@TAG_SET_ADD"     , bTAG_SET_ADD       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRULES_MassUpdate
		/// <summary>
		/// spRULES_MassUpdate
		/// </summary>
		public void spRULES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sTAG_SET_NAME, bool bTAG_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRULES_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
				IDbDataParameter parTEAM_SET_ADD     = Sql.AddParameter(cmd, "@TEAM_SET_ADD"    , bTEAM_SET_ADD      );
				IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
				IDbDataParameter parTAG_SET_ADD      = Sql.AddParameter(cmd, "@TAG_SET_ADD"     , bTAG_SET_ADD       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRULES_MassUpdate
		/// <summary>
		/// spRULES_MassUpdate
		/// </summary>
		public IDbCommand cmdRULES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRULES_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST    = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"   , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD     = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"    , "bool",   1);
			IDbDataParameter parTAG_SET_NAME     = Sql.CreateParameter(cmd, "@TAG_SET_NAME"    , "string", 4000);
			IDbDataParameter parTAG_SET_ADD      = Sql.CreateParameter(cmd, "@TAG_SET_ADD"     , "bool",   1);
			return cmd;
		}
		#endregion

		#region spRULES_Update
		/// <summary>
		/// spRULES_Update
		/// </summary>
		public void spRULES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sMODULE_NAME, string sRULE_TYPE, string sDESCRIPTION, string sFILTER_SQL, string sFILTER_XML, string sRULES_XML, string sXOML, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRULES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parRULE_TYPE        = Sql.AddParameter(cmd, "@RULE_TYPE"       , sRULE_TYPE         ,  25);
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							IDbDataParameter parFILTER_SQL       = Sql.AddParameter(cmd, "@FILTER_SQL"      , sFILTER_SQL        );
							IDbDataParameter parFILTER_XML       = Sql.AddParameter(cmd, "@FILTER_XML"      , sFILTER_XML        );
							IDbDataParameter parRULES_XML        = Sql.AddParameter(cmd, "@RULES_XML"       , sRULES_XML         );
							IDbDataParameter parXOML             = Sql.AddParameter(cmd, "@XOML"            , sXOML              );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
							IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRULES_Update
		/// <summary>
		/// spRULES_Update
		/// </summary>
		public void spRULES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sMODULE_NAME, string sRULE_TYPE, string sDESCRIPTION, string sFILTER_SQL, string sFILTER_XML, string sRULES_XML, string sXOML, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRULES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parRULE_TYPE        = Sql.AddParameter(cmd, "@RULE_TYPE"       , sRULE_TYPE         ,  25);
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				IDbDataParameter parFILTER_SQL       = Sql.AddParameter(cmd, "@FILTER_SQL"      , sFILTER_SQL        );
				IDbDataParameter parFILTER_XML       = Sql.AddParameter(cmd, "@FILTER_XML"      , sFILTER_XML        );
				IDbDataParameter parRULES_XML        = Sql.AddParameter(cmd, "@RULES_XML"       , sRULES_XML         );
				IDbDataParameter parXOML             = Sql.AddParameter(cmd, "@XOML"            , sXOML              );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
				IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdRULES_Update
		/// <summary>
		/// spRULES_Update
		/// </summary>
		public IDbCommand cmdRULES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRULES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parRULE_TYPE        = Sql.CreateParameter(cmd, "@RULE_TYPE"       , "string",  25);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			IDbDataParameter parFILTER_SQL       = Sql.CreateParameter(cmd, "@FILTER_SQL"      , "string", 104857600);
			IDbDataParameter parFILTER_XML       = Sql.CreateParameter(cmd, "@FILTER_XML"      , "string", 104857600);
			IDbDataParameter parRULES_XML        = Sql.CreateParameter(cmd, "@RULES_XML"       , "string", 104857600);
			IDbDataParameter parXOML             = Sql.CreateParameter(cmd, "@XOML"            , "string", 104857600);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST    = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"   , "ansistring", 8000);
			IDbDataParameter parTAG_SET_NAME     = Sql.CreateParameter(cmd, "@TAG_SET_NAME"    , "string", 4000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSAVED_SEARCH_Delete
		/// <summary>
		/// spSAVED_SEARCH_Delete
		/// </summary>
		public void spSAVED_SEARCH_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSAVED_SEARCH_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSAVED_SEARCH_Delete
		/// <summary>
		/// spSAVED_SEARCH_Delete
		/// </summary>
		public void spSAVED_SEARCH_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSAVED_SEARCH_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSAVED_SEARCH_Delete
		/// <summary>
		/// spSAVED_SEARCH_Delete
		/// </summary>
		public IDbCommand cmdSAVED_SEARCH_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSAVED_SEARCH_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSAVED_SEARCH_Update
		/// <summary>
		/// spSAVED_SEARCH_Update
		/// </summary>
		public void spSAVED_SEARCH_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSEARCH_MODULE, string sCONTENTS, string sDESCRIPTION, Guid gDEFAULT_SEARCH_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSAVED_SEARCH_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parSEARCH_MODULE     = Sql.AddParameter(cmd, "@SEARCH_MODULE"    , sSEARCH_MODULE      , 150);
							IDbDataParameter parCONTENTS          = Sql.AddParameter(cmd, "@CONTENTS"         , sCONTENTS           );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parDEFAULT_SEARCH_ID = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ID", gDEFAULT_SEARCH_ID  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSAVED_SEARCH_Update
		/// <summary>
		/// spSAVED_SEARCH_Update
		/// </summary>
		public void spSAVED_SEARCH_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSEARCH_MODULE, string sCONTENTS, string sDESCRIPTION, Guid gDEFAULT_SEARCH_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSAVED_SEARCH_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parSEARCH_MODULE     = Sql.AddParameter(cmd, "@SEARCH_MODULE"    , sSEARCH_MODULE      , 150);
				IDbDataParameter parCONTENTS          = Sql.AddParameter(cmd, "@CONTENTS"         , sCONTENTS           );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parDEFAULT_SEARCH_ID = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ID", gDEFAULT_SEARCH_ID  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSAVED_SEARCH_Update
		/// <summary>
		/// spSAVED_SEARCH_Update
		/// </summary>
		public IDbCommand cmdSAVED_SEARCH_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSAVED_SEARCH_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parSEARCH_MODULE     = Sql.CreateParameter(cmd, "@SEARCH_MODULE"    , "string", 150);
			IDbDataParameter parCONTENTS          = Sql.CreateParameter(cmd, "@CONTENTS"         , "string", 104857600);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parDEFAULT_SEARCH_ID = Sql.CreateParameter(cmd, "@DEFAULT_SEARCH_ID", "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_Delete
		/// <summary>
		/// spSCHEDULERS_Delete
		/// </summary>
		public void spSCHEDULERS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_Delete
		/// <summary>
		/// spSCHEDULERS_Delete
		/// </summary>
		public void spSCHEDULERS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_Delete
		/// <summary>
		/// spSCHEDULERS_Delete
		/// </summary>
		public IDbCommand cmdSCHEDULERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_InsertOnly
		/// <summary>
		/// spSCHEDULERS_InsertOnly
		/// </summary>
		public void spSCHEDULERS_InsertOnly(string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
							IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
							IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
							IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
							IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
							IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_InsertOnly
		/// <summary>
		/// spSCHEDULERS_InsertOnly
		/// </summary>
		public void spSCHEDULERS_InsertOnly(string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
				IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
				IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
				IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
				IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
				IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_InsertOnly
		/// <summary>
		/// spSCHEDULERS_InsertOnly
		/// </summary>
		public IDbCommand cmdSCHEDULERS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parJOB              = Sql.CreateParameter(cmd, "@JOB"             , "string", 255);
			IDbDataParameter parDATE_TIME_START  = Sql.CreateParameter(cmd, "@DATE_TIME_START" , "DateTime",   8);
			IDbDataParameter parDATE_TIME_END    = Sql.CreateParameter(cmd, "@DATE_TIME_END"   , "DateTime",   8);
			IDbDataParameter parJOB_INTERVAL     = Sql.CreateParameter(cmd, "@JOB_INTERVAL"    , "string", 100);
			IDbDataParameter parTIME_FROM        = Sql.CreateParameter(cmd, "@TIME_FROM"       , "DateTime",   8);
			IDbDataParameter parTIME_TO          = Sql.CreateParameter(cmd, "@TIME_TO"         , "DateTime",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parCATCH_UP         = Sql.CreateParameter(cmd, "@CATCH_UP"        , "bool",   1);
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_Update
		/// <summary>
		/// spSCHEDULERS_Update
		/// </summary>
		public void spSCHEDULERS_Update(ref Guid gID, string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
							IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
							IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
							IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
							IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
							IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_Update
		/// <summary>
		/// spSCHEDULERS_Update
		/// </summary>
		public void spSCHEDULERS_Update(ref Guid gID, string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
				IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
				IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
				IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
				IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
				IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSCHEDULERS_Update
		/// <summary>
		/// spSCHEDULERS_Update
		/// </summary>
		public IDbCommand cmdSCHEDULERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parJOB              = Sql.CreateParameter(cmd, "@JOB"             , "string", 255);
			IDbDataParameter parDATE_TIME_START  = Sql.CreateParameter(cmd, "@DATE_TIME_START" , "DateTime",   8);
			IDbDataParameter parDATE_TIME_END    = Sql.CreateParameter(cmd, "@DATE_TIME_END"   , "DateTime",   8);
			IDbDataParameter parJOB_INTERVAL     = Sql.CreateParameter(cmd, "@JOB_INTERVAL"    , "string", 100);
			IDbDataParameter parTIME_FROM        = Sql.CreateParameter(cmd, "@TIME_FROM"       , "DateTime",   8);
			IDbDataParameter parTIME_TO          = Sql.CreateParameter(cmd, "@TIME_TO"         , "DateTime",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parCATCH_UP         = Sql.CreateParameter(cmd, "@CATCH_UP"        , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_UpdateLastRun
		/// <summary>
		/// spSCHEDULERS_UpdateLastRun
		/// </summary>
		public void spSCHEDULERS_UpdateLastRun(Guid gID, DateTime dtLAST_RUN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_UpdateLastRun";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLAST_RUN         = Sql.AddParameter(cmd, "@LAST_RUN"        , dtLAST_RUN         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_UpdateLastRun
		/// <summary>
		/// spSCHEDULERS_UpdateLastRun
		/// </summary>
		public void spSCHEDULERS_UpdateLastRun(Guid gID, DateTime dtLAST_RUN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_UpdateLastRun";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLAST_RUN         = Sql.AddParameter(cmd, "@LAST_RUN"        , dtLAST_RUN         );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_UpdateLastRun
		/// <summary>
		/// spSCHEDULERS_UpdateLastRun
		/// </summary>
		public IDbCommand cmdSCHEDULERS_UpdateLastRun(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_UpdateLastRun";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLAST_RUN         = Sql.CreateParameter(cmd, "@LAST_RUN"        , "DateTime",   8);
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_UpdateStatus
		/// <summary>
		/// spSCHEDULERS_UpdateStatus
		/// </summary>
		public void spSCHEDULERS_UpdateStatus(string sJOB, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_UpdateStatus";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_UpdateStatus
		/// <summary>
		/// spSCHEDULERS_UpdateStatus
		/// </summary>
		public void spSCHEDULERS_UpdateStatus(string sJOB, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_UpdateStatus";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_UpdateStatus
		/// <summary>
		/// spSCHEDULERS_UpdateStatus
		/// </summary>
		public IDbCommand cmdSCHEDULERS_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_UpdateStatus";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parJOB              = Sql.CreateParameter(cmd, "@JOB"             , "string", 255);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_Delete
		/// <summary>
		/// spSHORTCUTS_Delete
		/// </summary>
		public void spSHORTCUTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_Delete
		/// <summary>
		/// spSHORTCUTS_Delete
		/// </summary>
		public void spSHORTCUTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_Delete
		/// <summary>
		/// spSHORTCUTS_Delete
		/// </summary>
		public IDbCommand cmdSHORTCUTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_InsertOnly
		/// <summary>
		/// spSHORTCUTS_InsertOnly
		/// </summary>
		public void spSHORTCUTS_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
							IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
							IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
							IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
							IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_InsertOnly
		/// <summary>
		/// spSHORTCUTS_InsertOnly
		/// </summary>
		public void spSHORTCUTS_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
				IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
				IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
				IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
				IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_InsertOnly
		/// <summary>
		/// spSHORTCUTS_InsertOnly
		/// </summary>
		public IDbCommand cmdSHORTCUTS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 150);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parIMAGE_NAME       = Sql.CreateParameter(cmd, "@IMAGE_NAME"      , "string",  50);
			IDbDataParameter parSHORTCUT_ENABLED = Sql.CreateParameter(cmd, "@SHORTCUT_ENABLED", "bool",   1);
			IDbDataParameter parSHORTCUT_ORDER   = Sql.CreateParameter(cmd, "@SHORTCUT_ORDER"  , "Int32",   4);
			IDbDataParameter parSHORTCUT_MODULE  = Sql.CreateParameter(cmd, "@SHORTCUT_MODULE" , "string",  25);
			IDbDataParameter parSHORTCUT_ACLTYPE = Sql.CreateParameter(cmd, "@SHORTCUT_ACLTYPE", "string", 100);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveDown
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveDown
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_ORDER_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveDown
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveDown
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_ORDER_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_ORDER_MoveDown
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveDown
		/// </summary>
		public IDbCommand cmdSHORTCUTS_ORDER_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_ORDER_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveItem
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveItem
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveItem(string sMODULE_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_ORDER_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveItem
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveItem
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveItem(string sMODULE_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_ORDER_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_ORDER_MoveItem
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveItem
		/// </summary>
		public IDbCommand cmdSHORTCUTS_ORDER_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_ORDER_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveUp
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveUp
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_ORDER_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveUp
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveUp
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_ORDER_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_ORDER_MoveUp
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveUp
		/// </summary>
		public IDbCommand cmdSHORTCUTS_ORDER_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_ORDER_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_Update
		/// <summary>
		/// spSHORTCUTS_Update
		/// </summary>
		public void spSHORTCUTS_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
							IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
							IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
							IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
							IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_Update
		/// <summary>
		/// spSHORTCUTS_Update
		/// </summary>
		public void spSHORTCUTS_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
				IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
				IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
				IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
				IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSHORTCUTS_Update
		/// <summary>
		/// spSHORTCUTS_Update
		/// </summary>
		public IDbCommand cmdSHORTCUTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 150);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parIMAGE_NAME       = Sql.CreateParameter(cmd, "@IMAGE_NAME"      , "string",  50);
			IDbDataParameter parSHORTCUT_ENABLED = Sql.CreateParameter(cmd, "@SHORTCUT_ENABLED", "bool",   1);
			IDbDataParameter parSHORTCUT_ORDER   = Sql.CreateParameter(cmd, "@SHORTCUT_ORDER"  , "Int32",   4);
			IDbDataParameter parSHORTCUT_MODULE  = Sql.CreateParameter(cmd, "@SHORTCUT_MODULE" , "string",  25);
			IDbDataParameter parSHORTCUT_ACLTYPE = Sql.CreateParameter(cmd, "@SHORTCUT_ACLTYPE", "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSMS_MESSAGES_Delete
		/// <summary>
		/// spSMS_MESSAGES_Delete
		/// </summary>
		public void spSMS_MESSAGES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSMS_MESSAGES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSMS_MESSAGES_Delete
		/// <summary>
		/// spSMS_MESSAGES_Delete
		/// </summary>
		public void spSMS_MESSAGES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSMS_MESSAGES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSMS_MESSAGES_Delete
		/// <summary>
		/// spSMS_MESSAGES_Delete
		/// </summary>
		public IDbCommand cmdSMS_MESSAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSMS_MESSAGES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSMS_MESSAGES_MassDelete
		/// <summary>
		/// spSMS_MESSAGES_MassDelete
		/// </summary>
		public void spSMS_MESSAGES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSMS_MESSAGES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSMS_MESSAGES_MassDelete
		/// <summary>
		/// spSMS_MESSAGES_MassDelete
		/// </summary>
		public void spSMS_MESSAGES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSMS_MESSAGES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSMS_MESSAGES_MassDelete
		/// <summary>
		/// spSMS_MESSAGES_MassDelete
		/// </summary>
		public IDbCommand cmdSMS_MESSAGES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSMS_MESSAGES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSMS_MESSAGES_MassUpdate
		/// <summary>
		/// spSMS_MESSAGES_MassUpdate
		/// </summary>
		public void spSMS_MESSAGES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSMS_MESSAGES_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSMS_MESSAGES_MassUpdate
		/// <summary>
		/// spSMS_MESSAGES_MassUpdate
		/// </summary>
		public void spSMS_MESSAGES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSMS_MESSAGES_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSMS_MESSAGES_MassUpdate
		/// <summary>
		/// spSMS_MESSAGES_MassUpdate
		/// </summary>
		public IDbCommand cmdSMS_MESSAGES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSMS_MESSAGES_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spSMS_MESSAGES_Undelete
		/// <summary>
		/// spSMS_MESSAGES_Undelete
		/// </summary>
		public void spSMS_MESSAGES_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSMS_MESSAGES_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSMS_MESSAGES_Undelete
		/// <summary>
		/// spSMS_MESSAGES_Undelete
		/// </summary>
		public void spSMS_MESSAGES_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSMS_MESSAGES_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSMS_MESSAGES_Undelete
		/// <summary>
		/// spSMS_MESSAGES_Undelete
		/// </summary>
		public IDbCommand cmdSMS_MESSAGES_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSMS_MESSAGES_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSMS_MESSAGES_Update
		/// <summary>
		/// spSMS_MESSAGES_Update
		/// </summary>
		public void spSMS_MESSAGES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gMAILBOX_ID, string sNAME, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sFROM_NUMBER, string sTO_NUMBER, Guid gTO_ID, string sTYPE, string sMESSAGE_SID, string sFROM_LOCATION, string sTO_LOCATION, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSMS_MESSAGES_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parMAILBOX_ID        = Sql.AddParameter(cmd, "@MAILBOX_ID"       , gMAILBOX_ID         );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 1600);
							IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
							IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
							IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
							IDbDataParameter parFROM_NUMBER       = Sql.AddParameter(cmd, "@FROM_NUMBER"      , sFROM_NUMBER        ,  20);
							IDbDataParameter parTO_NUMBER         = Sql.AddParameter(cmd, "@TO_NUMBER"        , sTO_NUMBER          ,  20);
							IDbDataParameter parTO_ID             = Sql.AddParameter(cmd, "@TO_ID"            , gTO_ID              );
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  25);
							IDbDataParameter parMESSAGE_SID       = Sql.AddParameter(cmd, "@MESSAGE_SID"      , sMESSAGE_SID        , 100);
							IDbDataParameter parFROM_LOCATION     = Sql.AddParameter(cmd, "@FROM_LOCATION"    , sFROM_LOCATION      , 100);
							IDbDataParameter parTO_LOCATION       = Sql.AddParameter(cmd, "@TO_LOCATION"      , sTO_LOCATION        , 100);
							IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
							IDbDataParameter parIS_PRIVATE        = Sql.AddParameter(cmd, "@IS_PRIVATE"       , bIS_PRIVATE         );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSMS_MESSAGES_Update
		/// <summary>
		/// spSMS_MESSAGES_Update
		/// </summary>
		public void spSMS_MESSAGES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, Guid gMAILBOX_ID, string sNAME, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sFROM_NUMBER, string sTO_NUMBER, Guid gTO_ID, string sTYPE, string sMESSAGE_SID, string sFROM_LOCATION, string sTO_LOCATION, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSMS_MESSAGES_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parMAILBOX_ID        = Sql.AddParameter(cmd, "@MAILBOX_ID"       , gMAILBOX_ID         );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 1600);
				IDbDataParameter parDATE_TIME         = Sql.AddParameter(cmd, "@DATE_TIME"        , dtDATE_TIME         );
				IDbDataParameter parPARENT_TYPE       = Sql.AddParameter(cmd, "@PARENT_TYPE"      , sPARENT_TYPE        ,  25);
				IDbDataParameter parPARENT_ID         = Sql.AddParameter(cmd, "@PARENT_ID"        , gPARENT_ID          );
				IDbDataParameter parFROM_NUMBER       = Sql.AddParameter(cmd, "@FROM_NUMBER"      , sFROM_NUMBER        ,  20);
				IDbDataParameter parTO_NUMBER         = Sql.AddParameter(cmd, "@TO_NUMBER"        , sTO_NUMBER          ,  20);
				IDbDataParameter parTO_ID             = Sql.AddParameter(cmd, "@TO_ID"            , gTO_ID              );
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  25);
				IDbDataParameter parMESSAGE_SID       = Sql.AddParameter(cmd, "@MESSAGE_SID"      , sMESSAGE_SID        , 100);
				IDbDataParameter parFROM_LOCATION     = Sql.AddParameter(cmd, "@FROM_LOCATION"    , sFROM_LOCATION      , 100);
				IDbDataParameter parTO_LOCATION       = Sql.AddParameter(cmd, "@TO_LOCATION"      , sTO_LOCATION        , 100);
				IDbDataParameter parTAG_SET_NAME      = Sql.AddParameter(cmd, "@TAG_SET_NAME"     , sTAG_SET_NAME       , 4000);
				IDbDataParameter parIS_PRIVATE        = Sql.AddParameter(cmd, "@IS_PRIVATE"       , bIS_PRIVATE         );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSMS_MESSAGES_Update
		/// <summary>
		/// spSMS_MESSAGES_Update
		/// </summary>
		public IDbCommand cmdSMS_MESSAGES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSMS_MESSAGES_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parMAILBOX_ID        = Sql.CreateParameter(cmd, "@MAILBOX_ID"       , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 1600);
			IDbDataParameter parDATE_TIME         = Sql.CreateParameter(cmd, "@DATE_TIME"        , "DateTime",   8);
			IDbDataParameter parPARENT_TYPE       = Sql.CreateParameter(cmd, "@PARENT_TYPE"      , "string",  25);
			IDbDataParameter parPARENT_ID         = Sql.CreateParameter(cmd, "@PARENT_ID"        , "Guid",  16);
			IDbDataParameter parFROM_NUMBER       = Sql.CreateParameter(cmd, "@FROM_NUMBER"      , "string",  20);
			IDbDataParameter parTO_NUMBER         = Sql.CreateParameter(cmd, "@TO_NUMBER"        , "string",  20);
			IDbDataParameter parTO_ID             = Sql.CreateParameter(cmd, "@TO_ID"            , "Guid",  16);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string",  25);
			IDbDataParameter parMESSAGE_SID       = Sql.CreateParameter(cmd, "@MESSAGE_SID"      , "string", 100);
			IDbDataParameter parFROM_LOCATION     = Sql.CreateParameter(cmd, "@FROM_LOCATION"    , "string", 100);
			IDbDataParameter parTO_LOCATION       = Sql.CreateParameter(cmd, "@TO_LOCATION"      , "string", 100);
			IDbDataParameter parTAG_SET_NAME      = Sql.CreateParameter(cmd, "@TAG_SET_NAME"     , "string", 4000);
			IDbDataParameter parIS_PRIVATE        = Sql.CreateParameter(cmd, "@IS_PRIVATE"       , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSMS_MESSAGES_UpdateStatus
		/// <summary>
		/// spSMS_MESSAGES_UpdateStatus
		/// </summary>
		public void spSMS_MESSAGES_UpdateStatus(Guid gID, string sSTATUS, string sMESSAGE_SID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSMS_MESSAGES_UpdateStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parMESSAGE_SID      = Sql.AddParameter(cmd, "@MESSAGE_SID"     , sMESSAGE_SID       , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSMS_MESSAGES_UpdateStatus
		/// <summary>
		/// spSMS_MESSAGES_UpdateStatus
		/// </summary>
		public void spSMS_MESSAGES_UpdateStatus(Guid gID, string sSTATUS, string sMESSAGE_SID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSMS_MESSAGES_UpdateStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parMESSAGE_SID      = Sql.AddParameter(cmd, "@MESSAGE_SID"     , sMESSAGE_SID       , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSMS_MESSAGES_UpdateStatus
		/// <summary>
		/// spSMS_MESSAGES_UpdateStatus
		/// </summary>
		public IDbCommand cmdSMS_MESSAGES_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSMS_MESSAGES_UpdateStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parMESSAGE_SID      = Sql.CreateParameter(cmd, "@MESSAGE_SID"     , "string", 100);
			return cmd;
		}
		#endregion

		#region spSqlBackupDatabase
		/// <summary>
		/// spSqlBackupDatabase
		/// </summary>
		public void spSqlBackupDatabase(ref string sFILENAME, string sTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBackupDatabase";
							IDbDataParameter parFILENAME = Sql.AddParameter(cmd, "@FILENAME", sFILENAME  , 255);
							IDbDataParameter parTYPE     = Sql.AddParameter(cmd, "@TYPE"    , sTYPE      ,  20);
							parFILENAME.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sFILENAME = Sql.ToString(parFILENAME.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBackupDatabase
		/// <summary>
		/// spSqlBackupDatabase
		/// </summary>
		public void spSqlBackupDatabase(ref string sFILENAME, string sTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBackupDatabase";
				IDbDataParameter parFILENAME = Sql.AddParameter(cmd, "@FILENAME", sFILENAME  , 255);
				IDbDataParameter parTYPE     = Sql.AddParameter(cmd, "@TYPE"    , sTYPE      ,  20);
				parFILENAME.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sFILENAME = Sql.ToString(parFILENAME.Value);
			}
		}
		#endregion

		#region cmdSqlBackupDatabase
		/// <summary>
		/// spSqlBackupDatabase
		/// </summary>
		public IDbCommand cmdSqlBackupDatabase(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBackupDatabase";
			IDbDataParameter parFILENAME = Sql.CreateParameter(cmd, "@FILENAME", "string", 255);
			IDbDataParameter parTYPE     = Sql.CreateParameter(cmd, "@TYPE"    , "string",  20);
			parFILENAME.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditIndexes
		/// <summary>
		/// spSqlBuildAllAuditIndexes
		/// </summary>
		public void spSqlBuildAllAuditIndexes()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditIndexes";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditIndexes
		/// <summary>
		/// spSqlBuildAllAuditIndexes
		/// </summary>
		public void spSqlBuildAllAuditIndexes(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditIndexes";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditIndexes
		/// <summary>
		/// spSqlBuildAllAuditIndexes
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditIndexes(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditIndexes";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditTables
		/// <summary>
		/// spSqlBuildAllAuditTables
		/// </summary>
		public void spSqlBuildAllAuditTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditTables
		/// <summary>
		/// spSqlBuildAllAuditTables
		/// </summary>
		public void spSqlBuildAllAuditTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditTables
		/// <summary>
		/// spSqlBuildAllAuditTables
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditTables";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditTriggers
		/// <summary>
		/// spSqlBuildAllAuditTriggers
		/// </summary>
		public void spSqlBuildAllAuditTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditTriggers
		/// <summary>
		/// spSqlBuildAllAuditTriggers
		/// </summary>
		public void spSqlBuildAllAuditTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditTriggers
		/// <summary>
		/// spSqlBuildAllAuditTriggers
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditTriggers";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditViews
		/// <summary>
		/// spSqlBuildAllAuditViews
		/// </summary>
		public void spSqlBuildAllAuditViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditViews
		/// <summary>
		/// spSqlBuildAllAuditViews
		/// </summary>
		public void spSqlBuildAllAuditViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditViews
		/// <summary>
		/// spSqlBuildAllAuditViews
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditViews";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamData
		/// <summary>
		/// spSqlBuildAllStreamData
		/// </summary>
		public void spSqlBuildAllStreamData()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllStreamData";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamData
		/// <summary>
		/// spSqlBuildAllStreamData
		/// </summary>
		public void spSqlBuildAllStreamData(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllStreamData";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamData
		/// <summary>
		/// spSqlBuildAllStreamData
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllStreamData";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamFunctions
		/// <summary>
		/// spSqlBuildAllStreamFunctions
		/// </summary>
		public void spSqlBuildAllStreamFunctions()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllStreamFunctions";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamFunctions
		/// <summary>
		/// spSqlBuildAllStreamFunctions
		/// </summary>
		public void spSqlBuildAllStreamFunctions(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllStreamFunctions";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamFunctions
		/// <summary>
		/// spSqlBuildAllStreamFunctions
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamFunctions(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllStreamFunctions";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamIndexes
		/// <summary>
		/// spSqlBuildAllStreamIndexes
		/// </summary>
		public void spSqlBuildAllStreamIndexes()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllStreamIndexes";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamIndexes
		/// <summary>
		/// spSqlBuildAllStreamIndexes
		/// </summary>
		public void spSqlBuildAllStreamIndexes(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllStreamIndexes";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamIndexes
		/// <summary>
		/// spSqlBuildAllStreamIndexes
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamIndexes(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllStreamIndexes";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamLinkTriggers
		/// <summary>
		/// spSqlBuildAllStreamLinkTriggers
		/// </summary>
		public void spSqlBuildAllStreamLinkTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spSqlBuildAllStreamLinkTrigger";
							else
								cmd.CommandText = "spSqlBuildAllStreamLinkTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamLinkTriggers
		/// <summary>
		/// spSqlBuildAllStreamLinkTriggers
		/// </summary>
		public void spSqlBuildAllStreamLinkTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spSqlBuildAllStreamLinkTrigger";
				else
					cmd.CommandText = "spSqlBuildAllStreamLinkTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamLinkTriggers
		/// <summary>
		/// spSqlBuildAllStreamLinkTriggers
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamLinkTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spSqlBuildAllStreamLinkTrigger";
			else
				cmd.CommandText = "spSqlBuildAllStreamLinkTriggers";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamParentTriggers
		/// <summary>
		/// spSqlBuildAllStreamParentTriggers
		/// </summary>
		public void spSqlBuildAllStreamParentTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spSqlBuildAllStreamParentTrigg";
							else
								cmd.CommandText = "spSqlBuildAllStreamParentTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamParentTriggers
		/// <summary>
		/// spSqlBuildAllStreamParentTriggers
		/// </summary>
		public void spSqlBuildAllStreamParentTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spSqlBuildAllStreamParentTrigg";
				else
					cmd.CommandText = "spSqlBuildAllStreamParentTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamParentTriggers
		/// <summary>
		/// spSqlBuildAllStreamParentTriggers
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamParentTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spSqlBuildAllStreamParentTrigg";
			else
				cmd.CommandText = "spSqlBuildAllStreamParentTriggers";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamProcedures
		/// <summary>
		/// spSqlBuildAllStreamProcedures
		/// </summary>
		public void spSqlBuildAllStreamProcedures()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllStreamProcedures";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamProcedures
		/// <summary>
		/// spSqlBuildAllStreamProcedures
		/// </summary>
		public void spSqlBuildAllStreamProcedures(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllStreamProcedures";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamProcedures
		/// <summary>
		/// spSqlBuildAllStreamProcedures
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamProcedures(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllStreamProcedures";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamTables
		/// <summary>
		/// spSqlBuildAllStreamTables
		/// </summary>
		public void spSqlBuildAllStreamTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllStreamTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamTables
		/// <summary>
		/// spSqlBuildAllStreamTables
		/// </summary>
		public void spSqlBuildAllStreamTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllStreamTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamTables
		/// <summary>
		/// spSqlBuildAllStreamTables
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllStreamTables";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamTriggers
		/// <summary>
		/// spSqlBuildAllStreamTriggers
		/// </summary>
		public void spSqlBuildAllStreamTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllStreamTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamTriggers
		/// <summary>
		/// spSqlBuildAllStreamTriggers
		/// </summary>
		public void spSqlBuildAllStreamTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllStreamTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamTriggers
		/// <summary>
		/// spSqlBuildAllStreamTriggers
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllStreamTriggers";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllStreamViews
		/// <summary>
		/// spSqlBuildAllStreamViews
		/// </summary>
		public void spSqlBuildAllStreamViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllStreamViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllStreamViews
		/// <summary>
		/// spSqlBuildAllStreamViews
		/// </summary>
		public void spSqlBuildAllStreamViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllStreamViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllStreamViews
		/// <summary>
		/// spSqlBuildAllStreamViews
		/// </summary>
		public IDbCommand cmdSqlBuildAllStreamViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllStreamViews";
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveActivitiesView
		/// <summary>
		/// spSqlBuildArchiveActivitiesView
		/// </summary>
		public void spSqlBuildArchiveActivitiesView(string sMODULE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spSqlBuildArchiveActivitiesVie";
							else
								cmd.CommandText = "spSqlBuildArchiveActivitiesView";
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveActivitiesView
		/// <summary>
		/// spSqlBuildArchiveActivitiesView
		/// </summary>
		public void spSqlBuildArchiveActivitiesView(string sMODULE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spSqlBuildArchiveActivitiesVie";
				else
					cmd.CommandText = "spSqlBuildArchiveActivitiesView";
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveActivitiesView
		/// <summary>
		/// spSqlBuildArchiveActivitiesView
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveActivitiesView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spSqlBuildArchiveActivitiesVie";
			else
				cmd.CommandText = "spSqlBuildArchiveActivitiesView";
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveActivityView
		/// <summary>
		/// spSqlBuildArchiveActivityView
		/// </summary>
		public void spSqlBuildArchiveActivityView(string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildArchiveActivityView";
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveActivityView
		/// <summary>
		/// spSqlBuildArchiveActivityView
		/// </summary>
		public void spSqlBuildArchiveActivityView(string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildArchiveActivityView";
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveActivityView
		/// <summary>
		/// spSqlBuildArchiveActivityView
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveActivityView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildArchiveActivityView";
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveIndexes
		/// <summary>
		/// spSqlBuildArchiveIndexes
		/// </summary>
		public void spSqlBuildArchiveIndexes(string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildArchiveIndexes";
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveIndexes
		/// <summary>
		/// spSqlBuildArchiveIndexes
		/// </summary>
		public void spSqlBuildArchiveIndexes(string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildArchiveIndexes";
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveIndexes
		/// <summary>
		/// spSqlBuildArchiveIndexes
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveIndexes(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildArchiveIndexes";
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveRelatedView
		/// <summary>
		/// spSqlBuildArchiveRelatedView
		/// </summary>
		public void spSqlBuildArchiveRelatedView(string sMODULE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildArchiveRelatedView";
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveRelatedView
		/// <summary>
		/// spSqlBuildArchiveRelatedView
		/// </summary>
		public void spSqlBuildArchiveRelatedView(string sMODULE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildArchiveRelatedView";
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveRelatedView
		/// <summary>
		/// spSqlBuildArchiveRelatedView
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveRelatedView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildArchiveRelatedView";
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveTable
		/// <summary>
		/// spSqlBuildArchiveTable
		/// </summary>
		public void spSqlBuildArchiveTable(string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildArchiveTable";
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveTable
		/// <summary>
		/// spSqlBuildArchiveTable
		/// </summary>
		public void spSqlBuildArchiveTable(string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildArchiveTable";
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveTable
		/// <summary>
		/// spSqlBuildArchiveTable
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveTable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildArchiveTable";
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveView
		/// <summary>
		/// spSqlBuildArchiveView
		/// </summary>
		public void spSqlBuildArchiveView(string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildArchiveView";
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveView
		/// <summary>
		/// spSqlBuildArchiveView
		/// </summary>
		public void spSqlBuildArchiveView(string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildArchiveView";
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveView
		/// <summary>
		/// spSqlBuildArchiveView
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildArchiveView";
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditIndex
		/// <summary>
		/// spSqlBuildAuditIndex
		/// </summary>
		public void spSqlBuildAuditIndex(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditIndex";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditIndex
		/// <summary>
		/// spSqlBuildAuditIndex
		/// </summary>
		public void spSqlBuildAuditIndex(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditIndex";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditIndex
		/// <summary>
		/// spSqlBuildAuditIndex
		/// </summary>
		public IDbCommand cmdSqlBuildAuditIndex(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditIndex";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditTable
		/// <summary>
		/// spSqlBuildAuditTable
		/// </summary>
		public void spSqlBuildAuditTable(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditTable";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditTable
		/// <summary>
		/// spSqlBuildAuditTable
		/// </summary>
		public void spSqlBuildAuditTable(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditTable";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditTable
		/// <summary>
		/// spSqlBuildAuditTable
		/// </summary>
		public IDbCommand cmdSqlBuildAuditTable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditTable";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditTrigger
		/// <summary>
		/// spSqlBuildAuditTrigger
		/// </summary>
		public void spSqlBuildAuditTrigger(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditTrigger";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditTrigger
		/// <summary>
		/// spSqlBuildAuditTrigger
		/// </summary>
		public void spSqlBuildAuditTrigger(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditTrigger";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditTrigger
		/// <summary>
		/// spSqlBuildAuditTrigger
		/// </summary>
		public IDbCommand cmdSqlBuildAuditTrigger(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditTrigger";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditView
		/// <summary>
		/// spSqlBuildAuditView
		/// </summary>
		public void spSqlBuildAuditView(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditView";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditView
		/// <summary>
		/// spSqlBuildAuditView
		/// </summary>
		public void spSqlBuildAuditView(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditView";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditView
		/// <summary>
		/// spSqlBuildAuditView
		/// </summary>
		public IDbCommand cmdSqlBuildAuditView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditView";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamData
		/// <summary>
		/// spSqlBuildStreamData
		/// </summary>
		public void spSqlBuildStreamData(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamData";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamData
		/// <summary>
		/// spSqlBuildStreamData
		/// </summary>
		public void spSqlBuildStreamData(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamData";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamData
		/// <summary>
		/// spSqlBuildStreamData
		/// </summary>
		public IDbCommand cmdSqlBuildStreamData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamData";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamFunction
		/// <summary>
		/// spSqlBuildStreamFunction
		/// </summary>
		public void spSqlBuildStreamFunction(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamFunction";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamFunction
		/// <summary>
		/// spSqlBuildStreamFunction
		/// </summary>
		public void spSqlBuildStreamFunction(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamFunction";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamFunction
		/// <summary>
		/// spSqlBuildStreamFunction
		/// </summary>
		public IDbCommand cmdSqlBuildStreamFunction(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamFunction";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamIndex
		/// <summary>
		/// spSqlBuildStreamIndex
		/// </summary>
		public void spSqlBuildStreamIndex(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamIndex";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamIndex
		/// <summary>
		/// spSqlBuildStreamIndex
		/// </summary>
		public void spSqlBuildStreamIndex(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamIndex";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamIndex
		/// <summary>
		/// spSqlBuildStreamIndex
		/// </summary>
		public IDbCommand cmdSqlBuildStreamIndex(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamIndex";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamLinkData
		/// <summary>
		/// spSqlBuildStreamLinkData
		/// </summary>
		public void spSqlBuildStreamLinkData(string sTABLE_NAME, string sLEFT_TABLE_NAME, string sRIGHT_TABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamLinkData";
							IDbDataParameter parTABLE_NAME       = Sql.AddAnsiParam(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parLEFT_TABLE_NAME  = Sql.AddAnsiParam(cmd, "@LEFT_TABLE_NAME" , sLEFT_TABLE_NAME   ,  80);
							IDbDataParameter parRIGHT_TABLE_NAME = Sql.AddAnsiParam(cmd, "@RIGHT_TABLE_NAME", sRIGHT_TABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamLinkData
		/// <summary>
		/// spSqlBuildStreamLinkData
		/// </summary>
		public void spSqlBuildStreamLinkData(string sTABLE_NAME, string sLEFT_TABLE_NAME, string sRIGHT_TABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamLinkData";
				IDbDataParameter parTABLE_NAME       = Sql.AddAnsiParam(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parLEFT_TABLE_NAME  = Sql.AddAnsiParam(cmd, "@LEFT_TABLE_NAME" , sLEFT_TABLE_NAME   ,  80);
				IDbDataParameter parRIGHT_TABLE_NAME = Sql.AddAnsiParam(cmd, "@RIGHT_TABLE_NAME", sRIGHT_TABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamLinkData
		/// <summary>
		/// spSqlBuildStreamLinkData
		/// </summary>
		public IDbCommand cmdSqlBuildStreamLinkData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamLinkData";
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "ansistring",  80);
			IDbDataParameter parLEFT_TABLE_NAME  = Sql.CreateParameter(cmd, "@LEFT_TABLE_NAME" , "ansistring",  80);
			IDbDataParameter parRIGHT_TABLE_NAME = Sql.CreateParameter(cmd, "@RIGHT_TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamLinkDataTables
		/// <summary>
		/// spSqlBuildStreamLinkDataTables
		/// </summary>
		public void spSqlBuildStreamLinkDataTables(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamLinkDataTables";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamLinkDataTables
		/// <summary>
		/// spSqlBuildStreamLinkDataTables
		/// </summary>
		public void spSqlBuildStreamLinkDataTables(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamLinkDataTables";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamLinkDataTables
		/// <summary>
		/// spSqlBuildStreamLinkDataTables
		/// </summary>
		public IDbCommand cmdSqlBuildStreamLinkDataTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamLinkDataTables";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamLinkTables
		/// <summary>
		/// spSqlBuildStreamLinkTables
		/// </summary>
		public void spSqlBuildStreamLinkTables(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamLinkTables";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamLinkTables
		/// <summary>
		/// spSqlBuildStreamLinkTables
		/// </summary>
		public void spSqlBuildStreamLinkTables(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamLinkTables";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamLinkTables
		/// <summary>
		/// spSqlBuildStreamLinkTables
		/// </summary>
		public IDbCommand cmdSqlBuildStreamLinkTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamLinkTables";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamLinkTrigger
		/// <summary>
		/// spSqlBuildStreamLinkTrigger
		/// </summary>
		public void spSqlBuildStreamLinkTrigger(string sTABLE_NAME, string sLEFT_TABLE_NAME, string sRIGHT_TABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamLinkTrigger";
							IDbDataParameter parTABLE_NAME       = Sql.AddAnsiParam(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parLEFT_TABLE_NAME  = Sql.AddAnsiParam(cmd, "@LEFT_TABLE_NAME" , sLEFT_TABLE_NAME   ,  80);
							IDbDataParameter parRIGHT_TABLE_NAME = Sql.AddAnsiParam(cmd, "@RIGHT_TABLE_NAME", sRIGHT_TABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamLinkTrigger
		/// <summary>
		/// spSqlBuildStreamLinkTrigger
		/// </summary>
		public void spSqlBuildStreamLinkTrigger(string sTABLE_NAME, string sLEFT_TABLE_NAME, string sRIGHT_TABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamLinkTrigger";
				IDbDataParameter parTABLE_NAME       = Sql.AddAnsiParam(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parLEFT_TABLE_NAME  = Sql.AddAnsiParam(cmd, "@LEFT_TABLE_NAME" , sLEFT_TABLE_NAME   ,  80);
				IDbDataParameter parRIGHT_TABLE_NAME = Sql.AddAnsiParam(cmd, "@RIGHT_TABLE_NAME", sRIGHT_TABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamLinkTrigger
		/// <summary>
		/// spSqlBuildStreamLinkTrigger
		/// </summary>
		public IDbCommand cmdSqlBuildStreamLinkTrigger(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamLinkTrigger";
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "ansistring",  80);
			IDbDataParameter parLEFT_TABLE_NAME  = Sql.CreateParameter(cmd, "@LEFT_TABLE_NAME" , "ansistring",  80);
			IDbDataParameter parRIGHT_TABLE_NAME = Sql.CreateParameter(cmd, "@RIGHT_TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamParentData
		/// <summary>
		/// spSqlBuildStreamParentData
		/// </summary>
		public void spSqlBuildStreamParentData(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamParentData";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamParentData
		/// <summary>
		/// spSqlBuildStreamParentData
		/// </summary>
		public void spSqlBuildStreamParentData(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamParentData";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamParentData
		/// <summary>
		/// spSqlBuildStreamParentData
		/// </summary>
		public IDbCommand cmdSqlBuildStreamParentData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamParentData";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamParentTrigger
		/// <summary>
		/// spSqlBuildStreamParentTrigger
		/// </summary>
		public void spSqlBuildStreamParentTrigger(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamParentTrigger";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamParentTrigger
		/// <summary>
		/// spSqlBuildStreamParentTrigger
		/// </summary>
		public void spSqlBuildStreamParentTrigger(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamParentTrigger";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamParentTrigger
		/// <summary>
		/// spSqlBuildStreamParentTrigger
		/// </summary>
		public IDbCommand cmdSqlBuildStreamParentTrigger(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamParentTrigger";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamProcedure
		/// <summary>
		/// spSqlBuildStreamProcedure
		/// </summary>
		public void spSqlBuildStreamProcedure(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamProcedure";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamProcedure
		/// <summary>
		/// spSqlBuildStreamProcedure
		/// </summary>
		public void spSqlBuildStreamProcedure(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamProcedure";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamProcedure
		/// <summary>
		/// spSqlBuildStreamProcedure
		/// </summary>
		public IDbCommand cmdSqlBuildStreamProcedure(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamProcedure";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamTable
		/// <summary>
		/// spSqlBuildStreamTable
		/// </summary>
		public void spSqlBuildStreamTable(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamTable";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamTable
		/// <summary>
		/// spSqlBuildStreamTable
		/// </summary>
		public void spSqlBuildStreamTable(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamTable";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamTable
		/// <summary>
		/// spSqlBuildStreamTable
		/// </summary>
		public IDbCommand cmdSqlBuildStreamTable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamTable";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamTrigger
		/// <summary>
		/// spSqlBuildStreamTrigger
		/// </summary>
		public void spSqlBuildStreamTrigger(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamTrigger";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamTrigger
		/// <summary>
		/// spSqlBuildStreamTrigger
		/// </summary>
		public void spSqlBuildStreamTrigger(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamTrigger";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamTrigger
		/// <summary>
		/// spSqlBuildStreamTrigger
		/// </summary>
		public IDbCommand cmdSqlBuildStreamTrigger(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamTrigger";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamView
		/// <summary>
		/// spSqlBuildStreamView
		/// </summary>
		public void spSqlBuildStreamView(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamView";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamView
		/// <summary>
		/// spSqlBuildStreamView
		/// </summary>
		public void spSqlBuildStreamView(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamView";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamView
		/// <summary>
		/// spSqlBuildStreamView
		/// </summary>
		public IDbCommand cmdSqlBuildStreamView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamView";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildSystemTrigger
		/// <summary>
		/// spSqlBuildSystemTrigger
		/// </summary>
		public void spSqlBuildSystemTrigger(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildSystemTrigger";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildSystemTrigger
		/// <summary>
		/// spSqlBuildSystemTrigger
		/// </summary>
		public void spSqlBuildSystemTrigger(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildSystemTrigger";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildSystemTrigger
		/// <summary>
		/// spSqlBuildSystemTrigger
		/// </summary>
		public IDbCommand cmdSqlBuildSystemTrigger(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildSystemTrigger";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlDropAllArchiveTables
		/// <summary>
		/// spSqlDropAllArchiveTables
		/// </summary>
		public void spSqlDropAllArchiveTables(string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllArchiveTables";
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllArchiveTables
		/// <summary>
		/// spSqlDropAllArchiveTables
		/// </summary>
		public void spSqlDropAllArchiveTables(string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllArchiveTables";
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllArchiveTables
		/// <summary>
		/// spSqlDropAllArchiveTables
		/// </summary>
		public IDbCommand cmdSqlDropAllArchiveTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllArchiveTables";
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlDropAllArchiveViews
		/// <summary>
		/// spSqlDropAllArchiveViews
		/// </summary>
		public void spSqlDropAllArchiveViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllArchiveViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllArchiveViews
		/// <summary>
		/// spSqlDropAllArchiveViews
		/// </summary>
		public void spSqlDropAllArchiveViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllArchiveViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllArchiveViews
		/// <summary>
		/// spSqlDropAllArchiveViews
		/// </summary>
		public IDbCommand cmdSqlDropAllArchiveViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllArchiveViews";
			return cmd;
		}
		#endregion

		#region spSqlDropAllAuditTables
		/// <summary>
		/// spSqlDropAllAuditTables
		/// </summary>
		public void spSqlDropAllAuditTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllAuditTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllAuditTables
		/// <summary>
		/// spSqlDropAllAuditTables
		/// </summary>
		public void spSqlDropAllAuditTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllAuditTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllAuditTables
		/// <summary>
		/// spSqlDropAllAuditTables
		/// </summary>
		public IDbCommand cmdSqlDropAllAuditTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllAuditTables";
			return cmd;
		}
		#endregion

		#region spSqlDropAllAuditTriggers
		/// <summary>
		/// spSqlDropAllAuditTriggers
		/// </summary>
		public void spSqlDropAllAuditTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllAuditTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllAuditTriggers
		/// <summary>
		/// spSqlDropAllAuditTriggers
		/// </summary>
		public void spSqlDropAllAuditTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllAuditTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllAuditTriggers
		/// <summary>
		/// spSqlDropAllAuditTriggers
		/// </summary>
		public IDbCommand cmdSqlDropAllAuditTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllAuditTriggers";
			return cmd;
		}
		#endregion

		#region spSqlDropAllAuditViews
		/// <summary>
		/// spSqlDropAllAuditViews
		/// </summary>
		public void spSqlDropAllAuditViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllAuditViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllAuditViews
		/// <summary>
		/// spSqlDropAllAuditViews
		/// </summary>
		public void spSqlDropAllAuditViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllAuditViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllAuditViews
		/// <summary>
		/// spSqlDropAllAuditViews
		/// </summary>
		public IDbCommand cmdSqlDropAllAuditViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllAuditViews";
			return cmd;
		}
		#endregion

		#region spSqlDropAllStreamFunctions
		/// <summary>
		/// spSqlDropAllStreamFunctions
		/// </summary>
		public void spSqlDropAllStreamFunctions()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllStreamFunctions";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllStreamFunctions
		/// <summary>
		/// spSqlDropAllStreamFunctions
		/// </summary>
		public void spSqlDropAllStreamFunctions(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllStreamFunctions";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllStreamFunctions
		/// <summary>
		/// spSqlDropAllStreamFunctions
		/// </summary>
		public IDbCommand cmdSqlDropAllStreamFunctions(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllStreamFunctions";
			return cmd;
		}
		#endregion

		#region spSqlDropAllStreamProcedures
		/// <summary>
		/// spSqlDropAllStreamProcedures
		/// </summary>
		public void spSqlDropAllStreamProcedures()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllStreamProcedures";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllStreamProcedures
		/// <summary>
		/// spSqlDropAllStreamProcedures
		/// </summary>
		public void spSqlDropAllStreamProcedures(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllStreamProcedures";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllStreamProcedures
		/// <summary>
		/// spSqlDropAllStreamProcedures
		/// </summary>
		public IDbCommand cmdSqlDropAllStreamProcedures(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllStreamProcedures";
			return cmd;
		}
		#endregion

		#region spSqlDropAllStreamTables
		/// <summary>
		/// spSqlDropAllStreamTables
		/// </summary>
		public void spSqlDropAllStreamTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllStreamTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllStreamTables
		/// <summary>
		/// spSqlDropAllStreamTables
		/// </summary>
		public void spSqlDropAllStreamTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllStreamTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllStreamTables
		/// <summary>
		/// spSqlDropAllStreamTables
		/// </summary>
		public IDbCommand cmdSqlDropAllStreamTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllStreamTables";
			return cmd;
		}
		#endregion

		#region spSqlDropAllStreamTriggers
		/// <summary>
		/// spSqlDropAllStreamTriggers
		/// </summary>
		public void spSqlDropAllStreamTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllStreamTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllStreamTriggers
		/// <summary>
		/// spSqlDropAllStreamTriggers
		/// </summary>
		public void spSqlDropAllStreamTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllStreamTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllStreamTriggers
		/// <summary>
		/// spSqlDropAllStreamTriggers
		/// </summary>
		public IDbCommand cmdSqlDropAllStreamTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllStreamTriggers";
			return cmd;
		}
		#endregion

		#region spSqlDropAllStreamViews
		/// <summary>
		/// spSqlDropAllStreamViews
		/// </summary>
		public void spSqlDropAllStreamViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllStreamViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllStreamViews
		/// <summary>
		/// spSqlDropAllStreamViews
		/// </summary>
		public void spSqlDropAllStreamViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllStreamViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllStreamViews
		/// <summary>
		/// spSqlDropAllStreamViews
		/// </summary>
		public IDbCommand cmdSqlDropAllStreamViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllStreamViews";
			return cmd;
		}
		#endregion

		#region spSqlDropDefaultConstraint
		/// <summary>
		/// spSqlDropDefaultConstraint
		/// </summary>
		public void spSqlDropDefaultConstraint(ref string sTABLE_NAME, string sCOLUMN_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropDefaultConstraint";
							IDbDataParameter parTABLE_NAME  = Sql.AddParameter(cmd, "@TABLE_NAME" , sTABLE_NAME   ,  50);
							IDbDataParameter parCOLUMN_NAME = Sql.AddParameter(cmd, "@COLUMN_NAME", sCOLUMN_NAME  ,  50);
							parTABLE_NAME.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sTABLE_NAME = Sql.ToString(parTABLE_NAME.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropDefaultConstraint
		/// <summary>
		/// spSqlDropDefaultConstraint
		/// </summary>
		public void spSqlDropDefaultConstraint(ref string sTABLE_NAME, string sCOLUMN_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropDefaultConstraint";
				IDbDataParameter parTABLE_NAME  = Sql.AddParameter(cmd, "@TABLE_NAME" , sTABLE_NAME   ,  50);
				IDbDataParameter parCOLUMN_NAME = Sql.AddParameter(cmd, "@COLUMN_NAME", sCOLUMN_NAME  ,  50);
				parTABLE_NAME.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sTABLE_NAME = Sql.ToString(parTABLE_NAME.Value);
			}
		}
		#endregion

		#region cmdSqlDropDefaultConstraint
		/// <summary>
		/// spSqlDropDefaultConstraint
		/// </summary>
		public IDbCommand cmdSqlDropDefaultConstraint(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropDefaultConstraint";
			IDbDataParameter parTABLE_NAME  = Sql.CreateParameter(cmd, "@TABLE_NAME" , "string",  50);
			IDbDataParameter parCOLUMN_NAME = Sql.CreateParameter(cmd, "@COLUMN_NAME", "string",  50);
			parTABLE_NAME.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlDropForeignKeys
		/// <summary>
		/// spSqlDropForeignKeys
		/// </summary>
		public void spSqlDropForeignKeys(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropForeignKeys";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropForeignKeys
		/// <summary>
		/// spSqlDropForeignKeys
		/// </summary>
		public void spSqlDropForeignKeys(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropForeignKeys";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropForeignKeys
		/// <summary>
		/// spSqlDropForeignKeys
		/// </summary>
		public IDbCommand cmdSqlDropForeignKeys(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropForeignKeys";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlGetTransactionToken
		/// <summary>
		/// spSqlGetTransactionToken
		/// </summary>
		public void spSqlGetTransactionToken(ref string sTRANSACTION_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlGetTransactionToken";
							IDbDataParameter parTRANSACTION_TOKEN = Sql.AddAnsiParam(cmd, "@TRANSACTION_TOKEN", sTRANSACTION_TOKEN  , 255);
							parTRANSACTION_TOKEN.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sTRANSACTION_TOKEN = Sql.ToString(parTRANSACTION_TOKEN.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlGetTransactionToken
		/// <summary>
		/// spSqlGetTransactionToken
		/// </summary>
		public void spSqlGetTransactionToken(ref string sTRANSACTION_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlGetTransactionToken";
				IDbDataParameter parTRANSACTION_TOKEN = Sql.AddAnsiParam(cmd, "@TRANSACTION_TOKEN", sTRANSACTION_TOKEN  , 255);
				parTRANSACTION_TOKEN.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sTRANSACTION_TOKEN = Sql.ToString(parTRANSACTION_TOKEN.Value);
			}
		}
		#endregion

		#region cmdSqlGetTransactionToken
		/// <summary>
		/// spSqlGetTransactionToken
		/// </summary>
		public IDbCommand cmdSqlGetTransactionToken(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlGetTransactionToken";
			IDbDataParameter parTRANSACTION_TOKEN = Sql.CreateParameter(cmd, "@TRANSACTION_TOKEN", "ansistring", 255);
			parTRANSACTION_TOKEN.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlMoveArchiveData
		/// <summary>
		/// spSqlMoveArchiveData
		/// </summary>
		public void spSqlMoveArchiveData(string sTABLE_NAME, string sID_LIST, string sPARENT_TABLE, string sPARENT_KEY, string sRIGHT_TABLE, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlMoveArchiveData";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parID_LIST          = Sql.AddParameter(cmd, "@ID_LIST"         , sID_LIST           );
							IDbDataParameter parPARENT_TABLE     = Sql.AddParameter(cmd, "@PARENT_TABLE"    , sPARENT_TABLE      ,  80);
							IDbDataParameter parPARENT_KEY       = Sql.AddParameter(cmd, "@PARENT_KEY"      , sPARENT_KEY        ,  30);
							IDbDataParameter parRIGHT_TABLE      = Sql.AddParameter(cmd, "@RIGHT_TABLE"     , sRIGHT_TABLE       ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlMoveArchiveData
		/// <summary>
		/// spSqlMoveArchiveData
		/// </summary>
		public void spSqlMoveArchiveData(string sTABLE_NAME, string sID_LIST, string sPARENT_TABLE, string sPARENT_KEY, string sRIGHT_TABLE, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlMoveArchiveData";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parID_LIST          = Sql.AddParameter(cmd, "@ID_LIST"         , sID_LIST           );
				IDbDataParameter parPARENT_TABLE     = Sql.AddParameter(cmd, "@PARENT_TABLE"    , sPARENT_TABLE      ,  80);
				IDbDataParameter parPARENT_KEY       = Sql.AddParameter(cmd, "@PARENT_KEY"      , sPARENT_KEY        ,  30);
				IDbDataParameter parRIGHT_TABLE      = Sql.AddParameter(cmd, "@RIGHT_TABLE"     , sRIGHT_TABLE       ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlMoveArchiveData
		/// <summary>
		/// spSqlMoveArchiveData
		/// </summary>
		public IDbCommand cmdSqlMoveArchiveData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlMoveArchiveData";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "string", 104857600);
			IDbDataParameter parPARENT_TABLE     = Sql.CreateParameter(cmd, "@PARENT_TABLE"    , "string",  80);
			IDbDataParameter parPARENT_KEY       = Sql.CreateParameter(cmd, "@PARENT_KEY"      , "string",  30);
			IDbDataParameter parRIGHT_TABLE      = Sql.CreateParameter(cmd, "@RIGHT_TABLE"     , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlPrintByLine
		/// <summary>
		/// spSqlPrintByLine
		/// </summary>
		public void spSqlPrintByLine(string sCOMMAND)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlPrintByLine";
							IDbDataParameter parCOMMAND = Sql.AddParameter(cmd, "@COMMAND", sCOMMAND  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlPrintByLine
		/// <summary>
		/// spSqlPrintByLine
		/// </summary>
		public void spSqlPrintByLine(string sCOMMAND, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlPrintByLine";
				IDbDataParameter parCOMMAND = Sql.AddParameter(cmd, "@COMMAND", sCOMMAND  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlPrintByLine
		/// <summary>
		/// spSqlPrintByLine
		/// </summary>
		public IDbCommand cmdSqlPrintByLine(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlPrintByLine";
			IDbDataParameter parCOMMAND = Sql.CreateParameter(cmd, "@COMMAND", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSqlPruneDatabase
		/// <summary>
		/// spSqlPruneDatabase
		/// </summary>
		public void spSqlPruneDatabase()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlPruneDatabase";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlPruneDatabase
		/// <summary>
		/// spSqlPruneDatabase
		/// </summary>
		public void spSqlPruneDatabase(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlPruneDatabase";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlPruneDatabase
		/// <summary>
		/// spSqlPruneDatabase
		/// </summary>
		public IDbCommand cmdSqlPruneDatabase(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlPruneDatabase";
			return cmd;
		}
		#endregion

		#region spSqlPurgeDemoData
		/// <summary>
		/// spSqlPurgeDemoData
		/// </summary>
		public void spSqlPurgeDemoData()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlPurgeDemoData";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlPurgeDemoData
		/// <summary>
		/// spSqlPurgeDemoData
		/// </summary>
		public void spSqlPurgeDemoData(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlPurgeDemoData";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlPurgeDemoData
		/// <summary>
		/// spSqlPurgeDemoData
		/// </summary>
		public IDbCommand cmdSqlPurgeDemoData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlPurgeDemoData";
			return cmd;
		}
		#endregion

		#region spSqlRecoverArchiveData
		/// <summary>
		/// spSqlRecoverArchiveData
		/// </summary>
		public void spSqlRecoverArchiveData(string sTABLE_NAME, string sID_LIST, string sPARENT_TABLE, string sPARENT_KEY, string sRIGHT_TABLE, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlRecoverArchiveData";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parID_LIST          = Sql.AddParameter(cmd, "@ID_LIST"         , sID_LIST           );
							IDbDataParameter parPARENT_TABLE     = Sql.AddParameter(cmd, "@PARENT_TABLE"    , sPARENT_TABLE      ,  80);
							IDbDataParameter parPARENT_KEY       = Sql.AddParameter(cmd, "@PARENT_KEY"      , sPARENT_KEY        ,  30);
							IDbDataParameter parRIGHT_TABLE      = Sql.AddParameter(cmd, "@RIGHT_TABLE"     , sRIGHT_TABLE       ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlRecoverArchiveData
		/// <summary>
		/// spSqlRecoverArchiveData
		/// </summary>
		public void spSqlRecoverArchiveData(string sTABLE_NAME, string sID_LIST, string sPARENT_TABLE, string sPARENT_KEY, string sRIGHT_TABLE, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlRecoverArchiveData";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parID_LIST          = Sql.AddParameter(cmd, "@ID_LIST"         , sID_LIST           );
				IDbDataParameter parPARENT_TABLE     = Sql.AddParameter(cmd, "@PARENT_TABLE"    , sPARENT_TABLE      ,  80);
				IDbDataParameter parPARENT_KEY       = Sql.AddParameter(cmd, "@PARENT_KEY"      , sPARENT_KEY        ,  30);
				IDbDataParameter parRIGHT_TABLE      = Sql.AddParameter(cmd, "@RIGHT_TABLE"     , sRIGHT_TABLE       ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlRecoverArchiveData
		/// <summary>
		/// spSqlRecoverArchiveData
		/// </summary>
		public IDbCommand cmdSqlRecoverArchiveData(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlRecoverArchiveData";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "string", 104857600);
			IDbDataParameter parPARENT_TABLE     = Sql.CreateParameter(cmd, "@PARENT_TABLE"    , "string",  80);
			IDbDataParameter parPARENT_KEY       = Sql.CreateParameter(cmd, "@PARENT_KEY"      , "string",  30);
			IDbDataParameter parRIGHT_TABLE      = Sql.CreateParameter(cmd, "@RIGHT_TABLE"     , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlRefreshAllViews
		/// <summary>
		/// spSqlRefreshAllViews
		/// </summary>
		public void spSqlRefreshAllViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlRefreshAllViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlRefreshAllViews
		/// <summary>
		/// spSqlRefreshAllViews
		/// </summary>
		public void spSqlRefreshAllViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlRefreshAllViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlRefreshAllViews
		/// <summary>
		/// spSqlRefreshAllViews
		/// </summary>
		public IDbCommand cmdSqlRefreshAllViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlRefreshAllViews";
			return cmd;
		}
		#endregion

		#region spSqlTableAddColumn
		/// <summary>
		/// spSqlTableAddColumn
		/// </summary>
		public void spSqlTableAddColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableAddColumn";
							IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
							IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
							IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
							IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
							IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
							IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableAddColumn
		/// <summary>
		/// spSqlTableAddColumn
		/// </summary>
		public void spSqlTableAddColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableAddColumn";
				IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
				IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
				IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
				IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
				IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
				IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableAddColumn
		/// <summary>
		/// spSqlTableAddColumn
		/// </summary>
		public IDbCommand cmdSqlTableAddColumn(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableAddColumn";
			IDbDataParameter parTABLE_NAME    = Sql.CreateParameter(cmd, "@TABLE_NAME"   , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME   = Sql.CreateParameter(cmd, "@COLUMN_NAME"  , "ansistring", 255);
			IDbDataParameter parDATA_TYPE     = Sql.CreateParameter(cmd, "@DATA_TYPE"    , "ansistring", 255);
			IDbDataParameter parMAX_SIZE      = Sql.CreateParameter(cmd, "@MAX_SIZE"     , "Int32",   4);
			IDbDataParameter parREQUIRED      = Sql.CreateParameter(cmd, "@REQUIRED"     , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE = Sql.CreateParameter(cmd, "@DEFAULT_VALUE", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableAlterColumn
		/// <summary>
		/// spSqlTableAlterColumn
		/// </summary>
		public void spSqlTableAlterColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableAlterColumn";
							IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
							IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
							IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
							IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
							IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
							IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableAlterColumn
		/// <summary>
		/// spSqlTableAlterColumn
		/// </summary>
		public void spSqlTableAlterColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableAlterColumn";
				IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
				IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
				IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
				IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
				IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
				IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableAlterColumn
		/// <summary>
		/// spSqlTableAlterColumn
		/// </summary>
		public IDbCommand cmdSqlTableAlterColumn(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableAlterColumn";
			IDbDataParameter parTABLE_NAME    = Sql.CreateParameter(cmd, "@TABLE_NAME"   , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME   = Sql.CreateParameter(cmd, "@COLUMN_NAME"  , "ansistring", 255);
			IDbDataParameter parDATA_TYPE     = Sql.CreateParameter(cmd, "@DATA_TYPE"    , "ansistring", 255);
			IDbDataParameter parMAX_SIZE      = Sql.CreateParameter(cmd, "@MAX_SIZE"     , "Int32",   4);
			IDbDataParameter parREQUIRED      = Sql.CreateParameter(cmd, "@REQUIRED"     , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE = Sql.CreateParameter(cmd, "@DEFAULT_VALUE", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableColumnExists
		/// <summary>
		/// spSqlTableColumnExists
		/// </summary>
		public void spSqlTableColumnExists(ref bool bEXISTS, string sTABLE_NAME, string sCOLUMN_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableColumnExists";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parCOLUMN_NAME      = Sql.AddParameter(cmd, "@COLUMN_NAME"     , sCOLUMN_NAME       ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableColumnExists
		/// <summary>
		/// spSqlTableColumnExists
		/// </summary>
		public void spSqlTableColumnExists(ref bool bEXISTS, string sTABLE_NAME, string sCOLUMN_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableColumnExists";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parCOLUMN_NAME      = Sql.AddParameter(cmd, "@COLUMN_NAME"     , sCOLUMN_NAME       ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableColumnExists
		/// <summary>
		/// spSqlTableColumnExists
		/// </summary>
		public IDbCommand cmdSqlTableColumnExists(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableColumnExists";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parCOLUMN_NAME      = Sql.CreateParameter(cmd, "@COLUMN_NAME"     , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlTableColumnsChanged
		/// <summary>
		/// spSqlTableColumnsChanged
		/// </summary>
		public void spSqlTableColumnsChanged(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableColumnsChanged";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableColumnsChanged
		/// <summary>
		/// spSqlTableColumnsChanged
		/// </summary>
		public void spSqlTableColumnsChanged(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableColumnsChanged";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableColumnsChanged
		/// <summary>
		/// spSqlTableColumnsChanged
		/// </summary>
		public IDbCommand cmdSqlTableColumnsChanged(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableColumnsChanged";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlTableDisableTriggers
		/// <summary>
		/// spSqlTableDisableTriggers
		/// </summary>
		public void spSqlTableDisableTriggers(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableDisableTriggers";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableDisableTriggers
		/// <summary>
		/// spSqlTableDisableTriggers
		/// </summary>
		public void spSqlTableDisableTriggers(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableDisableTriggers";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableDisableTriggers
		/// <summary>
		/// spSqlTableDisableTriggers
		/// </summary>
		public IDbCommand cmdSqlTableDisableTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableDisableTriggers";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableDropColumn
		/// <summary>
		/// spSqlTableDropColumn
		/// </summary>
		public void spSqlTableDropColumn(string sTABLE_NAME, string sCOLUMN_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableDropColumn";
							IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
							IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableDropColumn
		/// <summary>
		/// spSqlTableDropColumn
		/// </summary>
		public void spSqlTableDropColumn(string sTABLE_NAME, string sCOLUMN_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableDropColumn";
				IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
				IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableDropColumn
		/// <summary>
		/// spSqlTableDropColumn
		/// </summary>
		public IDbCommand cmdSqlTableDropColumn(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableDropColumn";
			IDbDataParameter parTABLE_NAME  = Sql.CreateParameter(cmd, "@TABLE_NAME" , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME = Sql.CreateParameter(cmd, "@COLUMN_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableDropColumnConstraint
		/// <summary>
		/// spSqlTableDropColumnConstraint
		/// </summary>
		public void spSqlTableDropColumnConstraint(string sTABLE_NAME, string sCOLUMN_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableDropColumnConstraint";
							IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
							IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableDropColumnConstraint
		/// <summary>
		/// spSqlTableDropColumnConstraint
		/// </summary>
		public void spSqlTableDropColumnConstraint(string sTABLE_NAME, string sCOLUMN_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableDropColumnConstraint";
				IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
				IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableDropColumnConstraint
		/// <summary>
		/// spSqlTableDropColumnConstraint
		/// </summary>
		public IDbCommand cmdSqlTableDropColumnConstraint(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableDropColumnConstraint";
			IDbDataParameter parTABLE_NAME  = Sql.CreateParameter(cmd, "@TABLE_NAME" , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME = Sql.CreateParameter(cmd, "@COLUMN_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableEnableTriggers
		/// <summary>
		/// spSqlTableEnableTriggers
		/// </summary>
		public void spSqlTableEnableTriggers(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableEnableTriggers";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableEnableTriggers
		/// <summary>
		/// spSqlTableEnableTriggers
		/// </summary>
		public void spSqlTableEnableTriggers(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableEnableTriggers";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableEnableTriggers
		/// <summary>
		/// spSqlTableEnableTriggers
		/// </summary>
		public IDbCommand cmdSqlTableEnableTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableEnableTriggers";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableExists
		/// <summary>
		/// spSqlTableExists
		/// </summary>
		public void spSqlTableExists(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableExists";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableExists
		/// <summary>
		/// spSqlTableExists
		/// </summary>
		public void spSqlTableExists(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableExists";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableExists
		/// <summary>
		/// spSqlTableExists
		/// </summary>
		public IDbCommand cmdSqlTableExists(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableExists";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlTableIndexExists
		/// <summary>
		/// spSqlTableIndexExists
		/// </summary>
		public void spSqlTableIndexExists(ref bool bEXISTS, string sTABLE_NAME, string sINDEX_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableIndexExists";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parINDEX_NAME       = Sql.AddParameter(cmd, "@INDEX_NAME"      , sINDEX_NAME        , 120);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableIndexExists
		/// <summary>
		/// spSqlTableIndexExists
		/// </summary>
		public void spSqlTableIndexExists(ref bool bEXISTS, string sTABLE_NAME, string sINDEX_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableIndexExists";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parINDEX_NAME       = Sql.AddParameter(cmd, "@INDEX_NAME"      , sINDEX_NAME        , 120);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableIndexExists
		/// <summary>
		/// spSqlTableIndexExists
		/// </summary>
		public IDbCommand cmdSqlTableIndexExists(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableIndexExists";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parINDEX_NAME       = Sql.CreateParameter(cmd, "@INDEX_NAME"      , "string", 120);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlUpdateIndex
		/// <summary>
		/// spSqlUpdateIndex
		/// </summary>
		public void spSqlUpdateIndex(string sINDEX_NAME, string sTABLE_NAME, string sFIELD1, string sFIELD2, string sFIELD3, string sFIELD4, string sFIELD5, string sFIELD6)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlUpdateIndex";
							IDbDataParameter parINDEX_NAME = Sql.AddAnsiParam(cmd, "@INDEX_NAME", sINDEX_NAME  ,  80);
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							IDbDataParameter parFIELD1     = Sql.AddAnsiParam(cmd, "@FIELD1"    , sFIELD1      ,  40);
							IDbDataParameter parFIELD2     = Sql.AddAnsiParam(cmd, "@FIELD2"    , sFIELD2      ,  40);
							IDbDataParameter parFIELD3     = Sql.AddAnsiParam(cmd, "@FIELD3"    , sFIELD3      ,  40);
							IDbDataParameter parFIELD4     = Sql.AddAnsiParam(cmd, "@FIELD4"    , sFIELD4      ,  40);
							IDbDataParameter parFIELD5     = Sql.AddAnsiParam(cmd, "@FIELD5"    , sFIELD5      ,  40);
							IDbDataParameter parFIELD6     = Sql.AddAnsiParam(cmd, "@FIELD6"    , sFIELD6      ,  40);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlUpdateIndex
		/// <summary>
		/// spSqlUpdateIndex
		/// </summary>
		public void spSqlUpdateIndex(string sINDEX_NAME, string sTABLE_NAME, string sFIELD1, string sFIELD2, string sFIELD3, string sFIELD4, string sFIELD5, string sFIELD6, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlUpdateIndex";
				IDbDataParameter parINDEX_NAME = Sql.AddAnsiParam(cmd, "@INDEX_NAME", sINDEX_NAME  ,  80);
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				IDbDataParameter parFIELD1     = Sql.AddAnsiParam(cmd, "@FIELD1"    , sFIELD1      ,  40);
				IDbDataParameter parFIELD2     = Sql.AddAnsiParam(cmd, "@FIELD2"    , sFIELD2      ,  40);
				IDbDataParameter parFIELD3     = Sql.AddAnsiParam(cmd, "@FIELD3"    , sFIELD3      ,  40);
				IDbDataParameter parFIELD4     = Sql.AddAnsiParam(cmd, "@FIELD4"    , sFIELD4      ,  40);
				IDbDataParameter parFIELD5     = Sql.AddAnsiParam(cmd, "@FIELD5"    , sFIELD5      ,  40);
				IDbDataParameter parFIELD6     = Sql.AddAnsiParam(cmd, "@FIELD6"    , sFIELD6      ,  40);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlUpdateIndex
		/// <summary>
		/// spSqlUpdateIndex
		/// </summary>
		public IDbCommand cmdSqlUpdateIndex(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlUpdateIndex";
			IDbDataParameter parINDEX_NAME = Sql.CreateParameter(cmd, "@INDEX_NAME", "ansistring",  80);
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			IDbDataParameter parFIELD1     = Sql.CreateParameter(cmd, "@FIELD1"    , "ansistring",  40);
			IDbDataParameter parFIELD2     = Sql.CreateParameter(cmd, "@FIELD2"    , "ansistring",  40);
			IDbDataParameter parFIELD3     = Sql.CreateParameter(cmd, "@FIELD3"    , "ansistring",  40);
			IDbDataParameter parFIELD4     = Sql.CreateParameter(cmd, "@FIELD4"    , "ansistring",  40);
			IDbDataParameter parFIELD5     = Sql.CreateParameter(cmd, "@FIELD5"    , "ansistring",  40);
			IDbDataParameter parFIELD6     = Sql.CreateParameter(cmd, "@FIELD6"    , "ansistring",  40);
			return cmd;
		}
		#endregion

		#region spSqlUpdateSyncdTables
		/// <summary>
		/// spSqlUpdateSyncdTables
		/// </summary>
		public void spSqlUpdateSyncdTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlUpdateSyncdTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlUpdateSyncdTables
		/// <summary>
		/// spSqlUpdateSyncdTables
		/// </summary>
		public void spSqlUpdateSyncdTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlUpdateSyncdTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlUpdateSyncdTables
		/// <summary>
		/// spSqlUpdateSyncdTables
		/// </summary>
		public IDbCommand cmdSqlUpdateSyncdTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlUpdateSyncdTables";
			return cmd;
		}
		#endregion

		#region spSUBSCRIPTIONS_Delete
		/// <summary>
		/// spSUBSCRIPTIONS_Delete
		/// </summary>
		public void spSUBSCRIPTIONS_Delete(Guid gASSIGNED_USER_ID, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSUBSCRIPTIONS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSUBSCRIPTIONS_Delete
		/// <summary>
		/// spSUBSCRIPTIONS_Delete
		/// </summary>
		public void spSUBSCRIPTIONS_Delete(Guid gASSIGNED_USER_ID, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSUBSCRIPTIONS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSUBSCRIPTIONS_Delete
		/// <summary>
		/// spSUBSCRIPTIONS_Delete
		/// </summary>
		public IDbCommand cmdSUBSCRIPTIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSUBSCRIPTIONS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSUBSCRIPTIONS_Update
		/// <summary>
		/// spSUBSCRIPTIONS_Update
		/// </summary>
		public void spSUBSCRIPTIONS_Update(Guid gASSIGNED_USER_ID, string sPARENT_TYPE, Guid gPARENT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSUBSCRIPTIONS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSUBSCRIPTIONS_Update
		/// <summary>
		/// spSUBSCRIPTIONS_Update
		/// </summary>
		public void spSUBSCRIPTIONS_Update(Guid gASSIGNED_USER_ID, string sPARENT_TYPE, Guid gPARENT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSUBSCRIPTIONS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSUBSCRIPTIONS_Update
		/// <summary>
		/// spSUBSCRIPTIONS_Update
		/// </summary>
		public IDbCommand cmdSUBSCRIPTIONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSUBSCRIPTIONS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSUGARFAVORITES_Delete
		/// <summary>
		/// spSUGARFAVORITES_Delete
		/// </summary>
		public void spSUGARFAVORITES_Delete(Guid gASSIGNED_USER_ID, Guid gRECORD_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSUGARFAVORITES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parRECORD_ID        = Sql.AddParameter(cmd, "@RECORD_ID"       , gRECORD_ID         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSUGARFAVORITES_Delete
		/// <summary>
		/// spSUGARFAVORITES_Delete
		/// </summary>
		public void spSUGARFAVORITES_Delete(Guid gASSIGNED_USER_ID, Guid gRECORD_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSUGARFAVORITES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parRECORD_ID        = Sql.AddParameter(cmd, "@RECORD_ID"       , gRECORD_ID         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSUGARFAVORITES_Delete
		/// <summary>
		/// spSUGARFAVORITES_Delete
		/// </summary>
		public IDbCommand cmdSUGARFAVORITES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSUGARFAVORITES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parRECORD_ID        = Sql.CreateParameter(cmd, "@RECORD_ID"       , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSUGARFAVORITES_Update
		/// <summary>
		/// spSUGARFAVORITES_Update
		/// </summary>
		public void spSUGARFAVORITES_Update(Guid gASSIGNED_USER_ID, string sMODULE, Guid gRECORD_ID, string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSUGARFAVORITES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
							IDbDataParameter parRECORD_ID        = Sql.AddParameter(cmd, "@RECORD_ID"       , gRECORD_ID         );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSUGARFAVORITES_Update
		/// <summary>
		/// spSUGARFAVORITES_Update
		/// </summary>
		public void spSUGARFAVORITES_Update(Guid gASSIGNED_USER_ID, string sMODULE, Guid gRECORD_ID, string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSUGARFAVORITES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
				IDbDataParameter parRECORD_ID        = Sql.AddParameter(cmd, "@RECORD_ID"       , gRECORD_ID         );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSUGARFAVORITES_Update
		/// <summary>
		/// spSUGARFAVORITES_Update
		/// </summary>
		public IDbCommand cmdSUGARFAVORITES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSUGARFAVORITES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE           = Sql.CreateParameter(cmd, "@MODULE"          , "string",  25);
			IDbDataParameter parRECORD_ID        = Sql.CreateParameter(cmd, "@RECORD_ID"       , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			return cmd;
		}
		#endregion

		#region spSUGARFAVORITES_UpdateName
		/// <summary>
		/// spSUGARFAVORITES_UpdateName
		/// </summary>
		public void spSUGARFAVORITES_UpdateName(Guid gRECORD_ID, string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSUGARFAVORITES_UpdateName";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parRECORD_ID        = Sql.AddParameter(cmd, "@RECORD_ID"       , gRECORD_ID         );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSUGARFAVORITES_UpdateName
		/// <summary>
		/// spSUGARFAVORITES_UpdateName
		/// </summary>
		public void spSUGARFAVORITES_UpdateName(Guid gRECORD_ID, string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSUGARFAVORITES_UpdateName";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parRECORD_ID        = Sql.AddParameter(cmd, "@RECORD_ID"       , gRECORD_ID         );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSUGARFAVORITES_UpdateName
		/// <summary>
		/// spSUGARFAVORITES_UpdateName
		/// </summary>
		public IDbCommand cmdSUGARFAVORITES_UpdateName(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSUGARFAVORITES_UpdateName";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parRECORD_ID        = Sql.CreateParameter(cmd, "@RECORD_ID"       , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			return cmd;
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_Delete
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_Delete
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_CURRENCY_LOG_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_Delete
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_Delete
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_CURRENCY_LOG_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_CURRENCY_LOG_Delete
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_Delete
		/// </summary>
		public IDbCommand cmdSYSTEM_CURRENCY_LOG_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_CURRENCY_LOG_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_InsertOnly(ref Guid gID, string sSERVICE_NAME, string sSOURCE_ISO4217, string sDESTINATION_ISO4217, float flCONVERSION_RATE, string sRAW_CONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOn";
							else
								cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOnly";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parSERVICE_NAME        = Sql.AddParameter(cmd, "@SERVICE_NAME"       , sSERVICE_NAME         ,  50);
							IDbDataParameter parSOURCE_ISO4217      = Sql.AddParameter(cmd, "@SOURCE_ISO4217"     , sSOURCE_ISO4217       ,   3);
							IDbDataParameter parDESTINATION_ISO4217 = Sql.AddParameter(cmd, "@DESTINATION_ISO4217", sDESTINATION_ISO4217  ,   3);
							IDbDataParameter parCONVERSION_RATE     = Sql.AddParameter(cmd, "@CONVERSION_RATE"    , flCONVERSION_RATE     );
							IDbDataParameter parRAW_CONTENT         = Sql.AddParameter(cmd, "@RAW_CONTENT"        , sRAW_CONTENT          );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_InsertOnly(ref Guid gID, string sSERVICE_NAME, string sSOURCE_ISO4217, string sDESTINATION_ISO4217, float flCONVERSION_RATE, string sRAW_CONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOn";
				else
					cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOnly";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parSERVICE_NAME        = Sql.AddParameter(cmd, "@SERVICE_NAME"       , sSERVICE_NAME         ,  50);
				IDbDataParameter parSOURCE_ISO4217      = Sql.AddParameter(cmd, "@SOURCE_ISO4217"     , sSOURCE_ISO4217       ,   3);
				IDbDataParameter parDESTINATION_ISO4217 = Sql.AddParameter(cmd, "@DESTINATION_ISO4217", sDESTINATION_ISO4217  ,   3);
				IDbDataParameter parCONVERSION_RATE     = Sql.AddParameter(cmd, "@CONVERSION_RATE"    , flCONVERSION_RATE     );
				IDbDataParameter parRAW_CONTENT         = Sql.AddParameter(cmd, "@RAW_CONTENT"        , sRAW_CONTENT          );
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSYSTEM_CURRENCY_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_CURRENCY_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOn";
			else
				cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOnly";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parSERVICE_NAME        = Sql.CreateParameter(cmd, "@SERVICE_NAME"       , "string",  50);
			IDbDataParameter parSOURCE_ISO4217      = Sql.CreateParameter(cmd, "@SOURCE_ISO4217"     , "string",   3);
			IDbDataParameter parDESTINATION_ISO4217 = Sql.CreateParameter(cmd, "@DESTINATION_ISO4217", "string",   3);
			IDbDataParameter parCONVERSION_RATE     = Sql.CreateParameter(cmd, "@CONVERSION_RATE"    , "float",   8);
			IDbDataParameter parRAW_CONTENT         = Sql.CreateParameter(cmd, "@RAW_CONTENT"        , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSYSTEM_EVENTS_ProcessAll
		/// <summary>
		/// spSYSTEM_EVENTS_ProcessAll
		/// </summary>
		public void spSYSTEM_EVENTS_ProcessAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_EVENTS_ProcessAll";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_EVENTS_ProcessAll
		/// <summary>
		/// spSYSTEM_EVENTS_ProcessAll
		/// </summary>
		public void spSYSTEM_EVENTS_ProcessAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_EVENTS_ProcessAll";
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_EVENTS_ProcessAll
		/// <summary>
		/// spSYSTEM_EVENTS_ProcessAll
		/// </summary>
		public IDbCommand cmdSYSTEM_EVENTS_ProcessAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_EVENTS_ProcessAll";
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_Cleanup
		/// <summary>
		/// spSYSTEM_LOG_Cleanup
		/// </summary>
		public void spSYSTEM_LOG_Cleanup()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_Cleanup";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_Cleanup
		/// <summary>
		/// spSYSTEM_LOG_Cleanup
		/// </summary>
		public void spSYSTEM_LOG_Cleanup(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_Cleanup";
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_Cleanup
		/// <summary>
		/// spSYSTEM_LOG_Cleanup
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_Cleanup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_Cleanup";
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_Delete
		/// <summary>
		/// spSYSTEM_LOG_Delete
		/// </summary>
		public void spSYSTEM_LOG_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_Delete
		/// <summary>
		/// spSYSTEM_LOG_Delete
		/// </summary>
		public void spSYSTEM_LOG_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_Delete
		/// <summary>
		/// spSYSTEM_LOG_Delete
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_LOG_InsertOnly(Guid gUSER_ID, string sUSER_NAME, string sMACHINE, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sPARAMETERS, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         , 255);
							IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
							IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
							IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
							IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
							IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parPARAMETERS       = Sql.AddParameter(cmd, "@PARAMETERS"      , sPARAMETERS        , 2000);
							IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
							IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
							IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
							IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
							IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_LOG_InsertOnly(Guid gUSER_ID, string sUSER_NAME, string sMACHINE, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sPARAMETERS, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         , 255);
				IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
				IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
				IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
				IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
				IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parPARAMETERS       = Sql.AddParameter(cmd, "@PARAMETERS"      , sPARAMETERS        , 2000);
				IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
				IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
				IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
				IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
				IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string", 255);
			IDbDataParameter parMACHINE          = Sql.CreateParameter(cmd, "@MACHINE"         , "string",  60);
			IDbDataParameter parASPNET_SESSIONID = Sql.CreateParameter(cmd, "@ASPNET_SESSIONID", "string",  50);
			IDbDataParameter parREMOTE_HOST      = Sql.CreateParameter(cmd, "@REMOTE_HOST"     , "string", 100);
			IDbDataParameter parSERVER_HOST      = Sql.CreateParameter(cmd, "@SERVER_HOST"     , "string", 100);
			IDbDataParameter parTARGET           = Sql.CreateParameter(cmd, "@TARGET"          , "string", 255);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parPARAMETERS       = Sql.CreateParameter(cmd, "@PARAMETERS"      , "string", 2000);
			IDbDataParameter parERROR_TYPE       = Sql.CreateParameter(cmd, "@ERROR_TYPE"      , "string",  25);
			IDbDataParameter parFILE_NAME        = Sql.CreateParameter(cmd, "@FILE_NAME"       , "string", 255);
			IDbDataParameter parMETHOD           = Sql.CreateParameter(cmd, "@METHOD"          , "string", 450);
			IDbDataParameter parLINE_NUMBER      = Sql.CreateParameter(cmd, "@LINE_NUMBER"     , "Int32",   4);
			IDbDataParameter parMESSAGE          = Sql.CreateParameter(cmd, "@MESSAGE"         , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_MessageOnly
		/// <summary>
		/// spSYSTEM_LOG_MessageOnly
		/// </summary>
		public void spSYSTEM_LOG_MessageOnly(string sERROR_TYPE, string sMESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_MessageOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
							IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_MessageOnly
		/// <summary>
		/// spSYSTEM_LOG_MessageOnly
		/// </summary>
		public void spSYSTEM_LOG_MessageOnly(string sERROR_TYPE, string sMESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_MessageOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
				IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_MessageOnly
		/// <summary>
		/// spSYSTEM_LOG_MessageOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_MessageOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_MessageOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parERROR_TYPE       = Sql.CreateParameter(cmd, "@ERROR_TYPE"      , "string",  25);
			IDbDataParameter parMESSAGE          = Sql.CreateParameter(cmd, "@MESSAGE"         , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Delete
		/// <summary>
		/// spSYSTEM_REST_TABLES_Delete
		/// </summary>
		public void spSYSTEM_REST_TABLES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_REST_TABLES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Delete
		/// <summary>
		/// spSYSTEM_REST_TABLES_Delete
		/// </summary>
		public void spSYSTEM_REST_TABLES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_REST_TABLES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_REST_TABLES_Delete
		/// <summary>
		/// spSYSTEM_REST_TABLES_Delete
		/// </summary>
		public IDbCommand cmdSYSTEM_REST_TABLES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_REST_TABLES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSYSTEM_REST_TABLES_InsertOnly
		/// <summary>
		/// spSYSTEM_REST_TABLES_InsertOnly
		/// </summary>
		public void spSYSTEM_REST_TABLES_InsertOnly(string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnl";
							else
								cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
							IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
							IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
							IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
							IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
							IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
							IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
							IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
							IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
							IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
							IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_REST_TABLES_InsertOnly
		/// <summary>
		/// spSYSTEM_REST_TABLES_InsertOnly
		/// </summary>
		public void spSYSTEM_REST_TABLES_InsertOnly(string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnl";
				else
					cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
				IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
				IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
				IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
				IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
				IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
				IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
				IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
				IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
				IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
				IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_REST_TABLES_InsertOnly
		/// <summary>
		/// spSYSTEM_REST_TABLES_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_REST_TABLES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnl";
			else
				cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parTABLE_NAME          = Sql.CreateParameter(cmd, "@TABLE_NAME"         , "string",  50);
			IDbDataParameter parVIEW_NAME           = Sql.CreateParameter(cmd, "@VIEW_NAME"          , "string",  60);
			IDbDataParameter parMODULE_NAME         = Sql.CreateParameter(cmd, "@MODULE_NAME"        , "string",  25);
			IDbDataParameter parMODULE_NAME_RELATED = Sql.CreateParameter(cmd, "@MODULE_NAME_RELATED", "string",  25);
			IDbDataParameter parMODULE_SPECIFIC     = Sql.CreateParameter(cmd, "@MODULE_SPECIFIC"    , "Int32",   4);
			IDbDataParameter parMODULE_FIELD_NAME   = Sql.CreateParameter(cmd, "@MODULE_FIELD_NAME"  , "string",  50);
			IDbDataParameter parIS_SYSTEM           = Sql.CreateParameter(cmd, "@IS_SYSTEM"          , "bool",   1);
			IDbDataParameter parIS_ASSIGNED         = Sql.CreateParameter(cmd, "@IS_ASSIGNED"        , "bool",   1);
			IDbDataParameter parASSIGNED_FIELD_NAME = Sql.CreateParameter(cmd, "@ASSIGNED_FIELD_NAME", "string",  50);
			IDbDataParameter parIS_RELATIONSHIP     = Sql.CreateParameter(cmd, "@IS_RELATIONSHIP"    , "bool",   1);
			IDbDataParameter parREQUIRED_FIELDS     = Sql.CreateParameter(cmd, "@REQUIRED_FIELDS"    , "string", 150);
			return cmd;
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Update
		/// <summary>
		/// spSYSTEM_REST_TABLES_Update
		/// </summary>
		public void spSYSTEM_REST_TABLES_Update(ref Guid gID, string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_REST_TABLES_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
							IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
							IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
							IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
							IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
							IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
							IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
							IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
							IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
							IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
							IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Update
		/// <summary>
		/// spSYSTEM_REST_TABLES_Update
		/// </summary>
		public void spSYSTEM_REST_TABLES_Update(ref Guid gID, string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_REST_TABLES_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
				IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
				IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
				IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
				IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
				IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
				IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
				IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
				IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
				IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
				IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSYSTEM_REST_TABLES_Update
		/// <summary>
		/// spSYSTEM_REST_TABLES_Update
		/// </summary>
		public IDbCommand cmdSYSTEM_REST_TABLES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_REST_TABLES_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parTABLE_NAME          = Sql.CreateParameter(cmd, "@TABLE_NAME"         , "string",  50);
			IDbDataParameter parVIEW_NAME           = Sql.CreateParameter(cmd, "@VIEW_NAME"          , "string",  60);
			IDbDataParameter parMODULE_NAME         = Sql.CreateParameter(cmd, "@MODULE_NAME"        , "string",  25);
			IDbDataParameter parMODULE_NAME_RELATED = Sql.CreateParameter(cmd, "@MODULE_NAME_RELATED", "string",  25);
			IDbDataParameter parMODULE_SPECIFIC     = Sql.CreateParameter(cmd, "@MODULE_SPECIFIC"    , "Int32",   4);
			IDbDataParameter parMODULE_FIELD_NAME   = Sql.CreateParameter(cmd, "@MODULE_FIELD_NAME"  , "string",  50);
			IDbDataParameter parIS_SYSTEM           = Sql.CreateParameter(cmd, "@IS_SYSTEM"          , "bool",   1);
			IDbDataParameter parIS_ASSIGNED         = Sql.CreateParameter(cmd, "@IS_ASSIGNED"        , "bool",   1);
			IDbDataParameter parASSIGNED_FIELD_NAME = Sql.CreateParameter(cmd, "@ASSIGNED_FIELD_NAME", "string",  50);
			IDbDataParameter parIS_RELATIONSHIP     = Sql.CreateParameter(cmd, "@IS_RELATIONSHIP"    , "bool",   1);
			IDbDataParameter parREQUIRED_FIELDS     = Sql.CreateParameter(cmd, "@REQUIRED_FIELDS"    , "string", 150);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSYSTEM_SYNC_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_SYNC_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_SYNC_LOG_InsertOnly(Guid gUSER_ID, string sMACHINE, string sREMOTE_URL, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_SYNC_LOG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
							IDbDataParameter parREMOTE_URL       = Sql.AddParameter(cmd, "@REMOTE_URL"      , sREMOTE_URL        , 255);
							IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
							IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
							IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
							IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
							IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_SYNC_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_SYNC_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_SYNC_LOG_InsertOnly(Guid gUSER_ID, string sMACHINE, string sREMOTE_URL, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_SYNC_LOG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
				IDbDataParameter parREMOTE_URL       = Sql.AddParameter(cmd, "@REMOTE_URL"      , sREMOTE_URL        , 255);
				IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
				IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
				IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
				IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
				IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_SYNC_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_SYNC_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_SYNC_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_SYNC_LOG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parMACHINE          = Sql.CreateParameter(cmd, "@MACHINE"         , "string",  60);
			IDbDataParameter parREMOTE_URL       = Sql.CreateParameter(cmd, "@REMOTE_URL"      , "string", 255);
			IDbDataParameter parERROR_TYPE       = Sql.CreateParameter(cmd, "@ERROR_TYPE"      , "string",  25);
			IDbDataParameter parFILE_NAME        = Sql.CreateParameter(cmd, "@FILE_NAME"       , "string", 255);
			IDbDataParameter parMETHOD           = Sql.CreateParameter(cmd, "@METHOD"          , "string", 450);
			IDbDataParameter parLINE_NUMBER      = Sql.CreateParameter(cmd, "@LINE_NUMBER"     , "Int32",   4);
			IDbDataParameter parMESSAGE          = Sql.CreateParameter(cmd, "@MESSAGE"         , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSYSTEM_TRANSACTIONS_Create
		/// <summary>
		/// spSYSTEM_TRANSACTIONS_Create
		/// </summary>
		public void spSYSTEM_TRANSACTIONS_Create(ref Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_TRANSACTIONS_Create";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSYSTEM_TRANSACTIONS_Create
		/// <summary>
		/// spSYSTEM_TRANSACTIONS_Create
		/// </summary>
		public IDbCommand cmdSYSTEM_TRANSACTIONS_Create(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_TRANSACTIONS_Create";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTAB_GROUPS_Delete
		/// <summary>
		/// spTAB_GROUPS_Delete
		/// </summary>
		public void spTAB_GROUPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAB_GROUPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAB_GROUPS_Delete
		/// <summary>
		/// spTAB_GROUPS_Delete
		/// </summary>
		public void spTAB_GROUPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAB_GROUPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAB_GROUPS_Delete
		/// <summary>
		/// spTAB_GROUPS_Delete
		/// </summary>
		public IDbCommand cmdTAB_GROUPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAB_GROUPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTAB_GROUPS_InsertOnly
		/// <summary>
		/// spTAB_GROUPS_InsertOnly
		/// </summary>
		public void spTAB_GROUPS_InsertOnly(string sNAME, string sTITLE, Int32 nGROUP_ORDER, bool bGROUP_MENU)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAB_GROUPS_InsertOnly";
							IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         ,  25);
							IDbDataParameter parTITLE       = Sql.AddParameter(cmd, "@TITLE"      , sTITLE        , 100);
							IDbDataParameter parGROUP_ORDER = Sql.AddParameter(cmd, "@GROUP_ORDER", nGROUP_ORDER  );
							IDbDataParameter parGROUP_MENU  = Sql.AddParameter(cmd, "@GROUP_MENU" , bGROUP_MENU   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAB_GROUPS_InsertOnly
		/// <summary>
		/// spTAB_GROUPS_InsertOnly
		/// </summary>
		public void spTAB_GROUPS_InsertOnly(string sNAME, string sTITLE, Int32 nGROUP_ORDER, bool bGROUP_MENU, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAB_GROUPS_InsertOnly";
				IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         ,  25);
				IDbDataParameter parTITLE       = Sql.AddParameter(cmd, "@TITLE"      , sTITLE        , 100);
				IDbDataParameter parGROUP_ORDER = Sql.AddParameter(cmd, "@GROUP_ORDER", nGROUP_ORDER  );
				IDbDataParameter parGROUP_MENU  = Sql.AddParameter(cmd, "@GROUP_MENU" , bGROUP_MENU   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAB_GROUPS_InsertOnly
		/// <summary>
		/// spTAB_GROUPS_InsertOnly
		/// </summary>
		public IDbCommand cmdTAB_GROUPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAB_GROUPS_InsertOnly";
			IDbDataParameter parNAME        = Sql.CreateParameter(cmd, "@NAME"       , "string",  25);
			IDbDataParameter parTITLE       = Sql.CreateParameter(cmd, "@TITLE"      , "string", 100);
			IDbDataParameter parGROUP_ORDER = Sql.CreateParameter(cmd, "@GROUP_ORDER", "Int32",   4);
			IDbDataParameter parGROUP_MENU  = Sql.CreateParameter(cmd, "@GROUP_MENU" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spTAB_GROUPS_Update
		/// <summary>
		/// spTAB_GROUPS_Update
		/// </summary>
		public void spTAB_GROUPS_Update(ref Guid gID, string sNAME, string sTITLE, bool bENABLED, Int32 nGROUP_ORDER, bool bGROUP_MENU)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAB_GROUPS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
							IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
							IDbDataParameter parENABLED          = Sql.AddParameter(cmd, "@ENABLED"         , bENABLED           );
							IDbDataParameter parGROUP_ORDER      = Sql.AddParameter(cmd, "@GROUP_ORDER"     , nGROUP_ORDER       );
							IDbDataParameter parGROUP_MENU       = Sql.AddParameter(cmd, "@GROUP_MENU"      , bGROUP_MENU        );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAB_GROUPS_Update
		/// <summary>
		/// spTAB_GROUPS_Update
		/// </summary>
		public void spTAB_GROUPS_Update(ref Guid gID, string sNAME, string sTITLE, bool bENABLED, Int32 nGROUP_ORDER, bool bGROUP_MENU, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAB_GROUPS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
				IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
				IDbDataParameter parENABLED          = Sql.AddParameter(cmd, "@ENABLED"         , bENABLED           );
				IDbDataParameter parGROUP_ORDER      = Sql.AddParameter(cmd, "@GROUP_ORDER"     , nGROUP_ORDER       );
				IDbDataParameter parGROUP_MENU       = Sql.AddParameter(cmd, "@GROUP_MENU"      , bGROUP_MENU        );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTAB_GROUPS_Update
		/// <summary>
		/// spTAB_GROUPS_Update
		/// </summary>
		public IDbCommand cmdTAB_GROUPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAB_GROUPS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  25);
			IDbDataParameter parTITLE            = Sql.CreateParameter(cmd, "@TITLE"           , "string", 100);
			IDbDataParameter parENABLED          = Sql.CreateParameter(cmd, "@ENABLED"         , "bool",   1);
			IDbDataParameter parGROUP_ORDER      = Sql.CreateParameter(cmd, "@GROUP_ORDER"     , "Int32",   4);
			IDbDataParameter parGROUP_MENU       = Sql.CreateParameter(cmd, "@GROUP_MENU"      , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTAG_SETS_AddSet
		/// <summary>
		/// spTAG_SETS_AddSet
		/// </summary>
		public void spTAG_SETS_AddSet(Guid gBEAN_ID, string sBEAN_MODULE, string sTAG_SET_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAG_SETS_AddSet";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
							IDbDataParameter parBEAN_MODULE      = Sql.AddParameter(cmd, "@BEAN_MODULE"     , sBEAN_MODULE       ,  50);
							IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAG_SETS_AddSet
		/// <summary>
		/// spTAG_SETS_AddSet
		/// </summary>
		public void spTAG_SETS_AddSet(Guid gBEAN_ID, string sBEAN_MODULE, string sTAG_SET_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAG_SETS_AddSet";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
				IDbDataParameter parBEAN_MODULE      = Sql.AddParameter(cmd, "@BEAN_MODULE"     , sBEAN_MODULE       ,  50);
				IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAG_SETS_AddSet
		/// <summary>
		/// spTAG_SETS_AddSet
		/// </summary>
		public IDbCommand cmdTAG_SETS_AddSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAG_SETS_AddSet";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBEAN_ID          = Sql.CreateParameter(cmd, "@BEAN_ID"         , "Guid",  16);
			IDbDataParameter parBEAN_MODULE      = Sql.CreateParameter(cmd, "@BEAN_MODULE"     , "string",  50);
			IDbDataParameter parTAG_SET_NAME     = Sql.CreateParameter(cmd, "@TAG_SET_NAME"    , "string", 4000);
			return cmd;
		}
		#endregion

		#region spTAG_SETS_Delete
		/// <summary>
		/// spTAG_SETS_Delete
		/// </summary>
		public void spTAG_SETS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAG_SETS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAG_SETS_Delete
		/// <summary>
		/// spTAG_SETS_Delete
		/// </summary>
		public void spTAG_SETS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAG_SETS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAG_SETS_Delete
		/// <summary>
		/// spTAG_SETS_Delete
		/// </summary>
		public IDbCommand cmdTAG_SETS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAG_SETS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTAG_SETS_NormalizeSet
		/// <summary>
		/// spTAG_SETS_NormalizeSet
		/// </summary>
		public void spTAG_SETS_NormalizeSet(Guid gBEAN_ID, string sBEAN_MODULE, string sTAG_SET_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAG_SETS_NormalizeSet";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
							IDbDataParameter parBEAN_MODULE      = Sql.AddParameter(cmd, "@BEAN_MODULE"     , sBEAN_MODULE       ,  50);
							IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAG_SETS_NormalizeSet
		/// <summary>
		/// spTAG_SETS_NormalizeSet
		/// </summary>
		public void spTAG_SETS_NormalizeSet(Guid gBEAN_ID, string sBEAN_MODULE, string sTAG_SET_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAG_SETS_NormalizeSet";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
				IDbDataParameter parBEAN_MODULE      = Sql.AddParameter(cmd, "@BEAN_MODULE"     , sBEAN_MODULE       ,  50);
				IDbDataParameter parTAG_SET_NAME     = Sql.AddParameter(cmd, "@TAG_SET_NAME"    , sTAG_SET_NAME      , 4000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAG_SETS_NormalizeSet
		/// <summary>
		/// spTAG_SETS_NormalizeSet
		/// </summary>
		public IDbCommand cmdTAG_SETS_NormalizeSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAG_SETS_NormalizeSet";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parBEAN_ID          = Sql.CreateParameter(cmd, "@BEAN_ID"         , "Guid",  16);
			IDbDataParameter parBEAN_MODULE      = Sql.CreateParameter(cmd, "@BEAN_MODULE"     , "string",  50);
			IDbDataParameter parTAG_SET_NAME     = Sql.CreateParameter(cmd, "@TAG_SET_NAME"    , "string", 4000);
			return cmd;
		}
		#endregion

		#region spTAG_SETS_UpdateAllNames
		/// <summary>
		/// spTAG_SETS_UpdateAllNames
		/// </summary>
		public void spTAG_SETS_UpdateAllNames()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAG_SETS_UpdateAllNames";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAG_SETS_UpdateAllNames
		/// <summary>
		/// spTAG_SETS_UpdateAllNames
		/// </summary>
		public void spTAG_SETS_UpdateAllNames(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAG_SETS_UpdateAllNames";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAG_SETS_UpdateAllNames
		/// <summary>
		/// spTAG_SETS_UpdateAllNames
		/// </summary>
		public IDbCommand cmdTAG_SETS_UpdateAllNames(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAG_SETS_UpdateAllNames";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTAG_SETS_UpdateNames
		/// <summary>
		/// spTAG_SETS_UpdateNames
		/// </summary>
		public void spTAG_SETS_UpdateNames(Guid gTAG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAG_SETS_UpdateNames";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTAG_ID           = Sql.AddParameter(cmd, "@TAG_ID"          , gTAG_ID            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAG_SETS_UpdateNames
		/// <summary>
		/// spTAG_SETS_UpdateNames
		/// </summary>
		public void spTAG_SETS_UpdateNames(Guid gTAG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAG_SETS_UpdateNames";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTAG_ID           = Sql.AddParameter(cmd, "@TAG_ID"          , gTAG_ID            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAG_SETS_UpdateNames
		/// <summary>
		/// spTAG_SETS_UpdateNames
		/// </summary>
		public IDbCommand cmdTAG_SETS_UpdateNames(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAG_SETS_UpdateNames";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTAG_ID           = Sql.CreateParameter(cmd, "@TAG_ID"          , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTAGS_Delete
		/// <summary>
		/// spTAGS_Delete
		/// </summary>
		public void spTAGS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAGS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAGS_Delete
		/// <summary>
		/// spTAGS_Delete
		/// </summary>
		public void spTAGS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAGS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAGS_Delete
		/// <summary>
		/// spTAGS_Delete
		/// </summary>
		public IDbCommand cmdTAGS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAGS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTAGS_MassDelete
		/// <summary>
		/// spTAGS_MassDelete
		/// </summary>
		public void spTAGS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAGS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAGS_MassDelete
		/// <summary>
		/// spTAGS_MassDelete
		/// </summary>
		public void spTAGS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAGS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTAGS_MassDelete
		/// <summary>
		/// spTAGS_MassDelete
		/// </summary>
		public IDbCommand cmdTAGS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAGS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTAGS_Update
		/// <summary>
		/// spTAGS_Update
		/// </summary>
		public void spTAGS_Update(ref Guid gID, string sNAME, Guid gASSIGNED_USER_ID, Guid gSOURCE_ID, string sSOURCE_TYPE, string sSOURCE_META, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTAGS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parSOURCE_ID        = Sql.AddParameter(cmd, "@SOURCE_ID"       , gSOURCE_ID         );
							IDbDataParameter parSOURCE_TYPE      = Sql.AddParameter(cmd, "@SOURCE_TYPE"     , sSOURCE_TYPE       ,  50);
							IDbDataParameter parSOURCE_META      = Sql.AddParameter(cmd, "@SOURCE_META"     , sSOURCE_META       );
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTAGS_Update
		/// <summary>
		/// spTAGS_Update
		/// </summary>
		public void spTAGS_Update(ref Guid gID, string sNAME, Guid gASSIGNED_USER_ID, Guid gSOURCE_ID, string sSOURCE_TYPE, string sSOURCE_META, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTAGS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parSOURCE_ID        = Sql.AddParameter(cmd, "@SOURCE_ID"       , gSOURCE_ID         );
				IDbDataParameter parSOURCE_TYPE      = Sql.AddParameter(cmd, "@SOURCE_TYPE"     , sSOURCE_TYPE       ,  50);
				IDbDataParameter parSOURCE_META      = Sql.AddParameter(cmd, "@SOURCE_META"     , sSOURCE_META       );
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTAGS_Update
		/// <summary>
		/// spTAGS_Update
		/// </summary>
		public IDbCommand cmdTAGS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTAGS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parSOURCE_ID        = Sql.CreateParameter(cmd, "@SOURCE_ID"       , "Guid",  16);
			IDbDataParameter parSOURCE_TYPE      = Sql.CreateParameter(cmd, "@SOURCE_TYPE"     , "string",  50);
			IDbDataParameter parSOURCE_META      = Sql.CreateParameter(cmd, "@SOURCE_META"     , "string", 104857600);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTASKS_Delete
		/// <summary>
		/// spTASKS_Delete
		/// </summary>
		public void spTASKS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTASKS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTASKS_Delete
		/// <summary>
		/// spTASKS_Delete
		/// </summary>
		public void spTASKS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTASKS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTASKS_Delete
		/// <summary>
		/// spTASKS_Delete
		/// </summary>
		public IDbCommand cmdTASKS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTASKS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTASKS_EmailReminderSent
		/// <summary>
		/// spTASKS_EmailReminderSent
		/// </summary>
		public void spTASKS_EmailReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTASKS_EmailReminderSent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTASKS_EmailReminderSent
		/// <summary>
		/// spTASKS_EmailReminderSent
		/// </summary>
		public void spTASKS_EmailReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTASKS_EmailReminderSent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTASKS_EmailReminderSent
		/// <summary>
		/// spTASKS_EmailReminderSent
		/// </summary>
		public IDbCommand cmdTASKS_EmailReminderSent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTASKS_EmailReminderSent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTASKS_MassDelete
		/// <summary>
		/// spTASKS_MassDelete
		/// </summary>
		public void spTASKS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTASKS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTASKS_MassDelete
		/// <summary>
		/// spTASKS_MassDelete
		/// </summary>
		public void spTASKS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTASKS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTASKS_MassDelete
		/// <summary>
		/// spTASKS_MassDelete
		/// </summary>
		public IDbCommand cmdTASKS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTASKS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTASKS_MassUpdate
		/// <summary>
		/// spTASKS_MassUpdate
		/// </summary>
		public void spTASKS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTASKS_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
							IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
							IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
							IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTASKS_MassUpdate
		/// <summary>
		/// spTASKS_MassUpdate
		/// </summary>
		public void spTASKS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, string sPRIORITY, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTASKS_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parSTATUS            = Sql.AddParameter(cmd, "@STATUS"           , sSTATUS             ,  25);
				IDbDataParameter parDATE_TIME_DUE     = Sql.AddParameter(cmd, "@DATE_TIME_DUE"    , dtDATE_TIME_DUE     );
				IDbDataParameter parDATE_TIME_START   = Sql.AddParameter(cmd, "@DATE_TIME_START"  , dtDATE_TIME_START   );
				IDbDataParameter parPRIORITY          = Sql.AddParameter(cmd, "@PRIORITY"         , sPRIORITY           ,  25);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTASKS_MassUpdate
		/// <summary>
		/// spTASKS_MassUpdate
		/// </summary>
		public IDbCommand cmdTASKS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTASKS_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parSTATUS            = Sql.CreateParameter(cmd, "@STATUS"           , "string",  25);
			IDbDataParameter parDATE_TIME_DUE     = Sql.CreateParameter(cmd, "@DATE_TIME_DUE"    , "DateTime",   8);
			IDbDataParameter parDATE_TIME_START   = Sql.CreateParameter(cmd, "@DATE_TIME_START"  , "DateTime",   8);
			IDbDataParameter parPRIORITY          = Sql.CreateParameter(cmd, "@PRIORITY"         , "string",  25);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spTASKS_SmsReminderSent
		/// <summary>
		/// spTASKS_SmsReminderSent
		/// </summary>
		public void spTASKS_SmsReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTASKS_SmsReminderSent";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
							IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTASKS_SmsReminderSent
		/// <summary>
		/// spTASKS_SmsReminderSent
		/// </summary>
		public void spTASKS_SmsReminderSent(Guid gID, string sINVITEE_TYPE, Guid gINVITEE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTASKS_SmsReminderSent";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parINVITEE_TYPE     = Sql.AddParameter(cmd, "@INVITEE_TYPE"    , sINVITEE_TYPE      ,  25);
				IDbDataParameter parINVITEE_ID       = Sql.AddParameter(cmd, "@INVITEE_ID"      , gINVITEE_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTASKS_SmsReminderSent
		/// <summary>
		/// spTASKS_SmsReminderSent
		/// </summary>
		public IDbCommand cmdTASKS_SmsReminderSent(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTASKS_SmsReminderSent";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parINVITEE_TYPE     = Sql.CreateParameter(cmd, "@INVITEE_TYPE"    , "string",  25);
			IDbDataParameter parINVITEE_ID       = Sql.CreateParameter(cmd, "@INVITEE_ID"      , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTASKS_Undelete
		/// <summary>
		/// spTASKS_Undelete
		/// </summary>
		public void spTASKS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTASKS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTASKS_Undelete
		/// <summary>
		/// spTASKS_Undelete
		/// </summary>
		public void spTASKS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTASKS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTASKS_Undelete
		/// <summary>
		/// spTASKS_Undelete
		/// </summary>
		public IDbCommand cmdTASKS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTASKS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spTASKS_Update
		/// <summary>
		/// spTASKS_Update
		/// </summary>
		public void spTASKS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, string sPRIORITY, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, Int32 nREMINDER_TIME, Int32 nEMAIL_REMINDER_TIME, Int32 nSMS_REMINDER_TIME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTASKS_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
							IDbDataParameter parSTATUS              = Sql.AddParameter(cmd, "@STATUS"             , sSTATUS               ,  25);
							IDbDataParameter parDATE_TIME_DUE       = Sql.AddParameter(cmd, "@DATE_TIME_DUE"      , dtDATE_TIME_DUE       );
							IDbDataParameter parDATE_TIME_START     = Sql.AddParameter(cmd, "@DATE_TIME_START"    , dtDATE_TIME_START     );
							IDbDataParameter parPARENT_TYPE         = Sql.AddParameter(cmd, "@PARENT_TYPE"        , sPARENT_TYPE          ,  25);
							IDbDataParameter parPARENT_ID           = Sql.AddParameter(cmd, "@PARENT_ID"          , gPARENT_ID            );
							IDbDataParameter parCONTACT_ID          = Sql.AddParameter(cmd, "@CONTACT_ID"         , gCONTACT_ID           );
							IDbDataParameter parPRIORITY            = Sql.AddParameter(cmd, "@PRIORITY"           , sPRIORITY             ,  25);
							IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
							IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
							IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
							IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
							IDbDataParameter parREMINDER_TIME       = Sql.AddParameter(cmd, "@REMINDER_TIME"      , nREMINDER_TIME        );
							IDbDataParameter parEMAIL_REMINDER_TIME = Sql.AddParameter(cmd, "@EMAIL_REMINDER_TIME", nEMAIL_REMINDER_TIME  );
							IDbDataParameter parSMS_REMINDER_TIME   = Sql.AddParameter(cmd, "@SMS_REMINDER_TIME"  , nSMS_REMINDER_TIME    );
							IDbDataParameter parIS_PRIVATE          = Sql.AddParameter(cmd, "@IS_PRIVATE"         , bIS_PRIVATE           );
							IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTASKS_Update
		/// <summary>
		/// spTASKS_Update
		/// </summary>
		public void spTASKS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSTATUS, DateTime dtDATE_TIME_DUE, DateTime dtDATE_TIME_START, string sPARENT_TYPE, Guid gPARENT_ID, Guid gCONTACT_ID, string sPRIORITY, string sDESCRIPTION, Guid gTEAM_ID, string sTEAM_SET_LIST, string sTAG_SET_NAME, Int32 nREMINDER_TIME, Int32 nEMAIL_REMINDER_TIME, Int32 nSMS_REMINDER_TIME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTASKS_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parASSIGNED_USER_ID    = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"   , gASSIGNED_USER_ID     );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
				IDbDataParameter parSTATUS              = Sql.AddParameter(cmd, "@STATUS"             , sSTATUS               ,  25);
				IDbDataParameter parDATE_TIME_DUE       = Sql.AddParameter(cmd, "@DATE_TIME_DUE"      , dtDATE_TIME_DUE       );
				IDbDataParameter parDATE_TIME_START     = Sql.AddParameter(cmd, "@DATE_TIME_START"    , dtDATE_TIME_START     );
				IDbDataParameter parPARENT_TYPE         = Sql.AddParameter(cmd, "@PARENT_TYPE"        , sPARENT_TYPE          ,  25);
				IDbDataParameter parPARENT_ID           = Sql.AddParameter(cmd, "@PARENT_ID"          , gPARENT_ID            );
				IDbDataParameter parCONTACT_ID          = Sql.AddParameter(cmd, "@CONTACT_ID"         , gCONTACT_ID           );
				IDbDataParameter parPRIORITY            = Sql.AddParameter(cmd, "@PRIORITY"           , sPRIORITY             ,  25);
				IDbDataParameter parDESCRIPTION         = Sql.AddParameter(cmd, "@DESCRIPTION"        , sDESCRIPTION          );
				IDbDataParameter parTEAM_ID             = Sql.AddParameter(cmd, "@TEAM_ID"            , gTEAM_ID              );
				IDbDataParameter parTEAM_SET_LIST       = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"      , sTEAM_SET_LIST        , 8000);
				IDbDataParameter parTAG_SET_NAME        = Sql.AddParameter(cmd, "@TAG_SET_NAME"       , sTAG_SET_NAME         , 4000);
				IDbDataParameter parREMINDER_TIME       = Sql.AddParameter(cmd, "@REMINDER_TIME"      , nREMINDER_TIME        );
				IDbDataParameter parEMAIL_REMINDER_TIME = Sql.AddParameter(cmd, "@EMAIL_REMINDER_TIME", nEMAIL_REMINDER_TIME  );
				IDbDataParameter parSMS_REMINDER_TIME   = Sql.AddParameter(cmd, "@SMS_REMINDER_TIME"  , nSMS_REMINDER_TIME    );
				IDbDataParameter parIS_PRIVATE          = Sql.AddParameter(cmd, "@IS_PRIVATE"         , bIS_PRIVATE           );
				IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTASKS_Update
		/// <summary>
		/// spTASKS_Update
		/// </summary>
		public IDbCommand cmdTASKS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTASKS_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID    = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"   , "Guid",  16);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string",  50);
			IDbDataParameter parSTATUS              = Sql.CreateParameter(cmd, "@STATUS"             , "string",  25);
			IDbDataParameter parDATE_TIME_DUE       = Sql.CreateParameter(cmd, "@DATE_TIME_DUE"      , "DateTime",   8);
			IDbDataParameter parDATE_TIME_START     = Sql.CreateParameter(cmd, "@DATE_TIME_START"    , "DateTime",   8);
			IDbDataParameter parPARENT_TYPE         = Sql.CreateParameter(cmd, "@PARENT_TYPE"        , "string",  25);
			IDbDataParameter parPARENT_ID           = Sql.CreateParameter(cmd, "@PARENT_ID"          , "Guid",  16);
			IDbDataParameter parCONTACT_ID          = Sql.CreateParameter(cmd, "@CONTACT_ID"         , "Guid",  16);
			IDbDataParameter parPRIORITY            = Sql.CreateParameter(cmd, "@PRIORITY"           , "string",  25);
			IDbDataParameter parDESCRIPTION         = Sql.CreateParameter(cmd, "@DESCRIPTION"        , "string", 104857600);
			IDbDataParameter parTEAM_ID             = Sql.CreateParameter(cmd, "@TEAM_ID"            , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST       = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"      , "ansistring", 8000);
			IDbDataParameter parTAG_SET_NAME        = Sql.CreateParameter(cmd, "@TAG_SET_NAME"       , "string", 4000);
			IDbDataParameter parREMINDER_TIME       = Sql.CreateParameter(cmd, "@REMINDER_TIME"      , "Int32",   4);
			IDbDataParameter parEMAIL_REMINDER_TIME = Sql.CreateParameter(cmd, "@EMAIL_REMINDER_TIME", "Int32",   4);
			IDbDataParameter parSMS_REMINDER_TIME   = Sql.CreateParameter(cmd, "@SMS_REMINDER_TIME"  , "Int32",   4);
			IDbDataParameter parIS_PRIVATE          = Sql.CreateParameter(cmd, "@IS_PRIVATE"         , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST   = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"  , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_DeleteUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_DeleteUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_DeleteUser(Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_MEMBERSHIPS_DeleteUser";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_DeleteUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_DeleteUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_DeleteUser(Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_MEMBERSHIPS_DeleteUser";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAM_MEMBERSHIPS_DeleteUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_DeleteUser
		/// </summary>
		public IDbCommand cmdTEAM_MEMBERSHIPS_DeleteUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_MEMBERSHIPS_DeleteUser";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_RefreshUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_RefreshUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_RefreshUser(Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_MEMBERSHIPS_RefreshUser";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_RefreshUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_RefreshUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_RefreshUser(Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_MEMBERSHIPS_RefreshUser";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAM_MEMBERSHIPS_RefreshUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_RefreshUser
		/// </summary>
		public IDbCommand cmdTEAM_MEMBERSHIPS_RefreshUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_MEMBERSHIPS_RefreshUser";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spTEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spTEAM_MEMBERSHIPS_Update(Guid gTEAM_ID, Guid gUSER_ID, bool bEXPLICIT_ASSIGN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_MEMBERSHIPS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parEXPLICIT_ASSIGN  = Sql.AddParameter(cmd, "@EXPLICIT_ASSIGN" , bEXPLICIT_ASSIGN   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spTEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spTEAM_MEMBERSHIPS_Update(Guid gTEAM_ID, Guid gUSER_ID, bool bEXPLICIT_ASSIGN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_MEMBERSHIPS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parEXPLICIT_ASSIGN  = Sql.AddParameter(cmd, "@EXPLICIT_ASSIGN" , bEXPLICIT_ASSIGN   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spTEAM_MEMBERSHIPS_Update
		/// </summary>
		public IDbCommand cmdTEAM_MEMBERSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_MEMBERSHIPS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parEXPLICIT_ASSIGN  = Sql.CreateParameter(cmd, "@EXPLICIT_ASSIGN" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spTEAM_SETS_AddSet
		/// <summary>
		/// spTEAM_SETS_AddSet
		/// </summary>
		public void spTEAM_SETS_AddSet(ref Guid gID, Guid gOLD_SET_ID, Guid gPRIMARY_TEAM_ID, Guid gNEW_SET_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_SETS_AddSet";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOLD_SET_ID       = Sql.AddParameter(cmd, "@OLD_SET_ID"      , gOLD_SET_ID        );
							IDbDataParameter parPRIMARY_TEAM_ID  = Sql.AddParameter(cmd, "@PRIMARY_TEAM_ID" , gPRIMARY_TEAM_ID   );
							IDbDataParameter parNEW_SET_ID       = Sql.AddParameter(cmd, "@NEW_SET_ID"      , gNEW_SET_ID        );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_SETS_AddSet
		/// <summary>
		/// spTEAM_SETS_AddSet
		/// </summary>
		public void spTEAM_SETS_AddSet(ref Guid gID, Guid gOLD_SET_ID, Guid gPRIMARY_TEAM_ID, Guid gNEW_SET_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_SETS_AddSet";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOLD_SET_ID       = Sql.AddParameter(cmd, "@OLD_SET_ID"      , gOLD_SET_ID        );
				IDbDataParameter parPRIMARY_TEAM_ID  = Sql.AddParameter(cmd, "@PRIMARY_TEAM_ID" , gPRIMARY_TEAM_ID   );
				IDbDataParameter parNEW_SET_ID       = Sql.AddParameter(cmd, "@NEW_SET_ID"      , gNEW_SET_ID        );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTEAM_SETS_AddSet
		/// <summary>
		/// spTEAM_SETS_AddSet
		/// </summary>
		public IDbCommand cmdTEAM_SETS_AddSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_SETS_AddSet";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOLD_SET_ID       = Sql.CreateParameter(cmd, "@OLD_SET_ID"      , "Guid",  16);
			IDbDataParameter parPRIMARY_TEAM_ID  = Sql.CreateParameter(cmd, "@PRIMARY_TEAM_ID" , "Guid",  16);
			IDbDataParameter parNEW_SET_ID       = Sql.CreateParameter(cmd, "@NEW_SET_ID"      , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTEAM_SETS_NormalizeSet
		/// <summary>
		/// spTEAM_SETS_NormalizeSet
		/// </summary>
		public void spTEAM_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_TEAM_ID, string sTEAM_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_SETS_NormalizeSet";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPRIMARY_TEAM_ID  = Sql.AddParameter(cmd, "@PRIMARY_TEAM_ID" , gPRIMARY_TEAM_ID   );
							IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_SETS_NormalizeSet
		/// <summary>
		/// spTEAM_SETS_NormalizeSet
		/// </summary>
		public void spTEAM_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_TEAM_ID, string sTEAM_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_SETS_NormalizeSet";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPRIMARY_TEAM_ID  = Sql.AddParameter(cmd, "@PRIMARY_TEAM_ID" , gPRIMARY_TEAM_ID   );
				IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTEAM_SETS_NormalizeSet
		/// <summary>
		/// spTEAM_SETS_NormalizeSet
		/// </summary>
		public IDbCommand cmdTEAM_SETS_NormalizeSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_SETS_NormalizeSet";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPRIMARY_TEAM_ID  = Sql.CreateParameter(cmd, "@PRIMARY_TEAM_ID" , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST    = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"   , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTEAM_SETS_UpdateNames
		/// <summary>
		/// spTEAM_SETS_UpdateNames
		/// </summary>
		public void spTEAM_SETS_UpdateNames(Guid gTEAM_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_SETS_UpdateNames";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_SETS_UpdateNames
		/// <summary>
		/// spTEAM_SETS_UpdateNames
		/// </summary>
		public void spTEAM_SETS_UpdateNames(Guid gTEAM_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_SETS_UpdateNames";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAM_SETS_UpdateNames
		/// <summary>
		/// spTEAM_SETS_UpdateNames
		/// </summary>
		public IDbCommand cmdTEAM_SETS_UpdateNames(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_SETS_UpdateNames";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTEAMS_InitPrivate
		/// <summary>
		/// spTEAMS_InitPrivate
		/// </summary>
		public void spTEAMS_InitPrivate()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAMS_InitPrivate";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAMS_InitPrivate
		/// <summary>
		/// spTEAMS_InitPrivate
		/// </summary>
		public void spTEAMS_InitPrivate(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAMS_InitPrivate";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAMS_InitPrivate
		/// <summary>
		/// spTEAMS_InitPrivate
		/// </summary>
		public IDbCommand cmdTEAMS_InitPrivate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAMS_InitPrivate";
			return cmd;
		}
		#endregion

		#region spTEAMS_InsertOnly
		/// <summary>
		/// spTEAMS_InsertOnly
		/// </summary>
		public void spTEAMS_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAMS_InsertOnly";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 128);
							IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAMS_InsertOnly
		/// <summary>
		/// spTEAMS_InsertOnly
		/// </summary>
		public void spTEAMS_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAMS_InsertOnly";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 128);
				IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAMS_InsertOnly
		/// <summary>
		/// spTEAMS_InsertOnly
		/// </summary>
		public IDbCommand cmdTEAMS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAMS_InsertOnly";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parNAME        = Sql.CreateParameter(cmd, "@NAME"       , "string", 128);
			IDbDataParameter parDESCRIPTION = Sql.CreateParameter(cmd, "@DESCRIPTION", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spTEAMS_InsertPrivate
		/// <summary>
		/// spTEAMS_InsertPrivate
		/// </summary>
		public void spTEAMS_InsertPrivate(Guid gUSER_ID, string sUSER_NAME, string sFULL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAMS_InsertPrivate";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  20);
							IDbDataParameter parFULL_NAME        = Sql.AddParameter(cmd, "@FULL_NAME"       , sFULL_NAME         , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAMS_InsertPrivate
		/// <summary>
		/// spTEAMS_InsertPrivate
		/// </summary>
		public void spTEAMS_InsertPrivate(Guid gUSER_ID, string sUSER_NAME, string sFULL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAMS_InsertPrivate";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  20);
				IDbDataParameter parFULL_NAME        = Sql.AddParameter(cmd, "@FULL_NAME"       , sFULL_NAME         , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAMS_InsertPrivate
		/// <summary>
		/// spTEAMS_InsertPrivate
		/// </summary>
		public IDbCommand cmdTEAMS_InsertPrivate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAMS_InsertPrivate";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  20);
			IDbDataParameter parFULL_NAME        = Sql.CreateParameter(cmd, "@FULL_NAME"       , "string", 100);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Delete
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Delete
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_ALIASES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Delete
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Delete
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_ALIASES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_ALIASES_Delete
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Delete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_ALIASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_ALIASES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_ALIASES_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_ALIASES_InsertOnly(string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOn";
							else
								cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
							IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
							IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
							IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_ALIASES_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_ALIASES_InsertOnly(string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOn";
				else
					cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
				IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
				IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
				IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_ALIASES_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_ALIASES_InsertOnly
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_ALIASES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOn";
			else
				cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parALIAS_NAME        = Sql.CreateParameter(cmd, "@ALIAS_NAME"       , "string",  50);
			IDbDataParameter parALIAS_MODULE_NAME = Sql.CreateParameter(cmd, "@ALIAS_MODULE_NAME", "string",  25);
			IDbDataParameter parALIAS_LIST_NAME   = Sql.CreateParameter(cmd, "@ALIAS_LIST_NAME"  , "string",  50);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parMODULE_NAME       = Sql.CreateParameter(cmd, "@MODULE_NAME"      , "string",  25);
			IDbDataParameter parLIST_NAME         = Sql.CreateParameter(cmd, "@LIST_NAME"        , "string",  50);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Update
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Update
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Update(ref Guid gID, string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_ALIASES_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
							IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
							IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
							IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Update
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Update
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Update(ref Guid gID, string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_ALIASES_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
				IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
				IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
				IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTERMINOLOGY_ALIASES_Update
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Update
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_ALIASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_ALIASES_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parALIAS_NAME        = Sql.CreateParameter(cmd, "@ALIAS_NAME"       , "string",  50);
			IDbDataParameter parALIAS_MODULE_NAME = Sql.CreateParameter(cmd, "@ALIAS_MODULE_NAME", "string",  25);
			IDbDataParameter parALIAS_LIST_NAME   = Sql.CreateParameter(cmd, "@ALIAS_LIST_NAME"  , "string",  50);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parMODULE_NAME       = Sql.CreateParameter(cmd, "@MODULE_NAME"      , "string",  25);
			IDbDataParameter parLIST_NAME         = Sql.CreateParameter(cmd, "@LIST_NAME"        , "string",  50);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_Delete
		/// <summary>
		/// spTERMINOLOGY_Delete
		/// </summary>
		public void spTERMINOLOGY_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_Delete
		/// <summary>
		/// spTERMINOLOGY_Delete
		/// </summary>
		public void spTERMINOLOGY_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_Delete
		/// <summary>
		/// spTERMINOLOGY_Delete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteAll
		/// <summary>
		/// spTERMINOLOGY_DeleteAll
		/// </summary>
		public void spTERMINOLOGY_DeleteAll(string sLANG)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteAll";
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteAll
		/// <summary>
		/// spTERMINOLOGY_DeleteAll
		/// </summary>
		public void spTERMINOLOGY_DeleteAll(string sLANG, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteAll";
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteAll
		/// <summary>
		/// spTERMINOLOGY_DeleteAll
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteAll";
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteList
		/// <summary>
		/// spTERMINOLOGY_DeleteList
		/// </summary>
		public void spTERMINOLOGY_DeleteList(string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteList";
							IDbDataParameter parLIST_NAME = Sql.AddParameter(cmd, "@LIST_NAME", sLIST_NAME  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteList
		/// <summary>
		/// spTERMINOLOGY_DeleteList
		/// </summary>
		public void spTERMINOLOGY_DeleteList(string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteList";
				IDbDataParameter parLIST_NAME = Sql.AddParameter(cmd, "@LIST_NAME", sLIST_NAME  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteList
		/// <summary>
		/// spTERMINOLOGY_DeleteList
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteList";
			IDbDataParameter parLIST_NAME = Sql.CreateParameter(cmd, "@LIST_NAME", "string",  50);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteModule
		/// <summary>
		/// spTERMINOLOGY_DeleteModule
		/// </summary>
		public void spTERMINOLOGY_DeleteModule(string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteModule";
							IDbDataParameter parMODULE_NAME = Sql.AddParameter(cmd, "@MODULE_NAME", sMODULE_NAME  ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteModule
		/// <summary>
		/// spTERMINOLOGY_DeleteModule
		/// </summary>
		public void spTERMINOLOGY_DeleteModule(string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteModule";
				IDbDataParameter parMODULE_NAME = Sql.AddParameter(cmd, "@MODULE_NAME", sMODULE_NAME  ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteModule
		/// <summary>
		/// spTERMINOLOGY_DeleteModule
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteModule(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteModule";
			IDbDataParameter parMODULE_NAME = Sql.CreateParameter(cmd, "@MODULE_NAME", "string",  25);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteTerm
		/// <summary>
		/// spTERMINOLOGY_DeleteTerm
		/// </summary>
		public void spTERMINOLOGY_DeleteTerm(string sTERM)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteTerm";
							IDbDataParameter parTERM = Sql.AddParameter(cmd, "@TERM", sTERM  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteTerm
		/// <summary>
		/// spTERMINOLOGY_DeleteTerm
		/// </summary>
		public void spTERMINOLOGY_DeleteTerm(string sTERM, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteTerm";
				IDbDataParameter parTERM = Sql.AddParameter(cmd, "@TERM", sTERM  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteTerm
		/// <summary>
		/// spTERMINOLOGY_DeleteTerm
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteTerm(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteTerm";
			IDbDataParameter parTERM = Sql.CreateParameter(cmd, "@TERM", "string", 100);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_HELP_Delete
		/// <summary>
		/// spTERMINOLOGY_HELP_Delete
		/// </summary>
		public void spTERMINOLOGY_HELP_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_HELP_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_HELP_Delete
		/// <summary>
		/// spTERMINOLOGY_HELP_Delete
		/// </summary>
		public void spTERMINOLOGY_HELP_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_HELP_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_HELP_Delete
		/// <summary>
		/// spTERMINOLOGY_HELP_Delete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_HELP_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_HELP_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_HELP_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_HELP_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_HELP_InsertOnly(string sNAME, string sLANG, string sMODULE_NAME, string sDISPLAY_TEXT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_HELP_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
							IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parDISPLAY_TEXT = Sql.AddParameter(cmd, "@DISPLAY_TEXT", sDISPLAY_TEXT  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_HELP_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_HELP_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_HELP_InsertOnly(string sNAME, string sLANG, string sMODULE_NAME, string sDISPLAY_TEXT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_HELP_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
				IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parDISPLAY_TEXT = Sql.AddParameter(cmd, "@DISPLAY_TEXT", sDISPLAY_TEXT  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_HELP_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_HELP_InsertOnly
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_HELP_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_HELP_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string",  50);
			IDbDataParameter parLANG         = Sql.CreateParameter(cmd, "@LANG"        , "string",  10);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parDISPLAY_TEXT = Sql.CreateParameter(cmd, "@DISPLAY_TEXT", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_HELP_Update
		/// <summary>
		/// spTERMINOLOGY_HELP_Update
		/// </summary>
		public void spTERMINOLOGY_HELP_Update(ref Guid gID, string sNAME, string sLANG, string sMODULE_NAME, string sDISPLAY_TEXT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_HELP_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parDISPLAY_TEXT     = Sql.AddParameter(cmd, "@DISPLAY_TEXT"    , sDISPLAY_TEXT      );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_HELP_Update
		/// <summary>
		/// spTERMINOLOGY_HELP_Update
		/// </summary>
		public void spTERMINOLOGY_HELP_Update(ref Guid gID, string sNAME, string sLANG, string sMODULE_NAME, string sDISPLAY_TEXT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_HELP_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parDISPLAY_TEXT     = Sql.AddParameter(cmd, "@DISPLAY_TEXT"    , sDISPLAY_TEXT      );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTERMINOLOGY_HELP_Update
		/// <summary>
		/// spTERMINOLOGY_HELP_Update
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_HELP_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_HELP_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parDISPLAY_TEXT     = Sql.CreateParameter(cmd, "@DISPLAY_TEXT"    , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_InsertOnly(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
							IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
							IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
							IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_InsertOnly(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
				IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
				IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
				IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_InsertOnly
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string", 150);
			IDbDataParameter parLANG         = Sql.CreateParameter(cmd, "@LANG"        , "string",  10);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parLIST_NAME    = Sql.CreateParameter(cmd, "@LIST_NAME"   , "string",  50);
			IDbDataParameter parLIST_ORDER   = Sql.CreateParameter(cmd, "@LIST_ORDER"  , "Int32",   4);
			IDbDataParameter parDISPLAY_NAME = Sql.CreateParameter(cmd, "@DISPLAY_NAME", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_Delete
		/// <summary>
		/// spTERMINOLOGY_LIST_Delete
		/// </summary>
		public void spTERMINOLOGY_LIST_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_Delete
		/// <summary>
		/// spTERMINOLOGY_LIST_Delete
		/// </summary>
		public void spTERMINOLOGY_LIST_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_Delete
		/// <summary>
		/// spTERMINOLOGY_LIST_Delete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_Insert
		/// <summary>
		/// spTERMINOLOGY_LIST_Insert
		/// </summary>
		public void spTERMINOLOGY_LIST_Insert(ref Guid gID, string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							IDbDataParameter parLIST_ORDER       = Sql.AddParameter(cmd, "@LIST_ORDER"      , nLIST_ORDER        );
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_Insert
		/// <summary>
		/// spTERMINOLOGY_LIST_Insert
		/// </summary>
		public void spTERMINOLOGY_LIST_Insert(ref Guid gID, string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				IDbDataParameter parLIST_ORDER       = Sql.AddParameter(cmd, "@LIST_ORDER"      , nLIST_ORDER        );
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_Insert
		/// <summary>
		/// spTERMINOLOGY_LIST_Insert
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			IDbDataParameter parLIST_ORDER       = Sql.CreateParameter(cmd, "@LIST_ORDER"      , "Int32",   4);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveDown
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveDown
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveDown
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveDown
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_MoveDown
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveDown
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveItem
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveItem
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveItem(string sLANG, string sLIST_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveItem
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveItem
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveItem(string sLANG, string sLIST_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_MoveItem
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveItem
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveUp
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveUp
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveUp
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveUp
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_MoveUp
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveUp
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_Reorder
		/// <summary>
		/// spTERMINOLOGY_LIST_Reorder
		/// </summary>
		public void spTERMINOLOGY_LIST_Reorder(string sLANG, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_Reorder
		/// <summary>
		/// spTERMINOLOGY_LIST_Reorder
		/// </summary>
		public void spTERMINOLOGY_LIST_Reorder(string sLANG, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_Reorder
		/// <summary>
		/// spTERMINOLOGY_LIST_Reorder
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_ReorderAll
		/// <summary>
		/// spTERMINOLOGY_LIST_ReorderAll
		/// </summary>
		public void spTERMINOLOGY_LIST_ReorderAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_ReorderAll";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_ReorderAll
		/// <summary>
		/// spTERMINOLOGY_LIST_ReorderAll
		/// </summary>
		public void spTERMINOLOGY_LIST_ReorderAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_ReorderAll";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_ReorderAll
		/// <summary>
		/// spTERMINOLOGY_LIST_ReorderAll
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_ReorderAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_ReorderAll";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_MassDelete
		/// <summary>
		/// spTERMINOLOGY_MassDelete
		/// </summary>
		public void spTERMINOLOGY_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_MassDelete
		/// <summary>
		/// spTERMINOLOGY_MassDelete
		/// </summary>
		public void spTERMINOLOGY_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_MassDelete
		/// <summary>
		/// spTERMINOLOGY_MassDelete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_Update
		/// <summary>
		/// spTERMINOLOGY_Update
		/// </summary>
		public void spTERMINOLOGY_Update(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_Update";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
							IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
							IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
							IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_Update
		/// <summary>
		/// spTERMINOLOGY_Update
		/// </summary>
		public void spTERMINOLOGY_Update(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_Update";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
				IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
				IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
				IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_Update
		/// <summary>
		/// spTERMINOLOGY_Update
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_Update";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string", 150);
			IDbDataParameter parLANG         = Sql.CreateParameter(cmd, "@LANG"        , "string",  10);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parLIST_NAME    = Sql.CreateParameter(cmd, "@LIST_NAME"   , "string",  50);
			IDbDataParameter parLIST_ORDER   = Sql.CreateParameter(cmd, "@LIST_ORDER"  , "Int32",   4);
			IDbDataParameter parDISPLAY_NAME = Sql.CreateParameter(cmd, "@DISPLAY_NAME", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spTIMEZONES_Delete
		/// <summary>
		/// spTIMEZONES_Delete
		/// </summary>
		public void spTIMEZONES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_Delete
		/// <summary>
		/// spTIMEZONES_Delete
		/// </summary>
		public void spTIMEZONES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTIMEZONES_Delete
		/// <summary>
		/// spTIMEZONES_Delete
		/// </summary>
		public IDbCommand cmdTIMEZONES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTIMEZONES_InsertOnly
		/// <summary>
		/// spTIMEZONES_InsertOnly
		/// </summary>
		public void spTIMEZONES_InsertOnly(Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_InsertOnly";
							IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
							IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
							IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
							IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
							IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
							IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
							IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
							IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
							IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
							IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
							IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
							IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
							IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
							IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
							IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
							IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
							IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
							IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
							IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
							IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
							IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
							IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
							IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
							IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_InsertOnly
		/// <summary>
		/// spTIMEZONES_InsertOnly
		/// </summary>
		public void spTIMEZONES_InsertOnly(Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_InsertOnly";
				IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
				IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
				IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
				IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
				IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
				IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
				IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
				IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
				IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
				IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
				IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
				IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
				IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
				IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
				IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
				IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
				IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
				IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
				IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
				IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
				IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
				IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
				IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
				IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTIMEZONES_InsertOnly
		/// <summary>
		/// spTIMEZONES_InsertOnly
		/// </summary>
		public IDbCommand cmdTIMEZONES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_InsertOnly";
			IDbDataParameter parID                    = Sql.CreateParameter(cmd, "@ID"                   , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID      = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"     , "Guid",  16);
			IDbDataParameter parNAME                  = Sql.CreateParameter(cmd, "@NAME"                 , "string", 100);
			IDbDataParameter parSTANDARD_NAME         = Sql.CreateParameter(cmd, "@STANDARD_NAME"        , "string", 100);
			IDbDataParameter parSTANDARD_ABBREVIATION = Sql.CreateParameter(cmd, "@STANDARD_ABBREVIATION", "string",  10);
			IDbDataParameter parDAYLIGHT_NAME         = Sql.CreateParameter(cmd, "@DAYLIGHT_NAME"        , "string", 100);
			IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.CreateParameter(cmd, "@DAYLIGHT_ABBREVIATION", "string",  10);
			IDbDataParameter parBIAS                  = Sql.CreateParameter(cmd, "@BIAS"                 , "Int32",   4);
			IDbDataParameter parSTANDARD_BIAS         = Sql.CreateParameter(cmd, "@STANDARD_BIAS"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_BIAS         = Sql.CreateParameter(cmd, "@DAYLIGHT_BIAS"        , "Int32",   4);
			IDbDataParameter parSTANDARD_YEAR         = Sql.CreateParameter(cmd, "@STANDARD_YEAR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MONTH        = Sql.CreateParameter(cmd, "@STANDARD_MONTH"       , "Int32",   4);
			IDbDataParameter parSTANDARD_WEEK         = Sql.CreateParameter(cmd, "@STANDARD_WEEK"        , "Int32",   4);
			IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.CreateParameter(cmd, "@STANDARD_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parSTANDARD_HOUR         = Sql.CreateParameter(cmd, "@STANDARD_HOUR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MINUTE       = Sql.CreateParameter(cmd, "@STANDARD_MINUTE"      , "Int32",   4);
			IDbDataParameter parDAYLIGHT_YEAR         = Sql.CreateParameter(cmd, "@DAYLIGHT_YEAR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MONTH        = Sql.CreateParameter(cmd, "@DAYLIGHT_MONTH"       , "Int32",   4);
			IDbDataParameter parDAYLIGHT_WEEK         = Sql.CreateParameter(cmd, "@DAYLIGHT_WEEK"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.CreateParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parDAYLIGHT_HOUR         = Sql.CreateParameter(cmd, "@DAYLIGHT_HOUR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MINUTE       = Sql.CreateParameter(cmd, "@DAYLIGHT_MINUTE"      , "Int32",   4);
			IDbDataParameter parTZID                  = Sql.CreateParameter(cmd, "@TZID"                 , "string",  50);
			IDbDataParameter parLINKED_TIMEZONE       = Sql.CreateParameter(cmd, "@LINKED_TIMEZONE"      , "string",  50);
			return cmd;
		}
		#endregion

		#region spTIMEZONES_Update
		/// <summary>
		/// spTIMEZONES_Update
		/// </summary>
		public void spTIMEZONES_Update(ref Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_Update";
							IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
							IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
							IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
							IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
							IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
							IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
							IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
							IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
							IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
							IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
							IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
							IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
							IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
							IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
							IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
							IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
							IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
							IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
							IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
							IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
							IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
							IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
							IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
							IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_Update
		/// <summary>
		/// spTIMEZONES_Update
		/// </summary>
		public void spTIMEZONES_Update(ref Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_Update";
				IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
				IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
				IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
				IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
				IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
				IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
				IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
				IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
				IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
				IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
				IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
				IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
				IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
				IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
				IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
				IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
				IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
				IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
				IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
				IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
				IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
				IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
				IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
				IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTIMEZONES_Update
		/// <summary>
		/// spTIMEZONES_Update
		/// </summary>
		public IDbCommand cmdTIMEZONES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_Update";
			IDbDataParameter parID                    = Sql.CreateParameter(cmd, "@ID"                   , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID      = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"     , "Guid",  16);
			IDbDataParameter parNAME                  = Sql.CreateParameter(cmd, "@NAME"                 , "string", 100);
			IDbDataParameter parSTANDARD_NAME         = Sql.CreateParameter(cmd, "@STANDARD_NAME"        , "string", 100);
			IDbDataParameter parSTANDARD_ABBREVIATION = Sql.CreateParameter(cmd, "@STANDARD_ABBREVIATION", "string",  10);
			IDbDataParameter parDAYLIGHT_NAME         = Sql.CreateParameter(cmd, "@DAYLIGHT_NAME"        , "string", 100);
			IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.CreateParameter(cmd, "@DAYLIGHT_ABBREVIATION", "string",  10);
			IDbDataParameter parBIAS                  = Sql.CreateParameter(cmd, "@BIAS"                 , "Int32",   4);
			IDbDataParameter parSTANDARD_BIAS         = Sql.CreateParameter(cmd, "@STANDARD_BIAS"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_BIAS         = Sql.CreateParameter(cmd, "@DAYLIGHT_BIAS"        , "Int32",   4);
			IDbDataParameter parSTANDARD_YEAR         = Sql.CreateParameter(cmd, "@STANDARD_YEAR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MONTH        = Sql.CreateParameter(cmd, "@STANDARD_MONTH"       , "Int32",   4);
			IDbDataParameter parSTANDARD_WEEK         = Sql.CreateParameter(cmd, "@STANDARD_WEEK"        , "Int32",   4);
			IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.CreateParameter(cmd, "@STANDARD_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parSTANDARD_HOUR         = Sql.CreateParameter(cmd, "@STANDARD_HOUR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MINUTE       = Sql.CreateParameter(cmd, "@STANDARD_MINUTE"      , "Int32",   4);
			IDbDataParameter parDAYLIGHT_YEAR         = Sql.CreateParameter(cmd, "@DAYLIGHT_YEAR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MONTH        = Sql.CreateParameter(cmd, "@DAYLIGHT_MONTH"       , "Int32",   4);
			IDbDataParameter parDAYLIGHT_WEEK         = Sql.CreateParameter(cmd, "@DAYLIGHT_WEEK"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.CreateParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parDAYLIGHT_HOUR         = Sql.CreateParameter(cmd, "@DAYLIGHT_HOUR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MINUTE       = Sql.CreateParameter(cmd, "@DAYLIGHT_MINUTE"      , "Int32",   4);
			IDbDataParameter parTZID                  = Sql.CreateParameter(cmd, "@TZID"                 , "string",  50);
			IDbDataParameter parLINKED_TIMEZONE       = Sql.CreateParameter(cmd, "@LINKED_TIMEZONE"      , "string",  50);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTIMEZONES_UpdateByName
		/// <summary>
		/// spTIMEZONES_UpdateByName
		/// </summary>
		public void spTIMEZONES_UpdateByName(string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_UpdateByName";
							IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
							IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
							IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
							IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
							IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
							IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
							IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
							IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
							IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
							IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
							IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
							IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
							IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
							IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
							IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
							IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
							IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
							IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
							IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
							IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
							IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_UpdateByName
		/// <summary>
		/// spTIMEZONES_UpdateByName
		/// </summary>
		public void spTIMEZONES_UpdateByName(string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_UpdateByName";
				IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
				IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
				IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
				IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
				IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
				IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
				IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
				IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
				IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
				IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
				IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
				IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
				IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
				IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
				IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
				IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
				IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
				IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
				IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
				IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
				IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTIMEZONES_UpdateByName
		/// <summary>
		/// spTIMEZONES_UpdateByName
		/// </summary>
		public IDbCommand cmdTIMEZONES_UpdateByName(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_UpdateByName";
			IDbDataParameter parMODIFIED_USER_ID      = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"     , "Guid",  16);
			IDbDataParameter parNAME                  = Sql.CreateParameter(cmd, "@NAME"                 , "string", 100);
			IDbDataParameter parSTANDARD_NAME         = Sql.CreateParameter(cmd, "@STANDARD_NAME"        , "string", 100);
			IDbDataParameter parSTANDARD_ABBREVIATION = Sql.CreateParameter(cmd, "@STANDARD_ABBREVIATION", "string",  10);
			IDbDataParameter parDAYLIGHT_NAME         = Sql.CreateParameter(cmd, "@DAYLIGHT_NAME"        , "string", 100);
			IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.CreateParameter(cmd, "@DAYLIGHT_ABBREVIATION", "string",  10);
			IDbDataParameter parBIAS                  = Sql.CreateParameter(cmd, "@BIAS"                 , "Int32",   4);
			IDbDataParameter parSTANDARD_BIAS         = Sql.CreateParameter(cmd, "@STANDARD_BIAS"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_BIAS         = Sql.CreateParameter(cmd, "@DAYLIGHT_BIAS"        , "Int32",   4);
			IDbDataParameter parSTANDARD_YEAR         = Sql.CreateParameter(cmd, "@STANDARD_YEAR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MONTH        = Sql.CreateParameter(cmd, "@STANDARD_MONTH"       , "Int32",   4);
			IDbDataParameter parSTANDARD_WEEK         = Sql.CreateParameter(cmd, "@STANDARD_WEEK"        , "Int32",   4);
			IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.CreateParameter(cmd, "@STANDARD_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parSTANDARD_HOUR         = Sql.CreateParameter(cmd, "@STANDARD_HOUR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MINUTE       = Sql.CreateParameter(cmd, "@STANDARD_MINUTE"      , "Int32",   4);
			IDbDataParameter parDAYLIGHT_YEAR         = Sql.CreateParameter(cmd, "@DAYLIGHT_YEAR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MONTH        = Sql.CreateParameter(cmd, "@DAYLIGHT_MONTH"       , "Int32",   4);
			IDbDataParameter parDAYLIGHT_WEEK         = Sql.CreateParameter(cmd, "@DAYLIGHT_WEEK"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.CreateParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parDAYLIGHT_HOUR         = Sql.CreateParameter(cmd, "@DAYLIGHT_HOUR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MINUTE       = Sql.CreateParameter(cmd, "@DAYLIGHT_MINUTE"      , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spTRACKER_Delete
		/// <summary>
		/// spTRACKER_Delete
		/// </summary>
		public void spTRACKER_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTRACKER_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTRACKER_Delete
		/// <summary>
		/// spTRACKER_Delete
		/// </summary>
		public void spTRACKER_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTRACKER_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTRACKER_Delete
		/// <summary>
		/// spTRACKER_Delete
		/// </summary>
		public IDbCommand cmdTRACKER_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTRACKER_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTRACKER_Update
		/// <summary>
		/// spTRACKER_Update
		/// </summary>
		public void spTRACKER_Update(Guid gUSER_ID, string sMODULE_NAME, Guid gITEM_ID, string sITEM_SUMMARY, string sACTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTRACKER_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parITEM_ID          = Sql.AddParameter(cmd, "@ITEM_ID"         , gITEM_ID           );
							IDbDataParameter parITEM_SUMMARY     = Sql.AddParameter(cmd, "@ITEM_SUMMARY"    , sITEM_SUMMARY      , 255);
							IDbDataParameter parACTION           = Sql.AddParameter(cmd, "@ACTION"          , sACTION            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTRACKER_Update
		/// <summary>
		/// spTRACKER_Update
		/// </summary>
		public void spTRACKER_Update(Guid gUSER_ID, string sMODULE_NAME, Guid gITEM_ID, string sITEM_SUMMARY, string sACTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTRACKER_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parITEM_ID          = Sql.AddParameter(cmd, "@ITEM_ID"         , gITEM_ID           );
				IDbDataParameter parITEM_SUMMARY     = Sql.AddParameter(cmd, "@ITEM_SUMMARY"    , sITEM_SUMMARY      , 255);
				IDbDataParameter parACTION           = Sql.AddParameter(cmd, "@ACTION"          , sACTION            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTRACKER_Update
		/// <summary>
		/// spTRACKER_Update
		/// </summary>
		public IDbCommand cmdTRACKER_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTRACKER_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parITEM_ID          = Sql.CreateParameter(cmd, "@ITEM_ID"         , "Guid",  16);
			IDbDataParameter parITEM_SUMMARY     = Sql.CreateParameter(cmd, "@ITEM_SUMMARY"    , "string", 255);
			IDbDataParameter parACTION           = Sql.CreateParameter(cmd, "@ACTION"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spTWITTER_MESSAGES_Delete
		/// <summary>
		/// spTWITTER_MESSAGES_Delete
		/// </summary>
		public void spTWITTER_MESSAGES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTWITTER_MESSAGES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTWITTER_MESSAGES_Delete
		/// <summary>
		/// spTWITTER_MESSAGES_Delete
		/// </summary>
		public void spTWITTER_MESSAGES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTWITTER_MESSAGES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTWITTER_MESSAGES_Delete
		/// <summary>
		/// spTWITTER_MESSAGES_Delete
		/// </summary>
		public IDbCommand cmdTWITTER_MESSAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTWITTER_MESSAGES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTWITTER_MESSAGES_MassDelete
		/// <summary>
		/// spTWITTER_MESSAGES_MassDelete
		/// </summary>
		public void spTWITTER_MESSAGES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTWITTER_MESSAGES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTWITTER_MESSAGES_MassDelete
		/// <summary>
		/// spTWITTER_MESSAGES_MassDelete
		/// </summary>
		public void spTWITTER_MESSAGES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTWITTER_MESSAGES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTWITTER_MESSAGES_MassDelete
		/// <summary>
		/// spTWITTER_MESSAGES_MassDelete
		/// </summary>
		public IDbCommand cmdTWITTER_MESSAGES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTWITTER_MESSAGES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTWITTER_MESSAGES_MassUpdate
		/// <summary>
		/// spTWITTER_MESSAGES_MassUpdate
		/// </summary>
		public void spTWITTER_MESSAGES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTWITTER_MESSAGES_MassUpdate";
							IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTWITTER_MESSAGES_MassUpdate
		/// <summary>
		/// spTWITTER_MESSAGES_MassUpdate
		/// </summary>
		public void spTWITTER_MESSAGES_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, bool bTEAM_SET_ADD, string sASSIGNED_SET_LIST, bool bASSIGNED_SET_ADD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTWITTER_MESSAGES_MassUpdate";
				IDbDataParameter parID_LIST           = Sql.AddAnsiParam(cmd, "@ID_LIST"          , sID_LIST            , 8000);
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parTEAM_SET_ADD      = Sql.AddParameter(cmd, "@TEAM_SET_ADD"     , bTEAM_SET_ADD       );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				IDbDataParameter parASSIGNED_SET_ADD  = Sql.AddParameter(cmd, "@ASSIGNED_SET_ADD" , bASSIGNED_SET_ADD   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTWITTER_MESSAGES_MassUpdate
		/// <summary>
		/// spTWITTER_MESSAGES_MassUpdate
		/// </summary>
		public IDbCommand cmdTWITTER_MESSAGES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTWITTER_MESSAGES_MassUpdate";
			IDbDataParameter parID_LIST           = Sql.CreateParameter(cmd, "@ID_LIST"          , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parTEAM_SET_ADD      = Sql.CreateParameter(cmd, "@TEAM_SET_ADD"     , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			IDbDataParameter parASSIGNED_SET_ADD  = Sql.CreateParameter(cmd, "@ASSIGNED_SET_ADD" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spTWITTER_MESSAGES_Undelete
		/// <summary>
		/// spTWITTER_MESSAGES_Undelete
		/// </summary>
		public void spTWITTER_MESSAGES_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTWITTER_MESSAGES_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTWITTER_MESSAGES_Undelete
		/// <summary>
		/// spTWITTER_MESSAGES_Undelete
		/// </summary>
		public void spTWITTER_MESSAGES_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTWITTER_MESSAGES_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTWITTER_MESSAGES_Undelete
		/// <summary>
		/// spTWITTER_MESSAGES_Undelete
		/// </summary>
		public IDbCommand cmdTWITTER_MESSAGES_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTWITTER_MESSAGES_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spTWITTER_MESSAGES_Update
		/// <summary>
		/// spTWITTER_MESSAGES_Update
		/// </summary>
		public void spTWITTER_MESSAGES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sNAME, string sDESCRIPTION, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sTYPE, Int64 lTWITTER_ID, Int64 lTWITTER_USER_ID, string sTWITTER_FULL_NAME, string sTWITTER_SCREEN_NAME, Int64 lORIGINAL_ID, Int64 lORIGINAL_USER_ID, string sORIGINAL_FULL_NAME, string sORIGINAL_SCREEN_NAME, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTWITTER_MESSAGES_Update";
							IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
							IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
							IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
							IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
							IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
							IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  , 420);
							IDbDataParameter parDESCRIPTION          = Sql.AddParameter(cmd, "@DESCRIPTION"         , sDESCRIPTION           );
							IDbDataParameter parDATE_TIME            = Sql.AddParameter(cmd, "@DATE_TIME"           , dtDATE_TIME            );
							IDbDataParameter parPARENT_TYPE          = Sql.AddParameter(cmd, "@PARENT_TYPE"         , sPARENT_TYPE           ,  25);
							IDbDataParameter parPARENT_ID            = Sql.AddParameter(cmd, "@PARENT_ID"           , gPARENT_ID             );
							IDbDataParameter parTYPE                 = Sql.AddParameter(cmd, "@TYPE"                , sTYPE                  ,  25);
							IDbDataParameter parTWITTER_ID           = Sql.AddParameter(cmd, "@TWITTER_ID"          , lTWITTER_ID            );
							IDbDataParameter parTWITTER_USER_ID      = Sql.AddParameter(cmd, "@TWITTER_USER_ID"     , lTWITTER_USER_ID       );
							IDbDataParameter parTWITTER_FULL_NAME    = Sql.AddParameter(cmd, "@TWITTER_FULL_NAME"   , sTWITTER_FULL_NAME     ,  50);
							IDbDataParameter parTWITTER_SCREEN_NAME  = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME" , sTWITTER_SCREEN_NAME   ,  50);
							IDbDataParameter parORIGINAL_ID          = Sql.AddParameter(cmd, "@ORIGINAL_ID"         , lORIGINAL_ID           );
							IDbDataParameter parORIGINAL_USER_ID     = Sql.AddParameter(cmd, "@ORIGINAL_USER_ID"    , lORIGINAL_USER_ID      );
							IDbDataParameter parORIGINAL_FULL_NAME   = Sql.AddParameter(cmd, "@ORIGINAL_FULL_NAME"  , sORIGINAL_FULL_NAME    ,  50);
							IDbDataParameter parORIGINAL_SCREEN_NAME = Sql.AddParameter(cmd, "@ORIGINAL_SCREEN_NAME", sORIGINAL_SCREEN_NAME  ,  50);
							IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
							IDbDataParameter parIS_PRIVATE           = Sql.AddParameter(cmd, "@IS_PRIVATE"          , bIS_PRIVATE            );
							IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTWITTER_MESSAGES_Update
		/// <summary>
		/// spTWITTER_MESSAGES_Update
		/// </summary>
		public void spTWITTER_MESSAGES_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sNAME, string sDESCRIPTION, DateTime dtDATE_TIME, string sPARENT_TYPE, Guid gPARENT_ID, string sTYPE, Int64 lTWITTER_ID, Int64 lTWITTER_USER_ID, string sTWITTER_FULL_NAME, string sTWITTER_SCREEN_NAME, Int64 lORIGINAL_ID, Int64 lORIGINAL_USER_ID, string sORIGINAL_FULL_NAME, string sORIGINAL_SCREEN_NAME, string sTAG_SET_NAME, bool bIS_PRIVATE, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTWITTER_MESSAGES_Update";
				IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
				IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
				IDbDataParameter parASSIGNED_USER_ID     = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"    , gASSIGNED_USER_ID      );
				IDbDataParameter parTEAM_ID              = Sql.AddParameter(cmd, "@TEAM_ID"             , gTEAM_ID               );
				IDbDataParameter parTEAM_SET_LIST        = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"       , sTEAM_SET_LIST         , 8000);
				IDbDataParameter parNAME                 = Sql.AddParameter(cmd, "@NAME"                , sNAME                  , 420);
				IDbDataParameter parDESCRIPTION          = Sql.AddParameter(cmd, "@DESCRIPTION"         , sDESCRIPTION           );
				IDbDataParameter parDATE_TIME            = Sql.AddParameter(cmd, "@DATE_TIME"           , dtDATE_TIME            );
				IDbDataParameter parPARENT_TYPE          = Sql.AddParameter(cmd, "@PARENT_TYPE"         , sPARENT_TYPE           ,  25);
				IDbDataParameter parPARENT_ID            = Sql.AddParameter(cmd, "@PARENT_ID"           , gPARENT_ID             );
				IDbDataParameter parTYPE                 = Sql.AddParameter(cmd, "@TYPE"                , sTYPE                  ,  25);
				IDbDataParameter parTWITTER_ID           = Sql.AddParameter(cmd, "@TWITTER_ID"          , lTWITTER_ID            );
				IDbDataParameter parTWITTER_USER_ID      = Sql.AddParameter(cmd, "@TWITTER_USER_ID"     , lTWITTER_USER_ID       );
				IDbDataParameter parTWITTER_FULL_NAME    = Sql.AddParameter(cmd, "@TWITTER_FULL_NAME"   , sTWITTER_FULL_NAME     ,  50);
				IDbDataParameter parTWITTER_SCREEN_NAME  = Sql.AddParameter(cmd, "@TWITTER_SCREEN_NAME" , sTWITTER_SCREEN_NAME   ,  50);
				IDbDataParameter parORIGINAL_ID          = Sql.AddParameter(cmd, "@ORIGINAL_ID"         , lORIGINAL_ID           );
				IDbDataParameter parORIGINAL_USER_ID     = Sql.AddParameter(cmd, "@ORIGINAL_USER_ID"    , lORIGINAL_USER_ID      );
				IDbDataParameter parORIGINAL_FULL_NAME   = Sql.AddParameter(cmd, "@ORIGINAL_FULL_NAME"  , sORIGINAL_FULL_NAME    ,  50);
				IDbDataParameter parORIGINAL_SCREEN_NAME = Sql.AddParameter(cmd, "@ORIGINAL_SCREEN_NAME", sORIGINAL_SCREEN_NAME  ,  50);
				IDbDataParameter parTAG_SET_NAME         = Sql.AddParameter(cmd, "@TAG_SET_NAME"        , sTAG_SET_NAME          , 4000);
				IDbDataParameter parIS_PRIVATE           = Sql.AddParameter(cmd, "@IS_PRIVATE"          , bIS_PRIVATE            );
				IDbDataParameter parASSIGNED_SET_LIST    = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"   , sASSIGNED_SET_LIST     , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTWITTER_MESSAGES_Update
		/// <summary>
		/// spTWITTER_MESSAGES_Update
		/// </summary>
		public IDbCommand cmdTWITTER_MESSAGES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTWITTER_MESSAGES_Update";
			IDbDataParameter parID                   = Sql.CreateParameter(cmd, "@ID"                  , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID     = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"    , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID     = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"    , "Guid",  16);
			IDbDataParameter parTEAM_ID              = Sql.CreateParameter(cmd, "@TEAM_ID"             , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST        = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"       , "ansistring", 8000);
			IDbDataParameter parNAME                 = Sql.CreateParameter(cmd, "@NAME"                , "string", 420);
			IDbDataParameter parDESCRIPTION          = Sql.CreateParameter(cmd, "@DESCRIPTION"         , "string", 104857600);
			IDbDataParameter parDATE_TIME            = Sql.CreateParameter(cmd, "@DATE_TIME"           , "DateTime",   8);
			IDbDataParameter parPARENT_TYPE          = Sql.CreateParameter(cmd, "@PARENT_TYPE"         , "string",  25);
			IDbDataParameter parPARENT_ID            = Sql.CreateParameter(cmd, "@PARENT_ID"           , "Guid",  16);
			IDbDataParameter parTYPE                 = Sql.CreateParameter(cmd, "@TYPE"                , "string",  25);
			IDbDataParameter parTWITTER_ID           = Sql.CreateParameter(cmd, "@TWITTER_ID"          , "Int64",   8);
			IDbDataParameter parTWITTER_USER_ID      = Sql.CreateParameter(cmd, "@TWITTER_USER_ID"     , "Int64",   8);
			IDbDataParameter parTWITTER_FULL_NAME    = Sql.CreateParameter(cmd, "@TWITTER_FULL_NAME"   , "string",  50);
			IDbDataParameter parTWITTER_SCREEN_NAME  = Sql.CreateParameter(cmd, "@TWITTER_SCREEN_NAME" , "string",  50);
			IDbDataParameter parORIGINAL_ID          = Sql.CreateParameter(cmd, "@ORIGINAL_ID"         , "Int64",   8);
			IDbDataParameter parORIGINAL_USER_ID     = Sql.CreateParameter(cmd, "@ORIGINAL_USER_ID"    , "Int64",   8);
			IDbDataParameter parORIGINAL_FULL_NAME   = Sql.CreateParameter(cmd, "@ORIGINAL_FULL_NAME"  , "string",  50);
			IDbDataParameter parORIGINAL_SCREEN_NAME = Sql.CreateParameter(cmd, "@ORIGINAL_SCREEN_NAME", "string",  50);
			IDbDataParameter parTAG_SET_NAME         = Sql.CreateParameter(cmd, "@TAG_SET_NAME"        , "string", 4000);
			IDbDataParameter parIS_PRIVATE           = Sql.CreateParameter(cmd, "@IS_PRIVATE"          , "bool",   1);
			IDbDataParameter parASSIGNED_SET_LIST    = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"   , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTWITTER_MESSAGES_UpdateStatus
		/// <summary>
		/// spTWITTER_MESSAGES_UpdateStatus
		/// </summary>
		public void spTWITTER_MESSAGES_UpdateStatus(Guid gID, string sSTATUS, Int64 lTWITTER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spTWITTER_MESSAGES_UpdateStatu";
							else
								cmd.CommandText = "spTWITTER_MESSAGES_UpdateStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parTWITTER_ID       = Sql.AddParameter(cmd, "@TWITTER_ID"      , lTWITTER_ID        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTWITTER_MESSAGES_UpdateStatus
		/// <summary>
		/// spTWITTER_MESSAGES_UpdateStatus
		/// </summary>
		public void spTWITTER_MESSAGES_UpdateStatus(Guid gID, string sSTATUS, Int64 lTWITTER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spTWITTER_MESSAGES_UpdateStatu";
				else
					cmd.CommandText = "spTWITTER_MESSAGES_UpdateStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parTWITTER_ID       = Sql.AddParameter(cmd, "@TWITTER_ID"      , lTWITTER_ID        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTWITTER_MESSAGES_UpdateStatus
		/// <summary>
		/// spTWITTER_MESSAGES_UpdateStatus
		/// </summary>
		public IDbCommand cmdTWITTER_MESSAGES_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spTWITTER_MESSAGES_UpdateStatu";
			else
				cmd.CommandText = "spTWITTER_MESSAGES_UpdateStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parTWITTER_ID       = Sql.CreateParameter(cmd, "@TWITTER_ID"      , "Int64",   8);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_CONTENT_Update
		/// <summary>
		/// spUSER_PREFERENCES_CONTENT_Update
		/// </summary>
		public void spUSER_PREFERENCES_CONTENT_Update(Guid gID, byte[] binCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Upd";
							else
								cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Update";
							IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
							IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_CONTENT_Update
		/// <summary>
		/// spUSER_PREFERENCES_CONTENT_Update
		/// </summary>
		public void spUSER_PREFERENCES_CONTENT_Update(Guid gID, byte[] binCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Upd";
				else
					cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Update";
				IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
				IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_CONTENT_Update
		/// <summary>
		/// spUSER_PREFERENCES_CONTENT_Update
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_CONTENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Upd";
			else
				cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Update";
			IDbDataParameter parID      = Sql.CreateParameter(cmd, "@ID"     , "Guid",  16);
			IDbDataParameter parCONTENT = Sql.CreateParameter(cmd, "@CONTENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_Delete
		/// <summary>
		/// spUSER_PREFERENCES_Delete
		/// </summary>
		public void spUSER_PREFERENCES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_Delete
		/// <summary>
		/// spUSER_PREFERENCES_Delete
		/// </summary>
		public void spUSER_PREFERENCES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_Delete
		/// <summary>
		/// spUSER_PREFERENCES_Delete
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_DeleteByUser
		/// <summary>
		/// spUSER_PREFERENCES_DeleteByUser
		/// </summary>
		public void spUSER_PREFERENCES_DeleteByUser(string sUSER_NAME, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSER_PREFERENCES_DeleteByUse";
							else
								cmd.CommandText = "spUSER_PREFERENCES_DeleteByUser";
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_DeleteByUser
		/// <summary>
		/// spUSER_PREFERENCES_DeleteByUser
		/// </summary>
		public void spUSER_PREFERENCES_DeleteByUser(string sUSER_NAME, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSER_PREFERENCES_DeleteByUse";
				else
					cmd.CommandText = "spUSER_PREFERENCES_DeleteByUser";
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_DeleteByUser
		/// <summary>
		/// spUSER_PREFERENCES_DeleteByUser
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_DeleteByUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSER_PREFERENCES_DeleteByUse";
			else
				cmd.CommandText = "spUSER_PREFERENCES_DeleteByUser";
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 255);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_InitPointer
		/// <summary>
		/// spUSER_PREFERENCES_InitPointer
		/// </summary>
		public void spUSER_PREFERENCES_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_InitPointer
		/// <summary>
		/// spUSER_PREFERENCES_InitPointer
		/// </summary>
		public void spUSER_PREFERENCES_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_InitPointer
		/// <summary>
		/// spUSER_PREFERENCES_InitPointer
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_Insert
		/// <summary>
		/// spUSER_PREFERENCES_Insert
		/// </summary>
		public void spUSER_PREFERENCES_Insert(ref Guid gID, Guid gASSIGNED_USER_ID, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_Insert
		/// <summary>
		/// spUSER_PREFERENCES_Insert
		/// </summary>
		public void spUSER_PREFERENCES_Insert(ref Guid gID, Guid gASSIGNED_USER_ID, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_Insert
		/// <summary>
		/// spUSER_PREFERENCES_Insert
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_InsertByUser
		/// <summary>
		/// spUSER_PREFERENCES_InsertByUser
		/// </summary>
		public void spUSER_PREFERENCES_InsertByUser(ref Guid gID, string sUSER_NAME, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSER_PREFERENCES_InsertByUse";
							else
								cmd.CommandText = "spUSER_PREFERENCES_InsertByUser";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_InsertByUser
		/// <summary>
		/// spUSER_PREFERENCES_InsertByUser
		/// </summary>
		public void spUSER_PREFERENCES_InsertByUser(ref Guid gID, string sUSER_NAME, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSER_PREFERENCES_InsertByUse";
				else
					cmd.CommandText = "spUSER_PREFERENCES_InsertByUser";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_InsertByUser
		/// <summary>
		/// spUSER_PREFERENCES_InsertByUser
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_InsertByUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSER_PREFERENCES_InsertByUse";
			else
				cmd.CommandText = "spUSER_PREFERENCES_InsertByUser";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_ReadOffset
		/// <summary>
		/// spUSER_PREFERENCES_ReadOffset
		/// </summary>
		public void spUSER_PREFERENCES_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_ReadOffset
		/// <summary>
		/// spUSER_PREFERENCES_ReadOffset
		/// </summary>
		public void spUSER_PREFERENCES_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_ReadOffset
		/// <summary>
		/// spUSER_PREFERENCES_ReadOffset
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_WriteOffset
		/// <summary>
		/// spUSER_PREFERENCES_WriteOffset
		/// </summary>
		public void spUSER_PREFERENCES_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_WriteOffset
		/// <summary>
		/// spUSER_PREFERENCES_WriteOffset
		/// </summary>
		public void spUSER_PREFERENCES_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_WriteOffset
		/// <summary>
		/// spUSER_PREFERENCES_WriteOffset
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spUSERS_ACL_ROLES_Delete
		/// <summary>
		/// spUSERS_ACL_ROLES_Delete
		/// </summary>
		public void spUSERS_ACL_ROLES_Delete(Guid gUSER_ID, Guid gACL_ROLE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_ACL_ROLES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_ACL_ROLES_Delete
		/// <summary>
		/// spUSERS_ACL_ROLES_Delete
		/// </summary>
		public void spUSERS_ACL_ROLES_Delete(Guid gUSER_ID, Guid gACL_ROLE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_ACL_ROLES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_ACL_ROLES_Delete
		/// <summary>
		/// spUSERS_ACL_ROLES_Delete
		/// </summary>
		public IDbCommand cmdUSERS_ACL_ROLES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_ACL_ROLES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parACL_ROLE_ID      = Sql.CreateParameter(cmd, "@ACL_ROLE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_ACL_ROLES_MassUpdate
		/// <summary>
		/// spUSERS_ACL_ROLES_MassUpdate
		/// </summary>
		public void spUSERS_ACL_ROLES_MassUpdate(Guid gUSER_ID, string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_ACL_ROLES_MassUpdate";
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_ACL_ROLES_MassUpdate
		/// <summary>
		/// spUSERS_ACL_ROLES_MassUpdate
		/// </summary>
		public void spUSERS_ACL_ROLES_MassUpdate(Guid gUSER_ID, string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_ACL_ROLES_MassUpdate";
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_ACL_ROLES_MassUpdate
		/// <summary>
		/// spUSERS_ACL_ROLES_MassUpdate
		/// </summary>
		public IDbCommand cmdUSERS_ACL_ROLES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_ACL_ROLES_MassUpdate";
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			return cmd;
		}
		#endregion

		#region spUSERS_ACL_ROLES_Update
		/// <summary>
		/// spUSERS_ACL_ROLES_Update
		/// </summary>
		public void spUSERS_ACL_ROLES_Update(Guid gUSER_ID, Guid gACL_ROLE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_ACL_ROLES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_ACL_ROLES_Update
		/// <summary>
		/// spUSERS_ACL_ROLES_Update
		/// </summary>
		public void spUSERS_ACL_ROLES_Update(Guid gUSER_ID, Guid gACL_ROLE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_ACL_ROLES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_ACL_ROLES_Update
		/// <summary>
		/// spUSERS_ACL_ROLES_Update
		/// </summary>
		public IDbCommand cmdUSERS_ACL_ROLES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_ACL_ROLES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parACL_ROLE_ID      = Sql.CreateParameter(cmd, "@ACL_ROLE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_Delete
		/// <summary>
		/// spUSERS_Delete
		/// </summary>
		public void spUSERS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Delete
		/// <summary>
		/// spUSERS_Delete
		/// </summary>
		public void spUSERS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_Delete
		/// <summary>
		/// spUSERS_Delete
		/// </summary>
		public IDbCommand cmdUSERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_FEEDS_Delete
		/// <summary>
		/// spUSERS_FEEDS_Delete
		/// </summary>
		public void spUSERS_FEEDS_Delete(Guid gUSER_ID, Guid gFEED_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_FEEDS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_FEEDS_Delete
		/// <summary>
		/// spUSERS_FEEDS_Delete
		/// </summary>
		public void spUSERS_FEEDS_Delete(Guid gUSER_ID, Guid gFEED_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_FEEDS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_FEEDS_Delete
		/// <summary>
		/// spUSERS_FEEDS_Delete
		/// </summary>
		public IDbCommand cmdUSERS_FEEDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_FEEDS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parFEED_ID          = Sql.CreateParameter(cmd, "@FEED_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_FEEDS_Update
		/// <summary>
		/// spUSERS_FEEDS_Update
		/// </summary>
		public void spUSERS_FEEDS_Update(Guid gUSER_ID, Guid gFEED_ID, Int32 nRANK)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_FEEDS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
							IDbDataParameter parRANK             = Sql.AddParameter(cmd, "@RANK"            , nRANK              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_FEEDS_Update
		/// <summary>
		/// spUSERS_FEEDS_Update
		/// </summary>
		public void spUSERS_FEEDS_Update(Guid gUSER_ID, Guid gFEED_ID, Int32 nRANK, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_FEEDS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
				IDbDataParameter parRANK             = Sql.AddParameter(cmd, "@RANK"            , nRANK              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_FEEDS_Update
		/// <summary>
		/// spUSERS_FEEDS_Update
		/// </summary>
		public IDbCommand cmdUSERS_FEEDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_FEEDS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parFEED_ID          = Sql.CreateParameter(cmd, "@FEED_ID"         , "Guid",  16);
			IDbDataParameter parRANK             = Sql.CreateParameter(cmd, "@RANK"            , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spUSERS_Import
		/// <summary>
		/// spUSERS_Import
		/// </summary>
		public void spUSERS_Import(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, string sREPORTS_TO_NAME, Guid gTEAM_ID, string sTEAM_NAME, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, string sTHEME, string sLANGUAGE, string sDATE_FORMAT, string sTIME_FORMAT, Guid gTIMEZONE_ID, Guid gCURRENCY_ID, string sEXTENSION, string sSMS_OPT_IN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Import";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parUSER_NAME          = Sql.AddParameter(cmd, "@USER_NAME"         , sUSER_NAME           ,  60);
							IDbDataParameter parFIRST_NAME         = Sql.AddParameter(cmd, "@FIRST_NAME"        , sFIRST_NAME          ,  30);
							IDbDataParameter parLAST_NAME          = Sql.AddParameter(cmd, "@LAST_NAME"         , sLAST_NAME           ,  30);
							IDbDataParameter parREPORTS_TO_ID      = Sql.AddParameter(cmd, "@REPORTS_TO_ID"     , gREPORTS_TO_ID       );
							IDbDataParameter parREPORTS_TO_NAME    = Sql.AddParameter(cmd, "@REPORTS_TO_NAME"   , sREPORTS_TO_NAME     ,  60);
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							IDbDataParameter parTEAM_NAME          = Sql.AddParameter(cmd, "@TEAM_NAME"         , sTEAM_NAME           , 128);
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               ,  50);
							IDbDataParameter parDEPARTMENT         = Sql.AddParameter(cmd, "@DEPARTMENT"        , sDEPARTMENT          ,  50);
							IDbDataParameter parPHONE_HOME         = Sql.AddParameter(cmd, "@PHONE_HOME"        , sPHONE_HOME          ,  50);
							IDbDataParameter parPHONE_MOBILE       = Sql.AddParameter(cmd, "@PHONE_MOBILE"      , sPHONE_MOBILE        ,  50);
							IDbDataParameter parPHONE_WORK         = Sql.AddParameter(cmd, "@PHONE_WORK"        , sPHONE_WORK          ,  50);
							IDbDataParameter parPHONE_OTHER        = Sql.AddParameter(cmd, "@PHONE_OTHER"       , sPHONE_OTHER         ,  50);
							IDbDataParameter parPHONE_FAX          = Sql.AddParameter(cmd, "@PHONE_FAX"         , sPHONE_FAX           ,  50);
							IDbDataParameter parEMAIL1             = Sql.AddParameter(cmd, "@EMAIL1"            , sEMAIL1              , 100);
							IDbDataParameter parEMAIL2             = Sql.AddParameter(cmd, "@EMAIL2"            , sEMAIL2              , 100);
							IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
							IDbDataParameter parADDRESS_STREET     = Sql.AddParameter(cmd, "@ADDRESS_STREET"    , sADDRESS_STREET      , 150);
							IDbDataParameter parADDRESS_CITY       = Sql.AddParameter(cmd, "@ADDRESS_CITY"      , sADDRESS_CITY        , 100);
							IDbDataParameter parADDRESS_STATE      = Sql.AddParameter(cmd, "@ADDRESS_STATE"     , sADDRESS_STATE       , 100);
							IDbDataParameter parADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE", sADDRESS_POSTALCODE  ,   9);
							IDbDataParameter parADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"   , sADDRESS_COUNTRY     ,  25);
							IDbDataParameter parEMPLOYEE_STATUS    = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"   , sEMPLOYEE_STATUS     ,  25);
							IDbDataParameter parMESSENGER_ID       = Sql.AddParameter(cmd, "@MESSENGER_ID"      , sMESSENGER_ID        ,  25);
							IDbDataParameter parMESSENGER_TYPE     = Sql.AddParameter(cmd, "@MESSENGER_TYPE"    , sMESSENGER_TYPE      ,  25);
							IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
							IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
							IDbDataParameter parTHEME              = Sql.AddParameter(cmd, "@THEME"             , sTHEME               ,  25);
							IDbDataParameter parLANGUAGE           = Sql.AddParameter(cmd, "@LANGUAGE"          , sLANGUAGE            ,   5);
							IDbDataParameter parDATE_FORMAT        = Sql.AddParameter(cmd, "@DATE_FORMAT"       , sDATE_FORMAT         ,  50);
							IDbDataParameter parTIME_FORMAT        = Sql.AddParameter(cmd, "@TIME_FORMAT"       , sTIME_FORMAT         ,  50);
							IDbDataParameter parTIMEZONE_ID        = Sql.AddParameter(cmd, "@TIMEZONE_ID"       , gTIMEZONE_ID         );
							IDbDataParameter parCURRENCY_ID        = Sql.AddParameter(cmd, "@CURRENCY_ID"       , gCURRENCY_ID         );
							IDbDataParameter parEXTENSION          = Sql.AddParameter(cmd, "@EXTENSION"         , sEXTENSION           ,  25);
							IDbDataParameter parSMS_OPT_IN         = Sql.AddParameter(cmd, "@SMS_OPT_IN"        , sSMS_OPT_IN          ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Import
		/// <summary>
		/// spUSERS_Import
		/// </summary>
		public void spUSERS_Import(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, string sREPORTS_TO_NAME, Guid gTEAM_ID, string sTEAM_NAME, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, string sTHEME, string sLANGUAGE, string sDATE_FORMAT, string sTIME_FORMAT, Guid gTIMEZONE_ID, Guid gCURRENCY_ID, string sEXTENSION, string sSMS_OPT_IN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Import";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parUSER_NAME          = Sql.AddParameter(cmd, "@USER_NAME"         , sUSER_NAME           ,  60);
				IDbDataParameter parFIRST_NAME         = Sql.AddParameter(cmd, "@FIRST_NAME"        , sFIRST_NAME          ,  30);
				IDbDataParameter parLAST_NAME          = Sql.AddParameter(cmd, "@LAST_NAME"         , sLAST_NAME           ,  30);
				IDbDataParameter parREPORTS_TO_ID      = Sql.AddParameter(cmd, "@REPORTS_TO_ID"     , gREPORTS_TO_ID       );
				IDbDataParameter parREPORTS_TO_NAME    = Sql.AddParameter(cmd, "@REPORTS_TO_NAME"   , sREPORTS_TO_NAME     ,  60);
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				IDbDataParameter parTEAM_NAME          = Sql.AddParameter(cmd, "@TEAM_NAME"         , sTEAM_NAME           , 128);
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               ,  50);
				IDbDataParameter parDEPARTMENT         = Sql.AddParameter(cmd, "@DEPARTMENT"        , sDEPARTMENT          ,  50);
				IDbDataParameter parPHONE_HOME         = Sql.AddParameter(cmd, "@PHONE_HOME"        , sPHONE_HOME          ,  50);
				IDbDataParameter parPHONE_MOBILE       = Sql.AddParameter(cmd, "@PHONE_MOBILE"      , sPHONE_MOBILE        ,  50);
				IDbDataParameter parPHONE_WORK         = Sql.AddParameter(cmd, "@PHONE_WORK"        , sPHONE_WORK          ,  50);
				IDbDataParameter parPHONE_OTHER        = Sql.AddParameter(cmd, "@PHONE_OTHER"       , sPHONE_OTHER         ,  50);
				IDbDataParameter parPHONE_FAX          = Sql.AddParameter(cmd, "@PHONE_FAX"         , sPHONE_FAX           ,  50);
				IDbDataParameter parEMAIL1             = Sql.AddParameter(cmd, "@EMAIL1"            , sEMAIL1              , 100);
				IDbDataParameter parEMAIL2             = Sql.AddParameter(cmd, "@EMAIL2"            , sEMAIL2              , 100);
				IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
				IDbDataParameter parADDRESS_STREET     = Sql.AddParameter(cmd, "@ADDRESS_STREET"    , sADDRESS_STREET      , 150);
				IDbDataParameter parADDRESS_CITY       = Sql.AddParameter(cmd, "@ADDRESS_CITY"      , sADDRESS_CITY        , 100);
				IDbDataParameter parADDRESS_STATE      = Sql.AddParameter(cmd, "@ADDRESS_STATE"     , sADDRESS_STATE       , 100);
				IDbDataParameter parADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE", sADDRESS_POSTALCODE  ,   9);
				IDbDataParameter parADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"   , sADDRESS_COUNTRY     ,  25);
				IDbDataParameter parEMPLOYEE_STATUS    = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"   , sEMPLOYEE_STATUS     ,  25);
				IDbDataParameter parMESSENGER_ID       = Sql.AddParameter(cmd, "@MESSENGER_ID"      , sMESSENGER_ID        ,  25);
				IDbDataParameter parMESSENGER_TYPE     = Sql.AddParameter(cmd, "@MESSENGER_TYPE"    , sMESSENGER_TYPE      ,  25);
				IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
				IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
				IDbDataParameter parTHEME              = Sql.AddParameter(cmd, "@THEME"             , sTHEME               ,  25);
				IDbDataParameter parLANGUAGE           = Sql.AddParameter(cmd, "@LANGUAGE"          , sLANGUAGE            ,   5);
				IDbDataParameter parDATE_FORMAT        = Sql.AddParameter(cmd, "@DATE_FORMAT"       , sDATE_FORMAT         ,  50);
				IDbDataParameter parTIME_FORMAT        = Sql.AddParameter(cmd, "@TIME_FORMAT"       , sTIME_FORMAT         ,  50);
				IDbDataParameter parTIMEZONE_ID        = Sql.AddParameter(cmd, "@TIMEZONE_ID"       , gTIMEZONE_ID         );
				IDbDataParameter parCURRENCY_ID        = Sql.AddParameter(cmd, "@CURRENCY_ID"       , gCURRENCY_ID         );
				IDbDataParameter parEXTENSION          = Sql.AddParameter(cmd, "@EXTENSION"         , sEXTENSION           ,  25);
				IDbDataParameter parSMS_OPT_IN         = Sql.AddParameter(cmd, "@SMS_OPT_IN"        , sSMS_OPT_IN          ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_Import
		/// <summary>
		/// spUSERS_Import
		/// </summary>
		public IDbCommand cmdUSERS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Import";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parUSER_NAME          = Sql.CreateParameter(cmd, "@USER_NAME"         , "string",  60);
			IDbDataParameter parFIRST_NAME         = Sql.CreateParameter(cmd, "@FIRST_NAME"        , "string",  30);
			IDbDataParameter parLAST_NAME          = Sql.CreateParameter(cmd, "@LAST_NAME"         , "string",  30);
			IDbDataParameter parREPORTS_TO_ID      = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"     , "Guid",  16);
			IDbDataParameter parREPORTS_TO_NAME    = Sql.CreateParameter(cmd, "@REPORTS_TO_NAME"   , "string",  60);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			IDbDataParameter parTEAM_NAME          = Sql.CreateParameter(cmd, "@TEAM_NAME"         , "string", 128);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parTITLE              = Sql.CreateParameter(cmd, "@TITLE"             , "string",  50);
			IDbDataParameter parDEPARTMENT         = Sql.CreateParameter(cmd, "@DEPARTMENT"        , "string",  50);
			IDbDataParameter parPHONE_HOME         = Sql.CreateParameter(cmd, "@PHONE_HOME"        , "string",  50);
			IDbDataParameter parPHONE_MOBILE       = Sql.CreateParameter(cmd, "@PHONE_MOBILE"      , "string",  50);
			IDbDataParameter parPHONE_WORK         = Sql.CreateParameter(cmd, "@PHONE_WORK"        , "string",  50);
			IDbDataParameter parPHONE_OTHER        = Sql.CreateParameter(cmd, "@PHONE_OTHER"       , "string",  50);
			IDbDataParameter parPHONE_FAX          = Sql.CreateParameter(cmd, "@PHONE_FAX"         , "string",  50);
			IDbDataParameter parEMAIL1             = Sql.CreateParameter(cmd, "@EMAIL1"            , "string", 100);
			IDbDataParameter parEMAIL2             = Sql.CreateParameter(cmd, "@EMAIL2"            , "string", 100);
			IDbDataParameter parSTATUS             = Sql.CreateParameter(cmd, "@STATUS"            , "string",  25);
			IDbDataParameter parADDRESS_STREET     = Sql.CreateParameter(cmd, "@ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parADDRESS_CITY       = Sql.CreateParameter(cmd, "@ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parADDRESS_STATE      = Sql.CreateParameter(cmd, "@ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@ADDRESS_POSTALCODE", "string",   9);
			IDbDataParameter parADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@ADDRESS_COUNTRY"   , "string",  25);
			IDbDataParameter parEMPLOYEE_STATUS    = Sql.CreateParameter(cmd, "@EMPLOYEE_STATUS"   , "string",  25);
			IDbDataParameter parMESSENGER_ID       = Sql.CreateParameter(cmd, "@MESSENGER_ID"      , "string",  25);
			IDbDataParameter parMESSENGER_TYPE     = Sql.CreateParameter(cmd, "@MESSENGER_TYPE"    , "string",  25);
			IDbDataParameter parPARENT_TYPE        = Sql.CreateParameter(cmd, "@PARENT_TYPE"       , "string",  25);
			IDbDataParameter parPARENT_ID          = Sql.CreateParameter(cmd, "@PARENT_ID"         , "Guid",  16);
			IDbDataParameter parTHEME              = Sql.CreateParameter(cmd, "@THEME"             , "string",  25);
			IDbDataParameter parLANGUAGE           = Sql.CreateParameter(cmd, "@LANGUAGE"          , "string",   5);
			IDbDataParameter parDATE_FORMAT        = Sql.CreateParameter(cmd, "@DATE_FORMAT"       , "string",  50);
			IDbDataParameter parTIME_FORMAT        = Sql.CreateParameter(cmd, "@TIME_FORMAT"       , "string",  50);
			IDbDataParameter parTIMEZONE_ID        = Sql.CreateParameter(cmd, "@TIMEZONE_ID"       , "Guid",  16);
			IDbDataParameter parCURRENCY_ID        = Sql.CreateParameter(cmd, "@CURRENCY_ID"       , "Guid",  16);
			IDbDataParameter parEXTENSION          = Sql.CreateParameter(cmd, "@EXTENSION"         , "string",  25);
			IDbDataParameter parSMS_OPT_IN         = Sql.CreateParameter(cmd, "@SMS_OPT_IN"        , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_InsertNTLM
		/// <summary>
		/// spUSERS_InsertNTLM
		/// </summary>
		public void spUSERS_InsertNTLM(ref Guid gID, string sUSER_DOMAIN, string sUSER_NAME, bool bIS_ADMIN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_InsertNTLM";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parUSER_DOMAIN = Sql.AddParameter(cmd, "@USER_DOMAIN", sUSER_DOMAIN  ,  20);
							IDbDataParameter parUSER_NAME   = Sql.AddParameter(cmd, "@USER_NAME"  , sUSER_NAME    ,  60);
							IDbDataParameter parIS_ADMIN    = Sql.AddParameter(cmd, "@IS_ADMIN"   , bIS_ADMIN     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_InsertNTLM
		/// <summary>
		/// spUSERS_InsertNTLM
		/// </summary>
		public void spUSERS_InsertNTLM(ref Guid gID, string sUSER_DOMAIN, string sUSER_NAME, bool bIS_ADMIN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_InsertNTLM";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parUSER_DOMAIN = Sql.AddParameter(cmd, "@USER_DOMAIN", sUSER_DOMAIN  ,  20);
				IDbDataParameter parUSER_NAME   = Sql.AddParameter(cmd, "@USER_NAME"  , sUSER_NAME    ,  60);
				IDbDataParameter parIS_ADMIN    = Sql.AddParameter(cmd, "@IS_ADMIN"   , bIS_ADMIN     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_InsertNTLM
		/// <summary>
		/// spUSERS_InsertNTLM
		/// </summary>
		public IDbCommand cmdUSERS_InsertNTLM(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_InsertNTLM";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parUSER_DOMAIN = Sql.CreateParameter(cmd, "@USER_DOMAIN", "string",  20);
			IDbDataParameter parUSER_NAME   = Sql.CreateParameter(cmd, "@USER_NAME"  , "string",  60);
			IDbDataParameter parIS_ADMIN    = Sql.CreateParameter(cmd, "@IS_ADMIN"   , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Delete
		/// <summary>
		/// spUSERS_LAST_IMPORT_Delete
		/// </summary>
		public void spUSERS_LAST_IMPORT_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LAST_IMPORT_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Delete
		/// <summary>
		/// spUSERS_LAST_IMPORT_Delete
		/// </summary>
		public void spUSERS_LAST_IMPORT_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LAST_IMPORT_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_LAST_IMPORT_Delete
		/// <summary>
		/// spUSERS_LAST_IMPORT_Delete
		/// </summary>
		public IDbCommand cmdUSERS_LAST_IMPORT_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LAST_IMPORT_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Update
		/// <summary>
		/// spUSERS_LAST_IMPORT_Update
		/// </summary>
		public void spUSERS_LAST_IMPORT_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sBEAN_TYPE, Guid gBEAN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LAST_IMPORT_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parBEAN_TYPE        = Sql.AddParameter(cmd, "@BEAN_TYPE"       , sBEAN_TYPE         ,  25);
							IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Update
		/// <summary>
		/// spUSERS_LAST_IMPORT_Update
		/// </summary>
		public void spUSERS_LAST_IMPORT_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sBEAN_TYPE, Guid gBEAN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LAST_IMPORT_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parBEAN_TYPE        = Sql.AddParameter(cmd, "@BEAN_TYPE"       , sBEAN_TYPE         ,  25);
				IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_LAST_IMPORT_Update
		/// <summary>
		/// spUSERS_LAST_IMPORT_Update
		/// </summary>
		public IDbCommand cmdUSERS_LAST_IMPORT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LAST_IMPORT_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parBEAN_TYPE        = Sql.CreateParameter(cmd, "@BEAN_TYPE"       , "string",  25);
			IDbDataParameter parBEAN_ID          = Sql.CreateParameter(cmd, "@BEAN_ID"         , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_LOGINS_InsertOnly
		/// <summary>
		/// spUSERS_LOGINS_InsertOnly
		/// </summary>
		public void spUSERS_LOGINS_InsertOnly(ref Guid gID, Guid gUSER_ID, string sUSER_NAME, string sLOGIN_TYPE, string sLOGIN_STATUS, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sUSER_AGENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LOGINS_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							IDbDataParameter parLOGIN_TYPE       = Sql.AddParameter(cmd, "@LOGIN_TYPE"      , sLOGIN_TYPE        ,  25);
							IDbDataParameter parLOGIN_STATUS     = Sql.AddParameter(cmd, "@LOGIN_STATUS"    , sLOGIN_STATUS      ,  25);
							IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
							IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
							IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
							IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parUSER_AGENT       = Sql.AddParameter(cmd, "@USER_AGENT"      , sUSER_AGENT        , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LOGINS_InsertOnly
		/// <summary>
		/// spUSERS_LOGINS_InsertOnly
		/// </summary>
		public void spUSERS_LOGINS_InsertOnly(ref Guid gID, Guid gUSER_ID, string sUSER_NAME, string sLOGIN_TYPE, string sLOGIN_STATUS, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sUSER_AGENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LOGINS_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				IDbDataParameter parLOGIN_TYPE       = Sql.AddParameter(cmd, "@LOGIN_TYPE"      , sLOGIN_TYPE        ,  25);
				IDbDataParameter parLOGIN_STATUS     = Sql.AddParameter(cmd, "@LOGIN_STATUS"    , sLOGIN_STATUS      ,  25);
				IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
				IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
				IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
				IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parUSER_AGENT       = Sql.AddParameter(cmd, "@USER_AGENT"      , sUSER_AGENT        , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_LOGINS_InsertOnly
		/// <summary>
		/// spUSERS_LOGINS_InsertOnly
		/// </summary>
		public IDbCommand cmdUSERS_LOGINS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LOGINS_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			IDbDataParameter parLOGIN_TYPE       = Sql.CreateParameter(cmd, "@LOGIN_TYPE"      , "string",  25);
			IDbDataParameter parLOGIN_STATUS     = Sql.CreateParameter(cmd, "@LOGIN_STATUS"    , "string",  25);
			IDbDataParameter parASPNET_SESSIONID = Sql.CreateParameter(cmd, "@ASPNET_SESSIONID", "string",  50);
			IDbDataParameter parREMOTE_HOST      = Sql.CreateParameter(cmd, "@REMOTE_HOST"     , "string", 100);
			IDbDataParameter parSERVER_HOST      = Sql.CreateParameter(cmd, "@SERVER_HOST"     , "string", 100);
			IDbDataParameter parTARGET           = Sql.CreateParameter(cmd, "@TARGET"          , "string", 255);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parUSER_AGENT       = Sql.CreateParameter(cmd, "@USER_AGENT"      , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_LOGINS_Logout
		/// <summary>
		/// spUSERS_LOGINS_Logout
		/// </summary>
		public void spUSERS_LOGINS_Logout(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LOGINS_Logout";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LOGINS_Logout
		/// <summary>
		/// spUSERS_LOGINS_Logout
		/// </summary>
		public void spUSERS_LOGINS_Logout(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LOGINS_Logout";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_LOGINS_Logout
		/// <summary>
		/// spUSERS_LOGINS_Logout
		/// </summary>
		public IDbCommand cmdUSERS_LOGINS_Logout(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LOGINS_Logout";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_MassDelete
		/// <summary>
		/// spUSERS_MassDelete
		/// </summary>
		public void spUSERS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_MassDelete
		/// <summary>
		/// spUSERS_MassDelete
		/// </summary>
		public void spUSERS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_MassDelete
		/// <summary>
		/// spUSERS_MassDelete
		/// </summary>
		public IDbCommand cmdUSERS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_PASSWORD_HISTORY_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_HISTORY_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_HISTORY_InsertOnly(Guid gUSER_ID, string sUSER_HASH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSERS_PASSWORD_HISTORY_Inser";
							else
								cmd.CommandText = "spUSERS_PASSWORD_HISTORY_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PASSWORD_HISTORY_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_HISTORY_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_HISTORY_InsertOnly(Guid gUSER_ID, string sUSER_HASH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSERS_PASSWORD_HISTORY_Inser";
				else
					cmd.CommandText = "spUSERS_PASSWORD_HISTORY_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PASSWORD_HISTORY_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_HISTORY_InsertOnly
		/// </summary>
		public IDbCommand cmdUSERS_PASSWORD_HISTORY_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSERS_PASSWORD_HISTORY_Inser";
			else
				cmd.CommandText = "spUSERS_PASSWORD_HISTORY_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_HASH        = Sql.CreateParameter(cmd, "@USER_HASH"       , "string",  32);
			return cmd;
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_Delete
		/// <summary>
		/// spUSERS_PASSWORD_LINK_Delete
		/// </summary>
		public void spUSERS_PASSWORD_LINK_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_PASSWORD_LINK_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_Delete
		/// <summary>
		/// spUSERS_PASSWORD_LINK_Delete
		/// </summary>
		public void spUSERS_PASSWORD_LINK_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_PASSWORD_LINK_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PASSWORD_LINK_Delete
		/// <summary>
		/// spUSERS_PASSWORD_LINK_Delete
		/// </summary>
		public IDbCommand cmdUSERS_PASSWORD_LINK_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_PASSWORD_LINK_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_LINK_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_LINK_InsertOnly(ref Guid gID, string sUSER_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOn";
							else
								cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_LINK_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_LINK_InsertOnly(ref Guid gID, string sUSER_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOn";
				else
					cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_PASSWORD_LINK_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_LINK_InsertOnly
		/// </summary>
		public IDbCommand cmdUSERS_PASSWORD_LINK_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOn";
			else
				cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_PasswordUpdate
		/// <summary>
		/// spUSERS_PasswordUpdate
		/// </summary>
		public void spUSERS_PasswordUpdate(Guid gID, string sUSER_HASH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_PasswordUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PasswordUpdate
		/// <summary>
		/// spUSERS_PasswordUpdate
		/// </summary>
		public void spUSERS_PasswordUpdate(Guid gID, string sUSER_HASH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_PasswordUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PasswordUpdate
		/// <summary>
		/// spUSERS_PasswordUpdate
		/// </summary>
		public IDbCommand cmdUSERS_PasswordUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_PasswordUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_HASH        = Sql.CreateParameter(cmd, "@USER_HASH"       , "string",  32);
			return cmd;
		}
		#endregion

		#region spUSERS_PreferencesUpdate
		/// <summary>
		/// spUSERS_PreferencesUpdate
		/// </summary>
		public void spUSERS_PreferencesUpdate(Guid gID, string sUSER_PREFERENCES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_PreferencesUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_PREFERENCES = Sql.AddParameter(cmd, "@USER_PREFERENCES", sUSER_PREFERENCES  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PreferencesUpdate
		/// <summary>
		/// spUSERS_PreferencesUpdate
		/// </summary>
		public void spUSERS_PreferencesUpdate(Guid gID, string sUSER_PREFERENCES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_PreferencesUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_PREFERENCES = Sql.AddParameter(cmd, "@USER_PREFERENCES", sUSER_PREFERENCES  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PreferencesUpdate
		/// <summary>
		/// spUSERS_PreferencesUpdate
		/// </summary>
		public IDbCommand cmdUSERS_PreferencesUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_PreferencesUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_PREFERENCES = Sql.CreateParameter(cmd, "@USER_PREFERENCES", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spUSERS_SIGNATURES_Delete
		/// <summary>
		/// spUSERS_SIGNATURES_Delete
		/// </summary>
		public void spUSERS_SIGNATURES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_SIGNATURES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_SIGNATURES_Delete
		/// <summary>
		/// spUSERS_SIGNATURES_Delete
		/// </summary>
		public void spUSERS_SIGNATURES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_SIGNATURES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_SIGNATURES_Delete
		/// <summary>
		/// spUSERS_SIGNATURES_Delete
		/// </summary>
		public IDbCommand cmdUSERS_SIGNATURES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_SIGNATURES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_SIGNATURES_Undelete
		/// <summary>
		/// spUSERS_SIGNATURES_Undelete
		/// </summary>
		public void spUSERS_SIGNATURES_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_SIGNATURES_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_SIGNATURES_Undelete
		/// <summary>
		/// spUSERS_SIGNATURES_Undelete
		/// </summary>
		public void spUSERS_SIGNATURES_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_SIGNATURES_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_SIGNATURES_Undelete
		/// <summary>
		/// spUSERS_SIGNATURES_Undelete
		/// </summary>
		public IDbCommand cmdUSERS_SIGNATURES_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_SIGNATURES_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spUSERS_SIGNATURES_Update
		/// <summary>
		/// spUSERS_SIGNATURES_Update
		/// </summary>
		public void spUSERS_SIGNATURES_Update(ref Guid gID, Guid gUSER_ID, string sNAME, string sSIGNATURE, string sSIGNATURE_HTML, bool bPRIMARY_SIGNATURE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_SIGNATURES_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parSIGNATURE         = Sql.AddParameter(cmd, "@SIGNATURE"        , sSIGNATURE          );
							IDbDataParameter parSIGNATURE_HTML    = Sql.AddParameter(cmd, "@SIGNATURE_HTML"   , sSIGNATURE_HTML     );
							IDbDataParameter parPRIMARY_SIGNATURE = Sql.AddParameter(cmd, "@PRIMARY_SIGNATURE", bPRIMARY_SIGNATURE  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_SIGNATURES_Update
		/// <summary>
		/// spUSERS_SIGNATURES_Update
		/// </summary>
		public void spUSERS_SIGNATURES_Update(ref Guid gID, Guid gUSER_ID, string sNAME, string sSIGNATURE, string sSIGNATURE_HTML, bool bPRIMARY_SIGNATURE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_SIGNATURES_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parSIGNATURE         = Sql.AddParameter(cmd, "@SIGNATURE"        , sSIGNATURE          );
				IDbDataParameter parSIGNATURE_HTML    = Sql.AddParameter(cmd, "@SIGNATURE_HTML"   , sSIGNATURE_HTML     );
				IDbDataParameter parPRIMARY_SIGNATURE = Sql.AddParameter(cmd, "@PRIMARY_SIGNATURE", bPRIMARY_SIGNATURE  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_SIGNATURES_Update
		/// <summary>
		/// spUSERS_SIGNATURES_Update
		/// </summary>
		public IDbCommand cmdUSERS_SIGNATURES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_SIGNATURES_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parUSER_ID           = Sql.CreateParameter(cmd, "@USER_ID"          , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parSIGNATURE         = Sql.CreateParameter(cmd, "@SIGNATURE"        , "string", 104857600);
			IDbDataParameter parSIGNATURE_HTML    = Sql.CreateParameter(cmd, "@SIGNATURE_HTML"   , "string", 104857600);
			IDbDataParameter parPRIMARY_SIGNATURE = Sql.CreateParameter(cmd, "@PRIMARY_SIGNATURE", "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_TEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spUSERS_TEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spUSERS_TEAM_MEMBERSHIPS_Update(Guid gUSER_ID, Guid gTEAM_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Updat";
							else
								cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_TEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spUSERS_TEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spUSERS_TEAM_MEMBERSHIPS_Update(Guid gUSER_ID, Guid gTEAM_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Updat";
				else
					cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_TEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spUSERS_TEAM_MEMBERSHIPS_Update
		/// </summary>
		public IDbCommand cmdUSERS_TEAM_MEMBERSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Updat";
			else
				cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_TimeZoneUpdate
		/// <summary>
		/// spUSERS_TimeZoneUpdate
		/// </summary>
		public void spUSERS_TimeZoneUpdate(Guid gID, Guid gTIMEZONE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_TimeZoneUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_TimeZoneUpdate
		/// <summary>
		/// spUSERS_TimeZoneUpdate
		/// </summary>
		public void spUSERS_TimeZoneUpdate(Guid gID, Guid gTIMEZONE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_TimeZoneUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_TimeZoneUpdate
		/// <summary>
		/// spUSERS_TimeZoneUpdate
		/// </summary>
		public IDbCommand cmdUSERS_TimeZoneUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_TimeZoneUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTIMEZONE_ID      = Sql.CreateParameter(cmd, "@TIMEZONE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_Undelete
		/// <summary>
		/// spUSERS_Undelete
		/// </summary>
		public void spUSERS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Undelete
		/// <summary>
		/// spUSERS_Undelete
		/// </summary>
		public void spUSERS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_Undelete
		/// <summary>
		/// spUSERS_Undelete
		/// </summary>
		public IDbCommand cmdUSERS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spUSERS_Update
		/// <summary>
		/// spUSERS_Update
		/// </summary>
		public void spUSERS_Update(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, bool bIS_ADMIN, bool bRECEIVE_NOTIFICATIONS, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sUSER_PREFERENCES, bool bPORTAL_ONLY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, bool bIS_GROUP, Guid gDEFAULT_TEAM, bool bIS_ADMIN_DELEGATE, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bSYSTEM_GENERATED_PASSWORD, bool bGOOGLEAPPS_SYNC_CONTACTS, bool bGOOGLEAPPS_SYNC_CALENDAR, string sGOOGLEAPPS_USERNAME, string sGOOGLEAPPS_PASSWORD, string sFACEBOOK_ID, bool bICLOUD_SYNC_CONTACTS, bool bICLOUD_SYNC_CALENDAR, string sICLOUD_USERNAME, string sICLOUD_PASSWORD, string sTHEME, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID, bool bSAVE_QUERY, bool bGROUP_TABS, bool bSUBPANEL_TABS, string sEXTENSION, string sSMS_OPT_IN, string sPICTURE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Update";
							IDbDataParameter parID                        = Sql.AddParameter(cmd, "@ID"                       , gID                         );
							IDbDataParameter parMODIFIED_USER_ID          = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"         ,  Security.USER_ID           );
							IDbDataParameter parUSER_NAME                 = Sql.AddParameter(cmd, "@USER_NAME"                , sUSER_NAME                  ,  60);
							IDbDataParameter parFIRST_NAME                = Sql.AddParameter(cmd, "@FIRST_NAME"               , sFIRST_NAME                 ,  30);
							IDbDataParameter parLAST_NAME                 = Sql.AddParameter(cmd, "@LAST_NAME"                , sLAST_NAME                  ,  30);
							IDbDataParameter parREPORTS_TO_ID             = Sql.AddParameter(cmd, "@REPORTS_TO_ID"            , gREPORTS_TO_ID              );
							IDbDataParameter parIS_ADMIN                  = Sql.AddParameter(cmd, "@IS_ADMIN"                 , bIS_ADMIN                   );
							IDbDataParameter parRECEIVE_NOTIFICATIONS     = Sql.AddParameter(cmd, "@RECEIVE_NOTIFICATIONS"    , bRECEIVE_NOTIFICATIONS      );
							IDbDataParameter parDESCRIPTION               = Sql.AddParameter(cmd, "@DESCRIPTION"              , sDESCRIPTION                );
							IDbDataParameter parTITLE                     = Sql.AddParameter(cmd, "@TITLE"                    , sTITLE                      ,  50);
							IDbDataParameter parDEPARTMENT                = Sql.AddParameter(cmd, "@DEPARTMENT"               , sDEPARTMENT                 ,  50);
							IDbDataParameter parPHONE_HOME                = Sql.AddParameter(cmd, "@PHONE_HOME"               , sPHONE_HOME                 ,  50);
							IDbDataParameter parPHONE_MOBILE              = Sql.AddParameter(cmd, "@PHONE_MOBILE"             , sPHONE_MOBILE               ,  50);
							IDbDataParameter parPHONE_WORK                = Sql.AddParameter(cmd, "@PHONE_WORK"               , sPHONE_WORK                 ,  50);
							IDbDataParameter parPHONE_OTHER               = Sql.AddParameter(cmd, "@PHONE_OTHER"              , sPHONE_OTHER                ,  50);
							IDbDataParameter parPHONE_FAX                 = Sql.AddParameter(cmd, "@PHONE_FAX"                , sPHONE_FAX                  ,  50);
							IDbDataParameter parEMAIL1                    = Sql.AddParameter(cmd, "@EMAIL1"                   , sEMAIL1                     , 100);
							IDbDataParameter parEMAIL2                    = Sql.AddParameter(cmd, "@EMAIL2"                   , sEMAIL2                     , 100);
							IDbDataParameter parSTATUS                    = Sql.AddParameter(cmd, "@STATUS"                   , sSTATUS                     ,  25);
							IDbDataParameter parADDRESS_STREET            = Sql.AddParameter(cmd, "@ADDRESS_STREET"           , sADDRESS_STREET             , 150);
							IDbDataParameter parADDRESS_CITY              = Sql.AddParameter(cmd, "@ADDRESS_CITY"             , sADDRESS_CITY               , 100);
							IDbDataParameter parADDRESS_STATE             = Sql.AddParameter(cmd, "@ADDRESS_STATE"            , sADDRESS_STATE              , 100);
							IDbDataParameter parADDRESS_POSTALCODE        = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE"       , sADDRESS_POSTALCODE         ,   9);
							IDbDataParameter parADDRESS_COUNTRY           = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"          , sADDRESS_COUNTRY            ,  25);
							IDbDataParameter parUSER_PREFERENCES          = Sql.AddParameter(cmd, "@USER_PREFERENCES"         , sUSER_PREFERENCES           );
							IDbDataParameter parPORTAL_ONLY               = Sql.AddParameter(cmd, "@PORTAL_ONLY"              , bPORTAL_ONLY                );
							IDbDataParameter parEMPLOYEE_STATUS           = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"          , sEMPLOYEE_STATUS            ,  25);
							IDbDataParameter parMESSENGER_ID              = Sql.AddParameter(cmd, "@MESSENGER_ID"             , sMESSENGER_ID               ,  25);
							IDbDataParameter parMESSENGER_TYPE            = Sql.AddParameter(cmd, "@MESSENGER_TYPE"           , sMESSENGER_TYPE             ,  25);
							IDbDataParameter parPARENT_TYPE               = Sql.AddParameter(cmd, "@PARENT_TYPE"              , sPARENT_TYPE                ,  25);
							IDbDataParameter parPARENT_ID                 = Sql.AddParameter(cmd, "@PARENT_ID"                , gPARENT_ID                  );
							IDbDataParameter parIS_GROUP                  = Sql.AddParameter(cmd, "@IS_GROUP"                 , bIS_GROUP                   );
							IDbDataParameter parDEFAULT_TEAM              = Sql.AddParameter(cmd, "@DEFAULT_TEAM"             , gDEFAULT_TEAM               );
							IDbDataParameter parIS_ADMIN_DELEGATE         = Sql.AddParameter(cmd, "@IS_ADMIN_DELEGATE"        , bIS_ADMIN_DELEGATE          );
							IDbDataParameter parMAIL_SMTPUSER             = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"            , sMAIL_SMTPUSER              ,  60);
							IDbDataParameter parMAIL_SMTPPASS             = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"            , sMAIL_SMTPPASS              , 100);
							IDbDataParameter parSYSTEM_GENERATED_PASSWORD = Sql.AddParameter(cmd, "@SYSTEM_GENERATED_PASSWORD", bSYSTEM_GENERATED_PASSWORD  );
							IDbDataParameter parGOOGLEAPPS_SYNC_CONTACTS  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CONTACTS" , bGOOGLEAPPS_SYNC_CONTACTS   );
							IDbDataParameter parGOOGLEAPPS_SYNC_CALENDAR  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CALENDAR" , bGOOGLEAPPS_SYNC_CALENDAR   );
							IDbDataParameter parGOOGLEAPPS_USERNAME       = Sql.AddParameter(cmd, "@GOOGLEAPPS_USERNAME"      , sGOOGLEAPPS_USERNAME        , 100);
							IDbDataParameter parGOOGLEAPPS_PASSWORD       = Sql.AddParameter(cmd, "@GOOGLEAPPS_PASSWORD"      , sGOOGLEAPPS_PASSWORD        , 100);
							IDbDataParameter parFACEBOOK_ID               = Sql.AddParameter(cmd, "@FACEBOOK_ID"              , sFACEBOOK_ID                ,  25);
							IDbDataParameter parICLOUD_SYNC_CONTACTS      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CONTACTS"     , bICLOUD_SYNC_CONTACTS       );
							IDbDataParameter parICLOUD_SYNC_CALENDAR      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CALENDAR"     , bICLOUD_SYNC_CALENDAR       );
							IDbDataParameter parICLOUD_USERNAME           = Sql.AddParameter(cmd, "@ICLOUD_USERNAME"          , sICLOUD_USERNAME            , 100);
							IDbDataParameter parICLOUD_PASSWORD           = Sql.AddParameter(cmd, "@ICLOUD_PASSWORD"          , sICLOUD_PASSWORD            , 100);
							IDbDataParameter parTHEME                     = Sql.AddParameter(cmd, "@THEME"                    , sTHEME                      ,  25);
							IDbDataParameter parDATE_FORMAT               = Sql.AddParameter(cmd, "@DATE_FORMAT"              , sDATE_FORMAT                ,  25);
							IDbDataParameter parTIME_FORMAT               = Sql.AddParameter(cmd, "@TIME_FORMAT"              , sTIME_FORMAT                ,  25);
							IDbDataParameter parLANG                      = Sql.AddParameter(cmd, "@LANG"                     , sLANG                       ,  10);
							IDbDataParameter parCURRENCY_ID               = Sql.AddParameter(cmd, "@CURRENCY_ID"              , gCURRENCY_ID                );
							IDbDataParameter parTIMEZONE_ID               = Sql.AddParameter(cmd, "@TIMEZONE_ID"              , gTIMEZONE_ID                );
							IDbDataParameter parSAVE_QUERY                = Sql.AddParameter(cmd, "@SAVE_QUERY"               , bSAVE_QUERY                 );
							IDbDataParameter parGROUP_TABS                = Sql.AddParameter(cmd, "@GROUP_TABS"               , bGROUP_TABS                 );
							IDbDataParameter parSUBPANEL_TABS             = Sql.AddParameter(cmd, "@SUBPANEL_TABS"            , bSUBPANEL_TABS              );
							IDbDataParameter parEXTENSION                 = Sql.AddParameter(cmd, "@EXTENSION"                , sEXTENSION                  ,  25);
							IDbDataParameter parSMS_OPT_IN                = Sql.AddParameter(cmd, "@SMS_OPT_IN"               , sSMS_OPT_IN                 ,  25);
							IDbDataParameter parPICTURE                   = Sql.AddParameter(cmd, "@PICTURE"                  , sPICTURE                    );
							IDbDataParameter parMAIL_SMTPSERVER           = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"          , sMAIL_SMTPSERVER            , 100);
							IDbDataParameter parMAIL_SMTPPORT             = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"            , nMAIL_SMTPPORT              );
							IDbDataParameter parMAIL_SMTPAUTH_REQ         = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ"        , bMAIL_SMTPAUTH_REQ          );
							IDbDataParameter parMAIL_SMTPSSL              = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"             , nMAIL_SMTPSSL               );
							IDbDataParameter parMAIL_SENDTYPE             = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"            , sMAIL_SENDTYPE              ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Update
		/// <summary>
		/// spUSERS_Update
		/// </summary>
		public void spUSERS_Update(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, bool bIS_ADMIN, bool bRECEIVE_NOTIFICATIONS, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sUSER_PREFERENCES, bool bPORTAL_ONLY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, bool bIS_GROUP, Guid gDEFAULT_TEAM, bool bIS_ADMIN_DELEGATE, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bSYSTEM_GENERATED_PASSWORD, bool bGOOGLEAPPS_SYNC_CONTACTS, bool bGOOGLEAPPS_SYNC_CALENDAR, string sGOOGLEAPPS_USERNAME, string sGOOGLEAPPS_PASSWORD, string sFACEBOOK_ID, bool bICLOUD_SYNC_CONTACTS, bool bICLOUD_SYNC_CALENDAR, string sICLOUD_USERNAME, string sICLOUD_PASSWORD, string sTHEME, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID, bool bSAVE_QUERY, bool bGROUP_TABS, bool bSUBPANEL_TABS, string sEXTENSION, string sSMS_OPT_IN, string sPICTURE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Update";
				IDbDataParameter parID                        = Sql.AddParameter(cmd, "@ID"                       , gID                         );
				IDbDataParameter parMODIFIED_USER_ID          = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"         ,  Security.USER_ID           );
				IDbDataParameter parUSER_NAME                 = Sql.AddParameter(cmd, "@USER_NAME"                , sUSER_NAME                  ,  60);
				IDbDataParameter parFIRST_NAME                = Sql.AddParameter(cmd, "@FIRST_NAME"               , sFIRST_NAME                 ,  30);
				IDbDataParameter parLAST_NAME                 = Sql.AddParameter(cmd, "@LAST_NAME"                , sLAST_NAME                  ,  30);
				IDbDataParameter parREPORTS_TO_ID             = Sql.AddParameter(cmd, "@REPORTS_TO_ID"            , gREPORTS_TO_ID              );
				IDbDataParameter parIS_ADMIN                  = Sql.AddParameter(cmd, "@IS_ADMIN"                 , bIS_ADMIN                   );
				IDbDataParameter parRECEIVE_NOTIFICATIONS     = Sql.AddParameter(cmd, "@RECEIVE_NOTIFICATIONS"    , bRECEIVE_NOTIFICATIONS      );
				IDbDataParameter parDESCRIPTION               = Sql.AddParameter(cmd, "@DESCRIPTION"              , sDESCRIPTION                );
				IDbDataParameter parTITLE                     = Sql.AddParameter(cmd, "@TITLE"                    , sTITLE                      ,  50);
				IDbDataParameter parDEPARTMENT                = Sql.AddParameter(cmd, "@DEPARTMENT"               , sDEPARTMENT                 ,  50);
				IDbDataParameter parPHONE_HOME                = Sql.AddParameter(cmd, "@PHONE_HOME"               , sPHONE_HOME                 ,  50);
				IDbDataParameter parPHONE_MOBILE              = Sql.AddParameter(cmd, "@PHONE_MOBILE"             , sPHONE_MOBILE               ,  50);
				IDbDataParameter parPHONE_WORK                = Sql.AddParameter(cmd, "@PHONE_WORK"               , sPHONE_WORK                 ,  50);
				IDbDataParameter parPHONE_OTHER               = Sql.AddParameter(cmd, "@PHONE_OTHER"              , sPHONE_OTHER                ,  50);
				IDbDataParameter parPHONE_FAX                 = Sql.AddParameter(cmd, "@PHONE_FAX"                , sPHONE_FAX                  ,  50);
				IDbDataParameter parEMAIL1                    = Sql.AddParameter(cmd, "@EMAIL1"                   , sEMAIL1                     , 100);
				IDbDataParameter parEMAIL2                    = Sql.AddParameter(cmd, "@EMAIL2"                   , sEMAIL2                     , 100);
				IDbDataParameter parSTATUS                    = Sql.AddParameter(cmd, "@STATUS"                   , sSTATUS                     ,  25);
				IDbDataParameter parADDRESS_STREET            = Sql.AddParameter(cmd, "@ADDRESS_STREET"           , sADDRESS_STREET             , 150);
				IDbDataParameter parADDRESS_CITY              = Sql.AddParameter(cmd, "@ADDRESS_CITY"             , sADDRESS_CITY               , 100);
				IDbDataParameter parADDRESS_STATE             = Sql.AddParameter(cmd, "@ADDRESS_STATE"            , sADDRESS_STATE              , 100);
				IDbDataParameter parADDRESS_POSTALCODE        = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE"       , sADDRESS_POSTALCODE         ,   9);
				IDbDataParameter parADDRESS_COUNTRY           = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"          , sADDRESS_COUNTRY            ,  25);
				IDbDataParameter parUSER_PREFERENCES          = Sql.AddParameter(cmd, "@USER_PREFERENCES"         , sUSER_PREFERENCES           );
				IDbDataParameter parPORTAL_ONLY               = Sql.AddParameter(cmd, "@PORTAL_ONLY"              , bPORTAL_ONLY                );
				IDbDataParameter parEMPLOYEE_STATUS           = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"          , sEMPLOYEE_STATUS            ,  25);
				IDbDataParameter parMESSENGER_ID              = Sql.AddParameter(cmd, "@MESSENGER_ID"             , sMESSENGER_ID               ,  25);
				IDbDataParameter parMESSENGER_TYPE            = Sql.AddParameter(cmd, "@MESSENGER_TYPE"           , sMESSENGER_TYPE             ,  25);
				IDbDataParameter parPARENT_TYPE               = Sql.AddParameter(cmd, "@PARENT_TYPE"              , sPARENT_TYPE                ,  25);
				IDbDataParameter parPARENT_ID                 = Sql.AddParameter(cmd, "@PARENT_ID"                , gPARENT_ID                  );
				IDbDataParameter parIS_GROUP                  = Sql.AddParameter(cmd, "@IS_GROUP"                 , bIS_GROUP                   );
				IDbDataParameter parDEFAULT_TEAM              = Sql.AddParameter(cmd, "@DEFAULT_TEAM"             , gDEFAULT_TEAM               );
				IDbDataParameter parIS_ADMIN_DELEGATE         = Sql.AddParameter(cmd, "@IS_ADMIN_DELEGATE"        , bIS_ADMIN_DELEGATE          );
				IDbDataParameter parMAIL_SMTPUSER             = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"            , sMAIL_SMTPUSER              ,  60);
				IDbDataParameter parMAIL_SMTPPASS             = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"            , sMAIL_SMTPPASS              , 100);
				IDbDataParameter parSYSTEM_GENERATED_PASSWORD = Sql.AddParameter(cmd, "@SYSTEM_GENERATED_PASSWORD", bSYSTEM_GENERATED_PASSWORD  );
				IDbDataParameter parGOOGLEAPPS_SYNC_CONTACTS  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CONTACTS" , bGOOGLEAPPS_SYNC_CONTACTS   );
				IDbDataParameter parGOOGLEAPPS_SYNC_CALENDAR  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CALENDAR" , bGOOGLEAPPS_SYNC_CALENDAR   );
				IDbDataParameter parGOOGLEAPPS_USERNAME       = Sql.AddParameter(cmd, "@GOOGLEAPPS_USERNAME"      , sGOOGLEAPPS_USERNAME        , 100);
				IDbDataParameter parGOOGLEAPPS_PASSWORD       = Sql.AddParameter(cmd, "@GOOGLEAPPS_PASSWORD"      , sGOOGLEAPPS_PASSWORD        , 100);
				IDbDataParameter parFACEBOOK_ID               = Sql.AddParameter(cmd, "@FACEBOOK_ID"              , sFACEBOOK_ID                ,  25);
				IDbDataParameter parICLOUD_SYNC_CONTACTS      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CONTACTS"     , bICLOUD_SYNC_CONTACTS       );
				IDbDataParameter parICLOUD_SYNC_CALENDAR      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CALENDAR"     , bICLOUD_SYNC_CALENDAR       );
				IDbDataParameter parICLOUD_USERNAME           = Sql.AddParameter(cmd, "@ICLOUD_USERNAME"          , sICLOUD_USERNAME            , 100);
				IDbDataParameter parICLOUD_PASSWORD           = Sql.AddParameter(cmd, "@ICLOUD_PASSWORD"          , sICLOUD_PASSWORD            , 100);
				IDbDataParameter parTHEME                     = Sql.AddParameter(cmd, "@THEME"                    , sTHEME                      ,  25);
				IDbDataParameter parDATE_FORMAT               = Sql.AddParameter(cmd, "@DATE_FORMAT"              , sDATE_FORMAT                ,  25);
				IDbDataParameter parTIME_FORMAT               = Sql.AddParameter(cmd, "@TIME_FORMAT"              , sTIME_FORMAT                ,  25);
				IDbDataParameter parLANG                      = Sql.AddParameter(cmd, "@LANG"                     , sLANG                       ,  10);
				IDbDataParameter parCURRENCY_ID               = Sql.AddParameter(cmd, "@CURRENCY_ID"              , gCURRENCY_ID                );
				IDbDataParameter parTIMEZONE_ID               = Sql.AddParameter(cmd, "@TIMEZONE_ID"              , gTIMEZONE_ID                );
				IDbDataParameter parSAVE_QUERY                = Sql.AddParameter(cmd, "@SAVE_QUERY"               , bSAVE_QUERY                 );
				IDbDataParameter parGROUP_TABS                = Sql.AddParameter(cmd, "@GROUP_TABS"               , bGROUP_TABS                 );
				IDbDataParameter parSUBPANEL_TABS             = Sql.AddParameter(cmd, "@SUBPANEL_TABS"            , bSUBPANEL_TABS              );
				IDbDataParameter parEXTENSION                 = Sql.AddParameter(cmd, "@EXTENSION"                , sEXTENSION                  ,  25);
				IDbDataParameter parSMS_OPT_IN                = Sql.AddParameter(cmd, "@SMS_OPT_IN"               , sSMS_OPT_IN                 ,  25);
				IDbDataParameter parPICTURE                   = Sql.AddParameter(cmd, "@PICTURE"                  , sPICTURE                    );
				IDbDataParameter parMAIL_SMTPSERVER           = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"          , sMAIL_SMTPSERVER            , 100);
				IDbDataParameter parMAIL_SMTPPORT             = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"            , nMAIL_SMTPPORT              );
				IDbDataParameter parMAIL_SMTPAUTH_REQ         = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ"        , bMAIL_SMTPAUTH_REQ          );
				IDbDataParameter parMAIL_SMTPSSL              = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"             , nMAIL_SMTPSSL               );
				IDbDataParameter parMAIL_SENDTYPE             = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"            , sMAIL_SENDTYPE              ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_Update
		/// <summary>
		/// spUSERS_Update
		/// </summary>
		public IDbCommand cmdUSERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Update";
			IDbDataParameter parID                        = Sql.CreateParameter(cmd, "@ID"                       , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID          = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME                 = Sql.CreateParameter(cmd, "@USER_NAME"                , "string",  60);
			IDbDataParameter parFIRST_NAME                = Sql.CreateParameter(cmd, "@FIRST_NAME"               , "string",  30);
			IDbDataParameter parLAST_NAME                 = Sql.CreateParameter(cmd, "@LAST_NAME"                , "string",  30);
			IDbDataParameter parREPORTS_TO_ID             = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"            , "Guid",  16);
			IDbDataParameter parIS_ADMIN                  = Sql.CreateParameter(cmd, "@IS_ADMIN"                 , "bool",   1);
			IDbDataParameter parRECEIVE_NOTIFICATIONS     = Sql.CreateParameter(cmd, "@RECEIVE_NOTIFICATIONS"    , "bool",   1);
			IDbDataParameter parDESCRIPTION               = Sql.CreateParameter(cmd, "@DESCRIPTION"              , "string", 104857600);
			IDbDataParameter parTITLE                     = Sql.CreateParameter(cmd, "@TITLE"                    , "string",  50);
			IDbDataParameter parDEPARTMENT                = Sql.CreateParameter(cmd, "@DEPARTMENT"               , "string",  50);
			IDbDataParameter parPHONE_HOME                = Sql.CreateParameter(cmd, "@PHONE_HOME"               , "string",  50);
			IDbDataParameter parPHONE_MOBILE              = Sql.CreateParameter(cmd, "@PHONE_MOBILE"             , "string",  50);
			IDbDataParameter parPHONE_WORK                = Sql.CreateParameter(cmd, "@PHONE_WORK"               , "string",  50);
			IDbDataParameter parPHONE_OTHER               = Sql.CreateParameter(cmd, "@PHONE_OTHER"              , "string",  50);
			IDbDataParameter parPHONE_FAX                 = Sql.CreateParameter(cmd, "@PHONE_FAX"                , "string",  50);
			IDbDataParameter parEMAIL1                    = Sql.CreateParameter(cmd, "@EMAIL1"                   , "string", 100);
			IDbDataParameter parEMAIL2                    = Sql.CreateParameter(cmd, "@EMAIL2"                   , "string", 100);
			IDbDataParameter parSTATUS                    = Sql.CreateParameter(cmd, "@STATUS"                   , "string",  25);
			IDbDataParameter parADDRESS_STREET            = Sql.CreateParameter(cmd, "@ADDRESS_STREET"           , "string", 150);
			IDbDataParameter parADDRESS_CITY              = Sql.CreateParameter(cmd, "@ADDRESS_CITY"             , "string", 100);
			IDbDataParameter parADDRESS_STATE             = Sql.CreateParameter(cmd, "@ADDRESS_STATE"            , "string", 100);
			IDbDataParameter parADDRESS_POSTALCODE        = Sql.CreateParameter(cmd, "@ADDRESS_POSTALCODE"       , "string",   9);
			IDbDataParameter parADDRESS_COUNTRY           = Sql.CreateParameter(cmd, "@ADDRESS_COUNTRY"          , "string",  25);
			IDbDataParameter parUSER_PREFERENCES          = Sql.CreateParameter(cmd, "@USER_PREFERENCES"         , "string", 104857600);
			IDbDataParameter parPORTAL_ONLY               = Sql.CreateParameter(cmd, "@PORTAL_ONLY"              , "bool",   1);
			IDbDataParameter parEMPLOYEE_STATUS           = Sql.CreateParameter(cmd, "@EMPLOYEE_STATUS"          , "string",  25);
			IDbDataParameter parMESSENGER_ID              = Sql.CreateParameter(cmd, "@MESSENGER_ID"             , "string",  25);
			IDbDataParameter parMESSENGER_TYPE            = Sql.CreateParameter(cmd, "@MESSENGER_TYPE"           , "string",  25);
			IDbDataParameter parPARENT_TYPE               = Sql.CreateParameter(cmd, "@PARENT_TYPE"              , "string",  25);
			IDbDataParameter parPARENT_ID                 = Sql.CreateParameter(cmd, "@PARENT_ID"                , "Guid",  16);
			IDbDataParameter parIS_GROUP                  = Sql.CreateParameter(cmd, "@IS_GROUP"                 , "bool",   1);
			IDbDataParameter parDEFAULT_TEAM              = Sql.CreateParameter(cmd, "@DEFAULT_TEAM"             , "Guid",  16);
			IDbDataParameter parIS_ADMIN_DELEGATE         = Sql.CreateParameter(cmd, "@IS_ADMIN_DELEGATE"        , "bool",   1);
			IDbDataParameter parMAIL_SMTPUSER             = Sql.CreateParameter(cmd, "@MAIL_SMTPUSER"            , "string",  60);
			IDbDataParameter parMAIL_SMTPPASS             = Sql.CreateParameter(cmd, "@MAIL_SMTPPASS"            , "string", 100);
			IDbDataParameter parSYSTEM_GENERATED_PASSWORD = Sql.CreateParameter(cmd, "@SYSTEM_GENERATED_PASSWORD", "bool",   1);
			IDbDataParameter parGOOGLEAPPS_SYNC_CONTACTS  = Sql.CreateParameter(cmd, "@GOOGLEAPPS_SYNC_CONTACTS" , "bool",   1);
			IDbDataParameter parGOOGLEAPPS_SYNC_CALENDAR  = Sql.CreateParameter(cmd, "@GOOGLEAPPS_SYNC_CALENDAR" , "bool",   1);
			IDbDataParameter parGOOGLEAPPS_USERNAME       = Sql.CreateParameter(cmd, "@GOOGLEAPPS_USERNAME"      , "string", 100);
			IDbDataParameter parGOOGLEAPPS_PASSWORD       = Sql.CreateParameter(cmd, "@GOOGLEAPPS_PASSWORD"      , "string", 100);
			IDbDataParameter parFACEBOOK_ID               = Sql.CreateParameter(cmd, "@FACEBOOK_ID"              , "string",  25);
			IDbDataParameter parICLOUD_SYNC_CONTACTS      = Sql.CreateParameter(cmd, "@ICLOUD_SYNC_CONTACTS"     , "bool",   1);
			IDbDataParameter parICLOUD_SYNC_CALENDAR      = Sql.CreateParameter(cmd, "@ICLOUD_SYNC_CALENDAR"     , "bool",   1);
			IDbDataParameter parICLOUD_USERNAME           = Sql.CreateParameter(cmd, "@ICLOUD_USERNAME"          , "string", 100);
			IDbDataParameter parICLOUD_PASSWORD           = Sql.CreateParameter(cmd, "@ICLOUD_PASSWORD"          , "string", 100);
			IDbDataParameter parTHEME                     = Sql.CreateParameter(cmd, "@THEME"                    , "string",  25);
			IDbDataParameter parDATE_FORMAT               = Sql.CreateParameter(cmd, "@DATE_FORMAT"              , "string",  25);
			IDbDataParameter parTIME_FORMAT               = Sql.CreateParameter(cmd, "@TIME_FORMAT"              , "string",  25);
			IDbDataParameter parLANG                      = Sql.CreateParameter(cmd, "@LANG"                     , "string",  10);
			IDbDataParameter parCURRENCY_ID               = Sql.CreateParameter(cmd, "@CURRENCY_ID"              , "Guid",  16);
			IDbDataParameter parTIMEZONE_ID               = Sql.CreateParameter(cmd, "@TIMEZONE_ID"              , "Guid",  16);
			IDbDataParameter parSAVE_QUERY                = Sql.CreateParameter(cmd, "@SAVE_QUERY"               , "bool",   1);
			IDbDataParameter parGROUP_TABS                = Sql.CreateParameter(cmd, "@GROUP_TABS"               , "bool",   1);
			IDbDataParameter parSUBPANEL_TABS             = Sql.CreateParameter(cmd, "@SUBPANEL_TABS"            , "bool",   1);
			IDbDataParameter parEXTENSION                 = Sql.CreateParameter(cmd, "@EXTENSION"                , "string",  25);
			IDbDataParameter parSMS_OPT_IN                = Sql.CreateParameter(cmd, "@SMS_OPT_IN"               , "string",  25);
			IDbDataParameter parPICTURE                   = Sql.CreateParameter(cmd, "@PICTURE"                  , "string", 104857600);
			IDbDataParameter parMAIL_SMTPSERVER           = Sql.CreateParameter(cmd, "@MAIL_SMTPSERVER"          , "string", 100);
			IDbDataParameter parMAIL_SMTPPORT             = Sql.CreateParameter(cmd, "@MAIL_SMTPPORT"            , "Int32",   4);
			IDbDataParameter parMAIL_SMTPAUTH_REQ         = Sql.CreateParameter(cmd, "@MAIL_SMTPAUTH_REQ"        , "bool",   1);
			IDbDataParameter parMAIL_SMTPSSL              = Sql.CreateParameter(cmd, "@MAIL_SMTPSSL"             , "Int32",   4);
			IDbDataParameter parMAIL_SENDTYPE             = Sql.CreateParameter(cmd, "@MAIL_SENDTYPE"            , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_UpdatePrimaryRole
		/// <summary>
		/// spUSERS_UpdatePrimaryRole
		/// </summary>
		public void spUSERS_UpdatePrimaryRole(Guid gID, Guid gROLE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_UpdatePrimaryRole";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_UpdatePrimaryRole
		/// <summary>
		/// spUSERS_UpdatePrimaryRole
		/// </summary>
		public void spUSERS_UpdatePrimaryRole(Guid gID, Guid gROLE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_UpdatePrimaryRole";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_UpdatePrimaryRole
		/// <summary>
		/// spUSERS_UpdatePrimaryRole
		/// </summary>
		public IDbCommand cmdUSERS_UpdatePrimaryRole(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_UpdatePrimaryRole";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_UpdateStatus
		/// <summary>
		/// spUSERS_UpdateStatus
		/// </summary>
		public void spUSERS_UpdateStatus(Guid gID, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_UpdateStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_UpdateStatus
		/// <summary>
		/// spUSERS_UpdateStatus
		/// </summary>
		public void spUSERS_UpdateStatus(Guid gID, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_UpdateStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_UpdateStatus
		/// <summary>
		/// spUSERS_UpdateStatus
		/// </summary>
		public IDbCommand cmdUSERS_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_UpdateStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spUSERS_WizardUpdate
		/// <summary>
		/// spUSERS_WizardUpdate
		/// </summary>
		public void spUSERS_WizardUpdate(Guid gID, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_WizardUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDATE_FORMAT      = Sql.AddParameter(cmd, "@DATE_FORMAT"     , sDATE_FORMAT       ,  25);
							IDbDataParameter parTIME_FORMAT      = Sql.AddParameter(cmd, "@TIME_FORMAT"     , sTIME_FORMAT       ,  25);
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parCURRENCY_ID      = Sql.AddParameter(cmd, "@CURRENCY_ID"     , gCURRENCY_ID       );
							IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_WizardUpdate
		/// <summary>
		/// spUSERS_WizardUpdate
		/// </summary>
		public void spUSERS_WizardUpdate(Guid gID, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_WizardUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDATE_FORMAT      = Sql.AddParameter(cmd, "@DATE_FORMAT"     , sDATE_FORMAT       ,  25);
				IDbDataParameter parTIME_FORMAT      = Sql.AddParameter(cmd, "@TIME_FORMAT"     , sTIME_FORMAT       ,  25);
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parCURRENCY_ID      = Sql.AddParameter(cmd, "@CURRENCY_ID"     , gCURRENCY_ID       );
				IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_WizardUpdate
		/// <summary>
		/// spUSERS_WizardUpdate
		/// </summary>
		public IDbCommand cmdUSERS_WizardUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_WizardUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDATE_FORMAT      = Sql.CreateParameter(cmd, "@DATE_FORMAT"     , "string",  25);
			IDbDataParameter parTIME_FORMAT      = Sql.CreateParameter(cmd, "@TIME_FORMAT"     , "string",  25);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parCURRENCY_ID      = Sql.CreateParameter(cmd, "@CURRENCY_ID"     , "Guid",  16);
			IDbDataParameter parTIMEZONE_ID      = Sql.CreateParameter(cmd, "@TIMEZONE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spVERSIONS_Delete
		/// <summary>
		/// spVERSIONS_Delete
		/// </summary>
		public void spVERSIONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spVERSIONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spVERSIONS_Delete
		/// <summary>
		/// spVERSIONS_Delete
		/// </summary>
		public void spVERSIONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spVERSIONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdVERSIONS_Delete
		/// <summary>
		/// spVERSIONS_Delete
		/// </summary>
		public IDbCommand cmdVERSIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spVERSIONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spVERSIONS_Update
		/// <summary>
		/// spVERSIONS_Update
		/// </summary>
		public void spVERSIONS_Update(ref Guid gID, string sNAME, string sFILE_VERSION, string sDB_VERSION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spVERSIONS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parFILE_VERSION     = Sql.AddParameter(cmd, "@FILE_VERSION"    , sFILE_VERSION      , 255);
							IDbDataParameter parDB_VERSION       = Sql.AddParameter(cmd, "@DB_VERSION"      , sDB_VERSION        , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spVERSIONS_Update
		/// <summary>
		/// spVERSIONS_Update
		/// </summary>
		public void spVERSIONS_Update(ref Guid gID, string sNAME, string sFILE_VERSION, string sDB_VERSION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spVERSIONS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parFILE_VERSION     = Sql.AddParameter(cmd, "@FILE_VERSION"    , sFILE_VERSION      , 255);
				IDbDataParameter parDB_VERSION       = Sql.AddParameter(cmd, "@DB_VERSION"      , sDB_VERSION        , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdVERSIONS_Update
		/// <summary>
		/// spVERSIONS_Update
		/// </summary>
		public IDbCommand cmdVERSIONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spVERSIONS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parFILE_VERSION     = Sql.CreateParameter(cmd, "@FILE_VERSION"    , "string", 255);
			IDbDataParameter parDB_VERSION       = Sql.CreateParameter(cmd, "@DB_VERSION"      , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spWORKFLOW_EVENTS_Delete
		/// <summary>
		/// spWORKFLOW_EVENTS_Delete
		/// </summary>
		public void spWORKFLOW_EVENTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spWORKFLOW_EVENTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spWORKFLOW_EVENTS_Delete
		/// <summary>
		/// spWORKFLOW_EVENTS_Delete
		/// </summary>
		public void spWORKFLOW_EVENTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spWORKFLOW_EVENTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdWORKFLOW_EVENTS_Delete
		/// <summary>
		/// spWORKFLOW_EVENTS_Delete
		/// </summary>
		public IDbCommand cmdWORKFLOW_EVENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spWORKFLOW_EVENTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spWORKFLOW_EVENTS_ProcessAll
		/// <summary>
		/// spWORKFLOW_EVENTS_ProcessAll
		/// </summary>
		public void spWORKFLOW_EVENTS_ProcessAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spWORKFLOW_EVENTS_ProcessAll";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spWORKFLOW_EVENTS_ProcessAll
		/// <summary>
		/// spWORKFLOW_EVENTS_ProcessAll
		/// </summary>
		public void spWORKFLOW_EVENTS_ProcessAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spWORKFLOW_EVENTS_ProcessAll";
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdWORKFLOW_EVENTS_ProcessAll
		/// <summary>
		/// spWORKFLOW_EVENTS_ProcessAll
		/// </summary>
		public IDbCommand cmdWORKFLOW_EVENTS_ProcessAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spWORKFLOW_EVENTS_ProcessAll";
			return cmd;
		}
		#endregion

		#region spZIPCODES_Delete
		/// <summary>
		/// spZIPCODES_Delete
		/// </summary>
		public void spZIPCODES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spZIPCODES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spZIPCODES_Delete
		/// <summary>
		/// spZIPCODES_Delete
		/// </summary>
		public void spZIPCODES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spZIPCODES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdZIPCODES_Delete
		/// <summary>
		/// spZIPCODES_Delete
		/// </summary>
		public IDbCommand cmdZIPCODES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spZIPCODES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spZIPCODES_InsertOnly
		/// <summary>
		/// spZIPCODES_InsertOnly
		/// </summary>
		public void spZIPCODES_InsertOnly(string sNAME, string sCITY, string sSTATE, string sCOUNTRY, float flLONGITUDE, float flLATITUDE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spZIPCODES_InsertOnly";
							IDbDataParameter parNAME      = Sql.AddParameter(cmd, "@NAME"     , sNAME       ,  20);
							IDbDataParameter parCITY      = Sql.AddParameter(cmd, "@CITY"     , sCITY       , 100);
							IDbDataParameter parSTATE     = Sql.AddParameter(cmd, "@STATE"    , sSTATE      , 100);
							IDbDataParameter parCOUNTRY   = Sql.AddParameter(cmd, "@COUNTRY"  , sCOUNTRY    , 100);
							IDbDataParameter parLONGITUDE = Sql.AddParameter(cmd, "@LONGITUDE", flLONGITUDE );
							IDbDataParameter parLATITUDE  = Sql.AddParameter(cmd, "@LATITUDE" , flLATITUDE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spZIPCODES_InsertOnly
		/// <summary>
		/// spZIPCODES_InsertOnly
		/// </summary>
		public void spZIPCODES_InsertOnly(string sNAME, string sCITY, string sSTATE, string sCOUNTRY, float flLONGITUDE, float flLATITUDE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spZIPCODES_InsertOnly";
				IDbDataParameter parNAME      = Sql.AddParameter(cmd, "@NAME"     , sNAME       ,  20);
				IDbDataParameter parCITY      = Sql.AddParameter(cmd, "@CITY"     , sCITY       , 100);
				IDbDataParameter parSTATE     = Sql.AddParameter(cmd, "@STATE"    , sSTATE      , 100);
				IDbDataParameter parCOUNTRY   = Sql.AddParameter(cmd, "@COUNTRY"  , sCOUNTRY    , 100);
				IDbDataParameter parLONGITUDE = Sql.AddParameter(cmd, "@LONGITUDE", flLONGITUDE );
				IDbDataParameter parLATITUDE  = Sql.AddParameter(cmd, "@LATITUDE" , flLATITUDE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdZIPCODES_InsertOnly
		/// <summary>
		/// spZIPCODES_InsertOnly
		/// </summary>
		public IDbCommand cmdZIPCODES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spZIPCODES_InsertOnly";
			IDbDataParameter parNAME      = Sql.CreateParameter(cmd, "@NAME"     , "string",  20);
			IDbDataParameter parCITY      = Sql.CreateParameter(cmd, "@CITY"     , "string", 100);
			IDbDataParameter parSTATE     = Sql.CreateParameter(cmd, "@STATE"    , "string", 100);
			IDbDataParameter parCOUNTRY   = Sql.CreateParameter(cmd, "@COUNTRY"  , "string", 100);
			IDbDataParameter parLONGITUDE = Sql.CreateParameter(cmd, "@LONGITUDE", "float",   9);
			IDbDataParameter parLATITUDE  = Sql.CreateParameter(cmd, "@LATITUDE" , "float",   9);
			return cmd;
		}
		#endregion

		#region spZIPCODES_Update
		/// <summary>
		/// spZIPCODES_Update
		/// </summary>
		public void spZIPCODES_Update(ref Guid gID, string sNAME, string sCITY, string sSTATE, string sCOUNTRY, float flLONGITUDE, float flLATITUDE, Guid gTIMEZONE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spZIPCODES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  20);
							IDbDataParameter parCITY             = Sql.AddParameter(cmd, "@CITY"            , sCITY              , 100);
							IDbDataParameter parSTATE            = Sql.AddParameter(cmd, "@STATE"           , sSTATE             , 100);
							IDbDataParameter parCOUNTRY          = Sql.AddParameter(cmd, "@COUNTRY"         , sCOUNTRY           , 100);
							IDbDataParameter parLONGITUDE        = Sql.AddParameter(cmd, "@LONGITUDE"       , flLONGITUDE        );
							IDbDataParameter parLATITUDE         = Sql.AddParameter(cmd, "@LATITUDE"        , flLATITUDE         );
							IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spZIPCODES_Update
		/// <summary>
		/// spZIPCODES_Update
		/// </summary>
		public void spZIPCODES_Update(ref Guid gID, string sNAME, string sCITY, string sSTATE, string sCOUNTRY, float flLONGITUDE, float flLATITUDE, Guid gTIMEZONE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spZIPCODES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  20);
				IDbDataParameter parCITY             = Sql.AddParameter(cmd, "@CITY"            , sCITY              , 100);
				IDbDataParameter parSTATE            = Sql.AddParameter(cmd, "@STATE"           , sSTATE             , 100);
				IDbDataParameter parCOUNTRY          = Sql.AddParameter(cmd, "@COUNTRY"         , sCOUNTRY           , 100);
				IDbDataParameter parLONGITUDE        = Sql.AddParameter(cmd, "@LONGITUDE"       , flLONGITUDE        );
				IDbDataParameter parLATITUDE         = Sql.AddParameter(cmd, "@LATITUDE"        , flLATITUDE         );
				IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdZIPCODES_Update
		/// <summary>
		/// spZIPCODES_Update
		/// </summary>
		public IDbCommand cmdZIPCODES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spZIPCODES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  20);
			IDbDataParameter parCITY             = Sql.CreateParameter(cmd, "@CITY"            , "string", 100);
			IDbDataParameter parSTATE            = Sql.CreateParameter(cmd, "@STATE"           , "string", 100);
			IDbDataParameter parCOUNTRY          = Sql.CreateParameter(cmd, "@COUNTRY"         , "string", 100);
			IDbDataParameter parLONGITUDE        = Sql.CreateParameter(cmd, "@LONGITUDE"       , "float",   9);
			IDbDataParameter parLATITUDE         = Sql.CreateParameter(cmd, "@LATITUDE"        , "float",   9);
			IDbDataParameter parTIMEZONE_ID      = Sql.CreateParameter(cmd, "@TIMEZONE_ID"     , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region Factory
		/// <summary>
		/// Factory
		/// </summary>
		public IDbCommand Factory(IDbConnection con, string sProcedureName)
		{
			IDbCommand cmd = null;
			switch ( sProcedureName.ToUpper() )
			{
				case "SPACCOUNTS_BUGS_DELETE"                   :  cmd = cmdACCOUNTS_BUGS_Delete                   (con);  break;
				case "SPACCOUNTS_BUGS_UPDATE"                   :  cmd = cmdACCOUNTS_BUGS_Update                   (con);  break;
				case "SPACCOUNTS_CASES_DELETE"                  :  cmd = cmdACCOUNTS_CASES_Delete                  (con);  break;
				case "SPACCOUNTS_CASES_UPDATE"                  :  cmd = cmdACCOUNTS_CASES_Update                  (con);  break;
				case "SPACCOUNTS_CONTACTS_COPYADDRESS"          :  cmd = cmdACCOUNTS_CONTACTS_CopyAddress          (con);  break;
				case "SPACCOUNTS_CONTACTS_DELETE"               :  cmd = cmdACCOUNTS_CONTACTS_Delete               (con);  break;
				case "SPACCOUNTS_CONTACTS_UPDATE"               :  cmd = cmdACCOUNTS_CONTACTS_Update               (con);  break;
				case "SPACCOUNTS_DELETE"                        :  cmd = cmdACCOUNTS_Delete                        (con);  break;
				case "SPACCOUNTS_DOCUMENTS_DELETE"              :  cmd = cmdACCOUNTS_DOCUMENTS_Delete              (con);  break;
				case "SPACCOUNTS_DOCUMENTS_GETLATEST"           :  cmd = cmdACCOUNTS_DOCUMENTS_GetLatest           (con);  break;
				case "SPACCOUNTS_DOCUMENTS_UPDATE"              :  cmd = cmdACCOUNTS_DOCUMENTS_Update              (con);  break;
				case "SPACCOUNTS_IMPORT"                        :  cmd = cmdACCOUNTS_Import                        (con);  break;
				case "SPACCOUNTS_INSRELATED"                    :  cmd = cmdACCOUNTS_InsRelated                    (con);  break;
				case "SPACCOUNTS_LEADS_DELETE"                  :  cmd = cmdACCOUNTS_LEADS_Delete                  (con);  break;
				case "SPACCOUNTS_LEADS_MASSUPDATE"              :  cmd = cmdACCOUNTS_LEADS_MassUpdate              (con);  break;
				case "SPACCOUNTS_LEADS_UPDATE"                  :  cmd = cmdACCOUNTS_LEADS_Update                  (con);  break;
				case "SPACCOUNTS_MASSDELETE"                    :  cmd = cmdACCOUNTS_MassDelete                    (con);  break;
				case "SPACCOUNTS_MASSSYNC"                      :  cmd = cmdACCOUNTS_MassSync                      (con);  break;
				case "SPACCOUNTS_MASSUNSYNC"                    :  cmd = cmdACCOUNTS_MassUnsync                    (con);  break;
				case "SPACCOUNTS_MASSUPDATE"                    :  cmd = cmdACCOUNTS_MassUpdate                    (con);  break;
				case "SPACCOUNTS_MERGE"                         :  cmd = cmdACCOUNTS_Merge                         (con);  break;
				case "SPACCOUNTS_NEW"                           :  cmd = cmdACCOUNTS_New                           (con);  break;
				case "SPACCOUNTS_OPPORTUNITIES_DELETE"          :  cmd = cmdACCOUNTS_OPPORTUNITIES_Delete          (con);  break;
				case "SPACCOUNTS_OPPORTUNITIES_UPDATE"          :  cmd = cmdACCOUNTS_OPPORTUNITIES_Update          (con);  break;
				case "SPACCOUNTS_PARENT_UPDATE"                 :  cmd = cmdACCOUNTS_PARENT_Update                 (con);  break;
				case "SPACCOUNTS_STREAM_INSERTPOST"             :  cmd = cmdACCOUNTS_STREAM_InsertPost             (con);  break;
				case "SPACCOUNTS_UNDELETE"                      :  cmd = cmdACCOUNTS_Undelete                      (con);  break;
				case "SPACCOUNTS_UPDATE"                        :  cmd = cmdACCOUNTS_Update                        (con);  break;
				case "SPACCOUNTS_USERS_DELETE"                  :  cmd = cmdACCOUNTS_USERS_Delete                  (con);  break;
				case "SPACCOUNTS_USERS_UPDATE"                  :  cmd = cmdACCOUNTS_USERS_Update                  (con);  break;
				case "SPACL_ACTIONS_DELETE"                     :  cmd = cmdACL_ACTIONS_Delete                     (con);  break;
				case "SPACL_ACTIONS_INITIALIZE"                 :  cmd = cmdACL_ACTIONS_Initialize                 (con);  break;
				case "SPACL_ACTIONS_INSERTONLY"                 :  cmd = cmdACL_ACTIONS_InsertOnly                 (con);  break;
				case "SPACL_ACTIONS_UPDATE"                     :  cmd = cmdACL_ACTIONS_Update                     (con);  break;
				case "SPACL_FIELDS_UPDATE"                      :  cmd = cmdACL_FIELDS_Update                      (con);  break;
				case "SPACL_ROLES_ACTIONS_DELETE"               :  cmd = cmdACL_ROLES_ACTIONS_Delete               (con);  break;
				case "SPACL_ROLES_ACTIONS_UPDATE"               :  cmd = cmdACL_ROLES_ACTIONS_Update               (con);  break;
				case "SPACL_ROLES_DELETE"                       :  cmd = cmdACL_ROLES_Delete                       (con);  break;
				case "SPACL_ROLES_INSERTONLY"                   :  cmd = cmdACL_ROLES_InsertOnly                   (con);  break;
				case "SPACL_ROLES_MASSDELETE"                   :  cmd = cmdACL_ROLES_MassDelete                   (con);  break;
				case "SPACL_ROLES_UPDATE"                       :  cmd = cmdACL_ROLES_Update                       (con);  break;
				case "SPACL_ROLES_USERS_DELETE"                 :  cmd = cmdACL_ROLES_USERS_Delete                 (con);  break;
				case "SPACL_ROLES_USERS_MASSUPDATE"             :  cmd = cmdACL_ROLES_USERS_MassUpdate             (con);  break;
				case "SPACL_ROLES_USERS_UPDATE"                 :  cmd = cmdACL_ROLES_USERS_Update                 (con);  break;
				case "SPACTIVITIES_DELETE"                      :  cmd = cmdACTIVITIES_Delete                      (con);  break;
				case "SPACTIVITIES_UPDATEDISMISS"               :  cmd = cmdACTIVITIES_UpdateDismiss               (con);  break;
				case "SPACTIVITIES_UPDATESTATUS"                :  cmd = cmdACTIVITIES_UpdateStatus                (con);  break;
				case "SPAPPOINTMENTS_LEADS_DELETE"              :  cmd = cmdAPPOINTMENTS_LEADS_Delete              (con);  break;
				case "SPASSIGNED_SETS_ADDSET"                   :  cmd = cmdASSIGNED_SETS_AddSet                   (con);  break;
				case "SPASSIGNED_SETS_NORMALIZESET"             :  cmd = cmdASSIGNED_SETS_NormalizeSet             (con);  break;
				case "SPASSIGNED_SETS_UPDATENAMES"              :  cmd = cmdASSIGNED_SETS_UpdateNames              (con);  break;
				case "SPAUDIT_EVENTS_REBUILD"                   :  cmd = cmdAUDIT_EVENTS_Rebuild                   (con);  break;
				case "SPBUG_ATTACHMENTS_INSERT"                 :  cmd = cmdBUG_ATTACHMENTS_Insert                 (con);  break;
				case "SPBUGS_ATTACHMENT_INITPOINTER"            :  cmd = cmdBUGS_ATTACHMENT_InitPointer            (con);  break;
				case "SPBUGS_ATTACHMENT_READOFFSET"             :  cmd = cmdBUGS_ATTACHMENT_ReadOffset             (con);  break;
				case "SPBUGS_ATTACHMENT_UPDATE"                 :  cmd = cmdBUGS_ATTACHMENT_Update                 (con);  break;
				case "SPBUGS_ATTACHMENT_WRITEOFFSET"            :  cmd = cmdBUGS_ATTACHMENT_WriteOffset            (con);  break;
				case "SPBUGS_DELETE"                            :  cmd = cmdBUGS_Delete                            (con);  break;
				case "SPBUGS_MASSDELETE"                        :  cmd = cmdBUGS_MassDelete                        (con);  break;
				case "SPBUGS_MASSSYNC"                          :  cmd = cmdBUGS_MassSync                          (con);  break;
				case "SPBUGS_MASSUNSYNC"                        :  cmd = cmdBUGS_MassUnsync                        (con);  break;
				case "SPBUGS_MASSUPDATE"                        :  cmd = cmdBUGS_MassUpdate                        (con);  break;
				case "SPBUGS_MERGE"                             :  cmd = cmdBUGS_Merge                             (con);  break;
				case "SPBUGS_NEW"                               :  cmd = cmdBUGS_New                               (con);  break;
				case "SPBUGS_STREAM_INSERTPOST"                 :  cmd = cmdBUGS_STREAM_InsertPost                 (con);  break;
				case "SPBUGS_UNDELETE"                          :  cmd = cmdBUGS_Undelete                          (con);  break;
				case "SPBUGS_UPDATE"                            :  cmd = cmdBUGS_Update                            (con);  break;
				case "SPBUGS_USERS_DELETE"                      :  cmd = cmdBUGS_USERS_Delete                      (con);  break;
				case "SPBUGS_USERS_UPDATE"                      :  cmd = cmdBUGS_USERS_Update                      (con);  break;
				case "SPCALENDAR_NEXT"                          :  cmd = cmdCALENDAR_Next                          (con);  break;
				case "SPCALL_MARKETING_DELETE"                  :  cmd = cmdCALL_MARKETING_Delete                  (con);  break;
				case "SPCALL_MARKETING_DUPLICATE"               :  cmd = cmdCALL_MARKETING_Duplicate               (con);  break;
				case "SPCALL_MARKETING_GENERATECALLS"           :  cmd = cmdCALL_MARKETING_GenerateCalls           (con);  break;
				case "SPCALL_MARKETING_UPDATE"                  :  cmd = cmdCALL_MARKETING_Update                  (con);  break;
				case "SPCALL_MKTG_PRSPT_LST_DELETE"             :  cmd = cmdCALL_MKTG_PRSPT_LST_Delete             (con);  break;
				case "SPCALL_MKTG_PRSPT_LST_UPDATE"             :  cmd = cmdCALL_MKTG_PRSPT_LST_Update             (con);  break;
				case "SPCALLS_CONTACTS_DELETE"                  :  cmd = cmdCALLS_CONTACTS_Delete                  (con);  break;
				case "SPCALLS_CONTACTS_UPDATE"                  :  cmd = cmdCALLS_CONTACTS_Update                  (con);  break;
				case "SPCALLS_DELETE"                           :  cmd = cmdCALLS_Delete                           (con);  break;
				case "SPCALLS_DELETERECURRENCES"                :  cmd = cmdCALLS_DeleteRecurrences                (con);  break;
				case "SPCALLS_EMAILREMINDERSENT"                :  cmd = cmdCALLS_EmailReminderSent                (con);  break;
				case "SPCALLS_IMPORT"                           :  cmd = cmdCALLS_Import                           (con);  break;
				case "SPCALLS_INVITEEMASSUPDATE"                :  cmd = cmdCALLS_InviteeMassUpdate                (con);  break;
				case "SPCALLS_LEADS_DELETE"                     :  cmd = cmdCALLS_LEADS_Delete                     (con);  break;
				case "SPCALLS_LEADS_UPDATE"                     :  cmd = cmdCALLS_LEADS_Update                     (con);  break;
				case "SPCALLS_MASSDELETE"                       :  cmd = cmdCALLS_MassDelete                       (con);  break;
				case "SPCALLS_MASSUPDATE"                       :  cmd = cmdCALLS_MassUpdate                       (con);  break;
				case "SPCALLS_NEW"                              :  cmd = cmdCALLS_New                              (con);  break;
				case "SPCALLS_SMSREMINDERSENT"                  :  cmd = cmdCALLS_SmsReminderSent                  (con);  break;
				case "SPCALLS_UNDELETE"                         :  cmd = cmdCALLS_Undelete                         (con);  break;
				case "SPCALLS_UPDATE"                           :  cmd = cmdCALLS_Update                           (con);  break;
				case "SPCALLS_UPDATEACCEPTSTATUS"               :  cmd = cmdCALLS_UpdateAcceptStatus               (con);  break;
				case "SPCALLS_USERS_DELETE"                     :  cmd = cmdCALLS_USERS_Delete                     (con);  break;
				case "SPCALLS_USERS_UPDATE"                     :  cmd = cmdCALLS_USERS_Update                     (con);  break;
				case "SPCAMPAIGN_LOG_BANNERTRACKER"             :  cmd = cmdCAMPAIGN_LOG_BannerTracker             (con);  break;
				case "SPCAMPAIGN_LOG_DELETE"                    :  cmd = cmdCAMPAIGN_LOG_Delete                    (con);  break;
				case "SPCAMPAIGN_LOG_INSERTONLY"                :  cmd = cmdCAMPAIGN_LOG_InsertOnly                (con);  break;
				case "SPCAMPAIGN_LOG_UPDATE"                    :  cmd = cmdCAMPAIGN_LOG_Update                    (con);  break;
				case "SPCAMPAIGN_LOG_UPDATETRACKER"             :  cmd = cmdCAMPAIGN_LOG_UpdateTracker             (con);  break;
				case "SPCAMPAIGN_TRKRS_DELETE"                  :  cmd = cmdCAMPAIGN_TRKRS_Delete                  (con);  break;
				case "SPCAMPAIGN_TRKRS_DUPLICATE"               :  cmd = cmdCAMPAIGN_TRKRS_Duplicate               (con);  break;
				case "SPCAMPAIGN_TRKRS_UPDATE"                  :  cmd = cmdCAMPAIGN_TRKRS_Update                  (con);  break;
				case "SPCAMPAIGNS_DELETE"                       :  cmd = cmdCAMPAIGNS_Delete                       (con);  break;
				case "SPCAMPAIGNS_DELETETESTENTRIES"            :  cmd = cmdCAMPAIGNS_DeleteTestEntries            (con);  break;
				case "SPCAMPAIGNS_DUPLICATE"                    :  cmd = cmdCAMPAIGNS_Duplicate                    (con);  break;
				case "SPCAMPAIGNS_GENERATECALLS"                :  cmd = cmdCAMPAIGNS_GenerateCalls                (con);  break;
				case "SPCAMPAIGNS_INVALIDEMAIL"                 :  cmd = cmdCAMPAIGNS_InvalidEmail                 (con);  break;
				case "SPCAMPAIGNS_MASSDELETE"                   :  cmd = cmdCAMPAIGNS_MassDelete                   (con);  break;
				case "SPCAMPAIGNS_MASSUPDATE"                   :  cmd = cmdCAMPAIGNS_MassUpdate                   (con);  break;
				case "SPCAMPAIGNS_NEW"                          :  cmd = cmdCAMPAIGNS_New                          (con);  break;
				case "SPCAMPAIGNS_OPTOUT"                       :  cmd = cmdCAMPAIGNS_OptOut                       (con);  break;
				case "SPCAMPAIGNS_SENDEMAIL"                    :  cmd = cmdCAMPAIGNS_SendEmail                    (con);  break;
				case "SPCAMPAIGNS_STREAM_INSERTPOST"            :  cmd = cmdCAMPAIGNS_STREAM_InsertPost            (con);  break;
				case "SPCAMPAIGNS_UNDELETE"                     :  cmd = cmdCAMPAIGNS_Undelete                     (con);  break;
				case "SPCAMPAIGNS_UPDATE"                       :  cmd = cmdCAMPAIGNS_Update                       (con);  break;
				case "SPCAMPAIGNS_UPDATEDYNAMIC"                :  cmd = cmdCAMPAIGNS_UpdateDynamic                (con);  break;
				case "SPCASES_BUGS_DELETE"                      :  cmd = cmdCASES_BUGS_Delete                      (con);  break;
				case "SPCASES_BUGS_UPDATE"                      :  cmd = cmdCASES_BUGS_Update                      (con);  break;
				case "SPCASES_DELETE"                           :  cmd = cmdCASES_Delete                           (con);  break;
				case "SPCASES_MASSDELETE"                       :  cmd = cmdCASES_MassDelete                       (con);  break;
				case "SPCASES_MASSSYNC"                         :  cmd = cmdCASES_MassSync                         (con);  break;
				case "SPCASES_MASSUNSYNC"                       :  cmd = cmdCASES_MassUnsync                       (con);  break;
				case "SPCASES_MASSUPDATE"                       :  cmd = cmdCASES_MassUpdate                       (con);  break;
				case "SPCASES_MERGE"                            :  cmd = cmdCASES_Merge                            (con);  break;
				case "SPCASES_NEW"                              :  cmd = cmdCASES_New                              (con);  break;
				case "SPCASES_STREAM_INSERTPOST"                :  cmd = cmdCASES_STREAM_InsertPost                (con);  break;
				case "SPCASES_UNDELETE"                         :  cmd = cmdCASES_Undelete                         (con);  break;
				case "SPCASES_UPDATE"                           :  cmd = cmdCASES_Update                           (con);  break;
				case "SPCASES_USERS_DELETE"                     :  cmd = cmdCASES_USERS_Delete                     (con);  break;
				case "SPCASES_USERS_UPDATE"                     :  cmd = cmdCASES_USERS_Update                     (con);  break;
				case "SPCHAT_CHANNELS_DELETE"                   :  cmd = cmdCHAT_CHANNELS_Delete                   (con);  break;
				case "SPCHAT_CHANNELS_UPDATE"                   :  cmd = cmdCHAT_CHANNELS_Update                   (con);  break;
				case "SPCHAT_MESSAGES_DELETE"                   :  cmd = cmdCHAT_MESSAGES_Delete                   (con);  break;
				case "SPCHAT_MESSAGES_UPDATE"                   :  cmd = cmdCHAT_MESSAGES_Update                   (con);  break;
				case "SPCONFIG_BUSINESSMODE"                    :  cmd = cmdCONFIG_BusinessMode                    (con);  break;
				case "SPCONFIG_DELETE"                          :  cmd = cmdCONFIG_Delete                          (con);  break;
				case "SPCONFIG_INSERTONLY"                      :  cmd = cmdCONFIG_InsertOnly                      (con);  break;
				case "SPCONFIG_MASSDELETE"                      :  cmd = cmdCONFIG_MassDelete                      (con);  break;
				case "SPCONFIG_OPPORTUNITIESMODE"               :  cmd = cmdCONFIG_OpportunitiesMode               (con);  break;
				case "SPCONFIG_UPDATE"                          :  cmd = cmdCONFIG_Update                          (con);  break;
				case "SPCONTACTS_BUGS_DELETE"                   :  cmd = cmdCONTACTS_BUGS_Delete                   (con);  break;
				case "SPCONTACTS_BUGS_UPDATE"                   :  cmd = cmdCONTACTS_BUGS_Update                   (con);  break;
				case "SPCONTACTS_CASES_DELETE"                  :  cmd = cmdCONTACTS_CASES_Delete                  (con);  break;
				case "SPCONTACTS_CASES_UPDATE"                  :  cmd = cmdCONTACTS_CASES_Update                  (con);  break;
				case "SPCONTACTS_CONVERTLEAD"                   :  cmd = cmdCONTACTS_ConvertLead                   (con);  break;
				case "SPCONTACTS_DELETE"                        :  cmd = cmdCONTACTS_Delete                        (con);  break;
				case "SPCONTACTS_DIRECT_REPORTS_DELETE"         :  cmd = cmdCONTACTS_DIRECT_REPORTS_Delete         (con);  break;
				case "SPCONTACTS_DIRECT_REPORTS_UPDATE"         :  cmd = cmdCONTACTS_DIRECT_REPORTS_Update         (con);  break;
				case "SPCONTACTS_DOCUMENTS_DELETE"              :  cmd = cmdCONTACTS_DOCUMENTS_Delete              (con);  break;
				case "SPCONTACTS_DOCUMENTS_GETLATEST"           :  cmd = cmdCONTACTS_DOCUMENTS_GetLatest           (con);  break;
				case "SPCONTACTS_DOCUMENTS_UPDATE"              :  cmd = cmdCONTACTS_DOCUMENTS_Update              (con);  break;
				case "SPCONTACTS_IMPORT"                        :  cmd = cmdCONTACTS_Import                        (con);  break;
				case "SPCONTACTS_INSRELATED"                    :  cmd = cmdCONTACTS_InsRelated                    (con);  break;
				case "SPCONTACTS_MASSDELETE"                    :  cmd = cmdCONTACTS_MassDelete                    (con);  break;
				case "SPCONTACTS_MASSSYNC"                      :  cmd = cmdCONTACTS_MassSync                      (con);  break;
				case "SPCONTACTS_MASSUNSYNC"                    :  cmd = cmdCONTACTS_MassUnsync                    (con);  break;
				case "SPCONTACTS_MASSUPDATE"                    :  cmd = cmdCONTACTS_MassUpdate                    (con);  break;
				case "SPCONTACTS_MERGE"                         :  cmd = cmdCONTACTS_Merge                         (con);  break;
				case "SPCONTACTS_NEW"                           :  cmd = cmdCONTACTS_New                           (con);  break;
				case "SPCONTACTS_PORTALUPDATE"                  :  cmd = cmdCONTACTS_PortalUpdate                  (con);  break;
				case "SPCONTACTS_REPORTS_TO_UPDATE"             :  cmd = cmdCONTACTS_REPORTS_TO_Update             (con);  break;
				case "SPCONTACTS_STREAM_INSERTPOST"             :  cmd = cmdCONTACTS_STREAM_InsertPost             (con);  break;
				case "SPCONTACTS_UNDELETE"                      :  cmd = cmdCONTACTS_Undelete                      (con);  break;
				case "SPCONTACTS_UPDATE"                        :  cmd = cmdCONTACTS_Update                        (con);  break;
				case "SPCONTACTS_USERS_DELETE"                  :  cmd = cmdCONTACTS_USERS_Delete                  (con);  break;
				case "SPCONTACTS_USERS_UPDATE"                  :  cmd = cmdCONTACTS_USERS_Update                  (con);  break;
				case "SPCONTRACTS_CONTACTS_UPDATE"              :  cmd = cmdCONTRACTS_CONTACTS_Update              (con);  break;
				case "SPCONTRACTS_DOCUMENTS_UPDATE"             :  cmd = cmdCONTRACTS_DOCUMENTS_Update             (con);  break;
				case "SPCONTRACTS_OPPORTUNITIES_UPDATE"         :  cmd = cmdCONTRACTS_OPPORTUNITIES_Update         (con);  break;
				case "SPCONTRACTS_QUOTES_UPDATE"                :  cmd = cmdCONTRACTS_QUOTES_Update                (con);  break;
				case "SPCURRENCIES_DELETE"                      :  cmd = cmdCURRENCIES_Delete                      (con);  break;
				case "SPCURRENCIES_INSERTONLY"                  :  cmd = cmdCURRENCIES_InsertOnly                  (con);  break;
				case "SPCURRENCIES_INSERTONLYBYISO"             :  cmd = cmdCURRENCIES_InsertOnlyByISO             (con);  break;
				case "SPCURRENCIES_MASSUPDATE"                  :  cmd = cmdCURRENCIES_MassUpdate                  (con);  break;
				case "SPCURRENCIES_UPDATE"                      :  cmd = cmdCURRENCIES_Update                      (con);  break;
				case "SPCURRENCIES_UPDATERATEBYISO"             :  cmd = cmdCURRENCIES_UpdateRateByISO             (con);  break;
				case "SPDASHBOARD_APPS_INSERTONLY"              :  cmd = cmdDASHBOARD_APPS_InsertOnly              (con);  break;
				case "SPDASHBOARDS_DELETE"                      :  cmd = cmdDASHBOARDS_Delete                      (con);  break;
				case "SPDASHBOARDS_INSERTONLY"                  :  cmd = cmdDASHBOARDS_InsertOnly                  (con);  break;
				case "SPDASHBOARDS_PANELS_ADDREPORT"            :  cmd = cmdDASHBOARDS_PANELS_AddReport            (con);  break;
				case "SPDASHBOARDS_PANELS_DELETE"               :  cmd = cmdDASHBOARDS_PANELS_Delete               (con);  break;
				case "SPDASHBOARDS_PANELS_INSERTONLY"           :  cmd = cmdDASHBOARDS_PANELS_InsertOnly           (con);  break;
				case "SPDASHBOARDS_PANELS_UPDATE"               :  cmd = cmdDASHBOARDS_PANELS_Update               (con);  break;
				case "SPDASHBOARDS_UPDATE"                      :  cmd = cmdDASHBOARDS_Update                      (con);  break;
				case "SPDASHLETS_DELETE"                        :  cmd = cmdDASHLETS_Delete                        (con);  break;
				case "SPDASHLETS_INSERTONLY"                    :  cmd = cmdDASHLETS_InsertOnly                    (con);  break;
				case "SPDASHLETS_UPDATE"                        :  cmd = cmdDASHLETS_Update                        (con);  break;
				case "SPDASHLETS_USERS_DELETE"                  :  cmd = cmdDASHLETS_USERS_Delete                  (con);  break;
				case "SPDASHLETS_USERS_DISABLE"                 :  cmd = cmdDASHLETS_USERS_Disable                 (con);  break;
				case "SPDASHLETS_USERS_ENABLE"                  :  cmd = cmdDASHLETS_USERS_Enable                  (con);  break;
				case "SPDASHLETS_USERS_INIT"                    :  cmd = cmdDASHLETS_USERS_Init                    (con);  break;
				case "SPDASHLETS_USERS_INITDISABLE"             :  cmd = cmdDASHLETS_USERS_InitDisable             (con);  break;
				case "SPDASHLETS_USERS_MASSUPDATE"              :  cmd = cmdDASHLETS_USERS_MassUpdate              (con);  break;
				case "SPDASHLETS_USERS_MOVEDOWN"                :  cmd = cmdDASHLETS_USERS_MoveDown                (con);  break;
				case "SPDASHLETS_USERS_MOVEITEM"                :  cmd = cmdDASHLETS_USERS_MoveItem                (con);  break;
				case "SPDASHLETS_USERS_MOVEUP"                  :  cmd = cmdDASHLETS_USERS_MoveUp                  (con);  break;
				case "SPDASHLETS_USERS_REORDER"                 :  cmd = cmdDASHLETS_USERS_Reorder                 (con);  break;
				case "SPDASHLETS_USERS_UPDATETITLE"             :  cmd = cmdDASHLETS_USERS_UpdateTitle             (con);  break;
				case "SPDETAILVIEWS_DELETE"                     :  cmd = cmdDETAILVIEWS_Delete                     (con);  break;
				case "SPDETAILVIEWS_FIELDS_CNVBOUND"            :  cmd = cmdDETAILVIEWS_FIELDS_CnvBound            (con);  break;
				case "SPDETAILVIEWS_FIELDS_CNVTAGS"             :  cmd = cmdDETAILVIEWS_FIELDS_CnvTags             (con);  break;
				case "SPDETAILVIEWS_FIELDS_DELETE"              :  cmd = cmdDETAILVIEWS_FIELDS_Delete              (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBLANK"            :  cmd = cmdDETAILVIEWS_FIELDS_InsBlank            (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBOUND"            :  cmd = cmdDETAILVIEWS_FIELDS_InsBound            (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBOUNDLIST"        :  cmd = cmdDETAILVIEWS_FIELDS_InsBoundList        (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBUTTON"           :  cmd = cmdDETAILVIEWS_FIELDS_InsButton           (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSCHECKBOX"         :  cmd = cmdDETAILVIEWS_FIELDS_InsCheckBox         (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSDEPENDLIST"       :  cmd = cmdDETAILVIEWS_FIELDS_InsDependList       (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSERTONLY"          :  cmd = cmdDETAILVIEWS_FIELDS_InsertOnly          (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSHEADER"           :  cmd = cmdDETAILVIEWS_FIELDS_InsHeader           (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSHYPERLINK"        :  cmd = cmdDETAILVIEWS_FIELDS_InsHyperLink        (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSJAVASCRIPT"       :  cmd = cmdDETAILVIEWS_FIELDS_InsJavaScript       (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSMODULE"           :  cmd = cmdDETAILVIEWS_FIELDS_InsModule           (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSMODULELINK"       :  cmd = cmdDETAILVIEWS_FIELDS_InsModuleLink       (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSSEPARATOR"        :  cmd = cmdDETAILVIEWS_FIELDS_InsSeparator        (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSTAGS"             :  cmd = cmdDETAILVIEWS_FIELDS_InsTags             (con);  break;
				case "SPDETAILVIEWS_FIELDS_UPDATE"              :  cmd = cmdDETAILVIEWS_FIELDS_Update              (con);  break;
				case "SPDETAILVIEWS_FIELDS_UPDATETIP"           :  cmd = cmdDETAILVIEWS_FIELDS_UpdateTip           (con);  break;
				case "SPDETAILVIEWS_FIELDS_UPDATEURL"           :  cmd = cmdDETAILVIEWS_FIELDS_UpdateUrl           (con);  break;
				case "SPDETAILVIEWS_INSERTONLY"                 :  cmd = cmdDETAILVIEWS_InsertOnly                 (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_DELETE"       :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Delete       (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_DISABLE"      :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Disable      (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_DOWN"         :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Down         (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_ENABLE"       :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Enable       (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_INSERTONLY"   :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_InsertOnly   (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_ITEM"         :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Item         (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_MOVEUP"       :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_MoveUp       (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_UPDATE"       :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Update       (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_UPDATEINSIGHT":  cmd = cmdDETAILVIEWS_RELATIONSHIPS_UpdateInsight(con);  break;
				case "SPDETAILVIEWS_UPDATE"                     :  cmd = cmdDETAILVIEWS_Update                     (con);  break;
				case "SPDETAILVIEWS_UPDATEEVENTS"               :  cmd = cmdDETAILVIEWS_UpdateEvents               (con);  break;
				case "SPDOCUMENT_REVISIONS_DELETE"              :  cmd = cmdDOCUMENT_REVISIONS_Delete              (con);  break;
				case "SPDOCUMENT_REVISIONS_DUPLICATE"           :  cmd = cmdDOCUMENT_REVISIONS_Duplicate           (con);  break;
				case "SPDOCUMENT_REVISIONS_INSERT"              :  cmd = cmdDOCUMENT_REVISIONS_Insert              (con);  break;
				case "SPDOCUMENTS_BUGS_DELETE"                  :  cmd = cmdDOCUMENTS_BUGS_Delete                  (con);  break;
				case "SPDOCUMENTS_BUGS_GETLATEST"               :  cmd = cmdDOCUMENTS_BUGS_GetLatest               (con);  break;
				case "SPDOCUMENTS_BUGS_UPDATE"                  :  cmd = cmdDOCUMENTS_BUGS_Update                  (con);  break;
				case "SPDOCUMENTS_CASES_DELETE"                 :  cmd = cmdDOCUMENTS_CASES_Delete                 (con);  break;
				case "SPDOCUMENTS_CASES_GETLATEST"              :  cmd = cmdDOCUMENTS_CASES_GetLatest              (con);  break;
				case "SPDOCUMENTS_CASES_UPDATE"                 :  cmd = cmdDOCUMENTS_CASES_Update                 (con);  break;
				case "SPDOCUMENTS_CONTENT_INITPOINTER"          :  cmd = cmdDOCUMENTS_CONTENT_InitPointer          (con);  break;
				case "SPDOCUMENTS_CONTENT_READOFFSET"           :  cmd = cmdDOCUMENTS_CONTENT_ReadOffset           (con);  break;
				case "SPDOCUMENTS_CONTENT_UPDATE"               :  cmd = cmdDOCUMENTS_CONTENT_Update               (con);  break;
				case "SPDOCUMENTS_CONTENT_WRITEOFFSET"          :  cmd = cmdDOCUMENTS_CONTENT_WriteOffset          (con);  break;
				case "SPDOCUMENTS_DELETE"                       :  cmd = cmdDOCUMENTS_Delete                       (con);  break;
				case "SPDOCUMENTS_INSRELATED"                   :  cmd = cmdDOCUMENTS_InsRelated                   (con);  break;
				case "SPDOCUMENTS_MASSDELETE"                   :  cmd = cmdDOCUMENTS_MassDelete                   (con);  break;
				case "SPDOCUMENTS_MASSUPDATE"                   :  cmd = cmdDOCUMENTS_MassUpdate                   (con);  break;
				case "SPDOCUMENTS_QUOTES_UPDATE"                :  cmd = cmdDOCUMENTS_QUOTES_Update                (con);  break;
				case "SPDOCUMENTS_STREAM_INSERTPOST"            :  cmd = cmdDOCUMENTS_STREAM_InsertPost            (con);  break;
				case "SPDOCUMENTS_UNDELETE"                     :  cmd = cmdDOCUMENTS_Undelete                     (con);  break;
				case "SPDOCUMENTS_UPDATE"                       :  cmd = cmdDOCUMENTS_Update                       (con);  break;
				case "SPDYNAMIC_BUTTONS_COPYDEFAULT"            :  cmd = cmdDYNAMIC_BUTTONS_CopyDefault            (con);  break;
				case "SPDYNAMIC_BUTTONS_DELETE"                 :  cmd = cmdDYNAMIC_BUTTONS_Delete                 (con);  break;
				case "SPDYNAMIC_BUTTONS_INSBUTTON"              :  cmd = cmdDYNAMIC_BUTTONS_InsButton              (con);  break;
				case "SPDYNAMIC_BUTTONS_INSBUTTONLINK"          :  cmd = cmdDYNAMIC_BUTTONS_InsButtonLink          (con);  break;
				case "SPDYNAMIC_BUTTONS_INSCANCEL"              :  cmd = cmdDYNAMIC_BUTTONS_InsCancel              (con);  break;
				case "SPDYNAMIC_BUTTONS_INSCANCELEDIT"          :  cmd = cmdDYNAMIC_BUTTONS_InsCancelEdit          (con);  break;
				case "SPDYNAMIC_BUTTONS_INSDELETE"              :  cmd = cmdDYNAMIC_BUTTONS_InsDelete              (con);  break;
				case "SPDYNAMIC_BUTTONS_INSDUPLICATE"           :  cmd = cmdDYNAMIC_BUTTONS_InsDuplicate           (con);  break;
				case "SPDYNAMIC_BUTTONS_INSEDIT"                :  cmd = cmdDYNAMIC_BUTTONS_InsEdit                (con);  break;
				case "SPDYNAMIC_BUTTONS_INSERTONLY"             :  cmd = cmdDYNAMIC_BUTTONS_InsertOnly             (con);  break;
				case "SPDYNAMIC_BUTTONS_INSHYPERLINK"           :  cmd = cmdDYNAMIC_BUTTONS_InsHyperLink           (con);  break;
				case "SPDYNAMIC_BUTTONS_INSPOPUP"               :  cmd = cmdDYNAMIC_BUTTONS_InsPopup               (con);  break;
				case "SPDYNAMIC_BUTTONS_INSPOPUPCANCEL"         :  cmd = cmdDYNAMIC_BUTTONS_InsPopupCancel         (con);  break;
				case "SPDYNAMIC_BUTTONS_INSPOPUPCLEAR"          :  cmd = cmdDYNAMIC_BUTTONS_InsPopupClear          (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVE"                :  cmd = cmdDYNAMIC_BUTTONS_InsSave                (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVECONCURRENCY"     :  cmd = cmdDYNAMIC_BUTTONS_InsSaveConcurrency     (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVEDUPLICATE"       :  cmd = cmdDYNAMIC_BUTTONS_InsSaveDuplicate       (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVENEW"             :  cmd = cmdDYNAMIC_BUTTONS_InsSaveNew             (con);  break;
				case "SPDYNAMIC_BUTTONS_INSVIEWLOG"             :  cmd = cmdDYNAMIC_BUTTONS_InsViewLog             (con);  break;
				case "SPDYNAMIC_BUTTONS_ORDER_MOVEDOWN"         :  cmd = cmdDYNAMIC_BUTTONS_ORDER_MoveDown         (con);  break;
				case "SPDYNAMIC_BUTTONS_ORDER_MOVEITEM"         :  cmd = cmdDYNAMIC_BUTTONS_ORDER_MoveItem         (con);  break;
				case "SPDYNAMIC_BUTTONS_ORDER_MOVEUP"           :  cmd = cmdDYNAMIC_BUTTONS_ORDER_MoveUp           (con);  break;
				case "SPDYNAMIC_BUTTONS_UPDATE"                 :  cmd = cmdDYNAMIC_BUTTONS_Update                 (con);  break;
				case "SPEDITVIEWS_DELETE"                       :  cmd = cmdEDITVIEWS_Delete                       (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVAUTOCOMPLETE"       :  cmd = cmdEDITVIEWS_FIELDS_CnvAutoComplete       (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVBOUND"              :  cmd = cmdEDITVIEWS_FIELDS_CnvBound              (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVBOUNDLST"           :  cmd = cmdEDITVIEWS_FIELDS_CnvBoundLst           (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVCHANGE"             :  cmd = cmdEDITVIEWS_FIELDS_CnvChange             (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVCONTROL"            :  cmd = cmdEDITVIEWS_FIELDS_CnvControl            (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVMODULEPOPUP"        :  cmd = cmdEDITVIEWS_FIELDS_CnvModulePopup        (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVNAICSSELECT"        :  cmd = cmdEDITVIEWS_FIELDS_CnvNaicsSelect        (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVTAGSELECT"          :  cmd = cmdEDITVIEWS_FIELDS_CnvTagSelect          (con);  break;
				case "SPEDITVIEWS_FIELDS_CNVZIPCODEPOPUP"       :  cmd = cmdEDITVIEWS_FIELDS_CnvZipCodePopup       (con);  break;
				case "SPEDITVIEWS_FIELDS_DELETE"                :  cmd = cmdEDITVIEWS_FIELDS_Delete                (con);  break;
				case "SPEDITVIEWS_FIELDS_INSAUTOCOMPLETE"       :  cmd = cmdEDITVIEWS_FIELDS_InsAutoComplete       (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBLANK"              :  cmd = cmdEDITVIEWS_FIELDS_InsBlank              (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBOUND"              :  cmd = cmdEDITVIEWS_FIELDS_InsBound              (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBOUNDLIST"          :  cmd = cmdEDITVIEWS_FIELDS_InsBoundList          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBUTTON"             :  cmd = cmdEDITVIEWS_FIELDS_InsButton             (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCHANGE"             :  cmd = cmdEDITVIEWS_FIELDS_InsChange             (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCHECKBOX"           :  cmd = cmdEDITVIEWS_FIELDS_InsCheckBox           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCHECKLST"           :  cmd = cmdEDITVIEWS_FIELDS_InsCheckLst           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCONTROL"            :  cmd = cmdEDITVIEWS_FIELDS_InsControl            (con);  break;
				case "SPEDITVIEWS_FIELDS_INSDATEPICK"           :  cmd = cmdEDITVIEWS_FIELDS_InsDatePick           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSDATERNG"            :  cmd = cmdEDITVIEWS_FIELDS_InsDateRng            (con);  break;
				case "SPEDITVIEWS_FIELDS_INSDEPENDLIST"         :  cmd = cmdEDITVIEWS_FIELDS_InsDependList         (con);  break;
				case "SPEDITVIEWS_FIELDS_INSFILE"               :  cmd = cmdEDITVIEWS_FIELDS_InsFile               (con);  break;
				case "SPEDITVIEWS_FIELDS_INSHEADER"             :  cmd = cmdEDITVIEWS_FIELDS_InsHeader             (con);  break;
				case "SPEDITVIEWS_FIELDS_INSHIDDEN"             :  cmd = cmdEDITVIEWS_FIELDS_InsHidden             (con);  break;
				case "SPEDITVIEWS_FIELDS_INSHTMLEDITOR"         :  cmd = cmdEDITVIEWS_FIELDS_InsHtmlEditor         (con);  break;
				case "SPEDITVIEWS_FIELDS_INSLABEL"              :  cmd = cmdEDITVIEWS_FIELDS_InsLabel              (con);  break;
				case "SPEDITVIEWS_FIELDS_INSMODULEPOPUP"        :  cmd = cmdEDITVIEWS_FIELDS_InsModulePopup        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSMULTILINE"          :  cmd = cmdEDITVIEWS_FIELDS_InsMultiLine          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSNAICSSELECT"        :  cmd = cmdEDITVIEWS_FIELDS_InsNaicsSelect        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSPASSWORD"           :  cmd = cmdEDITVIEWS_FIELDS_InsPassword           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSPOPUP"              :  cmd = cmdEDITVIEWS_FIELDS_InsPopup              (con);  break;
				case "SPEDITVIEWS_FIELDS_INSRADIO"              :  cmd = cmdEDITVIEWS_FIELDS_InsRadio              (con);  break;
				case "SPEDITVIEWS_FIELDS_INSSEPARATOR"          :  cmd = cmdEDITVIEWS_FIELDS_InsSeparator          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSTAGSELECT"          :  cmd = cmdEDITVIEWS_FIELDS_InsTagSelect          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSTIMEEDIT"           :  cmd = cmdEDITVIEWS_FIELDS_InsTimeEdit           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSTIMENEW"            :  cmd = cmdEDITVIEWS_FIELDS_InsTimeNew            (con);  break;
				case "SPEDITVIEWS_FIELDS_INSTIMEPICK"           :  cmd = cmdEDITVIEWS_FIELDS_InsTimePick           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSVALIDATOR"          :  cmd = cmdEDITVIEWS_FIELDS_InsValidator          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSZIPCODE"            :  cmd = cmdEDITVIEWS_FIELDS_InsZipCode            (con);  break;
				case "SPEDITVIEWS_FIELDS_LSTCHANGE"             :  cmd = cmdEDITVIEWS_FIELDS_LstChange             (con);  break;
				case "SPEDITVIEWS_FIELDS_MERGEVIEW"             :  cmd = cmdEDITVIEWS_FIELDS_MergeView             (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATE"                :  cmd = cmdEDITVIEWS_FIELDS_Update                (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATEDATAFORMAT"      :  cmd = cmdEDITVIEWS_FIELDS_UpdateDataFormat      (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATEONCLICK"         :  cmd = cmdEDITVIEWS_FIELDS_UpdateOnClick         (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATETIP"             :  cmd = cmdEDITVIEWS_FIELDS_UpdateTip             (con);  break;
				case "SPEDITVIEWS_INSERTONLY"                   :  cmd = cmdEDITVIEWS_InsertOnly                   (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_DELETE"         :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Delete         (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_DISABLE"        :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Disable        (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_DOWN"           :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Down           (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_ENABLE"         :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Enable         (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_INSERTONLY"     :  cmd = cmdEDITVIEWS_RELATIONSHIPS_InsertOnly     (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_ITEM"           :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Item           (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_MOVEUP"         :  cmd = cmdEDITVIEWS_RELATIONSHIPS_MoveUp         (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_UPDATE"         :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Update         (con);  break;
				case "SPEDITVIEWS_UPDATE"                       :  cmd = cmdEDITVIEWS_Update                       (con);  break;
				case "SPEDITVIEWS_UPDATEEVENTS"                 :  cmd = cmdEDITVIEWS_UpdateEvents                 (con);  break;
				case "SPEMAIL_CLIENT_SYNC_DELETE"               :  cmd = cmdEMAIL_CLIENT_SYNC_Delete               (con);  break;
				case "SPEMAIL_CLIENT_SYNC_UPDATE"               :  cmd = cmdEMAIL_CLIENT_SYNC_Update               (con);  break;
				case "SPEMAIL_IMAGE_INITPOINTER"                :  cmd = cmdEMAIL_IMAGE_InitPointer                (con);  break;
				case "SPEMAIL_IMAGE_READOFFSET"                 :  cmd = cmdEMAIL_IMAGE_ReadOffset                 (con);  break;
				case "SPEMAIL_IMAGE_WRITEOFFSET"                :  cmd = cmdEMAIL_IMAGE_WriteOffset                (con);  break;
				case "SPEMAIL_IMAGES_CONTENT_UPDATE"            :  cmd = cmdEMAIL_IMAGES_CONTENT_Update            (con);  break;
				case "SPEMAIL_IMAGES_COPY"                      :  cmd = cmdEMAIL_IMAGES_Copy                      (con);  break;
				case "SPEMAIL_IMAGES_DELETE"                    :  cmd = cmdEMAIL_IMAGES_Delete                    (con);  break;
				case "SPEMAIL_IMAGES_INSERT"                    :  cmd = cmdEMAIL_IMAGES_Insert                    (con);  break;
				case "SPEMAIL_MARKETING_DELETE"                 :  cmd = cmdEMAIL_MARKETING_Delete                 (con);  break;
				case "SPEMAIL_MARKETING_DUPLICATE"              :  cmd = cmdEMAIL_MARKETING_Duplicate              (con);  break;
				case "SPEMAIL_MARKETING_UPDATE"                 :  cmd = cmdEMAIL_MARKETING_Update                 (con);  break;
				case "SPEMAIL_MKTG_PRSPT_LST_DELETE"            :  cmd = cmdEMAIL_MKTG_PRSPT_LST_Delete            (con);  break;
				case "SPEMAIL_MKTG_PRSPT_LST_UPDATE"            :  cmd = cmdEMAIL_MKTG_PRSPT_LST_Update            (con);  break;
				case "SPEMAIL_MRKT_PROSPECT_LISTS_DELETE"       :  cmd = cmdEMAIL_MRKT_PROSPECT_LISTS_Delete       (con);  break;
				case "SPEMAIL_MRKT_PROSPECT_LISTS_UPDATE"       :  cmd = cmdEMAIL_MRKT_PROSPECT_LISTS_Update       (con);  break;
				case "SPEMAIL_TEMPLATES_DELETE"                 :  cmd = cmdEMAIL_TEMPLATES_Delete                 (con);  break;
				case "SPEMAIL_TEMPLATES_MASSDELETE"             :  cmd = cmdEMAIL_TEMPLATES_MassDelete             (con);  break;
				case "SPEMAIL_TEMPLATES_STREAM_INSERTPOST"      :  cmd = cmdEMAIL_TEMPLATES_STREAM_InsertPost      (con);  break;
				case "SPEMAIL_TEMPLATES_UNDELETE"               :  cmd = cmdEMAIL_TEMPLATES_Undelete               (con);  break;
				case "SPEMAIL_TEMPLATES_UPDATE"                 :  cmd = cmdEMAIL_TEMPLATES_Update                 (con);  break;
				case "SPEMAILMAN_DELETE"                        :  cmd = cmdEMAILMAN_Delete                        (con);  break;
				case "SPEMAILMAN_MASSDELETE"                    :  cmd = cmdEMAILMAN_MassDelete                    (con);  break;
				case "SPEMAILMAN_REMOVEDUPLICATES"              :  cmd = cmdEMAILMAN_RemoveDuplicates              (con);  break;
				case "SPEMAILMAN_SENDFAILED"                    :  cmd = cmdEMAILMAN_SendFailed                    (con);  break;
				case "SPEMAILMAN_SENDSUCCESSFUL"                :  cmd = cmdEMAILMAN_SendSuccessful                (con);  break;
				case "SPEMAILMAN_SENT_DELETE"                   :  cmd = cmdEMAILMAN_SENT_Delete                   (con);  break;
				case "SPEMAILMAN_SENT_UPDATE"                   :  cmd = cmdEMAILMAN_SENT_Update                   (con);  break;
				case "SPEMAILMAN_UPDATE"                        :  cmd = cmdEMAILMAN_Update                        (con);  break;
				case "SPEMAILS_ACCOUNTS_DELETE"                 :  cmd = cmdEMAILS_ACCOUNTS_Delete                 (con);  break;
				case "SPEMAILS_ACCOUNTS_UPDATE"                 :  cmd = cmdEMAILS_ACCOUNTS_Update                 (con);  break;
				case "SPEMAILS_ARCHIVECONTENT"                  :  cmd = cmdEMAILS_ArchiveContent                  (con);  break;
				case "SPEMAILS_BUGS_DELETE"                     :  cmd = cmdEMAILS_BUGS_Delete                     (con);  break;
				case "SPEMAILS_BUGS_UPDATE"                     :  cmd = cmdEMAILS_BUGS_Update                     (con);  break;
				case "SPEMAILS_CAMPAIGNREF"                     :  cmd = cmdEMAILS_CampaignRef                     (con);  break;
				case "SPEMAILS_CASES_DELETE"                    :  cmd = cmdEMAILS_CASES_Delete                    (con);  break;
				case "SPEMAILS_CASES_UPDATE"                    :  cmd = cmdEMAILS_CASES_Update                    (con);  break;
				case "SPEMAILS_CONTACTS_DELETE"                 :  cmd = cmdEMAILS_CONTACTS_Delete                 (con);  break;
				case "SPEMAILS_CONTACTS_UPDATE"                 :  cmd = cmdEMAILS_CONTACTS_Update                 (con);  break;
				case "SPEMAILS_CONTRACTS_UPDATE"                :  cmd = cmdEMAILS_CONTRACTS_Update                (con);  break;
				case "SPEMAILS_DELETE"                          :  cmd = cmdEMAILS_Delete                          (con);  break;
				case "SPEMAILS_GETMAILBOX"                      :  cmd = cmdEMAILS_GetMailbox                      (con);  break;
				case "SPEMAILS_INSERTINBOUND"                   :  cmd = cmdEMAILS_InsertInbound                   (con);  break;
				case "SPEMAILS_INVOICES_UPDATE"                 :  cmd = cmdEMAILS_INVOICES_Update                 (con);  break;
				case "SPEMAILS_LEADS_DELETE"                    :  cmd = cmdEMAILS_LEADS_Delete                    (con);  break;
				case "SPEMAILS_LEADS_UPDATE"                    :  cmd = cmdEMAILS_LEADS_Update                    (con);  break;
				case "SPEMAILS_MASSASSIGN"                      :  cmd = cmdEMAILS_MassAssign                      (con);  break;
				case "SPEMAILS_MASSDELETE"                      :  cmd = cmdEMAILS_MassDelete                      (con);  break;
				case "SPEMAILS_MASSUPDATE"                      :  cmd = cmdEMAILS_MassUpdate                      (con);  break;
				case "SPEMAILS_OPPORTUNITIES_DELETE"            :  cmd = cmdEMAILS_OPPORTUNITIES_Delete            (con);  break;
				case "SPEMAILS_OPPORTUNITIES_UPDATE"            :  cmd = cmdEMAILS_OPPORTUNITIES_Update            (con);  break;
				case "SPEMAILS_ORDERS_UPDATE"                   :  cmd = cmdEMAILS_ORDERS_Update                   (con);  break;
				case "SPEMAILS_PROJECT_TASKS_DELETE"            :  cmd = cmdEMAILS_PROJECT_TASKS_Delete            (con);  break;
				case "SPEMAILS_PROJECT_TASKS_UPDATE"            :  cmd = cmdEMAILS_PROJECT_TASKS_Update            (con);  break;
				case "SPEMAILS_PROJECTS_DELETE"                 :  cmd = cmdEMAILS_PROJECTS_Delete                 (con);  break;
				case "SPEMAILS_PROJECTS_UPDATE"                 :  cmd = cmdEMAILS_PROJECTS_Update                 (con);  break;
				case "SPEMAILS_PROSPECTS_DELETE"                :  cmd = cmdEMAILS_PROSPECTS_Delete                (con);  break;
				case "SPEMAILS_PROSPECTS_UPDATE"                :  cmd = cmdEMAILS_PROSPECTS_Update                (con);  break;
				case "SPEMAILS_QUEUEEMAILTEMPLATE"              :  cmd = cmdEMAILS_QueueEmailTemplate              (con);  break;
				case "SPEMAILS_QUOTES_UPDATE"                   :  cmd = cmdEMAILS_QUOTES_Update                   (con);  break;
				case "SPEMAILS_RELATED_UPDATE"                  :  cmd = cmdEMAILS_RELATED_Update                  (con);  break;
				case "SPEMAILS_TASKS_DELETE"                    :  cmd = cmdEMAILS_TASKS_Delete                    (con);  break;
				case "SPEMAILS_TASKS_UPDATE"                    :  cmd = cmdEMAILS_TASKS_Update                    (con);  break;
				case "SPEMAILS_UNDELETE"                        :  cmd = cmdEMAILS_Undelete                        (con);  break;
				case "SPEMAILS_UNDELIVERABLEEMAIL"              :  cmd = cmdEMAILS_UndeliverableEmail              (con);  break;
				case "SPEMAILS_UPDATE"                          :  cmd = cmdEMAILS_Update                          (con);  break;
				case "SPEMAILS_UPDATECONTENT"                   :  cmd = cmdEMAILS_UpdateContent                   (con);  break;
				case "SPEMAILS_UPDATESTATUS"                    :  cmd = cmdEMAILS_UpdateStatus                    (con);  break;
				case "SPEMAILS_USERS_DELETE"                    :  cmd = cmdEMAILS_USERS_Delete                    (con);  break;
				case "SPEMAILS_USERS_UPDATE"                    :  cmd = cmdEMAILS_USERS_Update                    (con);  break;
				case "SPEMPLOYEES_UPDATE"                       :  cmd = cmdEMPLOYEES_Update                       (con);  break;
				case "SPEXCHANGE_USERS_UPDATE"                  :  cmd = cmdEXCHANGE_USERS_Update                  (con);  break;
				case "SPFEEDS_DELETE"                           :  cmd = cmdFEEDS_Delete                           (con);  break;
				case "SPFEEDS_NEW"                              :  cmd = cmdFEEDS_New                              (con);  break;
				case "SPFEEDS_UPDATE"                           :  cmd = cmdFEEDS_Update                           (con);  break;
				case "SPFIELD_VALIDATORS_DELETE"                :  cmd = cmdFIELD_VALIDATORS_Delete                (con);  break;
				case "SPFIELD_VALIDATORS_INSERTREGEX"           :  cmd = cmdFIELD_VALIDATORS_InsertRegEx           (con);  break;
				case "SPFIELD_VALIDATORS_UPDATE"                :  cmd = cmdFIELD_VALIDATORS_Update                (con);  break;
				case "SPFIELDS_META_DATA_DELETE"                :  cmd = cmdFIELDS_META_DATA_Delete                (con);  break;
				case "SPFIELDS_META_DATA_DELETEBYNAME"          :  cmd = cmdFIELDS_META_DATA_DeleteByName          (con);  break;
				case "SPFIELDS_META_DATA_INSERT"                :  cmd = cmdFIELDS_META_DATA_Insert                (con);  break;
				case "SPFIELDS_META_DATA_UPDATE"                :  cmd = cmdFIELDS_META_DATA_Update                (con);  break;
				case "SPFULLTEXT_CONFIGCATALOG"                 :  cmd = cmdFULLTEXT_ConfigCatalog                 (con);  break;
				case "SPFULLTEXT_UPDATELAYOUTS"                 :  cmd = cmdFULLTEXT_UpdateLayouts                 (con);  break;
				case "SPGRIDVIEWS_COLUMNS_DELETE"               :  cmd = cmdGRIDVIEWS_COLUMNS_Delete               (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSBOUND"             :  cmd = cmdGRIDVIEWS_COLUMNS_InsBound             (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSBOUNDDATE"         :  cmd = cmdGRIDVIEWS_COLUMNS_InsBoundDate         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSBOUNDLIST"         :  cmd = cmdGRIDVIEWS_COLUMNS_InsBoundList         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSDEPENDLIST"        :  cmd = cmdGRIDVIEWS_COLUMNS_InsDependList        (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSFIELD"             :  cmd = cmdGRIDVIEWS_COLUMNS_InsField             (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSHIDDEN"            :  cmd = cmdGRIDVIEWS_COLUMNS_InsHidden            (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSHOVER"             :  cmd = cmdGRIDVIEWS_COLUMNS_InsHover             (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSHYPERLINK"         :  cmd = cmdGRIDVIEWS_COLUMNS_InsHyperLink         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSIMAGEBUTTON"       :  cmd = cmdGRIDVIEWS_COLUMNS_InsImageButton       (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSJAVAIMAGE"         :  cmd = cmdGRIDVIEWS_COLUMNS_InsJavaImage         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSJAVASCRIPT"        :  cmd = cmdGRIDVIEWS_COLUMNS_InsJavaScript        (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSMODULE"            :  cmd = cmdGRIDVIEWS_COLUMNS_InsModule            (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSTAGSELECT"         :  cmd = cmdGRIDVIEWS_COLUMNS_InsTagSelect         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_RESERVEINDEX"         :  cmd = cmdGRIDVIEWS_COLUMNS_ReserveIndex         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_UPDATE"               :  cmd = cmdGRIDVIEWS_COLUMNS_Update               (con);  break;
				case "SPGRIDVIEWS_COLUMNS_UPDATEFORMAT"         :  cmd = cmdGRIDVIEWS_COLUMNS_UpdateFormat         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_UPDATESTYLE"          :  cmd = cmdGRIDVIEWS_COLUMNS_UpdateStyle          (con);  break;
				case "SPGRIDVIEWS_DELETE"                       :  cmd = cmdGRIDVIEWS_Delete                       (con);  break;
				case "SPGRIDVIEWS_INSERTONLY"                   :  cmd = cmdGRIDVIEWS_InsertOnly                   (con);  break;
				case "SPGRIDVIEWS_UPDATE"                       :  cmd = cmdGRIDVIEWS_Update                       (con);  break;
				case "SPGRIDVIEWS_UPDATEEVENTS"                 :  cmd = cmdGRIDVIEWS_UpdateEvents                 (con);  break;
				case "SPGRIDVIEWS_UPDATESORT"                   :  cmd = cmdGRIDVIEWS_UpdateSort                   (con);  break;
				case "SPIFRAMES_DELETE"                         :  cmd = cmdIFRAMES_Delete                         (con);  break;
				case "SPIFRAMES_MASSDELETE"                     :  cmd = cmdIFRAMES_MassDelete                     (con);  break;
				case "SPIFRAMES_UPDATE"                         :  cmd = cmdIFRAMES_Update                         (con);  break;
				case "SPIMAGE_INITPOINTER"                      :  cmd = cmdIMAGE_InitPointer                      (con);  break;
				case "SPIMAGE_READOFFSET"                       :  cmd = cmdIMAGE_ReadOffset                       (con);  break;
				case "SPIMAGE_WRITEOFFSET"                      :  cmd = cmdIMAGE_WriteOffset                      (con);  break;
				case "SPIMAGES_CONTENT_UPDATE"                  :  cmd = cmdIMAGES_CONTENT_Update                  (con);  break;
				case "SPIMAGES_DELETE"                          :  cmd = cmdIMAGES_Delete                          (con);  break;
				case "SPIMAGES_INSERT"                          :  cmd = cmdIMAGES_Insert                          (con);  break;
				case "SPIMPORT_MAPS_DELETE"                     :  cmd = cmdIMPORT_MAPS_Delete                     (con);  break;
				case "SPIMPORT_MAPS_INSERTONLY"                 :  cmd = cmdIMPORT_MAPS_InsertOnly                 (con);  break;
				case "SPIMPORT_MAPS_UPDATE"                     :  cmd = cmdIMPORT_MAPS_Update                     (con);  break;
				case "SPINBOUND_EMAIL_AUTOREPLY_DELETE"         :  cmd = cmdINBOUND_EMAIL_AUTOREPLY_Delete         (con);  break;
				case "SPINBOUND_EMAIL_AUTOREPLY_UPDATE"         :  cmd = cmdINBOUND_EMAIL_AUTOREPLY_Update         (con);  break;
				case "SPINBOUND_EMAILS_DELETE"                  :  cmd = cmdINBOUND_EMAILS_Delete                  (con);  break;
				case "SPINBOUND_EMAILS_EXCHANGEWATERMARK"       :  cmd = cmdINBOUND_EMAILS_ExchangeWatermark       (con);  break;
				case "SPINBOUND_EMAILS_UPDATE"                  :  cmd = cmdINBOUND_EMAILS_Update                  (con);  break;
				case "SPINBOUND_EMAILS_UPDATELASTUID"           :  cmd = cmdINBOUND_EMAILS_UpdateLastUID           (con);  break;
				case "SPKBDOCUMENTS_ATTACHMENTS_CREATENOTE"     :  cmd = cmdKBDOCUMENTS_ATTACHMENTS_CreateNote     (con);  break;
				case "SPKBDOCUMENTS_ATTACHMENTS_INSERT"         :  cmd = cmdKBDOCUMENTS_ATTACHMENTS_Insert         (con);  break;
				case "SPKBDOCUMENTS_IMAGES_INSERT"              :  cmd = cmdKBDOCUMENTS_IMAGES_Insert              (con);  break;
				case "SPLANGUAGES_DELETE"                       :  cmd = cmdLANGUAGES_Delete                       (con);  break;
				case "SPLANGUAGES_DISABLE"                      :  cmd = cmdLANGUAGES_Disable                      (con);  break;
				case "SPLANGUAGES_ENABLE"                       :  cmd = cmdLANGUAGES_Enable                       (con);  break;
				case "SPLANGUAGES_INSERTONLY"                   :  cmd = cmdLANGUAGES_InsertOnly                   (con);  break;
				case "SPLANGUAGES_UPDATE"                       :  cmd = cmdLANGUAGES_Update                       (con);  break;
				case "SPLEADS_CONTACTS_DELETE"                  :  cmd = cmdLEADS_CONTACTS_Delete                  (con);  break;
				case "SPLEADS_CONTACTS_UPDATE"                  :  cmd = cmdLEADS_CONTACTS_Update                  (con);  break;
				case "SPLEADS_CONVERTPROSPECT"                  :  cmd = cmdLEADS_ConvertProspect                  (con);  break;
				case "SPLEADS_DELETE"                           :  cmd = cmdLEADS_Delete                           (con);  break;
				case "SPLEADS_DOCUMENTS_DELETE"                 :  cmd = cmdLEADS_DOCUMENTS_Delete                 (con);  break;
				case "SPLEADS_DOCUMENTS_GETLATEST"              :  cmd = cmdLEADS_DOCUMENTS_GetLatest              (con);  break;
				case "SPLEADS_DOCUMENTS_UPDATE"                 :  cmd = cmdLEADS_DOCUMENTS_Update                 (con);  break;
				case "SPLEADS_IMPORT"                           :  cmd = cmdLEADS_Import                           (con);  break;
				case "SPLEADS_INSRELATED"                       :  cmd = cmdLEADS_InsRelated                       (con);  break;
				case "SPLEADS_MASSDELETE"                       :  cmd = cmdLEADS_MassDelete                       (con);  break;
				case "SPLEADS_MASSSYNC"                         :  cmd = cmdLEADS_MassSync                         (con);  break;
				case "SPLEADS_MASSUNSYNC"                       :  cmd = cmdLEADS_MassUnsync                       (con);  break;
				case "SPLEADS_MASSUPDATE"                       :  cmd = cmdLEADS_MassUpdate                       (con);  break;
				case "SPLEADS_MERGE"                            :  cmd = cmdLEADS_Merge                            (con);  break;
				case "SPLEADS_NEW"                              :  cmd = cmdLEADS_New                              (con);  break;
				case "SPLEADS_OPPORTUNITIES_DELETE"             :  cmd = cmdLEADS_OPPORTUNITIES_Delete             (con);  break;
				case "SPLEADS_OPPORTUNITIES_UPDATE"             :  cmd = cmdLEADS_OPPORTUNITIES_Update             (con);  break;
				case "SPLEADS_STREAM_INSERTPOST"                :  cmd = cmdLEADS_STREAM_InsertPost                (con);  break;
				case "SPLEADS_UNDELETE"                         :  cmd = cmdLEADS_Undelete                         (con);  break;
				case "SPLEADS_UPDATE"                           :  cmd = cmdLEADS_Update                           (con);  break;
				case "SPLEADS_USERS_DELETE"                     :  cmd = cmdLEADS_USERS_Delete                     (con);  break;
				case "SPLEADS_USERS_UPDATE"                     :  cmd = cmdLEADS_USERS_Update                     (con);  break;
				case "SPMEETINGS_CONTACTS_DELETE"               :  cmd = cmdMEETINGS_CONTACTS_Delete               (con);  break;
				case "SPMEETINGS_CONTACTS_UPDATE"               :  cmd = cmdMEETINGS_CONTACTS_Update               (con);  break;
				case "SPMEETINGS_DELETE"                        :  cmd = cmdMEETINGS_Delete                        (con);  break;
				case "SPMEETINGS_DELETERECURRENCES"             :  cmd = cmdMEETINGS_DeleteRecurrences             (con);  break;
				case "SPMEETINGS_EMAILREMINDERSENT"             :  cmd = cmdMEETINGS_EmailReminderSent             (con);  break;
				case "SPMEETINGS_IMPORT"                        :  cmd = cmdMEETINGS_Import                        (con);  break;
				case "SPMEETINGS_INVITEEMASSUPDATE"             :  cmd = cmdMEETINGS_InviteeMassUpdate             (con);  break;
				case "SPMEETINGS_LEADS_DELETE"                  :  cmd = cmdMEETINGS_LEADS_Delete                  (con);  break;
				case "SPMEETINGS_LEADS_UPDATE"                  :  cmd = cmdMEETINGS_LEADS_Update                  (con);  break;
				case "SPMEETINGS_MASSDELETE"                    :  cmd = cmdMEETINGS_MassDelete                    (con);  break;
				case "SPMEETINGS_MASSUPDATE"                    :  cmd = cmdMEETINGS_MassUpdate                    (con);  break;
				case "SPMEETINGS_NEW"                           :  cmd = cmdMEETINGS_New                           (con);  break;
				case "SPMEETINGS_SMSREMINDERSENT"               :  cmd = cmdMEETINGS_SmsReminderSent               (con);  break;
				case "SPMEETINGS_UNDELETE"                      :  cmd = cmdMEETINGS_Undelete                      (con);  break;
				case "SPMEETINGS_UPDATE"                        :  cmd = cmdMEETINGS_Update                        (con);  break;
				case "SPMEETINGS_UPDATEACCEPTSTATUS"            :  cmd = cmdMEETINGS_UpdateAcceptStatus            (con);  break;
				case "SPMEETINGS_USERS_DELETE"                  :  cmd = cmdMEETINGS_USERS_Delete                  (con);  break;
				case "SPMEETINGS_USERS_UPDATE"                  :  cmd = cmdMEETINGS_USERS_Update                  (con);  break;
				case "SPMODULES_ARCHIVE_LOG_INSERTLIST"         :  cmd = cmdMODULES_ARCHIVE_LOG_InsertList         (con);  break;
				case "SPMODULES_ARCHIVE_LOG_INSERTONLY"         :  cmd = cmdMODULES_ARCHIVE_LOG_InsertOnly         (con);  break;
				case "SPMODULES_ARCHIVE_LOG_INSERTRULE"         :  cmd = cmdMODULES_ARCHIVE_LOG_InsertRule         (con);  break;
				case "SPMODULES_ARCHIVE_RELATED_DELETE"         :  cmd = cmdMODULES_ARCHIVE_RELATED_Delete         (con);  break;
				case "SPMODULES_ARCHIVE_RELATED_INSERTONLY"     :  cmd = cmdMODULES_ARCHIVE_RELATED_InsertOnly     (con);  break;
				case "SPMODULES_ARCHIVE_RULES_DELETE"           :  cmd = cmdMODULES_ARCHIVE_RULES_Delete           (con);  break;
				case "SPMODULES_ARCHIVE_RULES_RUN"              :  cmd = cmdMODULES_ARCHIVE_RULES_Run              (con);  break;
				case "SPMODULES_ARCHIVE_RULES_RUNALL"           :  cmd = cmdMODULES_ARCHIVE_RULES_RunAll           (con);  break;
				case "SPMODULES_ARCHIVE_RULES_UPDATE"           :  cmd = cmdMODULES_ARCHIVE_RULES_Update           (con);  break;
				case "SPMODULES_ARCHIVEBUILD"                   :  cmd = cmdMODULES_ArchiveBuild                   (con);  break;
				case "SPMODULES_ARCHIVEBUILDACTIVITIES"         :  cmd = cmdMODULES_ArchiveBuildActivities         (con);  break;
				case "SPMODULES_ARCHIVEBUILDALL"                :  cmd = cmdMODULES_ArchiveBuildAll                (con);  break;
				case "SPMODULES_ARCHIVEBUILDALLVIEWS"           :  cmd = cmdMODULES_ArchiveBuildAllViews           (con);  break;
				case "SPMODULES_ARCHIVEBUILDBYNAME"             :  cmd = cmdMODULES_ArchiveBuildByName             (con);  break;
				case "SPMODULES_ARCHIVEBUILDVIEW"               :  cmd = cmdMODULES_ArchiveBuildView               (con);  break;
				case "SPMODULES_ARCHIVEMOVEACTIVITIES"          :  cmd = cmdMODULES_ArchiveMoveActivities          (con);  break;
				case "SPMODULES_ARCHIVEMOVEDATA"                :  cmd = cmdMODULES_ArchiveMoveData                (con);  break;
				case "SPMODULES_ARCHIVERECOVERACTIVITIES"       :  cmd = cmdMODULES_ArchiveRecoverActivities       (con);  break;
				case "SPMODULES_ARCHIVERECOVERDATA"             :  cmd = cmdMODULES_ArchiveRecoverData             (con);  break;
				case "SPMODULES_DELETE"                         :  cmd = cmdMODULES_Delete                         (con);  break;
				case "SPMODULES_DISABLE"                        :  cmd = cmdMODULES_Disable                        (con);  break;
				case "SPMODULES_ENABLE"                         :  cmd = cmdMODULES_Enable                         (con);  break;
				case "SPMODULES_GLOBALCUSTOMPAGING"             :  cmd = cmdMODULES_GlobalCustomPaging             (con);  break;
				case "SPMODULES_GROUPS_DELETE"                  :  cmd = cmdMODULES_GROUPS_Delete                  (con);  break;
				case "SPMODULES_GROUPS_INSERTONLY"              :  cmd = cmdMODULES_GROUPS_InsertOnly              (con);  break;
				case "SPMODULES_GROUPS_UPDATE"                  :  cmd = cmdMODULES_GROUPS_Update                  (con);  break;
				case "SPMODULES_INSERTONLY"                     :  cmd = cmdMODULES_InsertOnly                     (con);  break;
				case "SPMODULES_REORDER"                        :  cmd = cmdMODULES_Reorder                        (con);  break;
				case "SPMODULES_TAB_HIDE"                       :  cmd = cmdMODULES_TAB_Hide                       (con);  break;
				case "SPMODULES_TAB_HIDEMOBILE"                 :  cmd = cmdMODULES_TAB_HideMobile                 (con);  break;
				case "SPMODULES_TAB_ORDER_MOVEDOWN"             :  cmd = cmdMODULES_TAB_ORDER_MoveDown             (con);  break;
				case "SPMODULES_TAB_ORDER_MOVEITEM"             :  cmd = cmdMODULES_TAB_ORDER_MoveItem             (con);  break;
				case "SPMODULES_TAB_ORDER_MOVEUP"               :  cmd = cmdMODULES_TAB_ORDER_MoveUp               (con);  break;
				case "SPMODULES_TAB_ORDER_REORDER"              :  cmd = cmdMODULES_TAB_ORDER_Reorder              (con);  break;
				case "SPMODULES_TAB_RENAME"                     :  cmd = cmdMODULES_TAB_Rename                     (con);  break;
				case "SPMODULES_TAB_SHOW"                       :  cmd = cmdMODULES_TAB_Show                       (con);  break;
				case "SPMODULES_TAB_SHOWMOBILE"                 :  cmd = cmdMODULES_TAB_ShowMobile                 (con);  break;
				case "SPMODULES_UPDATE"                         :  cmd = cmdMODULES_Update                         (con);  break;
				case "SPMODULES_UPDATERELATIVEPATH"             :  cmd = cmdMODULES_UpdateRelativePath             (con);  break;
				case "SPNAICS_CODE_SETS_NORMALIZESET"           :  cmd = cmdNAICS_CODE_SETS_NormalizeSet           (con);  break;
				case "SPNAICS_CODES_DELETE"                     :  cmd = cmdNAICS_CODES_Delete                     (con);  break;
				case "SPNAICS_CODES_INSERTONLY"                 :  cmd = cmdNAICS_CODES_InsertOnly                 (con);  break;
				case "SPNAICS_CODES_UPDATE"                     :  cmd = cmdNAICS_CODES_Update                     (con);  break;
				case "SPNOTE_ATTACHMENTS_DELETE"                :  cmd = cmdNOTE_ATTACHMENTS_Delete                (con);  break;
				case "SPNOTE_ATTACHMENTS_INSERT"                :  cmd = cmdNOTE_ATTACHMENTS_Insert                (con);  break;
				case "SPNOTES_ATTACHMENT_INITPOINTER"           :  cmd = cmdNOTES_ATTACHMENT_InitPointer           (con);  break;
				case "SPNOTES_ATTACHMENT_READOFFSET"            :  cmd = cmdNOTES_ATTACHMENT_ReadOffset            (con);  break;
				case "SPNOTES_ATTACHMENT_UPDATE"                :  cmd = cmdNOTES_ATTACHMENT_Update                (con);  break;
				case "SPNOTES_ATTACHMENT_WRITEOFFSET"           :  cmd = cmdNOTES_ATTACHMENT_WriteOffset           (con);  break;
				case "SPNOTES_COPY"                             :  cmd = cmdNOTES_Copy                             (con);  break;
				case "SPNOTES_DELETE"                           :  cmd = cmdNOTES_Delete                           (con);  break;
				case "SPNOTES_IMPORT"                           :  cmd = cmdNOTES_Import                           (con);  break;
				case "SPNOTES_LINKATTACHMENT"                   :  cmd = cmdNOTES_LinkAttachment                   (con);  break;
				case "SPNOTES_MASSASSIGN"                       :  cmd = cmdNOTES_MassAssign                       (con);  break;
				case "SPNOTES_MASSDELETE"                       :  cmd = cmdNOTES_MassDelete                       (con);  break;
				case "SPNOTES_MASSUPDATE"                       :  cmd = cmdNOTES_MassUpdate                       (con);  break;
				case "SPNOTES_NEW"                              :  cmd = cmdNOTES_New                              (con);  break;
				case "SPNOTES_UNDELETE"                         :  cmd = cmdNOTES_Undelete                         (con);  break;
				case "SPNOTES_UPDATE"                           :  cmd = cmdNOTES_Update                           (con);  break;
				case "SPNUMBER_SEQUENCES_DELETE"                :  cmd = cmdNUMBER_SEQUENCES_Delete                (con);  break;
				case "SPNUMBER_SEQUENCES_FORMATTED"             :  cmd = cmdNUMBER_SEQUENCES_Formatted             (con);  break;
				case "SPNUMBER_SEQUENCES_INSERTONLY"            :  cmd = cmdNUMBER_SEQUENCES_InsertOnly            (con);  break;
				case "SPNUMBER_SEQUENCES_UPDATE"                :  cmd = cmdNUMBER_SEQUENCES_Update                (con);  break;
				case "SPOAUTH_TOKENS_DELETE"                    :  cmd = cmdOAUTH_TOKENS_Delete                    (con);  break;
				case "SPOAUTH_TOKENS_UPDATE"                    :  cmd = cmdOAUTH_TOKENS_Update                    (con);  break;
				case "SPOAUTHKEYS_DELETE"                       :  cmd = cmdOAUTHKEYS_Delete                       (con);  break;
				case "SPOAUTHKEYS_UPDATE"                       :  cmd = cmdOAUTHKEYS_Update                       (con);  break;
				case "SPOPPORTUNITIES_CONTACTS_DELETE"          :  cmd = cmdOPPORTUNITIES_CONTACTS_Delete          (con);  break;
				case "SPOPPORTUNITIES_CONTACTS_UPDATE"          :  cmd = cmdOPPORTUNITIES_CONTACTS_Update          (con);  break;
				case "SPOPPORTUNITIES_DELETE"                   :  cmd = cmdOPPORTUNITIES_Delete                   (con);  break;
				case "SPOPPORTUNITIES_DOCUMENTS_DELETE"         :  cmd = cmdOPPORTUNITIES_DOCUMENTS_Delete         (con);  break;
				case "SPOPPORTUNITIES_DOCUMENTS_GETLATEST"      :  cmd = cmdOPPORTUNITIES_DOCUMENTS_GetLatest      (con);  break;
				case "SPOPPORTUNITIES_DOCUMENTS_UPDATE"         :  cmd = cmdOPPORTUNITIES_DOCUMENTS_Update         (con);  break;
				case "SPOPPORTUNITIES_INSRELATED"               :  cmd = cmdOPPORTUNITIES_InsRelated               (con);  break;
				case "SPOPPORTUNITIES_MASSDELETE"               :  cmd = cmdOPPORTUNITIES_MassDelete               (con);  break;
				case "SPOPPORTUNITIES_MASSSYNC"                 :  cmd = cmdOPPORTUNITIES_MassSync                 (con);  break;
				case "SPOPPORTUNITIES_MASSUNSYNC"               :  cmd = cmdOPPORTUNITIES_MassUnsync               (con);  break;
				case "SPOPPORTUNITIES_MASSUPDATE"               :  cmd = cmdOPPORTUNITIES_MassUpdate               (con);  break;
				case "SPOPPORTUNITIES_MERGE"                    :  cmd = cmdOPPORTUNITIES_Merge                    (con);  break;
				case "SPOPPORTUNITIES_NEW"                      :  cmd = cmdOPPORTUNITIES_New                      (con);  break;
				case "SPOPPORTUNITIES_STREAM_INSERTPOST"        :  cmd = cmdOPPORTUNITIES_STREAM_InsertPost        (con);  break;
				case "SPOPPORTUNITIES_UNDELETE"                 :  cmd = cmdOPPORTUNITIES_Undelete                 (con);  break;
				case "SPOPPORTUNITIES_UPDATE"                   :  cmd = cmdOPPORTUNITIES_Update                   (con);  break;
				case "SPOPPORTUNITIES_USERS_DELETE"             :  cmd = cmdOPPORTUNITIES_USERS_Delete             (con);  break;
				case "SPOPPORTUNITIES_USERS_UPDATE"             :  cmd = cmdOPPORTUNITIES_USERS_Update             (con);  break;
				case "SPORDERS_ACCOUNTS_UPDATE"                 :  cmd = cmdORDERS_ACCOUNTS_Update                 (con);  break;
				case "SPORDERS_CONTACTS_UPDATE"                 :  cmd = cmdORDERS_CONTACTS_Update                 (con);  break;
				case "SPORDERS_OPPORTUNITIES_UPDATE"            :  cmd = cmdORDERS_OPPORTUNITIES_Update            (con);  break;
				case "SPOUTBOUND_EMAILS_DELETE"                 :  cmd = cmdOUTBOUND_EMAILS_Delete                 (con);  break;
				case "SPOUTBOUND_EMAILS_UPDATE"                 :  cmd = cmdOUTBOUND_EMAILS_Update                 (con);  break;
				case "SPOUTBOUND_EMAILS_UPDATEUSER"             :  cmd = cmdOUTBOUND_EMAILS_UpdateUser             (con);  break;
				case "SPOUTBOUND_SMS_DELETE"                    :  cmd = cmdOUTBOUND_SMS_Delete                    (con);  break;
				case "SPOUTBOUND_SMS_UPDATE"                    :  cmd = cmdOUTBOUND_SMS_Update                    (con);  break;
				case "SPOUTBOUND_SMS_UPDATEUSER"                :  cmd = cmdOUTBOUND_SMS_UpdateUser                (con);  break;
				case "SPPARENT_DELETE"                          :  cmd = cmdPARENT_Delete                          (con);  break;
				case "SPPARENT_GET"                             :  cmd = cmdPARENT_Get                             (con);  break;
				case "SPPARENT_GETWITHTEAM"                     :  cmd = cmdPARENT_GetWithTeam                     (con);  break;
				case "SPPARENT_MERGE"                           :  cmd = cmdPARENT_Merge                           (con);  break;
				case "SPPARENT_UNDELETE"                        :  cmd = cmdPARENT_Undelete                        (con);  break;
				case "SPPARENT_UPDATELASTACTIVITY"              :  cmd = cmdPARENT_UpdateLastActivity              (con);  break;
				case "SPPHONE_NUMBERS_UPDATE"                   :  cmd = cmdPHONE_NUMBERS_Update                   (con);  break;
				case "SPPROJECT_MASSSYNC"                       :  cmd = cmdPROJECT_MassSync                       (con);  break;
				case "SPPROJECT_MASSUNSYNC"                     :  cmd = cmdPROJECT_MassUnsync                     (con);  break;
				case "SPPROJECT_RELATION_DELETE"                :  cmd = cmdPROJECT_RELATION_Delete                (con);  break;
				case "SPPROJECT_RELATION_UPDATE"                :  cmd = cmdPROJECT_RELATION_Update                (con);  break;
				case "SPPROJECT_TASK_UPDATE"                    :  cmd = cmdPROJECT_TASK_Update                    (con);  break;
				case "SPPROJECT_TASKS_DELETE"                   :  cmd = cmdPROJECT_TASKS_Delete                   (con);  break;
				case "SPPROJECT_TASKS_MASSDELETE"               :  cmd = cmdPROJECT_TASKS_MassDelete               (con);  break;
				case "SPPROJECT_TASKS_MASSUPDATE"               :  cmd = cmdPROJECT_TASKS_MassUpdate               (con);  break;
				case "SPPROJECT_TASKS_NEW"                      :  cmd = cmdPROJECT_TASKS_New                      (con);  break;
				case "SPPROJECT_TASKS_UNDELETE"                 :  cmd = cmdPROJECT_TASKS_Undelete                 (con);  break;
				case "SPPROJECT_TASKS_UPDATE"                   :  cmd = cmdPROJECT_TASKS_Update                   (con);  break;
				case "SPPROJECT_UPDATE"                         :  cmd = cmdPROJECT_Update                         (con);  break;
				case "SPPROJECT_USERS_DELETE"                   :  cmd = cmdPROJECT_USERS_Delete                   (con);  break;
				case "SPPROJECT_USERS_UPDATE"                   :  cmd = cmdPROJECT_USERS_Update                   (con);  break;
				case "SPPROJECTS_ACCOUNTS_DELETE"               :  cmd = cmdPROJECTS_ACCOUNTS_Delete               (con);  break;
				case "SPPROJECTS_ACCOUNTS_UPDATE"               :  cmd = cmdPROJECTS_ACCOUNTS_Update               (con);  break;
				case "SPPROJECTS_BUGS_DELETE"                   :  cmd = cmdPROJECTS_BUGS_Delete                   (con);  break;
				case "SPPROJECTS_BUGS_UPDATE"                   :  cmd = cmdPROJECTS_BUGS_Update                   (con);  break;
				case "SPPROJECTS_CASES_DELETE"                  :  cmd = cmdPROJECTS_CASES_Delete                  (con);  break;
				case "SPPROJECTS_CASES_UPDATE"                  :  cmd = cmdPROJECTS_CASES_Update                  (con);  break;
				case "SPPROJECTS_CONTACTS_DELETE"               :  cmd = cmdPROJECTS_CONTACTS_Delete               (con);  break;
				case "SPPROJECTS_CONTACTS_UPDATE"               :  cmd = cmdPROJECTS_CONTACTS_Update               (con);  break;
				case "SPPROJECTS_DELETE"                        :  cmd = cmdPROJECTS_Delete                        (con);  break;
				case "SPPROJECTS_MASSDELETE"                    :  cmd = cmdPROJECTS_MassDelete                    (con);  break;
				case "SPPROJECTS_MASSUPDATE"                    :  cmd = cmdPROJECTS_MassUpdate                    (con);  break;
				case "SPPROJECTS_NEW"                           :  cmd = cmdPROJECTS_New                           (con);  break;
				case "SPPROJECTS_OPPORTUNITIES_DELETE"          :  cmd = cmdPROJECTS_OPPORTUNITIES_Delete          (con);  break;
				case "SPPROJECTS_OPPORTUNITIES_UPDATE"          :  cmd = cmdPROJECTS_OPPORTUNITIES_Update          (con);  break;
				case "SPPROJECTS_QUOTES_UPDATE"                 :  cmd = cmdPROJECTS_QUOTES_Update                 (con);  break;
				case "SPPROJECTS_UNDELETE"                      :  cmd = cmdPROJECTS_Undelete                      (con);  break;
				case "SPPROJECTS_UPDATE"                        :  cmd = cmdPROJECTS_Update                        (con);  break;
				case "SPPROSPECT_LIST_CAMPAIGNS_DELETE"         :  cmd = cmdPROSPECT_LIST_CAMPAIGNS_Delete         (con);  break;
				case "SPPROSPECT_LIST_CAMPAIGNS_UPDATE"         :  cmd = cmdPROSPECT_LIST_CAMPAIGNS_Update         (con);  break;
				case "SPPROSPECT_LISTS_ACCOUNTS_DELETE"         :  cmd = cmdPROSPECT_LISTS_ACCOUNTS_Delete         (con);  break;
				case "SPPROSPECT_LISTS_ACCOUNTS_MASSUPDATE"     :  cmd = cmdPROSPECT_LISTS_ACCOUNTS_MassUpdate     (con);  break;
				case "SPPROSPECT_LISTS_ACCOUNTS_UPDATE"         :  cmd = cmdPROSPECT_LISTS_ACCOUNTS_Update         (con);  break;
				case "SPPROSPECT_LISTS_CONTACTS_DELETE"         :  cmd = cmdPROSPECT_LISTS_CONTACTS_Delete         (con);  break;
				case "SPPROSPECT_LISTS_CONTACTS_MASSUPDATE"     :  cmd = cmdPROSPECT_LISTS_CONTACTS_MassUpdate     (con);  break;
				case "SPPROSPECT_LISTS_CONTACTS_UPDATE"         :  cmd = cmdPROSPECT_LISTS_CONTACTS_Update         (con);  break;
				case "SPPROSPECT_LISTS_DELETE"                  :  cmd = cmdPROSPECT_LISTS_Delete                  (con);  break;
				case "SPPROSPECT_LISTS_IMPORT"                  :  cmd = cmdPROSPECT_LISTS_Import                  (con);  break;
				case "SPPROSPECT_LISTS_INSERTCAMPAIGN"          :  cmd = cmdPROSPECT_LISTS_InsertCampaign          (con);  break;
				case "SPPROSPECT_LISTS_LEADS_DELETE"            :  cmd = cmdPROSPECT_LISTS_LEADS_Delete            (con);  break;
				case "SPPROSPECT_LISTS_LEADS_MASSUPDATE"        :  cmd = cmdPROSPECT_LISTS_LEADS_MassUpdate        (con);  break;
				case "SPPROSPECT_LISTS_LEADS_UPDATE"            :  cmd = cmdPROSPECT_LISTS_LEADS_Update            (con);  break;
				case "SPPROSPECT_LISTS_MASSDELETE"              :  cmd = cmdPROSPECT_LISTS_MassDelete              (con);  break;
				case "SPPROSPECT_LISTS_MASSUPDATE"              :  cmd = cmdPROSPECT_LISTS_MassUpdate              (con);  break;
				case "SPPROSPECT_LISTS_NEW"                     :  cmd = cmdPROSPECT_LISTS_New                     (con);  break;
				case "SPPROSPECT_LISTS_PROSPECTS_DELETE"        :  cmd = cmdPROSPECT_LISTS_PROSPECTS_Delete        (con);  break;
				case "SPPROSPECT_LISTS_PROSPECTS_MASSUPDATE"    :  cmd = cmdPROSPECT_LISTS_PROSPECTS_MassUpdate    (con);  break;
				case "SPPROSPECT_LISTS_PROSPECTS_UPDATE"        :  cmd = cmdPROSPECT_LISTS_PROSPECTS_Update        (con);  break;
				case "SPPROSPECT_LISTS_SQL_DELETE"              :  cmd = cmdPROSPECT_LISTS_SQL_Delete              (con);  break;
				case "SPPROSPECT_LISTS_SQL_UPDATE"              :  cmd = cmdPROSPECT_LISTS_SQL_Update              (con);  break;
				case "SPPROSPECT_LISTS_STREAM_INSERTPOST"       :  cmd = cmdPROSPECT_LISTS_STREAM_InsertPost       (con);  break;
				case "SPPROSPECT_LISTS_UNDELETE"                :  cmd = cmdPROSPECT_LISTS_Undelete                (con);  break;
				case "SPPROSPECT_LISTS_UPDATE"                  :  cmd = cmdPROSPECT_LISTS_Update                  (con);  break;
				case "SPPROSPECT_LISTS_UPDATEDYNAMIC"           :  cmd = cmdPROSPECT_LISTS_UpdateDynamic           (con);  break;
				case "SPPROSPECT_LISTS_USERS_DELETE"            :  cmd = cmdPROSPECT_LISTS_USERS_Delete            (con);  break;
				case "SPPROSPECT_LISTS_USERS_MASSUPDATE"        :  cmd = cmdPROSPECT_LISTS_USERS_MassUpdate        (con);  break;
				case "SPPROSPECT_LISTS_USERS_UPDATE"            :  cmd = cmdPROSPECT_LISTS_USERS_Update            (con);  break;
				case "SPPROSPECTS_DELETE"                       :  cmd = cmdPROSPECTS_Delete                       (con);  break;
				case "SPPROSPECTS_IMPORT"                       :  cmd = cmdPROSPECTS_Import                       (con);  break;
				case "SPPROSPECTS_MASSDELETE"                   :  cmd = cmdPROSPECTS_MassDelete                   (con);  break;
				case "SPPROSPECTS_MASSUPDATE"                   :  cmd = cmdPROSPECTS_MassUpdate                   (con);  break;
				case "SPPROSPECTS_NEW"                          :  cmd = cmdPROSPECTS_New                          (con);  break;
				case "SPPROSPECTS_STREAM_INSERTPOST"            :  cmd = cmdPROSPECTS_STREAM_InsertPost            (con);  break;
				case "SPPROSPECTS_UNDELETE"                     :  cmd = cmdPROSPECTS_Undelete                     (con);  break;
				case "SPPROSPECTS_UPDATE"                       :  cmd = cmdPROSPECTS_Update                       (con);  break;
				case "SPQUOTES_ACCOUNTS_UPDATE"                 :  cmd = cmdQUOTES_ACCOUNTS_Update                 (con);  break;
				case "SPQUOTES_CONTACTS_UPDATE"                 :  cmd = cmdQUOTES_CONTACTS_Update                 (con);  break;
				case "SPQUOTES_OPPORTUNITIES_UPDATE"            :  cmd = cmdQUOTES_OPPORTUNITIES_Update            (con);  break;
				case "SPREACT_CUSTOM_VIEWS_DELETE"              :  cmd = cmdREACT_CUSTOM_VIEWS_Delete              (con);  break;
				case "SPREACT_CUSTOM_VIEWS_UPDATE"              :  cmd = cmdREACT_CUSTOM_VIEWS_Update              (con);  break;
				case "SPRELATIONSHIPS_DELETE"                   :  cmd = cmdRELATIONSHIPS_Delete                   (con);  break;
				case "SPRELATIONSHIPS_INSERTONLY"               :  cmd = cmdRELATIONSHIPS_InsertOnly               (con);  break;
				case "SPRELATIONSHIPS_UPDATE"                   :  cmd = cmdRELATIONSHIPS_Update                   (con);  break;
				case "SPRELEASES_DELETE"                        :  cmd = cmdRELEASES_Delete                        (con);  break;
				case "SPRELEASES_MASSDELETE"                    :  cmd = cmdRELEASES_MassDelete                    (con);  break;
				case "SPRELEASES_MASSUPDATE"                    :  cmd = cmdRELEASES_MassUpdate                    (con);  break;
				case "SPRELEASES_UPDATE"                        :  cmd = cmdRELEASES_Update                        (con);  break;
				case "SPREVENUE_LINE_ITEMS_DELETE"              :  cmd = cmdREVENUE_LINE_ITEMS_Delete              (con);  break;
				case "SPREVENUE_LINE_ITEMS_UPDATE"              :  cmd = cmdREVENUE_LINE_ITEMS_Update              (con);  break;
				case "SPRULES_DELETE"                           :  cmd = cmdRULES_Delete                           (con);  break;
				case "SPRULES_MASSUPDATE"                       :  cmd = cmdRULES_MassUpdate                       (con);  break;
				case "SPRULES_UPDATE"                           :  cmd = cmdRULES_Update                           (con);  break;
				case "SPSAVED_SEARCH_DELETE"                    :  cmd = cmdSAVED_SEARCH_Delete                    (con);  break;
				case "SPSAVED_SEARCH_UPDATE"                    :  cmd = cmdSAVED_SEARCH_Update                    (con);  break;
				case "SPSCHEDULERS_DELETE"                      :  cmd = cmdSCHEDULERS_Delete                      (con);  break;
				case "SPSCHEDULERS_INSERTONLY"                  :  cmd = cmdSCHEDULERS_InsertOnly                  (con);  break;
				case "SPSCHEDULERS_UPDATE"                      :  cmd = cmdSCHEDULERS_Update                      (con);  break;
				case "SPSCHEDULERS_UPDATELASTRUN"               :  cmd = cmdSCHEDULERS_UpdateLastRun               (con);  break;
				case "SPSCHEDULERS_UPDATESTATUS"                :  cmd = cmdSCHEDULERS_UpdateStatus                (con);  break;
				case "SPSHORTCUTS_DELETE"                       :  cmd = cmdSHORTCUTS_Delete                       (con);  break;
				case "SPSHORTCUTS_INSERTONLY"                   :  cmd = cmdSHORTCUTS_InsertOnly                   (con);  break;
				case "SPSHORTCUTS_ORDER_MOVEDOWN"               :  cmd = cmdSHORTCUTS_ORDER_MoveDown               (con);  break;
				case "SPSHORTCUTS_ORDER_MOVEITEM"               :  cmd = cmdSHORTCUTS_ORDER_MoveItem               (con);  break;
				case "SPSHORTCUTS_ORDER_MOVEUP"                 :  cmd = cmdSHORTCUTS_ORDER_MoveUp                 (con);  break;
				case "SPSHORTCUTS_UPDATE"                       :  cmd = cmdSHORTCUTS_Update                       (con);  break;
				case "SPSMS_MESSAGES_DELETE"                    :  cmd = cmdSMS_MESSAGES_Delete                    (con);  break;
				case "SPSMS_MESSAGES_MASSDELETE"                :  cmd = cmdSMS_MESSAGES_MassDelete                (con);  break;
				case "SPSMS_MESSAGES_MASSUPDATE"                :  cmd = cmdSMS_MESSAGES_MassUpdate                (con);  break;
				case "SPSMS_MESSAGES_UNDELETE"                  :  cmd = cmdSMS_MESSAGES_Undelete                  (con);  break;
				case "SPSMS_MESSAGES_UPDATE"                    :  cmd = cmdSMS_MESSAGES_Update                    (con);  break;
				case "SPSMS_MESSAGES_UPDATESTATUS"              :  cmd = cmdSMS_MESSAGES_UpdateStatus              (con);  break;
				case "SPSQLBACKUPDATABASE"                      :  cmd = cmdSqlBackupDatabase                      (con);  break;
				case "SPSQLBUILDALLAUDITINDEXES"                :  cmd = cmdSqlBuildAllAuditIndexes                (con);  break;
				case "SPSQLBUILDALLAUDITTABLES"                 :  cmd = cmdSqlBuildAllAuditTables                 (con);  break;
				case "SPSQLBUILDALLAUDITTRIGGERS"               :  cmd = cmdSqlBuildAllAuditTriggers               (con);  break;
				case "SPSQLBUILDALLAUDITVIEWS"                  :  cmd = cmdSqlBuildAllAuditViews                  (con);  break;
				case "SPSQLBUILDALLSTREAMDATA"                  :  cmd = cmdSqlBuildAllStreamData                  (con);  break;
				case "SPSQLBUILDALLSTREAMFUNCTIONS"             :  cmd = cmdSqlBuildAllStreamFunctions             (con);  break;
				case "SPSQLBUILDALLSTREAMINDEXES"               :  cmd = cmdSqlBuildAllStreamIndexes               (con);  break;
				case "SPSQLBUILDALLSTREAMLINKTRIGGERS"          :  cmd = cmdSqlBuildAllStreamLinkTriggers          (con);  break;
				case "SPSQLBUILDALLSTREAMPARENTTRIGGERS"        :  cmd = cmdSqlBuildAllStreamParentTriggers        (con);  break;
				case "SPSQLBUILDALLSTREAMPROCEDURES"            :  cmd = cmdSqlBuildAllStreamProcedures            (con);  break;
				case "SPSQLBUILDALLSTREAMTABLES"                :  cmd = cmdSqlBuildAllStreamTables                (con);  break;
				case "SPSQLBUILDALLSTREAMTRIGGERS"              :  cmd = cmdSqlBuildAllStreamTriggers              (con);  break;
				case "SPSQLBUILDALLSTREAMVIEWS"                 :  cmd = cmdSqlBuildAllStreamViews                 (con);  break;
				case "SPSQLBUILDARCHIVEACTIVITIESVIEW"          :  cmd = cmdSqlBuildArchiveActivitiesView          (con);  break;
				case "SPSQLBUILDARCHIVEACTIVITYVIEW"            :  cmd = cmdSqlBuildArchiveActivityView            (con);  break;
				case "SPSQLBUILDARCHIVEINDEXES"                 :  cmd = cmdSqlBuildArchiveIndexes                 (con);  break;
				case "SPSQLBUILDARCHIVERELATEDVIEW"             :  cmd = cmdSqlBuildArchiveRelatedView             (con);  break;
				case "SPSQLBUILDARCHIVETABLE"                   :  cmd = cmdSqlBuildArchiveTable                   (con);  break;
				case "SPSQLBUILDARCHIVEVIEW"                    :  cmd = cmdSqlBuildArchiveView                    (con);  break;
				case "SPSQLBUILDAUDITINDEX"                     :  cmd = cmdSqlBuildAuditIndex                     (con);  break;
				case "SPSQLBUILDAUDITTABLE"                     :  cmd = cmdSqlBuildAuditTable                     (con);  break;
				case "SPSQLBUILDAUDITTRIGGER"                   :  cmd = cmdSqlBuildAuditTrigger                   (con);  break;
				case "SPSQLBUILDAUDITVIEW"                      :  cmd = cmdSqlBuildAuditView                      (con);  break;
				case "SPSQLBUILDSTREAMDATA"                     :  cmd = cmdSqlBuildStreamData                     (con);  break;
				case "SPSQLBUILDSTREAMFUNCTION"                 :  cmd = cmdSqlBuildStreamFunction                 (con);  break;
				case "SPSQLBUILDSTREAMINDEX"                    :  cmd = cmdSqlBuildStreamIndex                    (con);  break;
				case "SPSQLBUILDSTREAMLINKDATA"                 :  cmd = cmdSqlBuildStreamLinkData                 (con);  break;
				case "SPSQLBUILDSTREAMLINKDATATABLES"           :  cmd = cmdSqlBuildStreamLinkDataTables           (con);  break;
				case "SPSQLBUILDSTREAMLINKTABLES"               :  cmd = cmdSqlBuildStreamLinkTables               (con);  break;
				case "SPSQLBUILDSTREAMLINKTRIGGER"              :  cmd = cmdSqlBuildStreamLinkTrigger              (con);  break;
				case "SPSQLBUILDSTREAMPARENTDATA"               :  cmd = cmdSqlBuildStreamParentData               (con);  break;
				case "SPSQLBUILDSTREAMPARENTTRIGGER"            :  cmd = cmdSqlBuildStreamParentTrigger            (con);  break;
				case "SPSQLBUILDSTREAMPROCEDURE"                :  cmd = cmdSqlBuildStreamProcedure                (con);  break;
				case "SPSQLBUILDSTREAMTABLE"                    :  cmd = cmdSqlBuildStreamTable                    (con);  break;
				case "SPSQLBUILDSTREAMTRIGGER"                  :  cmd = cmdSqlBuildStreamTrigger                  (con);  break;
				case "SPSQLBUILDSTREAMVIEW"                     :  cmd = cmdSqlBuildStreamView                     (con);  break;
				case "SPSQLBUILDSYSTEMTRIGGER"                  :  cmd = cmdSqlBuildSystemTrigger                  (con);  break;
				case "SPSQLDROPALLARCHIVETABLES"                :  cmd = cmdSqlDropAllArchiveTables                (con);  break;
				case "SPSQLDROPALLARCHIVEVIEWS"                 :  cmd = cmdSqlDropAllArchiveViews                 (con);  break;
				case "SPSQLDROPALLAUDITTABLES"                  :  cmd = cmdSqlDropAllAuditTables                  (con);  break;
				case "SPSQLDROPALLAUDITTRIGGERS"                :  cmd = cmdSqlDropAllAuditTriggers                (con);  break;
				case "SPSQLDROPALLAUDITVIEWS"                   :  cmd = cmdSqlDropAllAuditViews                   (con);  break;
				case "SPSQLDROPALLSTREAMFUNCTIONS"              :  cmd = cmdSqlDropAllStreamFunctions              (con);  break;
				case "SPSQLDROPALLSTREAMPROCEDURES"             :  cmd = cmdSqlDropAllStreamProcedures             (con);  break;
				case "SPSQLDROPALLSTREAMTABLES"                 :  cmd = cmdSqlDropAllStreamTables                 (con);  break;
				case "SPSQLDROPALLSTREAMTRIGGERS"               :  cmd = cmdSqlDropAllStreamTriggers               (con);  break;
				case "SPSQLDROPALLSTREAMVIEWS"                  :  cmd = cmdSqlDropAllStreamViews                  (con);  break;
				case "SPSQLDROPDEFAULTCONSTRAINT"               :  cmd = cmdSqlDropDefaultConstraint               (con);  break;
				case "SPSQLDROPFOREIGNKEYS"                     :  cmd = cmdSqlDropForeignKeys                     (con);  break;
				case "SPSQLGETTRANSACTIONTOKEN"                 :  cmd = cmdSqlGetTransactionToken                 (con);  break;
				case "SPSQLMOVEARCHIVEDATA"                     :  cmd = cmdSqlMoveArchiveData                     (con);  break;
				case "SPSQLPRINTBYLINE"                         :  cmd = cmdSqlPrintByLine                         (con);  break;
				case "SPSQLPRUNEDATABASE"                       :  cmd = cmdSqlPruneDatabase                       (con);  break;
				case "SPSQLPURGEDEMODATA"                       :  cmd = cmdSqlPurgeDemoData                       (con);  break;
				case "SPSQLRECOVERARCHIVEDATA"                  :  cmd = cmdSqlRecoverArchiveData                  (con);  break;
				case "SPSQLREFRESHALLVIEWS"                     :  cmd = cmdSqlRefreshAllViews                     (con);  break;
				case "SPSQLTABLEADDCOLUMN"                      :  cmd = cmdSqlTableAddColumn                      (con);  break;
				case "SPSQLTABLEALTERCOLUMN"                    :  cmd = cmdSqlTableAlterColumn                    (con);  break;
				case "SPSQLTABLECOLUMNEXISTS"                   :  cmd = cmdSqlTableColumnExists                   (con);  break;
				case "SPSQLTABLECOLUMNSCHANGED"                 :  cmd = cmdSqlTableColumnsChanged                 (con);  break;
				case "SPSQLTABLEDISABLETRIGGERS"                :  cmd = cmdSqlTableDisableTriggers                (con);  break;
				case "SPSQLTABLEDROPCOLUMN"                     :  cmd = cmdSqlTableDropColumn                     (con);  break;
				case "SPSQLTABLEDROPCOLUMNCONSTRAINT"           :  cmd = cmdSqlTableDropColumnConstraint           (con);  break;
				case "SPSQLTABLEENABLETRIGGERS"                 :  cmd = cmdSqlTableEnableTriggers                 (con);  break;
				case "SPSQLTABLEEXISTS"                         :  cmd = cmdSqlTableExists                         (con);  break;
				case "SPSQLTABLEINDEXEXISTS"                    :  cmd = cmdSqlTableIndexExists                    (con);  break;
				case "SPSQLUPDATEINDEX"                         :  cmd = cmdSqlUpdateIndex                         (con);  break;
				case "SPSQLUPDATESYNCDTABLES"                   :  cmd = cmdSqlUpdateSyncdTables                   (con);  break;
				case "SPSUBSCRIPTIONS_DELETE"                   :  cmd = cmdSUBSCRIPTIONS_Delete                   (con);  break;
				case "SPSUBSCRIPTIONS_UPDATE"                   :  cmd = cmdSUBSCRIPTIONS_Update                   (con);  break;
				case "SPSUGARFAVORITES_DELETE"                  :  cmd = cmdSUGARFAVORITES_Delete                  (con);  break;
				case "SPSUGARFAVORITES_UPDATE"                  :  cmd = cmdSUGARFAVORITES_Update                  (con);  break;
				case "SPSUGARFAVORITES_UPDATENAME"              :  cmd = cmdSUGARFAVORITES_UpdateName              (con);  break;
				case "SPSYSTEM_CURRENCY_LOG_DELETE"             :  cmd = cmdSYSTEM_CURRENCY_LOG_Delete             (con);  break;
				case "SPSYSTEM_CURRENCY_LOG_INSERTONLY"         :  cmd = cmdSYSTEM_CURRENCY_LOG_InsertOnly         (con);  break;
				case "SPSYSTEM_EVENTS_PROCESSALL"               :  cmd = cmdSYSTEM_EVENTS_ProcessAll               (con);  break;
				case "SPSYSTEM_LOG_CLEANUP"                     :  cmd = cmdSYSTEM_LOG_Cleanup                     (con);  break;
				case "SPSYSTEM_LOG_DELETE"                      :  cmd = cmdSYSTEM_LOG_Delete                      (con);  break;
				case "SPSYSTEM_LOG_INSERTONLY"                  :  cmd = cmdSYSTEM_LOG_InsertOnly                  (con);  break;
				case "SPSYSTEM_LOG_MESSAGEONLY"                 :  cmd = cmdSYSTEM_LOG_MessageOnly                 (con);  break;
				case "SPSYSTEM_REST_TABLES_DELETE"              :  cmd = cmdSYSTEM_REST_TABLES_Delete              (con);  break;
				case "SPSYSTEM_REST_TABLES_INSERTONLY"          :  cmd = cmdSYSTEM_REST_TABLES_InsertOnly          (con);  break;
				case "SPSYSTEM_REST_TABLES_UPDATE"              :  cmd = cmdSYSTEM_REST_TABLES_Update              (con);  break;
				case "SPSYSTEM_SYNC_LOG_INSERTONLY"             :  cmd = cmdSYSTEM_SYNC_LOG_InsertOnly             (con);  break;
				case "SPSYSTEM_TRANSACTIONS_CREATE"             :  cmd = cmdSYSTEM_TRANSACTIONS_Create             (con);  break;
				case "SPTAB_GROUPS_DELETE"                      :  cmd = cmdTAB_GROUPS_Delete                      (con);  break;
				case "SPTAB_GROUPS_INSERTONLY"                  :  cmd = cmdTAB_GROUPS_InsertOnly                  (con);  break;
				case "SPTAB_GROUPS_UPDATE"                      :  cmd = cmdTAB_GROUPS_Update                      (con);  break;
				case "SPTAG_SETS_ADDSET"                        :  cmd = cmdTAG_SETS_AddSet                        (con);  break;
				case "SPTAG_SETS_DELETE"                        :  cmd = cmdTAG_SETS_Delete                        (con);  break;
				case "SPTAG_SETS_NORMALIZESET"                  :  cmd = cmdTAG_SETS_NormalizeSet                  (con);  break;
				case "SPTAG_SETS_UPDATEALLNAMES"                :  cmd = cmdTAG_SETS_UpdateAllNames                (con);  break;
				case "SPTAG_SETS_UPDATENAMES"                   :  cmd = cmdTAG_SETS_UpdateNames                   (con);  break;
				case "SPTAGS_DELETE"                            :  cmd = cmdTAGS_Delete                            (con);  break;
				case "SPTAGS_MASSDELETE"                        :  cmd = cmdTAGS_MassDelete                        (con);  break;
				case "SPTAGS_UPDATE"                            :  cmd = cmdTAGS_Update                            (con);  break;
				case "SPTASKS_DELETE"                           :  cmd = cmdTASKS_Delete                           (con);  break;
				case "SPTASKS_EMAILREMINDERSENT"                :  cmd = cmdTASKS_EmailReminderSent                (con);  break;
				case "SPTASKS_MASSDELETE"                       :  cmd = cmdTASKS_MassDelete                       (con);  break;
				case "SPTASKS_MASSUPDATE"                       :  cmd = cmdTASKS_MassUpdate                       (con);  break;
				case "SPTASKS_SMSREMINDERSENT"                  :  cmd = cmdTASKS_SmsReminderSent                  (con);  break;
				case "SPTASKS_UNDELETE"                         :  cmd = cmdTASKS_Undelete                         (con);  break;
				case "SPTASKS_UPDATE"                           :  cmd = cmdTASKS_Update                           (con);  break;
				case "SPTEAM_MEMBERSHIPS_DELETEUSER"            :  cmd = cmdTEAM_MEMBERSHIPS_DeleteUser            (con);  break;
				case "SPTEAM_MEMBERSHIPS_REFRESHUSER"           :  cmd = cmdTEAM_MEMBERSHIPS_RefreshUser           (con);  break;
				case "SPTEAM_MEMBERSHIPS_UPDATE"                :  cmd = cmdTEAM_MEMBERSHIPS_Update                (con);  break;
				case "SPTEAM_SETS_ADDSET"                       :  cmd = cmdTEAM_SETS_AddSet                       (con);  break;
				case "SPTEAM_SETS_NORMALIZESET"                 :  cmd = cmdTEAM_SETS_NormalizeSet                 (con);  break;
				case "SPTEAM_SETS_UPDATENAMES"                  :  cmd = cmdTEAM_SETS_UpdateNames                  (con);  break;
				case "SPTEAMS_INITPRIVATE"                      :  cmd = cmdTEAMS_InitPrivate                      (con);  break;
				case "SPTEAMS_INSERTONLY"                       :  cmd = cmdTEAMS_InsertOnly                       (con);  break;
				case "SPTEAMS_INSERTPRIVATE"                    :  cmd = cmdTEAMS_InsertPrivate                    (con);  break;
				case "SPTERMINOLOGY_ALIASES_DELETE"             :  cmd = cmdTERMINOLOGY_ALIASES_Delete             (con);  break;
				case "SPTERMINOLOGY_ALIASES_INSERTONLY"         :  cmd = cmdTERMINOLOGY_ALIASES_InsertOnly         (con);  break;
				case "SPTERMINOLOGY_ALIASES_UPDATE"             :  cmd = cmdTERMINOLOGY_ALIASES_Update             (con);  break;
				case "SPTERMINOLOGY_DELETE"                     :  cmd = cmdTERMINOLOGY_Delete                     (con);  break;
				case "SPTERMINOLOGY_DELETEALL"                  :  cmd = cmdTERMINOLOGY_DeleteAll                  (con);  break;
				case "SPTERMINOLOGY_DELETELIST"                 :  cmd = cmdTERMINOLOGY_DeleteList                 (con);  break;
				case "SPTERMINOLOGY_DELETEMODULE"               :  cmd = cmdTERMINOLOGY_DeleteModule               (con);  break;
				case "SPTERMINOLOGY_DELETETERM"                 :  cmd = cmdTERMINOLOGY_DeleteTerm                 (con);  break;
				case "SPTERMINOLOGY_HELP_DELETE"                :  cmd = cmdTERMINOLOGY_HELP_Delete                (con);  break;
				case "SPTERMINOLOGY_HELP_INSERTONLY"            :  cmd = cmdTERMINOLOGY_HELP_InsertOnly            (con);  break;
				case "SPTERMINOLOGY_HELP_UPDATE"                :  cmd = cmdTERMINOLOGY_HELP_Update                (con);  break;
				case "SPTERMINOLOGY_INSERTONLY"                 :  cmd = cmdTERMINOLOGY_InsertOnly                 (con);  break;
				case "SPTERMINOLOGY_LIST_DELETE"                :  cmd = cmdTERMINOLOGY_LIST_Delete                (con);  break;
				case "SPTERMINOLOGY_LIST_INSERT"                :  cmd = cmdTERMINOLOGY_LIST_Insert                (con);  break;
				case "SPTERMINOLOGY_LIST_MOVEDOWN"              :  cmd = cmdTERMINOLOGY_LIST_MoveDown              (con);  break;
				case "SPTERMINOLOGY_LIST_MOVEITEM"              :  cmd = cmdTERMINOLOGY_LIST_MoveItem              (con);  break;
				case "SPTERMINOLOGY_LIST_MOVEUP"                :  cmd = cmdTERMINOLOGY_LIST_MoveUp                (con);  break;
				case "SPTERMINOLOGY_LIST_REORDER"               :  cmd = cmdTERMINOLOGY_LIST_Reorder               (con);  break;
				case "SPTERMINOLOGY_LIST_REORDERALL"            :  cmd = cmdTERMINOLOGY_LIST_ReorderAll            (con);  break;
				case "SPTERMINOLOGY_MASSDELETE"                 :  cmd = cmdTERMINOLOGY_MassDelete                 (con);  break;
				case "SPTERMINOLOGY_UPDATE"                     :  cmd = cmdTERMINOLOGY_Update                     (con);  break;
				case "SPTIMEZONES_DELETE"                       :  cmd = cmdTIMEZONES_Delete                       (con);  break;
				case "SPTIMEZONES_INSERTONLY"                   :  cmd = cmdTIMEZONES_InsertOnly                   (con);  break;
				case "SPTIMEZONES_UPDATE"                       :  cmd = cmdTIMEZONES_Update                       (con);  break;
				case "SPTIMEZONES_UPDATEBYNAME"                 :  cmd = cmdTIMEZONES_UpdateByName                 (con);  break;
				case "SPTRACKER_DELETE"                         :  cmd = cmdTRACKER_Delete                         (con);  break;
				case "SPTRACKER_UPDATE"                         :  cmd = cmdTRACKER_Update                         (con);  break;
				case "SPTWITTER_MESSAGES_DELETE"                :  cmd = cmdTWITTER_MESSAGES_Delete                (con);  break;
				case "SPTWITTER_MESSAGES_MASSDELETE"            :  cmd = cmdTWITTER_MESSAGES_MassDelete            (con);  break;
				case "SPTWITTER_MESSAGES_MASSUPDATE"            :  cmd = cmdTWITTER_MESSAGES_MassUpdate            (con);  break;
				case "SPTWITTER_MESSAGES_UNDELETE"              :  cmd = cmdTWITTER_MESSAGES_Undelete              (con);  break;
				case "SPTWITTER_MESSAGES_UPDATE"                :  cmd = cmdTWITTER_MESSAGES_Update                (con);  break;
				case "SPTWITTER_MESSAGES_UPDATESTATUS"          :  cmd = cmdTWITTER_MESSAGES_UpdateStatus          (con);  break;
				case "SPUSER_PREFERENCES_CONTENT_UPDATE"        :  cmd = cmdUSER_PREFERENCES_CONTENT_Update        (con);  break;
				case "SPUSER_PREFERENCES_DELETE"                :  cmd = cmdUSER_PREFERENCES_Delete                (con);  break;
				case "SPUSER_PREFERENCES_DELETEBYUSER"          :  cmd = cmdUSER_PREFERENCES_DeleteByUser          (con);  break;
				case "SPUSER_PREFERENCES_INITPOINTER"           :  cmd = cmdUSER_PREFERENCES_InitPointer           (con);  break;
				case "SPUSER_PREFERENCES_INSERT"                :  cmd = cmdUSER_PREFERENCES_Insert                (con);  break;
				case "SPUSER_PREFERENCES_INSERTBYUSER"          :  cmd = cmdUSER_PREFERENCES_InsertByUser          (con);  break;
				case "SPUSER_PREFERENCES_READOFFSET"            :  cmd = cmdUSER_PREFERENCES_ReadOffset            (con);  break;
				case "SPUSER_PREFERENCES_WRITEOFFSET"           :  cmd = cmdUSER_PREFERENCES_WriteOffset           (con);  break;
				case "SPUSERS_ACL_ROLES_DELETE"                 :  cmd = cmdUSERS_ACL_ROLES_Delete                 (con);  break;
				case "SPUSERS_ACL_ROLES_MASSUPDATE"             :  cmd = cmdUSERS_ACL_ROLES_MassUpdate             (con);  break;
				case "SPUSERS_ACL_ROLES_UPDATE"                 :  cmd = cmdUSERS_ACL_ROLES_Update                 (con);  break;
				case "SPUSERS_DELETE"                           :  cmd = cmdUSERS_Delete                           (con);  break;
				case "SPUSERS_FEEDS_DELETE"                     :  cmd = cmdUSERS_FEEDS_Delete                     (con);  break;
				case "SPUSERS_FEEDS_UPDATE"                     :  cmd = cmdUSERS_FEEDS_Update                     (con);  break;
				case "SPUSERS_IMPORT"                           :  cmd = cmdUSERS_Import                           (con);  break;
				case "SPUSERS_INSERTNTLM"                       :  cmd = cmdUSERS_InsertNTLM                       (con);  break;
				case "SPUSERS_LAST_IMPORT_DELETE"               :  cmd = cmdUSERS_LAST_IMPORT_Delete               (con);  break;
				case "SPUSERS_LAST_IMPORT_UPDATE"               :  cmd = cmdUSERS_LAST_IMPORT_Update               (con);  break;
				case "SPUSERS_LOGINS_INSERTONLY"                :  cmd = cmdUSERS_LOGINS_InsertOnly                (con);  break;
				case "SPUSERS_LOGINS_LOGOUT"                    :  cmd = cmdUSERS_LOGINS_Logout                    (con);  break;
				case "SPUSERS_MASSDELETE"                       :  cmd = cmdUSERS_MassDelete                       (con);  break;
				case "SPUSERS_PASSWORD_HISTORY_INSERTONLY"      :  cmd = cmdUSERS_PASSWORD_HISTORY_InsertOnly      (con);  break;
				case "SPUSERS_PASSWORD_LINK_DELETE"             :  cmd = cmdUSERS_PASSWORD_LINK_Delete             (con);  break;
				case "SPUSERS_PASSWORD_LINK_INSERTONLY"         :  cmd = cmdUSERS_PASSWORD_LINK_InsertOnly         (con);  break;
				case "SPUSERS_PASSWORDUPDATE"                   :  cmd = cmdUSERS_PasswordUpdate                   (con);  break;
				case "SPUSERS_PREFERENCESUPDATE"                :  cmd = cmdUSERS_PreferencesUpdate                (con);  break;
				case "SPUSERS_SIGNATURES_DELETE"                :  cmd = cmdUSERS_SIGNATURES_Delete                (con);  break;
				case "SPUSERS_SIGNATURES_UNDELETE"              :  cmd = cmdUSERS_SIGNATURES_Undelete              (con);  break;
				case "SPUSERS_SIGNATURES_UPDATE"                :  cmd = cmdUSERS_SIGNATURES_Update                (con);  break;
				case "SPUSERS_TEAM_MEMBERSHIPS_UPDATE"          :  cmd = cmdUSERS_TEAM_MEMBERSHIPS_Update          (con);  break;
				case "SPUSERS_TIMEZONEUPDATE"                   :  cmd = cmdUSERS_TimeZoneUpdate                   (con);  break;
				case "SPUSERS_UNDELETE"                         :  cmd = cmdUSERS_Undelete                         (con);  break;
				case "SPUSERS_UPDATE"                           :  cmd = cmdUSERS_Update                           (con);  break;
				case "SPUSERS_UPDATEPRIMARYROLE"                :  cmd = cmdUSERS_UpdatePrimaryRole                (con);  break;
				case "SPUSERS_UPDATESTATUS"                     :  cmd = cmdUSERS_UpdateStatus                     (con);  break;
				case "SPUSERS_WIZARDUPDATE"                     :  cmd = cmdUSERS_WizardUpdate                     (con);  break;
				case "SPVERSIONS_DELETE"                        :  cmd = cmdVERSIONS_Delete                        (con);  break;
				case "SPVERSIONS_UPDATE"                        :  cmd = cmdVERSIONS_Update                        (con);  break;
				case "SPWORKFLOW_EVENTS_DELETE"                 :  cmd = cmdWORKFLOW_EVENTS_Delete                 (con);  break;
				case "SPWORKFLOW_EVENTS_PROCESSALL"             :  cmd = cmdWORKFLOW_EVENTS_ProcessAll             (con);  break;
				case "SPZIPCODES_DELETE"                        :  cmd = cmdZIPCODES_Delete                        (con);  break;
				case "SPZIPCODES_INSERTONLY"                    :  cmd = cmdZIPCODES_InsertOnly                    (con);  break;
				case "SPZIPCODES_UPDATE"                        :  cmd = cmdZIPCODES_Update                        (con);  break;
				// 11/26/2021 Paul.  In order to support dynamically created modules in the React client, we need to load the procedures dynamically. 
				default:  cmd = this.DynamicFactory(con, sProcedureName);  break;
			}
			// 11/11/2008 Paul.  PostgreSQL has issues treating integers as booleans and booleans as integers. 
			if ( Sql.IsPostgreSQL(cmd) )
			{
				foreach ( IDbDataParameter par in cmd.Parameters )
				{
					if ( par.DbType == DbType.Boolean )
						par.DbType = DbType.Int32;
				}
			}
			return cmd;
		}
		#endregion

	}
}
